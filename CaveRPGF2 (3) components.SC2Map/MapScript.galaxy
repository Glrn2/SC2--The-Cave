//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Cave - RPG
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibTCUI"
include "Lib13390EF9"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libTCUI_InitLib();
    lib13390EF9_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_questsQuestSlots = 10;
const int gv_generalPlayerCap = 10;
const int gv_generalLoadSlotCap = 18;
const int gv_itemsGlyphCount = 600;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_banksBankName;
string gv_banksBankName2;
bank[gv_generalPlayerCap + 1] gv_banksPlayerBanks;
int[gv_generalPlayerCap + 1] gv_banksSlotSelected;
int[gv_generalPlayerCap + 1][gv_generalLoadSlotCap + 1][4] gv_banksHeroClassTierType;
int[gv_generalPlayerCap + 1][gv_generalLoadSlotCap + 1] gv_banksHeroLevelExp;
int[gv_generalPlayerCap + 1][9][3] gv_banksCheck;
int[15] gv_banksCheckMath;
timer[gv_generalPlayerCap + 1] gv_banksTimer;
bool[gv_generalPlayerCap + 1] gv_banksSaved;
bool[gv_generalPlayerCap + 1] gv_banksCoughtCheating;
bool[gv_generalPlayerCap + 1] gv_banksFirstGame;
bool[gv_generalPlayerCap + 1] gv_banksLoadedIn;
bool[gv_generalPlayerCap + 1] gv_banksLoadCheck;
string[gv_generalPlayerCap + 1] gv_banksHandle;
int[gv_generalPlayerCap + 1][31] gv_banksTempStatistic;
text[5] gv_currencyNames;
string[5][3] gv_currencyIcons;
string gv_dialogHighlighted;
int gv_endDialogBox;
int gv_endDialogItem;
int[4] gv_currencyDialogPointsItems;
int gv_currencyDialogBox;
int gv_achievementsTiersCountIndex;
color[6] gv_achievementsTiersCountColors;
int[41][6] gv_achievementsTiersCountRequired;
int[41][6] gv_achievementsTiersCountRewards;
text[41][6] gv_achievementsTiersCountText;
int[gv_generalPlayerCap + 1] gv_achievementsDialogPlayerPage;
int gv_achievementsDialogBox;
int[6] gv_achievementsDialogMainButtons;
int[11][6] gv_achievementsDialogItems;
int[4] gv_eXPDialogItems;
int gv_eXPDialogWidth;
int gv_eXPDialogDialogBox;
int[gv_generalPlayerCap + 1] gv_tutorialPlayer;
bool[gv_generalPlayerCap + 1] gv_tutorialPlayerSkipEnabled;
int[21][3] gv_tutorialPositionsXY;
text[21] gv_tutorialText;
int gv_tutorial2Progress;
unitgroup gv_tutorial2TempGroup;
int[gv_generalPlayerCap + 1] gv_tutorialDialogBox;
int[gv_generalPlayerCap + 1][4] gv_tutorialDialogItems;
int gv_tutorialDialog2Box;
int[3] gv_tutorialDialog2Items;
int gv_newsDialogBox;
int[3] gv_newsDialogItems;
int gv_modeDialogBox;
int[3] gv_modeDialogItems;
text[4] gv_modeDialogText;
int gv_tutorialSkipDialogBox;
int[3] gv_tutorialSkipDialogItems;
int gv_helpDialogDialogBox;
int[31][3] gv_helpDialogDialogItems;
string[31] gv_helpDialogDialogIcons;
text[31][3] gv_helpHelpText;
int gv_helpIndex;
int[gv_generalPlayerCap + 1] gv_helpPlayerSelected;
timer[gv_generalPlayerCap + 1] gv_helpPlayerTimer;
int gv_mainDialogBox;
int[7] gv_mainDialogItems;
int gv_partyDialogBox;
int[4] gv_partyDialogMainButtons;
int[gv_generalPlayerCap + 1][6] gv_partyDialogPlayerItems;
int[5][6][5] gv_partyDialogPartyNames;
int[5][9] gv_partyDialogPartyButtons;
int gv_statisticsDialogBox;
int[15][4] gv_statisticsDialogPlayerButtons;
int[25] gv_statisticsDialogPlayerItems;
int[4] gv_statisticsDialogPlayerColors;
int[11][3] gv_statisticsDialogPlayerEquipment;
int gv_partyStartDialogBox;
int[3][5] gv_partyStartDialogMainButtons;
int[gv_generalPlayerCap + 1][4] gv_partyStartDialogPlayerItems;
int gv_mapDialogBox;
int[3] gv_mapDialogMainButtons;
int[51] gv_mapDialogRegions;
int[51][3] gv_mapDialogRegionsXY;
int gv_screenEffectsDialogBox;
int[8][6] gv_screenEffectsDialogItem;
int gv_regionsIndex;
revealer[gv_generalPlayerCap + 1] gv_regionsPlayerRevealer;
text[41] gv_regionsNames;
text[41] gv_regionsPlayerRegionName;
region[41] gv_regionsRegion;
bool[41] gv_regionsActive;
region[16] gv_regionsVendors;
text[16] gv_regionsVendorsNames;
string[11] gv_regionsWeatherTypes;
int[41] gv_regionsWeather;
string[41][101] gv_regionsRespawnType;
fixed[41][101][3] gv_regionsRespawnXY;
timer[41] gv_regionsRespawnTimer;
int gv_regionsDungeonsIndex;
text[21][3] gv_regionsDungeonsNameDescription;
region[21][7] gv_regionsDungeonsRegion;
bool[21] gv_regionsDungeonsActive;
int[21] gv_regionsDungeonsWeather;
string[21][151] gv_regionsDungeonsRespawnType;
fixed[21][151][3] gv_regionsDungeonsRespawnXY;
timer[21] gv_regionsDungeonsCloseTimer;
timer[21] gv_regionsDungeonsOpenTimer;
int gv_regionsDungeonsCloseTime;
int gv_regionsTeleporterIndex;
region[11][4] gv_regionsTeleporterRegions;
int[gv_generalPlayerCap + 1] gv_regionsTeleporterSelected;
int gv_teleporterDialogBox;
int[4] gv_teleporterDialogMainItems;
int[11][4] gv_teleporterDialogRegionsItems;
text[11] gv_teleporterDialogRegionsNames;
color[11] gv_teleporterDialogRegionsColors;
int[gv_generalPlayerCap + 1] gv_questsPlayerUnitSelection;
int gv_questsUnitIndex;
unitgroup gv_questsUnitGroup;
string[201] gv_questsUnitIcon;
text[201][4] gv_questsUnitText;
int gv_questsQuestIndex;
int[201][4] gv_questsQuestType;
int[201][3] gv_questsQuestPrerequisite;
string[201][3] gv_questsQuestUnitType;
string[201] gv_questsQuestBuff;
int[201][3] gv_questsQuestMarker;
int[201][3] gv_questsQuestGiverTurnin;
text[201][4] gv_questsQuestText;
int[201][5] gv_questsQuestReward;
text[6] gv_questsQuestTypeText;
text[6][7] gv_questsQuestRewardText;
region[201][6] gv_questsEscortRegions;
string[201] gv_questsEscortUnitType;
int[201] gv_questsEscortRunning;
unitgroup[201] gv_questsEscortEnemyGroup;
int gv_questsItemsIndex;
text[201][3] gv_questsItemsNameTooltip;
string[201][3] gv_questsItemsIcon;
int[gv_generalPlayerCap + 1][21] gv_questsPlayerItemUnlocked;
int[gv_generalPlayerCap + 1] gv_questsPlayerQuestSelection;
int[gv_generalPlayerCap + 1][201] gv_questsPlayerProgress;
int[gv_generalPlayerCap + 1][gv_questsQuestSlots + 1] gv_questsPlayerActiveQuests;
int[gv_generalPlayerCap + 1][gv_questsQuestSlots + 1][3] gv_questsPlayerActiveProgress;
text[gv_generalPlayerCap + 1][gv_questsQuestSlots + 1] gv_questsPlayerActiveText;
int gv_questsDialogBox;
int[6] gv_questsDialogButtons;
int[5] gv_questsDialogItems;
int[9] gv_questsDialogQuestButton;
int gv_guildDialogDialogBox;
int[4][4] gv_guildDialogDialogItems;
int[4] gv_guildDialogDialogButtons;
int gv_guildConfirmDialogDialogBox;
int[3] gv_guildConfirmDialogDialogButtons;
int[gv_generalPlayerCap + 1] gv_guildConfirmDialogPlayerSelected;
string[4][7] gv_guildBuffs;
text[4] gv_guildName;
int gv_questsLogDialogBox;
int[gv_questsQuestSlots + 1][3] gv_questsLogDialogButtons;
int[6] gv_questsLogDialogItems;
int gv_invasionIndex;
timer gv_invasionTimer;
int gv_invasionTime;
bool gv_invasionRunning;
int[101] gv_invasionBaseUpgradeCost;
int gv_invasionCurrentUpgradeCost;
fixed gv_invasionFactorUpgradeCost;
int gv_invasionRisk;
text[7] gv_invasionRiskLevels;
text[7] gv_invasionRiskAssessment;
text[11] gv_invasionScoutsReport;
int gv_invasionDialogBox;
int[6] gv_invasionDialogItems;
int[4] gv_invasionDialogButtons;
unitgroup gv_invasionBadUnitGroup;
string[11] gv_invasionBadUnitTypes;
int[3] gv_invasionBadUnitSpawnCountWaves;
int gv_invasionBadUnitUpgradeCount;
unitgroup gv_invasionGoodUnitGroup;
string[11] gv_invasionGoodUnitTypes;
int[3] gv_invasionGoodUnitSpawnCountWaves;
int gv_invasionGoodUnitUpgradeCount;
int gv_survivalLevelsPassed;
int[11] gv_survivalUnitSpawnCount;
unitgroup gv_survivalBadUnitGroup;
string[11] gv_survivalBossTypes;
string[31] gv_beastMasterCreepType;
point[11] gv_beastMasterCreepSpawns;
text[11] gv_beastMasterCreepSpawnText;
string[31] gv_beastMasterCreepIcon;
int[3][101] gv_beastMasterCreepCosts;
text[31] gv_beastMasterCreepDescription;
bool gv_beastMasterCreepSpawned;
int gv_beastMasterCreepIndex;
int[gv_generalPlayerCap + 1][3] gv_beastMasterPlayerCreepCosts;
int[gv_generalPlayerCap + 1][31][3] gv_beastMasterPlayerCreepLevels;
int[gv_generalPlayerCap + 1] gv_beastMasterPlayerCreepSelectedIndex;
timer[gv_generalPlayerCap + 1] gv_beastMasterPlayerTimer;
int[gv_generalPlayerCap + 1] gv_beastMasterQuestPlayerIndex;
int[gv_generalPlayerCap + 1][3] gv_beastMasterQuestPlayerProgress;
string[31][3] gv_beastMasterQuestUnits;
string[31][3] gv_beastMasterQuestIcons;
int gv_beastMasterDialogMonsterBox;
int[6] gv_beastMasterDialogMonsterButtons;
int[21][4] gv_beastMasterDialogMonsterItems;
int[11] gv_beastMasterDialogMonsterStats;
int gv_beastMasterDialogBox;
int[6] gv_beastMasterDialogButtons;
int[3][4] gv_beastMasterDialogItems;
int gv_beastMasterDialogReleaseBox;
int[3] gv_beastMasterDialogReleaseButtons;
int gv_beastMasterDialogExitBox;
int[3] gv_beastMasterDialogExitButtons;
int gv_legendaryModsIndex;
text[21] gv_legendaryModsNames;
int[21] gv_legendaryModsMF;
string[21] gv_legendaryMods;
int[3][9] gv_legendaryDungeonMods;
timer[3] gv_legendaryDungeonTimer;
int gv_legendaryCost;
int gv_legendaryDialogBox;
int[4] gv_legendaryDialogButtons;
int[3][11] gv_legendaryDialogStats;
string[51] gv_raidsBosses;
point[51] gv_raidsBossesRegions;
text[51] gv_raidsBossesText;
soundlink[51] gv_raidsBossesSound;
int gv_raidsBossesIndex;
int[51] gv_raidsBossesMulti;
unit[51] gv_raidsBossesSpawned;
timer gv_raidsBossesTimer;
timer[51] gv_raidsBossesDespawnTimer;
int gv_raidsBossesChance;
int gv_raidsBossesChanceHeroic;
int[51] gv_raidsBossesSOJcount;
string[11] gv_dungeonsBossStunReduction;
int[gv_generalPlayerCap + 1][11][21] gv_dungeonsDungeonStatistics;
int[gv_generalPlayerCap + 1] gv_dungeonsDungeonSelected;
int[21] gv_dungeonsLevels;
int[21] gv_dungeonsPartyLeader;
playergroup[21] gv_dungeonsParty;
text[6] gv_dungeonsStatusText;
bool[21] gv_dungeonsHardcore;
bool[21] gv_dungeonsDog;
bool[21] gv_dungeonsLegendary;
bool[21] gv_dungeonsHeroic;
bool[21] gv_dungeonsMFBonus;
int[21] gv_dungeonsActiveStatus;
int[gv_generalPlayerCap + 1] gv_dungeonsGMQuest;
bool[gv_generalPlayerCap + 1] gv_dungeonsDogPlayer;
region[3][13] gv_dungeonsD11Regions;
int[3] gv_dungeonsD11RegionsIndex;
string[6][201] gv_dungeonsD11CreepCountTypes;
int[6] gv_dungeonsD11CreepCountTypesIndex;
int[8] gv_dungeonsD11CreepSpawnWeight;
int gv_dungeonsD11CreepBossCount;
int gv_dungeonEnterDialogBox;
int[6][4] gv_dungeonEnterDialogMainItems;
int[7] gv_dungeonEnterDialogUniqueItems;
int[4] gv_dungeonEnterDialogHeroicItems;
int[4] gv_dungeonEnterDialogLegendaryItems;
int[4] gv_dungeonEnterDialogHardcoreItems;
int[6][3] gv_dungeonEnterDialogPartyItems;
color[21] gv_dungeonEnterDialogColors;
int gv_dungeonCheckDialogBox;
int[4] gv_dungeonCheckDialogMainItems;
int gv_dungeonLeaveDialogBox;
int[4] gv_dungeonLeaveDialogMainItems;
int gv_dungeonEndDialogBox;
int[gv_generalPlayerCap + 1][11] gv_dungeonEndDialogPartyItems;
bool gv_generalGameOver;
bool gv_generalEndGameMode;
bool gv_generalTutorialMode;
bool gv_generalEndingCinematic;
int gv_generalLevelCap;
timer gv_generalPlayerRespawn;
playergroup[5][4] gv_generalParties;
int[5] gv_generalPartiesLeaders;
playergroup gv_generalTeamsAll;
unit[gv_generalPlayerCap + 1] gv_playerHeroHero;
int[gv_generalPlayerCap + 1][4] gv_playerHeroHeroClassTierType;
int[gv_generalPlayerCap + 1][3] gv_playerHeroHeroGuild;
timer[gv_generalPlayerCap + 1] gv_playerHeroHeroGuildTimer;
int[gv_generalPlayerCap + 1][3] gv_playerHeroHeroLevelExp;
region[gv_generalPlayerCap + 1] gv_playerHeroHeroRegion;
int[gv_generalPlayerCap + 1] gv_playerHeroHeroRegionIndex;
int[gv_generalPlayerCap + 1] gv_playerHeroHeroRespawn;
int[gv_generalPlayerCap + 1][3] gv_playerHeroHeroSkillLvlStatCost;
int[gv_generalPlayerCap + 1][6] gv_playerHeroHeroStats;
int[gv_generalPlayerCap + 1][6] gv_playerHeroHeroStatsInvested;
int[gv_generalPlayerCap + 1][11] gv_playerHeroHeroHatsEquipped;
int[gv_generalPlayerCap + 1][31] gv_playerEmptyField1;
int[gv_generalPlayerCap + 1][31] gv_playerEmptyField2;
int[gv_generalPlayerCap + 1][31] gv_playerEmptyField3;
int[gv_generalPlayerCap + 1][31] gv_playerEmptyField4;
int[gv_generalPlayerCap + 1][6][13] gv_playerStatisticsHats;
int[gv_generalPlayerCap + 1][17] gv_playerStatisticsMaxHeroes;
int[gv_generalPlayerCap + 1][31] gv_playerStatisticsRaidBossCleared;
int[gv_generalPlayerCap + 1][31] gv_playerStatisticsBeastmasterCleared;
int[gv_generalPlayerCap + 1][13][4] gv_playerStatisticsDungeonsCleared;
int[gv_generalPlayerCap + 1][31] gv_playerStatisticsGeneral;
int[gv_generalPlayerCap + 1][51][3] gv_playerStatisticsAchievements;
int[gv_generalPlayerCap + 1][31] gv_playerStatisticsBackup;
int[gv_generalPlayerCap + 1] gv_playerAFKCheck;
timer[gv_generalPlayerCap + 1] gv_playerAFKTimer;
region[gv_generalPlayerCap + 1] gv_playerAFKRegion;
int[gv_generalPlayerCap + 1][5] gv_playerCurrency;
bool[gv_generalPlayerCap + 1] gv_playerDialogUsed;
int[gv_generalPlayerCap + 1] gv_playerTextTag;
int[gv_generalPlayerCap + 1] gv_playerVersionBeta;
timer[gv_generalPlayerCap + 1] gv_playerCombatTimer;
bool[gv_generalPlayerCap + 1] gv_playerOptions;
playergroup gv_playerTagGroup;
int[201] gv_heroesStatsExpRequired;
int[11] gv_heroesStatsBankTest;
int[4][9][6][6] gv_heroesStatsLevelingStats;
int[9][6][4] gv_heroesStatsUpgradeTierTypeRange;
string[4][9][6] gv_heroesStatsUnitType;
text[4][9][6] gv_heroesStatsHeroTooltip;
string[4][9][6][6] gv_heroesStatsUniqueUpgrades;
int[11] gv_heroesStatsTierLevels;
string[6][3] gv_heroesStatsAdvancedBuffs;
string[6][3] gv_heroesStatsAdvancedNames;
fixed[6][3] gv_heroesStatsAdvancedStatValues;
string[4][9][6][11] gv_heroesAbilitiesIcons;
text[4][9][6][11] gv_heroesAbilitiesTooltips;
text[4][9][6][11] gv_heroesAbilitiesLevelUp;
string[4][9][6][11] gv_heroesAbilitiesUpgrades;
int gv_heroLoadDialogBox;
int[5][4] gv_heroLoadDialogMainButtons;
int[gv_generalLoadSlotCap + 1][3] gv_heroLoadDialogSelectionButtons;
int[gv_generalLoadSlotCap + 1][4] gv_heroLoadDialogHeroPortrait;
int[gv_generalPlayerCap + 1] gv_heroLoadDialogSlotSelected;
int gv_heroDestroyDialogBox;
int[3] gv_heroDestroyDialogMainButtons;
int[3] gv_heroDestroyDialogInfoText;
int gv_heroVendorDestroyDialogBox;
int[5] gv_heroVendorDestroyDialogMainButtons;
bool[gv_generalPlayerCap + 1] gv_heroVendorDestroyDialogFreeRespec;
int gv_heroSelectionDialogBox;
int[4][4] gv_heroSelectionDialogMainButtons;
int[6][4] gv_heroSelectionDialogSelectionButtons;
int[6][6][16] gv_heroSelectionDialogHeroStats;
int[6][6] gv_heroSelectionDialogHeroPortrait;
int[6][11] gv_heroSelectionDialogHeroSkills;
int[gv_generalPlayerCap + 1] gv_heroSelectionDialogHeroSelected;
int gv_heroTreeDialogBox;
int[5] gv_heroTreeDialogMainButtons;
int[9][6][3] gv_heroTreeDialogHeroButtons;
int[6][16] gv_heroTreeDialogHeroStats;
int[11] gv_heroTreeDialogHeroSkills;
int[6] gv_heroTreeDialogHeroPortrait;
int[gv_generalPlayerCap + 1] gv_heroTreeDialogPlayerSelected;
int gv_heroStatsDialogBox;
int[5] gv_heroStatsDialogMainButtons;
int[6][18] gv_heroStatsDialogHeroStats;
int[4] gv_heroStatsDialogHeroPortrait;
int[19][3] gv_heroStatsDialogKeyItems;
int[11][3] gv_heroStatsDialogOptions;
int gv_heroVendorDialogBox;
int[6] gv_heroVendorDialogMainButtons;
int[11] gv_heroVendorDialogSkillItems;
int[151] gv_heroVendorStatCosts;
int[151] gv_heroVendorStatTotals;
int[6][3] gv_heroVendorStatTiers;
int[31] gv_heroVendorSkillCosts;
playergroup[4] gv_arenaTeams;
int gv_arenaActiveStatus;
bool[3] gv_arenaConfirm;
int gv_arenaHost;
int gv_arenaDialogBox;
int[4] gv_arenaDialogTextItems;
int[6][4] gv_arenaDialogMainItems;
int[13][6] gv_arenaDialogPartyItems;
int gv_potionStatsIndex;
int[3][31] gv_potionHealValue;
string[21] gv_potionBehavior;
string[4][4] gv_potionName;
string[21] gv_potionStatTooltip;
string[4][4] gv_potionIcon;
fixed[4][31] gv_potionCost;
int[7] gv_itemsTwilightRanges;
int[61] gv_itemsStatValue;
text[61] gv_itemsStatTooltip;
text[61] gv_itemsStatTooltipType;
string[61][3] gv_itemsStatBehavior;
int[3][31] gv_itemsStatTierValues;
text[gv_itemsGlyphCount + 1] gv_itemsGlyphTooltip;
string[gv_itemsGlyphCount + 1] gv_itemsGlyphUpgrade;
int[4][6] gv_itemsGlyphUpgradeIndex;
int[11][7] gv_itemsBaseSlotStat;
text[11][7][7] gv_itemsBaseName;
string[11][7][7] gv_itemsBaseIcon;
string[7] gv_itemsBaseBorder;
string[11] gv_itemsAssistIcon;
color[7] gv_itemsBaseRarityColor;
int[7] gv_itemsBaseRarityScale;
fixed[31][7] gv_itemsCost;
fixed[31][4] gv_itemsHonorCost;
int[7] gv_itemDropsTimerLimits;
int[gv_generalPlayerCap + 1][3] gv_lootFilterPlayerSelections;
int[gv_generalPlayerCap + 1][7] gv_inventoryPotionStats;
int[gv_generalPlayerCap + 1] gv_potionVendorSlotSelected;
int[gv_generalPlayerCap + 1][10][7] gv_potionVendorStats;
int[gv_generalPlayerCap + 1] gv_potionVendorCosts;
timer[gv_generalPlayerCap + 1] gv_potionVendorTimer;
int[gv_generalPlayerCap + 1][3] gv_itemVendorSlotSelected;
int[gv_generalPlayerCap + 1][25][21] gv_itemVendorStats;
int[gv_generalPlayerCap + 1][3] gv_itemVendorCosts;
int[gv_generalPlayerCap + 1] gv_itemVendorPlayerTier;
timer[gv_generalPlayerCap + 1] gv_itemVendorTimer;
int[gv_generalPlayerCap + 1][3] gv_raritiesVendorSlotSelected;
int[gv_generalPlayerCap + 1][10][21] gv_raritiesVendorStats;
int[gv_generalPlayerCap + 1][3] gv_raritiesVendorCosts;
int[gv_generalPlayerCap + 1] gv_glyphVendorSlotSelected;
int[gv_generalPlayerCap + 1][10][21] gv_glyphVendorStats;
int[gv_generalPlayerCap + 1] gv_glyphVendorCosts;
int[gv_generalPlayerCap + 1] gv_inventoryStashRealSlot;
int[gv_generalPlayerCap + 1][3] gv_inventoryStashSlotSelected;
int[gv_generalPlayerCap + 1][301][21] gv_inventoryStashStats;
int[11] gv_inventoryStashTabPrice;
int[gv_generalPlayerCap + 1] gv_inventoryStashTabSelected;
bool[gv_generalPlayerCap + 1] gv_inventoryStashMove;
int gv_itemDropsDropIndex;
int[101][21] gv_itemDropsStats;
int[gv_generalPlayerCap + 1][13] gv_itemDropsPlayerSlotValue;
playergroup[101] gv_itemDropsPlayerGroup;
playergroup[101] gv_itemDropsPlayerRollGroup;
int[gv_generalPlayerCap + 1][101] gv_itemDropsPlayerRoll;
int[101] gv_itemDropsPlayerRolledCount;
int[101] gv_itemDropsTimer;
int[gv_generalPlayerCap + 1] gv_inventoryPackSlotSelected;
bool[gv_generalPlayerCap + 1] gv_inventoryPackMove;
int[gv_generalPlayerCap + 1][36][21] gv_inventoryPackStats;
int[gv_generalPlayerCap + 1][11][21] gv_inventoryEquippedStats;
int[gv_generalPlayerCap + 1] gv_inventoryEquipSlotSelected;
int[gv_generalPlayerCap + 1] gv_itemSurvivalSlotSelected;
int[gv_generalPlayerCap + 1][31][21] gv_itemSurvivalStats;
int[gv_generalPlayerCap + 1] gv_itemSurvivalQuantity;
timer[gv_generalPlayerCap + 1] gv_itemSurvivalTimer;
int gv_glyphVendorDialogBox;
int[10][5] gv_glyphVendorDialogItems;
int[6] gv_glyphVendorDialogSelectedItem;
int[7] gv_glyphVendorDialogButtons;
int[gv_generalPlayerCap + 1] gv_glyphVendorDialogItemIndex;
int gv_lootFilterDialogBox;
int[3] gv_lootFilterDialogSelections;
int[3] gv_lootFilterDialogButtons;
int gv_raritiesVendorDialogBox;
int[10][5] gv_raritiesVendorDialogItems;
int[3][6] gv_raritiesVendorDialogSelectedItem;
int[7] gv_raritiesVendorDialogButtons;
int[gv_generalPlayerCap + 1] gv_raritiesVendorDialogItemIndex;
int gv_itemVendorDialogBox;
int[25][5] gv_itemVendorDialogItems;
int[3][6] gv_itemVendorDialogSelectedItem;
int[7] gv_itemVendorDialogButtons;
int[gv_generalPlayerCap + 1] gv_itemVendorDialogItemIndex;
int gv_potionVendorDialogBox;
int[10][5] gv_potionVendorDialogItems;
int[6] gv_potionVendorDialogSelectedItem;
int[5] gv_potionVendorDialogMainButtons;
int gv_inventoryDialogStashBox;
int[25][5] gv_inventoryDialogStashItems;
int[3][5] gv_inventoryDialogStashSelectedItem;
int[8] gv_inventoryDialogStashButtons;
int[10] gv_inventoryDialogStashTabs;
string[10] gv_inventoryDialogStashTabIcons;
int[13] gv_inventoryDialogDropBox;
int[13][4] gv_inventoryDialogDropButtons;
int[13][5] gv_inventoryDialogDropItems;
int[13][3] gv_inventoryDialogDropTimer;
int gv_inventoryDialogPackBox;
int[36][5] gv_inventoryDialogPackItems;
int[5] gv_inventoryDialogPackSelected;
int[5] gv_inventoryDialogPackButtons;
int gv_inventoryDialogDestroyBox;
int[5] gv_inventoryDialogDestroySelected;
int[3] gv_inventoryDialogDestroyButtons;
int gv_inventoryDialogEquippedBox;
int[11][5] gv_inventoryDialogEquippedItems;
int gv_itemHonorDialogBox;
int[6] gv_itemHonorDialogDropdown;
int[5] gv_itemHonorDialogMainButtons;
int[5] gv_itemHonorDialogItem;
int[gv_generalPlayerCap + 1][6] gv_itemHonorDialogSelectedValues;
int[gv_generalPlayerCap + 1][21] gv_itemHonorDialogGeneratedValues;
int[gv_generalPlayerCap + 1] gv_itemHonorDialogCosts;
int gv_itemSurvivalDialogBox;
int[31][5] gv_itemSurvivalDialogItems;
int[5] gv_itemSurvivalDialogSelectedItem;
int[4] gv_itemSurvivalDialogMainButtons;
int[6] gv_itemSurvivalDialogTextItems;
int[gv_generalPlayerCap + 1] gv_itemSurvivalDialogItemIndex;
int gv_hatsIndex;
playergroup[8] gv_hatsTempGroups;
string[6] gv_hatsTempGroupsHat;
string[6][13] gv_hatsBehavior;
text[6][13][3] gv_hatsNameDescription;
int[6][13] gv_hatsCosts;
int[gv_generalPlayerCap + 1] gv_hatsPlayerUpgradeIndex;
int gv_hatsDialogBox;
int[8] gv_hatsDialogMainButtons;
int[6][3] gv_hatsDialogTypeButtons;
int[4][8] gv_hatsDialogItems;
int[gv_generalPlayerCap + 1][4] gv_hatsDialogPlayerTabPageItem;
int gv_hatsDialogHeroBox;
int[3] gv_hatsDialogHeroMainButtons;
int[5][3] gv_hatsDialogHeroSelectButtons;
string[101] gv_testersNames;
string[201] gv_testers2Names;
int gv_testersIndex;
int gv_testers2Index;
playergroup gv_testersGroup;
int gv_banksBankSwapIndex;
string[101][3] gv_banksBankSwapHandle;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;
    int init_l;

    gv_banksBankName = "TheCaveRPGA1";
    gv_banksBankName2 = "TheCaveRPG";
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_banksCheckMath[init_i] = 13;
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_banksTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_banksSaved[init_i] = true;
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_banksHandle[init_i] = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_currencyIcons[init_i][init_j] = "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds";
        }
    }
    gv_dialogHighlighted = "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds";
    gv_endDialogBox = c_invalidDialogId;
    gv_endDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_currencyDialogPointsItems[init_i] = c_invalidDialogControlId;
    }
    gv_currencyDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_achievementsTiersCountColors[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_achievementsDialogPlayerPage[init_i] = 1;
    }
    gv_achievementsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_achievementsDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_achievementsDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_eXPDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_eXPDialogDialogBox = c_invalidDialogId;
    gv_tutorial2TempGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_tutorialDialogBox[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_tutorialDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_tutorialDialog2Box = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tutorialDialog2Items[init_i] = c_invalidDialogControlId;
    }
    gv_newsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_newsDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_modeDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_modeDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_tutorialSkipDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tutorialSkipDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_helpDialogDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_helpDialogDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_helpDialogDialogIcons[init_i] = "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_helpPlayerTimer[init_i] = TimerCreate();
    }
    gv_mainDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_mainDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_partyDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_partyDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_partyDialogPlayerItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 4; init_k += 1) {
                gv_partyDialogPartyNames[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_partyDialogPartyButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_statisticsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_statisticsDialogPlayerButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_statisticsDialogPlayerItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_statisticsDialogPlayerColors[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_statisticsDialogPlayerEquipment[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_partyStartDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_partyStartDialogMainButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_partyStartDialogPlayerItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_mapDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_mapDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_mapDialogRegions[init_i] = c_invalidDialogControlId;
    }
    gv_screenEffectsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_screenEffectsDialogItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_regionsRespawnTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_regionsDungeonsCloseTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_regionsDungeonsOpenTimer[init_i] = TimerCreate();
    }
    gv_regionsDungeonsCloseTime = 300;
    gv_teleporterDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_teleporterDialogMainItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_teleporterDialogRegionsItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_teleporterDialogRegionsColors[init_i] = Color(0,0,0);
    }
    gv_questsUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 200; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_questsQuestMarker[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= 200; init_i += 1) {
        gv_questsEscortEnemyGroup[init_i] = UnitGroupEmpty();
    }
    gv_questsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_questsDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_questsDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_questsDialogQuestButton[init_i] = c_invalidDialogControlId;
    }
    gv_guildDialogDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_guildDialogDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_guildDialogDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_guildConfirmDialogDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_guildConfirmDialogDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_questsLogDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_questsQuestSlots; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_questsLogDialogButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_questsLogDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_invasionTimer = TimerCreate();
    gv_invasionFactorUpgradeCost = 1.0;
    gv_invasionRisk = 1;
    gv_invasionDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_invasionDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_invasionDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_invasionBadUnitGroup = UnitGroupEmpty();
    gv_invasionGoodUnitGroup = UnitGroupEmpty();
    gv_survivalLevelsPassed = -1;
    gv_survivalBadUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_beastMasterPlayerTimer[init_i] = TimerCreate();
    }
    gv_beastMasterDialogMonsterBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_beastMasterDialogMonsterButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_beastMasterDialogMonsterItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_beastMasterDialogMonsterStats[init_i] = c_invalidDialogControlId;
    }
    gv_beastMasterDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_beastMasterDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_beastMasterDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_beastMasterDialogReleaseBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_beastMasterDialogReleaseButtons[init_i] = c_invalidDialogControlId;
    }
    gv_beastMasterDialogExitBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_beastMasterDialogExitButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_legendaryDungeonTimer[init_i] = TimerCreate();
    }
    gv_legendaryCost = 2000;
    gv_legendaryDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_legendaryDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_legendaryDialogStats[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_raidsBossesSound[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_raidsBossesMulti[init_i] = 1;
    }
    gv_raidsBossesTimer = TimerCreate();
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_raidsBossesDespawnTimer[init_i] = TimerCreate();
    }
    gv_raidsBossesChance = 10;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_raidsBossesSOJcount[init_i] = 10;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_dungeonsParty[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_dungeonsActiveStatus[init_i] = 1;
    }
    gv_dungeonEnterDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_dungeonEnterDialogMainItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dungeonEnterDialogUniqueItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dungeonEnterDialogHeroicItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dungeonEnterDialogLegendaryItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dungeonEnterDialogHardcoreItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_dungeonEnterDialogPartyItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_dungeonEnterDialogColors[init_i] = Color(0,0,0);
    }
    gv_dungeonCheckDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dungeonCheckDialogMainItems[init_i] = c_invalidDialogControlId;
    }
    gv_dungeonLeaveDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dungeonLeaveDialogMainItems[init_i] = c_invalidDialogControlId;
    }
    gv_dungeonEndDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_dungeonEndDialogPartyItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_generalLevelCap = 50;
    gv_generalPlayerRespawn = TimerCreate();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_generalParties[init_i][init_j] = PlayerGroupEmpty();
        }
    }
    gv_generalTeamsAll = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_playerHeroHeroGuildTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_playerAFKTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_playerTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_playerCombatTimer[init_i] = TimerCreate();
    }
    gv_playerTagGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                gv_heroesStatsHeroTooltip[init_i][init_j][init_k] = StringExternal("Param/Value/FAD8E6CD");
            }
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_heroesStatsAdvancedNames[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            for (init_k = 0; init_k <= 5; init_k += 1) {
                for (init_l = 0; init_l <= 10; init_l += 1) {
                    gv_heroesAbilitiesIcons[init_i][init_j][init_k][init_l] = "Assets\\Textures\\war3_btncancel.dds";
                }
            }
        }
    }
    gv_heroLoadDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_heroLoadDialogMainButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= gv_generalLoadSlotCap; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_heroLoadDialogSelectionButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= gv_generalLoadSlotCap; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_heroLoadDialogHeroPortrait[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_heroDestroyDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroDestroyDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_heroDestroyDialogInfoText[init_i] = c_invalidDialogControlId;
    }
    gv_heroVendorDestroyDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_heroVendorDestroyDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    gv_heroSelectionDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_heroSelectionDialogMainButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_heroSelectionDialogSelectionButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 15; init_k += 1) {
                gv_heroSelectionDialogHeroStats[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_heroSelectionDialogHeroPortrait[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_heroSelectionDialogHeroSkills[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_heroTreeDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_heroTreeDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 2; init_k += 1) {
                gv_heroTreeDialogHeroButtons[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 15; init_j += 1) {
            gv_heroTreeDialogHeroStats[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_heroTreeDialogHeroSkills[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_heroTreeDialogHeroPortrait[init_i] = c_invalidDialogControlId;
    }
    gv_heroStatsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_heroStatsDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 17; init_j += 1) {
            gv_heroStatsDialogHeroStats[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_heroStatsDialogHeroPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 18; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_heroStatsDialogKeyItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_heroStatsDialogOptions[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_heroVendorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_heroVendorDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_heroVendorDialogSkillItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_arenaTeams[init_i] = PlayerGroupEmpty();
    }
    gv_arenaDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_arenaDialogTextItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_arenaDialogMainItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_arenaDialogPartyItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_potionName[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_potionStatTooltip[init_i] = "";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_potionIcon[init_i][init_j] = "Assets\\Textures\\btn-border-transportslot-empty.dds";
        }
    }
    for (init_i = 0; init_i <= gv_itemsGlyphCount; init_i += 1) {
        gv_itemsGlyphTooltip[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= 6; init_k += 1) {
                gv_itemsBaseIcon[init_i][init_j][init_k] = "Assets\\Textures\\btn-border-transportslot-empty.dds";
            }
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_itemsBaseBorder[init_i] = "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds";
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_itemsAssistIcon[init_i] = "Assets\\Textures\\btn-border-transportslot-empty.dds";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_itemsBaseRarityColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_lootFilterPlayerSelections[init_i][init_j] = 1;
        }
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_potionVendorTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_itemVendorTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_inventoryStashTabSelected[init_i] = 1;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_itemDropsPlayerGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_itemDropsPlayerRollGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_generalPlayerCap; init_i += 1) {
        gv_itemSurvivalTimer[init_i] = TimerCreate();
    }
    gv_glyphVendorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_glyphVendorDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_glyphVendorDialogSelectedItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_glyphVendorDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_lootFilterDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lootFilterDialogSelections[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_lootFilterDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_raritiesVendorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_raritiesVendorDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_raritiesVendorDialogSelectedItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_raritiesVendorDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_itemVendorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 24; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_itemVendorDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_itemVendorDialogSelectedItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_itemVendorDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_potionVendorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_potionVendorDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_potionVendorDialogSelectedItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_potionVendorDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    gv_inventoryDialogStashBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 24; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_inventoryDialogStashItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_inventoryDialogStashSelectedItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_inventoryDialogStashButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_inventoryDialogStashTabs[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_inventoryDialogDropBox[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_inventoryDialogDropButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_inventoryDialogDropItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_inventoryDialogDropTimer[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_inventoryDialogPackBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_inventoryDialogPackItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_inventoryDialogPackSelected[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_inventoryDialogPackButtons[init_i] = c_invalidDialogControlId;
    }
    gv_inventoryDialogDestroyBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_inventoryDialogDestroySelected[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_inventoryDialogDestroyButtons[init_i] = c_invalidDialogControlId;
    }
    gv_inventoryDialogEquippedBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_inventoryDialogEquippedItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_itemHonorDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_itemHonorDialogDropdown[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_itemHonorDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_itemHonorDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv_itemSurvivalDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_itemSurvivalDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_itemSurvivalDialogSelectedItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_itemSurvivalDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_itemSurvivalDialogTextItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_hatsTempGroups[init_i] = PlayerGroupEmpty();
    }
    gv_hatsDialogBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_hatsDialogMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_hatsDialogTypeButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 7; init_j += 1) {
            gv_hatsDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_hatsDialogHeroBox = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hatsDialogHeroMainButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_hatsDialogHeroSelectButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_testersNames[init_i] = "";
    }
    for (init_i = 0; init_i <= 200; init_i += 1) {
        gv_testers2Names[init_i] = "";
    }
    gv_testersGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 100; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_banksBankSwapHandle[init_i][init_j] = "";
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_InitStartLoad ();
void gf_BankSaveBank (int lp_trigPlayer, int lp_slot, int lp_type);
void gf_BankLoadBank30 (int lp_trigPlayer, int lp_slot);
void gf_BankHardChecks (int lp_trigPlayer);
void gf_BankItemLoading (int lp_trigPlayer, int lp_slotType, int lp_slotIndex);
void gf_BankFailedResponse (int lp_trigPlayer, bool lp_passFail, bool lp_passFailEdit);
void gf_BankTempStats (int lp_trigPlayer);
void gf_DialogCreateEXPGoldUI ();
void gf_DialogUsedMainButtons (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHelp (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedMapNews (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedScreenEffects (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedEXPBar (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_InitVariablesRegionHelpTutorial ();
void gf_DialogCreateTeleDungeonMapTutorialArenaLegendary ();
void gf_DialogUsedTeleportSelection (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedDungeonSetup (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DungeonD11Setup (int lp_playerCount, bool lp_heroic, int lp_dungeonIndex);
void gf_DungeonDialogUpdate (int lp_trigPlayer, int lp_tempDungeon);
void gf_DungeonDialogEnd (int lp_tempDungeon);
void gf_TutorialTutorialStages (playergroup lp_playerGroup, int lp_index);
void gf_TutorialDungeon ();
void gf_DialogUsedTutorial (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_TutorialUpdate (int lp_trigPlayer, int lp_index);
void gf_TutorialSkip (int lp_trigPlayer);
void gf_DialogCreatePartyHelp ();
void gf_DialogUsedParty (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_PartyUpdateTooltips (int lp_trigPlayer);
void gf_PartyStartUpdate (int lp_trigPlayer);
void gf_PartyAlone (int lp_trigPlayer, int lp_partyIndex);
void gf_InitVariablesQuestsCreateGuilds ();
void gf_DialogCreateConvoQuestsLogGuild ();
void gf_DialogUsedTalkQuest (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedFaction (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedQuestLog (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_QuestsInteracting (int lp_trigPlayer, unit lp_selected);
void gf_QuestsTalk (unit lp_unit, text lp_text1, text lp_text2, text lp_text3);
void gf_QuestsCreateQuest (int lp_giver, int lp_turnIn, text lp_giveText, text lp_finishText, int lp_prerequisite1, int lp_prerequisite2, int lp_questType, int lp_questKills1, int lp_questKills2, string lp_questKillsType1, string lp_questKillsType2, string lp_questBuff, int lp_rewardType, int lp_rewardAmount, int lp_rewardAmount2, int lp_eXPAmount);
void gf_QuestsCreateEscort (int lp_questIndex, string lp_questUnit, region lp_regionsStart, region lp_regions1, region lp_regions2, region lp_regions3, region lp_regions4, region lp_regions5);
void gf_QuestsEscort (int lp_questIndex);
void gf_QuestsRewards (int lp_trigPlayer, int lp_questComplete);
void gf_InitVariablesInvasionBeastmasterRaidsLegendaryHats ();
void gf_DialogCreateInvasionBeastmasterHats ();
void gf_DialogUsedHatsHeroes (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_HatsPreleveledHero (int lp_buyIndex, int lp_trigPlayer);
void gf_CreepsGlornSecondLootScreen (int lp_trigPlayer, int lp_tempTier);
void gf_CreepsDungeonCleared (unit lp_killingUnit, unit lp_killedUnit, int lp_dungeonIndex);
void gf_CreepsCreepDiesBounty (unit lp_killingUnit, unit lp_killedUnit);
void gf_SurvivalEnd (int lp_trigPlayer, int lp_wavesSurvived, int lp_awardType, int lp_difficulty);
void gf_CreepsCreepSpawn (string lp_respawningCreep, int lp_spawnType, int lp_regionIndex, fixed lp_x, fixed lp_y);
void gf_DungeonCreepSpawn (string lp_respawningCreep, int lp_playerCount, fixed lp_x, fixed lp_y, bool lp_heroic, int lp_dungeonIndex);
void gf_SurvivalCreepSpawn ();
void gf_BeastMasterCreepSpawn (string lp_creep, int lp_playerCount, int lp_creepLevel);
void gf_RaidCreepSpawnSetup (int lp_heroic);
void gf_InvasionCreepSpawn ();
void gf_InvasionArmySpawn ();
void gf_InvasionEarlySpawn ();
void gf_DungeonLegendaryUpdate (int lp_index);
void gf_BeastMasterUpdate (int lp_trigPlayer, int lp_type);
void gf_InitVariablesHeroesStatsAchievements ();
void gf_DialogCreateHeroSelectionStatsStatisticsNewsAchievements ();
void gf_DialogUsedHeroStatistics (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHeroAchievements (int lp_trigPlayer, int lp_dialogItemUsed, int lp_type);
void gf_DialogUsedHeroSelection (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHeroCreateLoad (int lp_trigPlayer, bool lp_loading);
void gf_DialogUsedHeroLoading (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHeroStats (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogShowHeroSelection (int lp_trigPlayer);
void gf_DialogUsedHeroTree (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_HeroHeroLevels (int lp_trigPlayer);
void gf_HeroRevive (int lp_trigPlayer);
void gf_HeroStatsIncreased (int lp_trigPlayer, int lp_index, bool lp_loaded);
void gf_HeroStats (string lp_unitType, int lp_range, int lp_damage, int lp_speed, int lp_life, int lp_energy, int lp_resist, text lp_tooltip, int lp_classIndex, int lp_tierIndex, int lp_heroIndex, string lp_heroUpgrades1, string lp_heroUpgrades2, string lp_heroUpgrades3, string lp_heroUpgrades4, string lp_heroUpgrades5);
void gf_HeroAbilities (string lp_icon, text lp_tooltip, text lp_leveling, string lp_skillUpgrade, int lp_classIndex, int lp_tierIndex, int lp_heroIndex, int lp_skillSlot);
void gf_DialogUsedHatsVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedBankVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedBeastMaster (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedInvasionVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedItemVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHeroVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedHonorVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedPotionVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedGlyphVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedLegendaryVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedRaritiesVendor (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_InitVariablesItemStats ();
void gf_DialogCreateItemsInventoriesPotions ();
void gf_DialogUsedItemDrops (int lp_trigPlayer, int lp_dialogBoxNumber, int lp_dialogItemUsed);
void gf_DialogUsedItemPack (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedItemDestroy (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedItemFilter (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_DialogUsedItemsReward (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_ItemsGenerateRandom (int lp_trigPlayer, playergroup lp_playerGroup, int lp_itemTier, int lp_dropType, fixed lp_rarityScale);
void gf_ItemsGeneratePotion (int lp_trigPlayer, int lp_generateType, int lp_vendorSlot);
void gf_ItemsTimer (int lp_timerIndex, int lp_timerTime);
void gf_GeneralDialogEnable (int lp_trigPlayer);
void gf_GeneralUnitTakesDamage (unit lp_hitUnit, unit lp_hittingUnit, int lp_hittingPlayer, fixed lp_damage, fixed lp_damageAttempted);
void gf_GeneralUnitTakesHealing (unit lp_healer, unit lp_healed, fixed lp_healing);
void gf_GeneralAnnouncementMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralQuestMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralErrorMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralPartyMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralRaidMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralBeastMasterMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralItemsMessage (text lp_text, playergroup lp_playerGroup);
void gf_GeneralEndingCinematic (playergroup lp_playerGroup);
void gf_DialogUsedArena (int lp_trigPlayer, int lp_dialogItemUsed);
void gf_ArenaFight ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitAll;
trigger gt_InitBetaTestersCheck;
trigger gt_BankVariablesCheck;
trigger gt_RegionsUnitEntersGeneralRegion;
trigger gt_RegionsUnitLeavesGeneralRegion;
trigger gt_RegionsTimersExpire;
trigger gt_RegionsUnitEntersTeleporter;
trigger gt_RegionsUnitCrossesMap;
trigger gt_RegionsUnitEntersDungeonStart;
trigger gt_RegionsUnitEntersDungeonExit;
trigger gt_TutorialRegionsLeave;
trigger gt_TutorialRegionsLeaveFinal;
trigger gt_QuestsTalkToUnitInteract;
trigger gt_QuestsTalkToUnit;
trigger gt_QuestsItemPickUp;
trigger gt_InvasionTimerCountdown;
trigger gt_InvasionTimerExpires;
trigger gt_InvasionKillWarriors;
trigger gt_CreepsUnitDies;
trigger gt_HeroHeroDies;
trigger gt_RegionsUnitEntersVendorRegion;
trigger gt_GeneralPets;
trigger gt_GeneralDialogUsed;
trigger gt_GeneralCommandLimit;
trigger gt_GeneralPotionCount;
trigger gt_GeneralUnitTakesDamage;
trigger gt_GeneralUnitTakesHealing;
trigger gt_GeneralPlayerLeaves;
trigger gt_TestersOn;
trigger gt_TestersOff;
trigger gt_Patreon1OnOff;
trigger gt_TestTestersHero40;
trigger gt_TestTestersItems;
trigger gt_TestTestersSpeed;
trigger gt_TestTestersStats;
trigger gt_TestTestersMap;
trigger gt_TestTestersCastle;
trigger gt_TestTestersCrossroads;
trigger gt_TestTestersBarrenPeak;
trigger gt_TestTestersD3;
trigger gt_TestTestersD4;
trigger gt_TestTestersD5;
trigger gt_TestTestersD6;
trigger gt_TestTestersD7;
trigger gt_TestTestersD8;
trigger gt_TestTestersD9;
trigger gt_TestTestersD10;
trigger gt_TestFix;
trigger gt_TestGuild1;
trigger gt_TestGuild2;
trigger gt_TestGuild3;
trigger gt_TestGlyphs;
trigger gt_TestGlornify;
trigger gt_TestBuff;
trigger gt_TestDungeonReady2;
trigger gt_TestBeast;
trigger gt_TestRaid;
trigger gt_TestInn;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_InitStartLoad () {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_modeText;
    int[4] lv_tempClassTierType;
    int[4] lv_tempInt;

    // Automatic Variable Declarations
    const int autoD6DEAB8A_ae = 10;
    const int autoD6DEAB8A_ai = 1;
    const int autoA0C66D47_ae = 10;
    const int autoA0C66D47_ai = 1;
    playergroup auto916943C9_g;
    int auto916943C9_var;
    playergroup auto59F5F1CF_g;
    int auto59F5F1CF_var;
    playergroup auto49466A13_g;
    int auto49466A13_var;
    const int auto6D5A9D1F_ae = 30;
    const int auto6D5A9D1F_ai = 1;
    const int autoE171F206_ae = 16;
    const int autoE171F206_ai = 1;
    const int auto0E20A4B3_ae = gv_generalLoadSlotCap;
    const int auto0E20A4B3_ai = 1;
    const int auto54DB8560_ae = gv_generalLoadSlotCap;
    const int auto54DB8560_ai = 1;
    const int auto76B09955_ae = 3;
    const int auto76B09955_ai = 1;
    const int autoBACFCE3B_ae = gv_generalLoadSlotCap;
    const int autoBACFCE3B_ai = 1;
    const int autoB59D35DD_ae = 3;
    const int autoB59D35DD_ai = 1;
    const int autoB4C1210A_ae = gv_generalLoadSlotCap;
    const int autoB4C1210A_ai = 1;
    const int auto1E3F4D70_ae = 10;
    const int auto1E3F4D70_ai = 1;
    playergroup auto59D29786_g;
    int auto59D29786_var;
    playergroup auto2DEB624E_g;
    int auto2DEB624E_var;
    playergroup auto568001D6_g;
    int auto568001D6_var;
    const int auto47140BC4_ae = gv_generalPlayerCap;
    const int auto47140BC4_ai = 1;

    // Variable Initialization
    lv_modeText = 1;

    // Implementation
    if ((TriggerIsEnabled(gt_BankVariablesCheck) == false)) {
        while (true) {
            SoundPlayForPlayer(SoundLink("SargerasLaugh", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
        }
    }

    TriggerExecute(gt_BankVariablesCheck, true, true);
    DialogSetVisible(gv_screenEffectsDialogBox, PlayerGroupAll(), true);
    Wait(3.0, c_timeGame);
    DialogSetTransparency(gv_newsDialogBox, 100.0);
    lv_index = 1;
    for ( ; ( (autoD6DEAB8A_ai >= 0 && lv_index <= autoD6DEAB8A_ae) || (autoD6DEAB8A_ai < 0 && lv_index >= autoD6DEAB8A_ae) ) ; lv_index += autoD6DEAB8A_ai ) {
        DialogSetTransparency(gv_newsDialogBox, (100 - (lv_index * 10)));
        Wait(0.1, c_timeGame);
    }
    libNtve_gf_SetDialogItemText(gv_newsDialogItems[2], StringExternal("Param/Value/CBCCA517"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(gv_newsDialogItems[2], true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_newsDialogItems[2], 6.0, PlayerGroupAll());
    Wait(5.0, c_timeGame);
    DialogSetTransparency(gv_modeDialogBox, 100.0);
    DialogSetVisible(gv_modeDialogBox, PlayerGroupAll(), true);
    lv_index = 1;
    for ( ; ( (autoA0C66D47_ai >= 0 && lv_index <= autoA0C66D47_ae) || (autoA0C66D47_ai < 0 && lv_index >= autoA0C66D47_ae) ) ; lv_index += autoA0C66D47_ai ) {
        DialogSetTransparency(gv_modeDialogBox, (100 - (lv_index * 10)));
        Wait(0.1, c_timeGame);
    }
    if ((gv_generalEndGameMode == true)) {
        lv_modeText = 2;
    }
    else {
        if ((gv_generalTutorialMode == true)) {
            lv_modeText = 3;
        }

    }
    libNtve_gf_SetDialogItemText(gv_modeDialogItems[2], gv_modeDialogText[lv_modeText], PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(gv_modeDialogItems[2], true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_modeDialogItems[2], 6.0, PlayerGroupAll());
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_RegionsUnitEntersGeneralRegion, true);
    TriggerEnable(gt_RegionsUnitLeavesGeneralRegion, true);
    TriggerEnable(gt_GeneralUnitTakesDamage, true);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("War3Music_Human2", -1), true, true);
    UnitBehaviorAdd(UnitFromId(877735969), "LifeRegenerationBuff", UnitFromId(877735969), 3);
    libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_Enemy);
    VisRevealerCreate(0, RegionFromId(5));
    VisRevealerCreate(0, RegionFromId(4));
    auto916943C9_g = GameAttributePlayersForTeam(1);
    auto916943C9_var = -1;
    while (true) {
        auto916943C9_var = PlayerGroupNextPlayer(auto916943C9_g, auto916943C9_var);
        if (auto916943C9_var < 0) { break; }
        PlayerGroupAdd(gv_generalTeamsAll, auto916943C9_var);
        libNtve_gf_SetAlliance(0, auto916943C9_var, libNtve_ge_AllianceSetting_Ally);
    }
    if ((gv_generalTutorialMode == false)) {
        TriggerExecute(gt_InitBetaTestersCheck, false, true);
    }

    auto59F5F1CF_g = gv_generalTeamsAll;
    auto59F5F1CF_var = -1;
    while (true) {
        auto59F5F1CF_var = PlayerGroupNextPlayer(auto59F5F1CF_g, auto59F5F1CF_var);
        if (auto59F5F1CF_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyCaster", 0, auto59F5F1CF_var, RegionRandomPoint(RegionFromId(30)));
        TCUI_SetCommandBarPetUnit(UnitLastCreated());
        UnitRemove(UnitLastCreated());
        VisRevealerCreate(auto59F5F1CF_var, RegionFromId(5));
        gv_regionsPlayerRevealer[auto59F5F1CF_var] = VisRevealerLastCreated();
        VisRevealerEnable(gv_regionsPlayerRevealer[auto59F5F1CF_var], false);
        PlayerOptionOverride(auto59F5F1CF_var, "gametooltips", "0");
        PlayerOptionOverride(auto59F5F1CF_var, "teamcoloredlifestatus", "0");
        PlayerOptionOverride(auto59F5F1CF_var, "selectuncontrolable", "1");
        PlayerOptionOverride(auto59F5F1CF_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto59F5F1CF_var, "showalerts", "0");
        PlayerOptionOverride(auto59F5F1CF_var, "displayunitstatus", "All");
        PlayerOptionOverride(auto59F5F1CF_var, "controlgroupmode", "1");
        PlayerOptionOverride(auto59F5F1CF_var, "showcurrentordermodel", "1");
        CameraPan(auto59F5F1CF_var, RegionGetCenter(RegionFromId(1)), 0.0, -1, 10.0, false);
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    if ((gv_generalTutorialMode == false)) {
        auto49466A13_g = gv_generalTeamsAll;
        auto49466A13_var = -1;
        while (true) {
            auto49466A13_var = PlayerGroupNextPlayer(auto49466A13_g, auto49466A13_var);
            if (auto49466A13_var < 0) { break; }
            lv_trigPlayer = auto49466A13_var;
            if ((BankExists(gv_banksBankName, auto49466A13_var) == true) && (BankExists(gv_banksBankName2, auto49466A13_var) == false)) {
                BankLoad(gv_banksBankName, auto49466A13_var);
                gv_banksPlayerBanks[auto49466A13_var] = BankLastCreated();
                lv_index2 = 1;
                for ( ; ( (auto6D5A9D1F_ai >= 0 && lv_index2 <= auto6D5A9D1F_ae) || (auto6D5A9D1F_ai < 0 && lv_index2 >= auto6D5A9D1F_ae) ) ; lv_index2 += auto6D5A9D1F_ai ) {
                    gv_banksTempStatistic[auto49466A13_var][lv_index2] = StringToInt(StringWord(BankValueGetAsString(gv_banksPlayerBanks[auto49466A13_var], IntToString(0), "Statistics"), (lv_index2 + 4)));
                }
                gv_banksTempStatistic[auto49466A13_var][30] = 1;
                lv_index = 0;
                for ( ; ( (autoE171F206_ai >= 0 && lv_index <= autoE171F206_ae) || (autoE171F206_ai < 0 && lv_index >= autoE171F206_ae) ) ; lv_index += autoE171F206_ai ) {
                    if ((BankSectionExists(gv_banksPlayerBanks[auto49466A13_var], IntToString(lv_index)) == true)) {
                        BankSectionRemove(gv_banksPlayerBanks[auto49466A13_var], IntToString(lv_index));
                    }

                }
                BankSave(gv_banksPlayerBanks[auto49466A13_var]);
                BankRemove(gv_banksPlayerBanks[auto49466A13_var]);
            }

            if ((BankExists(gv_banksBankName2, auto49466A13_var) == false)) {
                BankLoad(gv_banksBankName2, auto49466A13_var);
                gv_banksPlayerBanks[auto49466A13_var] = BankLastCreated();
                gv_banksFirstGame[auto49466A13_var] = true;
                lv_index2 = 1;
                for ( ; ( (auto0E20A4B3_ai >= 0 && lv_index2 <= auto0E20A4B3_ae) || (auto0E20A4B3_ai < 0 && lv_index2 >= auto0E20A4B3_ae) ) ; lv_index2 += auto0E20A4B3_ai ) {
                    gf_BankSaveBank(auto49466A13_var, lv_index2, 0);
                }
                gv_banksFirstGame[auto49466A13_var] = false;
            }
            else {
                BankLoad(gv_banksBankName2, auto49466A13_var);
                gv_banksPlayerBanks[auto49466A13_var] = BankLastCreated();
                if (true) {
                    lv_index = 1;
                    for ( ; ( (auto54DB8560_ai >= 0 && lv_index <= auto54DB8560_ae) || (auto54DB8560_ai < 0 && lv_index >= auto54DB8560_ae) ) ; lv_index += auto54DB8560_ai ) {
                        if ((BankSectionExists(gv_banksPlayerBanks[auto49466A13_var], IntToString(lv_index)) == true)) {
                            gv_banksHeroLevelExp[auto49466A13_var][lv_index] = StringToInt(StringWord(BankValueGetAsString(gv_banksPlayerBanks[auto49466A13_var], IntToString(lv_index), "Hero"), 17));
                            lv_index2 = 1;
                            for ( ; ( (auto76B09955_ai >= 0 && lv_index2 <= auto76B09955_ae) || (auto76B09955_ai < 0 && lv_index2 >= auto76B09955_ae) ) ; lv_index2 += auto76B09955_ai ) {
                                gv_banksHeroClassTierType[auto49466A13_var][lv_index][lv_index2] = StringToInt(StringWord(BankValueGetAsString(gv_banksPlayerBanks[auto49466A13_var], IntToString(lv_index), "Hero"), (lv_index2 + 0)));
                            }
                        }

                    }
                }

            }
            BankBackup(gv_banksPlayerBanks[auto49466A13_var], auto49466A13_var);
            lv_index = 1;
            for ( ; ( (autoBACFCE3B_ai >= 0 && lv_index <= autoBACFCE3B_ae) || (autoBACFCE3B_ai < 0 && lv_index >= autoBACFCE3B_ae) ) ; lv_index += autoBACFCE3B_ai ) {
                if ((gv_banksHeroClassTierType[lv_trigPlayer][lv_index][1] != 0)) {
                    lv_index2 = 1;
                    for ( ; ( (autoB59D35DD_ai >= 0 && lv_index2 <= autoB59D35DD_ae) || (autoB59D35DD_ai < 0 && lv_index2 >= autoB59D35DD_ae) ) ; lv_index2 += autoB59D35DD_ai ) {
                        lv_tempClassTierType[lv_index2] = gv_banksHeroClassTierType[lv_trigPlayer][lv_index][lv_index2];
                    }
                    libNtve_gf_SetDialogItemText(gv_heroLoadDialogHeroPortrait[lv_index][3], (StringExternal("Param/Value/FF33AE1B") + IntToText(gv_banksHeroLevelExp[lv_trigPlayer][lv_index])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_heroLoadDialogHeroPortrait[lv_index][1], (StringExternal("Param/Value/62A44B9D") + UnitTypeGetName(gv_heroesStatsUnitType[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemModel(gv_heroLoadDialogHeroPortrait[lv_index][2], ((gv_heroesStatsUnitType[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]])), PlayerGroupSingle(lv_trigPlayer));
                }

            }
        }
    }

    gf_DialogUsedParty(0, c_invalidDialogControlId);
    lv_index = 1;
    for ( ; ( (autoB4C1210A_ai >= 0 && lv_index <= autoB4C1210A_ae) || (autoB4C1210A_ai < 0 && lv_index >= autoB4C1210A_ae) ) ; lv_index += autoB4C1210A_ai ) {
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroLoadDialogHeroPortrait[lv_index][2]));
        PortraitSetRenderType(PortraitGetTriggerControl(gv_heroLoadDialogHeroPortrait[lv_index][2]), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(gv_heroLoadDialogHeroPortrait[lv_index][2]), "SetScale 0.450000 0.100000");
    }
    gf_PartyStartUpdate(0);
    DialogSetTransparency(gv_heroLoadDialogBox, 100.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][1], PlayerGroupAll(), 7.0, 100.0);
    DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupAll(), true);
    lv_index = 1;
    for ( ; ( (auto1E3F4D70_ai >= 0 && lv_index <= auto1E3F4D70_ae) || (auto1E3F4D70_ai < 0 && lv_index >= auto1E3F4D70_ae) ) ; lv_index += auto1E3F4D70_ai ) {
        DialogSetTransparency(gv_heroLoadDialogBox, (100 - (lv_index * 10)));
        Wait(0.1, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    DialogSetVisible(gv_partyStartDialogBox, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("ArtifactUlnarB_Crystal_Orange_StandWorkStart_A", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
    UnitBehaviorAdd(UnitFromId(680956088), "SpellDamageReduction", UnitFromId(680956088), 1);
    UnitBehaviorAdd(UnitFromId(680956088), "LegendaryMod", UnitFromId(680956088), 1);
    UnitBehaviorAdd(UnitFromId(680956088), "StunReduction3", UnitFromId(680956088), 1);
    UnitBehaviorAdd(UnitFromId(680956088), "StunReduction5", UnitFromId(680956088), 1);
    UnitBehaviorAdd(UnitFromId(680956088), "Heroic2", UnitFromId(680956088), 1);
    UnitBehaviorAdd(UnitFromId(680956088), "CreepCountReduction", UnitFromId(680956088), 5);
    UnitBehaviorAdd(UnitFromId(680956088), "Armor4", UnitFromId(680956088), 70);
    TimerStart(gv_legendaryDungeonTimer[1], 450.0, false, c_timeGame);
    gf_DungeonLegendaryUpdate(1);
    TimerStart(gv_legendaryDungeonTimer[2], 900.0, false, c_timeGame);
    gf_DungeonLegendaryUpdate(2);
    auto59D29786_g = gv_generalTeamsAll;
    auto59D29786_var = -1;
    while (true) {
        auto59D29786_var = PlayerGroupNextPlayer(auto59D29786_g, auto59D29786_var);
        if (auto59D29786_var < 0) { break; }
        TimerStart(gv_beastMasterPlayerTimer[auto59D29786_var], 10.0, false, c_timeGame);
    }
    Wait(90.0, c_timeGame);
    gf_InvasionEarlySpawn();
    Wait(240.0, c_timeGame);
    auto2DEB624E_g = gv_generalTeamsAll;
    auto2DEB624E_var = -1;
    while (true) {
        auto2DEB624E_var = PlayerGroupNextPlayer(auto2DEB624E_g, auto2DEB624E_var);
        if (auto2DEB624E_var < 0) { break; }
        if ((gv_banksLoadedIn[auto2DEB624E_var] == false)) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/63A863CA"), PlayerGroupSingle(auto2DEB624E_var));
        }

    }
    Wait(60.0, c_timeGame);
    DialogSetVisible(gv_partyStartDialogBox, PlayerGroupAll(), false);
    TimerStart(gv_generalPlayerRespawn, 300.0, true, c_timeGame);
    TimerStart(gv_raidsBossesTimer, 500.0, false, c_timeGame);
    if ((gv_invasionCurrentUpgradeCost == 0)) {
        lv_tempInt[0] = 0;
        lv_tempInt[1] = 1;
        auto568001D6_g = gv_generalTeamsAll;
        auto568001D6_var = -1;
        while (true) {
            auto568001D6_var = PlayerGroupNextPlayer(auto568001D6_g, auto568001D6_var);
            if (auto568001D6_var < 0) { break; }
            if ((gv_banksLoadedIn[auto568001D6_var] == false)) {
                KickFromGame(PlayerGroupSingle(auto568001D6_var));
            }
            else {
                lv_tempInt[0] += 1;
                lv_tempInt[1] += gv_playerHeroHeroLevelExp[auto568001D6_var][1];
            }
        }
        lv_tempInt[1] = (lv_tempInt[1] / lv_tempInt[0]);
        gv_invasionGoodUnitUpgradeCount += (lv_tempInt[1] + 0);
        gv_invasionBadUnitUpgradeCount += (lv_tempInt[1] + 0);
        gv_invasionCurrentUpgradeCost = FixedToInt((gv_invasionBaseUpgradeCost[gv_invasionGoodUnitUpgradeCount] * 1.0));
        gv_invasionCurrentUpgradeCost = FixedToInt(((gv_invasionCurrentUpgradeCost / 130) * gv_invasionFactorUpgradeCost));
        if ((gv_generalEndGameMode == true)) {
            gv_invasionCurrentUpgradeCost *= (115 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
        }
        else {
            gv_invasionCurrentUpgradeCost *= (100 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
        }
        libNtve_gf_SetBehaviorCount(UnitFromId(1384290393), "Upgrade", UnitFromId(1384290393), gv_invasionGoodUnitUpgradeCount);
        libNtve_gf_SetBehaviorCount(UnitFromId(70213988), "Upgrade", UnitFromId(70213988), gv_invasionGoodUnitUpgradeCount);
        libNtve_gf_SetBehaviorCount(UnitFromId(779392242), "Upgrade", UnitFromId(779392242), gv_invasionGoodUnitUpgradeCount);
        libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/FA2B9033") + IntToText(gv_invasionCurrentUpgradeCost)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_invasionDialogItems[2], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_invasionDialogItems[3], gv_invasionRiskAssessment[gv_invasionRisk], PlayerGroupAll());
        lv_index = 1;
        for ( ; ( (auto47140BC4_ai >= 0 && lv_index <= auto47140BC4_ae) || (auto47140BC4_ai < 0 && lv_index >= auto47140BC4_ae) ) ; lv_index += auto47140BC4_ai ) {
            if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index) == true)) {
                libNtve_gf_SetDialogItemText(gv_statisticsDialogPlayerButtons[lv_index][1], (StringExternal("Param/Value/5526319C") + TextWithColor(PlayerName(lv_index), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)))), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(gv_statisticsDialogPlayerButtons[lv_index][3], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)), PlayerGroupAll());
                DialogControlSetEnabled(gv_statisticsDialogPlayerButtons[lv_index][2], PlayerGroupAll(), true);
            }

        }
    }

}

void gf_BankSaveBank (int lp_trigPlayer, int lp_slot, int lp_type) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_trigPlayer;
    int lv_type;
    int lv_slot;
    string lv_tempString;
    int lv_tempCount;
    int lv_tempCount2;
    int lv_tempCount3;
    int lv_tempCount4;
    int lv_tempCount5;
    int lv_tempindex;
    int lv_protectIndex;

    // Automatic Variable Declarations
    const int autoC9E9B0C2_ae = 9;
    const int autoC9E9B0C2_ai = 1;
    const int auto8023CD6D_ae = 24;
    const int auto8023CD6D_ai = 1;
    const int auto958792F3_ae = 9;
    const int auto958792F3_ai = 1;
    const int auto28ECF465_ae = 4;
    const int auto28ECF465_ai = 1;
    const int autoCAA386F9_ae = 30;
    const int autoCAA386F9_ai = 1;
    const int auto0BF5D258_ae = 25;
    const int auto0BF5D258_ai = 1;
    const int auto6239F359_ae = 2;
    const int auto6239F359_ai = 1;
    const int auto69E0CDA4_ae = 16;
    const int auto69E0CDA4_ai = 1;
    const int auto58135489_ae = 5;
    const int auto58135489_ai = 1;
    const int autoBB9AAC27_ae = 12;
    const int autoBB9AAC27_ai = 1;
    const int auto3EA4BDB2_ae = 40;
    const int auto3EA4BDB2_ai = 1;
    const int autoE5578BB1_ae = 2;
    const int autoE5578BB1_ai = 1;
    const int auto473E7514_ae = 12;
    const int auto473E7514_ai = 1;
    const int autoBF23F35B_ae = 3;
    const int autoBF23F35B_ai = 1;
    const int auto2EA3F8E4_ae = 30;
    const int auto2EA3F8E4_ai = 1;
    const int auto6469BE0F_ae = 30;
    const int auto6469BE0F_ai = 1;
    const int autoF5C25370_ae = 30;
    const int autoF5C25370_ai = 1;
    const int auto7A77EF14_ae = 3;
    const int auto7A77EF14_ai = 1;
    const int autoA1DAD38B_ae = 5;
    const int autoA1DAD38B_ai = 1;
    const int auto511E9C52_ae = 5;
    const int auto511E9C52_ai = 1;
    const int auto8FFB3A6A_ae = 2;
    const int auto8FFB3A6A_ai = 1;
    const int auto88348C59_ae = 2;
    const int auto88348C59_ai = 1;
    const int auto48069357_ae = 2;
    const int auto48069357_ai = 1;
    const int auto2858AF57_ae = 10;
    const int auto2858AF57_ai = 1;
    const int auto134AF4B6_ae = 5;
    const int auto134AF4B6_ai = 1;
    const int auto8F28869B_ae = 10;
    const int auto8F28869B_ai = 1;
    const int auto9EB38DF9_ae = 9;
    const int auto9EB38DF9_ai = 1;
    const int autoD9025F99_ae = 30;
    const int autoD9025F99_ai = 1;
    const int auto6A739AC6_ae = 9;
    const int auto6A739AC6_ai = 1;
    const int autoBD049BEB_ae = gv_questsQuestSlots;
    const int autoBD049BEB_ai = 1;
    const int autoE1E02F32_ae = gv_questsQuestSlots;
    const int autoE1E02F32_ai = 1;
    const int auto80E8B66E_ae = 2;
    const int auto80E8B66E_ai = 1;
    const int auto3A1191AE_ae = 20;
    const int auto3A1191AE_ai = 1;
    const int auto45AFEFD3_ae = 200;
    const int auto45AFEFD3_ai = 1;
    const int auto9DC10F42_ae = 40;
    const int auto9DC10F42_ai = 1;
    const int auto2F3056E3_ae = 30;
    const int auto2F3056E3_ai = 1;
    const int auto1E4A38DB_ae = 30;
    const int auto1E4A38DB_ai = 1;
    const int auto65188DF1_ae = 30;
    const int auto65188DF1_ai = 1;
    const int auto51E3B133_ae = 30;
    const int auto51E3B133_ai = 1;
    const int auto7CA85BDF_ae = 25;
    const int auto7CA85BDF_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_type = lp_type;
    lv_slot = lp_slot;
    lv_tempString = "";
    lv_protectIndex = 4;

    // Implementation
    if ((gv_generalTutorialMode == false) && ((gv_banksFirstGame[lv_trigPlayer] == true) || (TimerGetRemaining(gv_banksTimer[lv_trigPlayer]) <= 0.1))) {
        TimerStart(gv_banksTimer[lv_trigPlayer], 1.0, false, c_timeGame);
    }
    else {
        return ;
    }
    gv_banksSaved[lv_trigPlayer] = false;
    if (((gv_banksCoughtCheating[lv_trigPlayer] == true) || ((GameIsOnline() == false) && (PlayerHandle(lv_trigPlayer) != "")))) {
        return ;
    }

    if (((TriggerIsEnabled(gt_BankVariablesCheck) == false) || ((GameIsOnline() == false) && (PlayerHandle(lv_trigPlayer) != "")) || ((GameIsOnline() == true) && (PlayerHandle(lv_trigPlayer) == "")))) {
        while (true) {
            SoundPlayForPlayer(SoundLink("SargerasLaugh", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
        }
    }

    if ((gv_banksFirstGame[lv_trigPlayer] == false) && (gv_banksLoadedIn[lv_trigPlayer] == false)) {
        return ;
    }

    if ((gv_banksFirstGame[lv_trigPlayer] == false) && (gv_banksLoadedIn[lv_trigPlayer] == true) && (lv_type != 1)) {
        gf_BankHardChecks(lv_trigPlayer);
    }
    else {
        gv_banksSaved[lv_trigPlayer] = true;
    }
    if ((gv_banksSaved[lv_trigPlayer] == true) && (lv_type != 1)) {
        lv_tempCount = 0;
        lv_tempindex = 0;
        lv_protectIndex = 1;
        lv_tempCount = 0;
        lv_tempCount2 = 0;
        lv_index3 = 1;
        for ( ; ( (autoC9E9B0C2_ai >= 0 && lv_index3 <= autoC9E9B0C2_ae) || (autoC9E9B0C2_ai < 0 && lv_index3 >= autoC9E9B0C2_ae) ) ; lv_index3 += autoC9E9B0C2_ai ) {
            lv_tempString = "";
            lv_index = 1;
            for ( ; ( (auto8023CD6D_ai >= 0 && lv_index <= auto8023CD6D_ae) || (auto8023CD6D_ai < 0 && lv_index >= auto8023CD6D_ae) ) ; lv_index += auto8023CD6D_ai ) {
                lv_tempindex += 1;
                lv_index2 = 1;
                for ( ; ( (auto958792F3_ai >= 0 && lv_index2 <= auto958792F3_ae) || (auto958792F3_ai < 0 && lv_index2 >= auto958792F3_ae) ) ; lv_index2 += auto958792F3_ai ) {
                    lv_tempString = ((lv_tempString + " ") + IntToString(gv_inventoryStashStats[lv_trigPlayer][lv_tempindex][lv_index2]));
                    if ((lv_tempCount > 10000000)) {
                        lv_tempCount = ModI(lv_tempCount, 1000000);
                    }

                    lv_tempCount += ((gv_inventoryStashStats[lv_trigPlayer][lv_tempindex][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                    lv_tempCount5 += ((gv_inventoryStashStats[lv_trigPlayer][lv_tempindex][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                    lv_protectIndex += 1;
                    if ((lv_protectIndex > 12)) {
                        lv_protectIndex = 0;
                    }

                }
            }
            BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), ("Stash" + IntToString(lv_index3)), lv_tempString);
        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Stash0", IntToString(lv_tempCount));
        lv_tempCount3 += lv_tempCount;
    }

    if ((gv_banksSaved[lv_trigPlayer] == true) && (lv_type != 1)) {
        lv_protectIndex = 7;
        lv_tempString = "";
        lv_tempCount = 0;
        lv_index = 1;
        for ( ; ( (auto28ECF465_ai >= 0 && lv_index <= auto28ECF465_ae) || (auto28ECF465_ai < 0 && lv_index >= auto28ECF465_ae) ) ; lv_index += auto28ECF465_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerCurrency[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 100000)) {
                lv_tempCount = ModI(lv_tempCount, 10000);
            }

            lv_tempCount += ((gv_playerCurrency[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerCurrency[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (autoCAA386F9_ai >= 0 && lv_index <= autoCAA386F9_ae) || (autoCAA386F9_ai < 0 && lv_index >= autoCAA386F9_ae) ) ; lv_index += autoCAA386F9_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsGeneral[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((gv_playerStatisticsGeneral[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerStatisticsGeneral[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2] = CurrentSynchronousGameTimeGet();
        lv_index = 1;
        for ( ; ( (auto0BF5D258_ai >= 0 && lv_index <= auto0BF5D258_ae) || (auto0BF5D258_ai < 0 && lv_index >= auto0BF5D258_ae) ) ; lv_index += auto0BF5D258_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto6239F359_ai >= 0 && lv_index2 <= auto6239F359_ae) || (auto6239F359_ai < 0 && lv_index2 >= auto6239F359_ae) ) ; lv_index2 += auto6239F359_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (auto69E0CDA4_ai >= 0 && lv_index <= auto69E0CDA4_ae) || (auto69E0CDA4_ai < 0 && lv_index >= auto69E0CDA4_ae) ) ; lv_index += auto69E0CDA4_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto58135489_ai >= 0 && lv_index <= auto58135489_ae) || (auto58135489_ai < 0 && lv_index >= auto58135489_ae) ) ; lv_index += auto58135489_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoBB9AAC27_ai >= 0 && lv_index2 <= autoBB9AAC27_ae) || (autoBB9AAC27_ai < 0 && lv_index2 >= autoBB9AAC27_ae) ) ; lv_index2 += autoBB9AAC27_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsHats[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((gv_playerStatisticsHats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((gv_playerStatisticsHats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics", lv_tempString);
        lv_tempString = "";
        lv_index = 1;
        for ( ; ( (auto3EA4BDB2_ai >= 0 && lv_index <= auto3EA4BDB2_ae) || (auto3EA4BDB2_ai < 0 && lv_index >= auto3EA4BDB2_ae) ) ; lv_index += auto3EA4BDB2_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoE5578BB1_ai >= 0 && lv_index2 <= autoE5578BB1_ae) || (autoE5578BB1_ai < 0 && lv_index2 >= autoE5578BB1_ae) ) ; lv_index2 += autoE5578BB1_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000);
                }

                lv_tempCount += ((gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (auto473E7514_ai >= 0 && lv_index <= auto473E7514_ae) || (auto473E7514_ai < 0 && lv_index >= auto473E7514_ae) ) ; lv_index += auto473E7514_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoBF23F35B_ai >= 0 && lv_index2 <= autoBF23F35B_ae) || (autoBF23F35B_ai < 0 && lv_index2 >= autoBF23F35B_ae) ) ; lv_index2 += autoBF23F35B_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsDungeonsCleared[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((gv_playerStatisticsDungeonsCleared[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((gv_playerStatisticsDungeonsCleared[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (auto2EA3F8E4_ai >= 0 && lv_index <= auto2EA3F8E4_ae) || (auto2EA3F8E4_ai < 0 && lv_index >= auto2EA3F8E4_ae) ) ; lv_index += auto2EA3F8E4_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsBeastmasterCleared[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerStatisticsBeastmasterCleared[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerStatisticsBeastmasterCleared[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto6469BE0F_ai >= 0 && lv_index <= auto6469BE0F_ae) || (auto6469BE0F_ai < 0 && lv_index >= auto6469BE0F_ae) ) ; lv_index += auto6469BE0F_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsRaidBossCleared[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((gv_playerStatisticsRaidBossCleared[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerStatisticsRaidBossCleared[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (autoF5C25370_ai >= 0 && lv_index <= autoF5C25370_ae) || (autoF5C25370_ai < 0 && lv_index >= autoF5C25370_ae) ) ; lv_index += autoF5C25370_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerStatisticsBackup[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((gv_playerStatisticsBackup[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((gv_playerStatisticsBackup[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount3 += lv_tempCount;
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics2", lv_tempString);
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics0", IntToString(lv_tempCount));
    }

    if ((gv_banksSaved[lv_trigPlayer] == true)) {
        lv_protectIndex = 3;
        lv_tempCount = 0;
        lv_tempString = "";
        lv_index = 1;
        for ( ; ( (auto7A77EF14_ai >= 0 && lv_index <= auto7A77EF14_ae) || (auto7A77EF14_ai < 0 && lv_index >= auto7A77EF14_ae) ) ; lv_index += auto7A77EF14_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (autoA1DAD38B_ai >= 0 && lv_index <= autoA1DAD38B_ae) || (autoA1DAD38B_ai < 0 && lv_index >= autoA1DAD38B_ae) ) ; lv_index += autoA1DAD38B_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroStats[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroStats[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroStats[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto511E9C52_ai >= 0 && lv_index <= auto511E9C52_ae) || (auto511E9C52_ai < 0 && lv_index >= auto511E9C52_ae) ) ; lv_index += auto511E9C52_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto8FFB3A6A_ai >= 0 && lv_index <= auto8FFB3A6A_ae) || (auto8FFB3A6A_ai < 0 && lv_index >= auto8FFB3A6A_ae) ) ; lv_index += auto8FFB3A6A_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroLevelExp[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroLevelExp[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroLevelExp[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto88348C59_ai >= 0 && lv_index <= auto88348C59_ae) || (auto88348C59_ai < 0 && lv_index >= auto88348C59_ae) ) ; lv_index += auto88348C59_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto48069357_ai >= 0 && lv_index <= auto48069357_ae) || (auto48069357_ai < 0 && lv_index >= auto48069357_ae) ) ; lv_index += auto48069357_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroGuild[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroGuild[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroGuild[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto2858AF57_ai >= 0 && lv_index <= auto2858AF57_ae) || (auto2858AF57_ai < 0 && lv_index >= auto2858AF57_ae) ) ; lv_index += auto2858AF57_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount2 += lv_tempCount;
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero", lv_tempString);
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero0", IntToString(lv_tempCount));
    }

    if ((gv_banksSaved[lv_trigPlayer] == true)) {
        lv_tempCount = 0;
        lv_tempString = "";
        gv_inventoryPotionStats[lv_trigPlayer][3] = FixedToInt(UnitAbilityChargeInfo(gv_playerHeroHero[lv_trigPlayer], AbilityCommand("Potion", 0), c_unitAbilChargeCountLeft));
        if ((gv_inventoryPotionStats[lv_trigPlayer][3] == 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == true)) {
            UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
        }
        else {
            if ((gv_inventoryPotionStats[lv_trigPlayer][3] > 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == false)) {
                UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
            }

        }
        lv_index = 1;
        for ( ; ( (auto134AF4B6_ai >= 0 && lv_index <= auto134AF4B6_ae) || (auto134AF4B6_ai < 0 && lv_index >= auto134AF4B6_ae) ) ; lv_index += auto134AF4B6_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_inventoryPotionStats[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_inventoryPotionStats[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_inventoryPotionStats[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Potion", lv_tempString);
        lv_tempString = "";
        lv_index = 1;
        for ( ; ( (auto8F28869B_ai >= 0 && lv_index <= auto8F28869B_ae) || (auto8F28869B_ai < 0 && lv_index >= auto8F28869B_ae) ) ; lv_index += auto8F28869B_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto9EB38DF9_ai >= 0 && lv_index2 <= auto9EB38DF9_ae) || (auto9EB38DF9_ai < 0 && lv_index2 >= auto9EB38DF9_ae) ) ; lv_index2 += auto9EB38DF9_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_inventoryEquippedStats[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Equipped", lv_tempString);
        lv_tempString = "";
        lv_index = 1;
        for ( ; ( (autoD9025F99_ai >= 0 && lv_index <= autoD9025F99_ae) || (autoD9025F99_ai < 0 && lv_index >= autoD9025F99_ae) ) ; lv_index += autoD9025F99_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto6A739AC6_ai >= 0 && lv_index2 <= auto6A739AC6_ae) || (auto6A739AC6_ai < 0 && lv_index2 >= auto6A739AC6_ae) ) ; lv_index2 += auto6A739AC6_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 100000)) {
                    lv_tempCount = ModI(lv_tempCount, 10000);
                }

                lv_tempCount += ((gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_tempCount2 += lv_tempCount;
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Pack", lv_tempString);
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Items0", IntToString(lv_tempCount));
    }

    if ((gv_banksSaved[lv_trigPlayer] == true)) {
        lv_tempString = "";
        lv_tempCount = 0;
        lv_index = 1;
        for ( ; ( (autoBD049BEB_ai >= 0 && lv_index <= autoBD049BEB_ae) || (autoBD049BEB_ai < 0 && lv_index >= autoBD049BEB_ae) ) ; lv_index += autoBD049BEB_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (autoE1E02F32_ai >= 0 && lv_index <= autoE1E02F32_ae) || (autoE1E02F32_ai < 0 && lv_index >= autoE1E02F32_ae) ) ; lv_index += autoE1E02F32_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto80E8B66E_ai >= 0 && lv_index2 <= auto80E8B66E_ae) || (auto80E8B66E_ai < 0 && lv_index2 >= auto80E8B66E_ae) ) ; lv_index2 += auto80E8B66E_ai ) {
                lv_tempString = ((lv_tempString + " ") + IntToString(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2]));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 1;
        for ( ; ( (auto3A1191AE_ai >= 0 && lv_index <= auto3A1191AE_ae) || (auto3A1191AE_ai < 0 && lv_index >= auto3A1191AE_ae) ) ; lv_index += auto3A1191AE_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto45AFEFD3_ai >= 0 && lv_index <= auto45AFEFD3_ae) || (auto45AFEFD3_ai < 0 && lv_index >= auto45AFEFD3_ae) ) ; lv_index += auto45AFEFD3_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_questsPlayerProgress[lv_trigPlayer][lv_index]));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount2 += lv_tempCount;
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Quests", lv_tempString);
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Quests0", IntToString(lv_tempCount));
    }

    if ((gv_banksSaved[lv_trigPlayer] == true) && ((gv_banksFirstGame[lv_trigPlayer] == false) || ((gv_banksFirstGame[lv_trigPlayer] == true) && (lp_slot == gv_generalLoadSlotCap)))) {
        lv_protectIndex = 9;
        if ((gv_banksHandle[lv_trigPlayer] == "")) {
            lv_tempString = PlayerHandle(lv_trigPlayer);
        }
        else {
            lv_tempString = gv_banksHandle[lv_trigPlayer];
        }
        lv_index3 = 1;
        lv_index = 1;
        for ( ; ( (auto9DC10F42_ai >= 0 && lv_index <= auto9DC10F42_ae) || (auto9DC10F42_ai < 0 && lv_index >= auto9DC10F42_ae) ) ; lv_index += auto9DC10F42_ai ) {
            if ((StringSub(lv_tempString, lv_index, lv_index) != "") && ((StringSub(lv_tempString, lv_index, lv_index) == "1") || (StringSub(lv_tempString, lv_index, lv_index) == "3") || (StringSub(lv_tempString, lv_index, lv_index) == "4") || (StringSub(lv_tempString, lv_index, lv_index) == "7") || (StringSub(lv_tempString, lv_index, lv_index) == "8"))) {
                lv_tempCount2 *= lv_index3;
                lv_tempCount4 *= lv_index3;
                if ((lv_tempCount2 > 10000000)) {
                    lv_tempCount2 = ModI(lv_tempCount2, 1000000);
                }

                if ((lv_type != 1)) {
                    lv_tempCount3 *= lv_index3;
                    lv_tempCount5 *= lv_index3;
                    if ((lv_tempCount3 > 10000000)) {
                        lv_tempCount3 = ModI(lv_tempCount3, 1000000);
                    }

                }

                lv_index3 += StringToInt(StringSub(lv_tempString, lv_index, lv_index));
            }

        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Encrypt", IntToString(lv_tempCount2));
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Encrypt2", IntToString(lv_tempCount4));
        if ((lv_type != 1)) {
            BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Encrypt", IntToString(lv_tempCount3));
            BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Encrypt2", IntToString(lv_tempCount5));
        }

    }

    if ((gv_banksSaved[lv_trigPlayer] == true) && (lv_type != 1)) {
        lv_protectIndex = 7;
        lv_tempString = "";
        lv_tempCount = gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2];
        lv_tempCount2 = gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2];
        lv_index = 1;
        for ( ; ( (auto2F3056E3_ai >= 0 && lv_index <= auto2F3056E3_ae) || (auto2F3056E3_ai < 0 && lv_index >= auto2F3056E3_ae) ) ; lv_index += auto2F3056E3_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerEmptyField1[lv_trigPlayer][lv_index]));
            lv_tempCount += ((gv_playerEmptyField1[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto1E4A38DB_ai >= 0 && lv_index <= auto1E4A38DB_ae) || (auto1E4A38DB_ai < 0 && lv_index >= auto1E4A38DB_ae) ) ; lv_index += auto1E4A38DB_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerEmptyField2[lv_trigPlayer][lv_index]));
            lv_tempCount += ((gv_playerEmptyField2[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto65188DF1_ai >= 0 && lv_index <= auto65188DF1_ae) || (auto65188DF1_ai < 0 && lv_index >= auto65188DF1_ae) ) ; lv_index += auto65188DF1_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerEmptyField3[lv_trigPlayer][lv_index]));
            lv_tempCount += ((gv_playerEmptyField3[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto51E3B133_ai >= 0 && lv_index <= auto51E3B133_ae) || (auto51E3B133_ai < 0 && lv_index >= auto51E3B133_ae) ) ; lv_index += auto51E3B133_ai ) {
            lv_tempString = ((lv_tempString + " ") + IntToString(gv_playerEmptyField4[lv_trigPlayer][lv_index]));
            lv_tempCount += ((gv_playerEmptyField4[lv_trigPlayer][lv_index] + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount += lv_tempCount3;
        lv_tempCount += lv_tempCount5;
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "FutureSpace1", lv_tempString);
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "FutureSpace2", IntToString(lv_tempCount));
        lv_tempString = IntToString(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2]);
        lv_index = 1;
        for ( ; ( (auto7CA85BDF_ai >= 0 && lv_index <= auto7CA85BDF_ae) || (auto7CA85BDF_ai < 0 && lv_index >= auto7CA85BDF_ae) ) ; lv_index += auto7CA85BDF_ai ) {
            if ((StringSub(lv_tempString, lv_index, lv_index) != "")) {
                lv_index3 = 1;
                lv_index3 += StringToInt(StringSub(lv_tempString, lv_index, lv_index));
                lv_tempCount -= StringToInt(StringSub(lv_tempString, lv_index, lv_index));
                lv_tempCount *= lv_index3;
            }

        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Carrot1", IntToString(lv_tempCount));
        if ((gv_banksHandle[lv_trigPlayer] == "")) {
            lv_tempString = PlayerHandle(lv_trigPlayer);
        }
        else {
            lv_tempString = gv_banksHandle[lv_trigPlayer];
        }
        BankValueSetFromString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Enc", lib13390EF9_gf_CBCEncrypt(IntToString(lv_tempCount), lv_tempString));
    }

    if ((gv_banksSaved[lv_trigPlayer] == true)) {
        BankSave(gv_banksPlayerBanks[lv_trigPlayer]);
        gf_DialogUsedHeroAchievements(lv_trigPlayer, gv_achievementsDialogMainButtons[2], 2);
    }

}

void gf_BankLoadBank30 (int lp_trigPlayer, int lp_slot) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_trigPlayer;
    int lv_slot;
    string lv_tempString;
    string lv_tempString2;
    string lv_tempString3;
    string lv_tempString4;
    int lv_count;
    int lv_tempCount;
    int lv_tempCount2;
    int lv_tempCount3;
    int lv_tempCount4;
    int lv_tempCount5;
    int lv_tempIndex;
    bool lv_passFail;
    int lv_protectIndex;

    // Automatic Variable Declarations
    const int auto9C57ABD0_ae = 9;
    const int auto9C57ABD0_ai = 1;
    const int autoED5B6592_ae = 24;
    const int autoED5B6592_ai = 1;
    const int auto103577EA_ae = 9;
    const int auto103577EA_ai = 1;
    const int autoA6E48805_ae = 4;
    const int autoA6E48805_ai = 1;
    const int auto1B49B59B_ae = 30;
    const int auto1B49B59B_ai = 1;
    const int autoB54441DA_ae = 25;
    const int autoB54441DA_ai = 1;
    const int autoD2552F7D_ae = 2;
    const int autoD2552F7D_ai = 1;
    const int auto0A8B3BA4_ae = 16;
    const int auto0A8B3BA4_ai = 1;
    const int auto12940C86_ae = 5;
    const int auto12940C86_ai = 1;
    const int auto14891276_ae = 12;
    const int auto14891276_ai = 1;
    const int auto1D753BBC_ae = 40;
    const int auto1D753BBC_ai = 1;
    const int auto15BFFC77_ae = 2;
    const int auto15BFFC77_ai = 1;
    const int autoE6C3E371_ae = 12;
    const int autoE6C3E371_ai = 1;
    const int autoFCE36D63_ae = 3;
    const int autoFCE36D63_ai = 1;
    const int auto6A9B9046_ae = 30;
    const int auto6A9B9046_ai = 1;
    const int autoA81CFD2C_ae = 30;
    const int autoA81CFD2C_ai = 1;
    const int auto1444533E_ae = 30;
    const int auto1444533E_ai = 1;
    const int auto0AB7044A_ae = 3;
    const int auto0AB7044A_ai = 1;
    const int autoD695554C_ae = 5;
    const int autoD695554C_ai = 1;
    const int autoD5EFFC2F_ae = 5;
    const int autoD5EFFC2F_ai = 1;
    const int auto8092C845_ae = 2;
    const int auto8092C845_ai = 1;
    const int auto42BA9A17_ae = 2;
    const int auto42BA9A17_ai = 1;
    const int auto9D6BE7BA_ae = 2;
    const int auto9D6BE7BA_ai = 1;
    const int auto2F0ABD95_ae = 10;
    const int auto2F0ABD95_ai = 1;
    const int autoAEE551C8_ae = 5;
    const int autoAEE551C8_ai = 1;
    const int auto25B34584_ae = 10;
    const int auto25B34584_ai = 1;
    const int autoE4C0ED00_ae = 9;
    const int autoE4C0ED00_ai = 1;
    const int auto2184CB58_ae = 30;
    const int auto2184CB58_ai = 1;
    const int autoBED7C3AA_ae = 9;
    const int autoBED7C3AA_ai = 1;
    const int auto21B3FB51_ae = gv_questsQuestSlots;
    const int auto21B3FB51_ai = 1;
    const int autoDDBF8A92_ae = gv_questsQuestSlots;
    const int autoDDBF8A92_ai = 1;
    const int auto8B9C9C44_ae = 2;
    const int auto8B9C9C44_ai = 1;
    const int auto5E805CE7_ae = 20;
    const int auto5E805CE7_ai = 1;
    const int auto417EC264_ae = 200;
    const int auto417EC264_ai = 1;
    const int auto76D89F04_ae = 20;
    const int auto76D89F04_ai = 1;
    const int autoC4D22036_ae = 30;
    const int autoC4D22036_ai = 1;
    const int autoE02A2654_ae = 30;
    const int autoE02A2654_ai = 1;
    const int auto4978F44E_ae = 30;
    const int auto4978F44E_ai = 1;
    const int auto9FC2D8B3_ae = 30;
    const int auto9FC2D8B3_ai = 1;
    const int auto33307635_ae = 25;
    const int auto33307635_ai = 1;

    // Variable Initialization
    lv_tempString = "";
    lv_tempString2 = "";
    lv_tempString3 = "";
    lv_tempString4 = "";
    lv_passFail = true;
    lv_protectIndex = 4;

    // Implementation
    if ((TriggerIsEnabled(gt_BankVariablesCheck) == false) && (((GameIsOnline() == false) && (GameIsTestMap(false) == false) && (PlayerHandle(lv_trigPlayer) != "")))) {
        while (true) {
            SoundPlayForPlayer(SoundLink("SargerasLaugh", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
        }
    }

    if ((gv_generalTutorialMode == true)) {
        return ;
    }

    lv_trigPlayer = lp_trigPlayer;
    lv_slot = lp_slot;
    if (true) {
        lv_tempCount = 0;
        lv_protectIndex = 1;
        lv_tempIndex = 0;
        lv_index3 = 1;
        for ( ; ( (auto9C57ABD0_ai >= 0 && lv_index3 <= auto9C57ABD0_ae) || (auto9C57ABD0_ai < 0 && lv_index3 >= auto9C57ABD0_ae) ) ; lv_index3 += auto9C57ABD0_ai ) {
            lv_count = 0;
            lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), ("Stash" + IntToString(lv_index3)));
            lv_index = 1;
            for ( ; ( (autoED5B6592_ai >= 0 && lv_index <= autoED5B6592_ae) || (autoED5B6592_ai < 0 && lv_index >= autoED5B6592_ae) ) ; lv_index += autoED5B6592_ai ) {
                lv_tempIndex += 1;
                lv_index2 = 1;
                for ( ; ( (auto103577EA_ai >= 0 && lv_index2 <= auto103577EA_ae) || (auto103577EA_ai < 0 && lv_index2 >= auto103577EA_ae) ) ; lv_index2 += auto103577EA_ai ) {
                    lv_count += 1;
                    gv_inventoryStashStats[lv_trigPlayer][lv_tempIndex][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                    if ((lv_tempCount > 10000000)) {
                        lv_tempCount = ModI(lv_tempCount, 1000000);
                    }

                    lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                    lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                    lv_protectIndex += 1;
                    if ((lv_protectIndex > 12)) {
                        lv_protectIndex = 0;
                    }

                }
                if ((gv_inventoryStashStats[lv_trigPlayer][lv_tempIndex][1] >= 1)) {
                    gf_BankItemLoading(lv_trigPlayer, 3, lv_tempIndex);
                }

            }
        }
        lv_tempCount3 += lv_tempCount;
        gv_banksCheck[lv_trigPlayer][3][1] = lv_tempCount;
        gv_banksCheck[lv_trigPlayer][3][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Stash0"));
        if ((gv_banksCheck[lv_trigPlayer][3][1] != gv_banksCheck[lv_trigPlayer][3][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/60D2B4F8"), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Chicken", 0, lv_trigPlayer, RegionGetCenter(RegionFromId(1)));
            lv_passFail = false;
        }

    }

    if (true) {
        lv_protectIndex = 7;
        lv_count = 0;
        lv_tempCount = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics");
        lv_index = 1;
        for ( ; ( (autoA6E48805_ai >= 0 && lv_index <= autoA6E48805_ae) || (autoA6E48805_ai < 0 && lv_index >= autoA6E48805_ae) ) ; lv_index += autoA6E48805_ai ) {
            lv_count += 1;
            gv_playerCurrency[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 100000)) {
                lv_tempCount = ModI(lv_tempCount, 10000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto1B49B59B_ai >= 0 && lv_index <= auto1B49B59B_ae) || (auto1B49B59B_ai < 0 && lv_index >= auto1B49B59B_ae) ) ; lv_index += auto1B49B59B_ai ) {
            lv_count += 1;
            gv_playerStatisticsGeneral[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (autoB54441DA_ai >= 0 && lv_index <= autoB54441DA_ae) || (autoB54441DA_ai < 0 && lv_index >= autoB54441DA_ae) ) ; lv_index += autoB54441DA_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoD2552F7D_ai >= 0 && lv_index2 <= autoD2552F7D_ae) || (autoD2552F7D_ai < 0 && lv_index2 >= autoD2552F7D_ae) ) ; lv_index2 += autoD2552F7D_ai ) {
                lv_count += 1;
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (auto0A8B3BA4_ai >= 0 && lv_index <= auto0A8B3BA4_ae) || (auto0A8B3BA4_ai < 0 && lv_index >= auto0A8B3BA4_ae) ) ; lv_index += auto0A8B3BA4_ai ) {
            lv_count += 1;
            gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto12940C86_ai >= 0 && lv_index <= auto12940C86_ae) || (auto12940C86_ai < 0 && lv_index >= auto12940C86_ae) ) ; lv_index += auto12940C86_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto14891276_ai >= 0 && lv_index2 <= auto14891276_ae) || (auto14891276_ai < 0 && lv_index2 >= auto14891276_ae) ) ; lv_index2 += auto14891276_ai ) {
                lv_count += 1;
                gv_playerStatisticsHats[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 1000000)) {
                    lv_tempCount = ModI(lv_tempCount, 100000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics2");
        lv_count = 0;
        lv_index = 1;
        for ( ; ( (auto1D753BBC_ai >= 0 && lv_index <= auto1D753BBC_ae) || (auto1D753BBC_ai < 0 && lv_index >= auto1D753BBC_ae) ) ; lv_index += auto1D753BBC_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto15BFFC77_ai >= 0 && lv_index2 <= auto15BFFC77_ae) || (auto15BFFC77_ai < 0 && lv_index2 >= auto15BFFC77_ae) ) ; lv_index2 += auto15BFFC77_ai ) {
                lv_count += 1;
                gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 10000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (autoE6C3E371_ai >= 0 && lv_index <= autoE6C3E371_ae) || (autoE6C3E371_ai < 0 && lv_index >= autoE6C3E371_ae) ) ; lv_index += autoE6C3E371_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoFCE36D63_ai >= 0 && lv_index2 <= autoFCE36D63_ae) || (autoFCE36D63_ai < 0 && lv_index2 >= autoFCE36D63_ae) ) ; lv_index2 += autoFCE36D63_ai ) {
                lv_count += 1;
                gv_playerStatisticsDungeonsCleared[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        lv_index = 0;
        for ( ; ( (auto6A9B9046_ai >= 0 && lv_index <= auto6A9B9046_ae) || (auto6A9B9046_ai < 0 && lv_index >= auto6A9B9046_ae) ) ; lv_index += auto6A9B9046_ai ) {
            lv_count += 1;
            gv_playerStatisticsBeastmasterCleared[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (autoA81CFD2C_ai >= 0 && lv_index <= autoA81CFD2C_ae) || (autoA81CFD2C_ai < 0 && lv_index >= autoA81CFD2C_ae) ) ; lv_index += autoA81CFD2C_ai ) {
            lv_count += 1;
            gv_playerStatisticsRaidBossCleared[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto1444533E_ai >= 0 && lv_index <= auto1444533E_ae) || (auto1444533E_ai < 0 && lv_index >= auto1444533E_ae) ) ; lv_index += auto1444533E_ai ) {
            lv_count += 1;
            gv_playerStatisticsBackup[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount5 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount3 += lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics0"));
        if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/B981DCE0"), PlayerGroupSingle(lv_trigPlayer));
            lv_passFail = false;
        }

    }

    if ((lv_slot != 0)) {
        lv_protectIndex = 3;
        lv_count = 0;
        lv_tempCount = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero");
        lv_index = 1;
        for ( ; ( (auto0AB7044A_ai >= 0 && lv_index <= auto0AB7044A_ae) || (auto0AB7044A_ai < 0 && lv_index >= auto0AB7044A_ae) ) ; lv_index += auto0AB7044A_ai ) {
            lv_count += 1;
            gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (autoD695554C_ai >= 0 && lv_index <= autoD695554C_ae) || (autoD695554C_ai < 0 && lv_index >= autoD695554C_ae) ) ; lv_index += autoD695554C_ai ) {
            lv_count += 1;
            gv_playerHeroHeroStats[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (autoD5EFFC2F_ai >= 0 && lv_index <= autoD5EFFC2F_ae) || (autoD5EFFC2F_ai < 0 && lv_index >= autoD5EFFC2F_ae) ) ; lv_index += autoD5EFFC2F_ai ) {
            lv_count += 1;
            gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 1000000)) {
                lv_tempCount = ModI(lv_tempCount, 100000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto8092C845_ai >= 0 && lv_index <= auto8092C845_ae) || (auto8092C845_ai < 0 && lv_index >= auto8092C845_ae) ) ; lv_index += auto8092C845_ai ) {
            lv_count += 1;
            gv_playerHeroHeroLevelExp[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto42BA9A17_ai >= 0 && lv_index <= auto42BA9A17_ae) || (auto42BA9A17_ai < 0 && lv_index >= auto42BA9A17_ae) ) ; lv_index += auto42BA9A17_ai ) {
            lv_count += 1;
            gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto9D6BE7BA_ai >= 0 && lv_index <= auto9D6BE7BA_ae) || (auto9D6BE7BA_ai < 0 && lv_index >= auto9D6BE7BA_ae) ) ; lv_index += auto9D6BE7BA_ai ) {
            lv_count += 1;
            gv_playerHeroHeroGuild[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (auto2F0ABD95_ai >= 0 && lv_index <= auto2F0ABD95_ae) || (auto2F0ABD95_ai < 0 && lv_index >= auto2F0ABD95_ae) ) ; lv_index += auto2F0ABD95_ai ) {
            lv_count += 1;
            gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount2 += lv_tempCount;
        gv_banksCheck[lv_trigPlayer][1][1] = lv_tempCount;
        gv_banksCheck[lv_trigPlayer][1][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero0"));
        if ((gv_banksCheck[lv_trigPlayer][1][1] != gv_banksCheck[lv_trigPlayer][1][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/6F566260"), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Chicken", 0, lv_trigPlayer, RegionGetCenter(RegionFromId(1)));
            lv_passFail = false;
        }

    }

    if ((lv_slot != 0)) {
        lv_tempCount = 0;
        lv_count = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Potion");
        lv_index = 1;
        for ( ; ( (autoAEE551C8_ai >= 0 && lv_index <= autoAEE551C8_ae) || (autoAEE551C8_ai < 0 && lv_index >= autoAEE551C8_ae) ) ; lv_index += autoAEE551C8_ai ) {
            lv_count += 1;
            gv_inventoryPotionStats[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        if ((gv_inventoryPotionStats[lv_trigPlayer][3] == 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == true)) {
            UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
            UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
        }
        else {
            if ((gv_inventoryPotionStats[lv_trigPlayer][3] > 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == false)) {
                UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
                UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
            }

        }
        lv_count = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Equipped");
        lv_index = 1;
        for ( ; ( (auto25B34584_ai >= 0 && lv_index <= auto25B34584_ae) || (auto25B34584_ai < 0 && lv_index >= auto25B34584_ae) ) ; lv_index += auto25B34584_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoE4C0ED00_ai >= 0 && lv_index2 <= autoE4C0ED00_ae) || (autoE4C0ED00_ai < 0 && lv_index2 >= autoE4C0ED00_ae) ) ; lv_index2 += autoE4C0ED00_ai ) {
                lv_count += 1;
                gv_inventoryEquippedStats[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] >= 0) && (lv_index < 11)) {
                gf_BankItemLoading(lv_trigPlayer, 1, lv_index);
            }

        }
        lv_count = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Pack");
        lv_index = 1;
        for ( ; ( (auto2184CB58_ai >= 0 && lv_index <= auto2184CB58_ae) || (auto2184CB58_ai < 0 && lv_index >= auto2184CB58_ae) ) ; lv_index += auto2184CB58_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoBED7C3AA_ai >= 0 && lv_index2 <= autoBED7C3AA_ae) || (autoBED7C3AA_ai < 0 && lv_index2 >= autoBED7C3AA_ae) ) ; lv_index2 += autoBED7C3AA_ai ) {
                lv_count += 1;
                gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 100000)) {
                    lv_tempCount = ModI(lv_tempCount, 10000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] >= 0)) {
                gf_BankItemLoading(lv_trigPlayer, 2, lv_index);
            }

        }
        lv_tempCount2 += lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Items0"));
        if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/71BB07D3"), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Chicken", 0, lv_trigPlayer, RegionGetCenter(RegionFromId(1)));
            lv_passFail = false;
        }

    }

    if ((lv_slot != 0)) {
        lv_count = 0;
        lv_tempCount = 0;
        lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Quests");
        lv_index = 1;
        for ( ; ( (auto21B3FB51_ai >= 0 && lv_index <= auto21B3FB51_ae) || (auto21B3FB51_ai < 0 && lv_index >= auto21B3FB51_ae) ) ; lv_index += auto21B3FB51_ai ) {
            lv_count += 1;
            gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 1;
        for ( ; ( (autoDDBF8A92_ai >= 0 && lv_index <= autoDDBF8A92_ae) || (autoDDBF8A92_ai < 0 && lv_index >= autoDDBF8A92_ae) ) ; lv_index += autoDDBF8A92_ai ) {
            lv_index2 = 1;
            for ( ; ( (auto8B9C9C44_ai >= 0 && lv_index2 <= auto8B9C9C44_ae) || (auto8B9C9C44_ai < 0 && lv_index2 >= auto8B9C9C44_ae) ) ; lv_index2 += auto8B9C9C44_ai ) {
                lv_count += 1;
                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] = StringToInt(StringWord(lv_tempString, lv_count));
                if ((lv_tempCount > 10000000)) {
                    lv_tempCount = ModI(lv_tempCount, 1000000);
                }

                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
        }
        gv_playerCurrency[lv_trigPlayer][4] += 1;
        lv_index = 1;
        for ( ; ( (auto5E805CE7_ai >= 0 && lv_index <= auto5E805CE7_ae) || (auto5E805CE7_ai < 0 && lv_index >= auto5E805CE7_ae) ) ; lv_index += auto5E805CE7_ai ) {
            lv_count += 1;
            gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_index = 0;
        for ( ; ( (auto417EC264_ai >= 0 && lv_index <= auto417EC264_ae) || (auto417EC264_ai < 0 && lv_index >= auto417EC264_ae) ) ; lv_index += auto417EC264_ai ) {
            lv_count += 1;
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
            if ((lv_tempCount > 10000000)) {
                lv_tempCount = ModI(lv_tempCount, 1000000);
            }

            lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_tempCount4 += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
            lv_protectIndex += 1;
            if ((lv_protectIndex > 12)) {
                lv_protectIndex = 0;
            }

        }
        lv_tempCount2 += lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount;
        gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Quests0"));
        if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/C6E523FE"), PlayerGroupSingle(lv_trigPlayer));
            lv_passFail = false;
        }

    }

    if (true) {
        lv_protectIndex = 9;
        lv_tempString = PlayerHandle(lv_trigPlayer);
        lv_index3 = 1;
        lv_index = 1;
        for ( ; ( (auto76D89F04_ai >= 0 && lv_index <= auto76D89F04_ae) || (auto76D89F04_ai < 0 && lv_index >= auto76D89F04_ae) ) ; lv_index += auto76D89F04_ai ) {
            if ((StringSub(lv_tempString, lv_index, lv_index) != "") && ((StringSub(lv_tempString, lv_index, lv_index) == "1") || (StringSub(lv_tempString, lv_index, lv_index) == "3") || (StringSub(lv_tempString, lv_index, lv_index) == "4") || (StringSub(lv_tempString, lv_index, lv_index) == "7") || (StringSub(lv_tempString, lv_index, lv_index) == "8"))) {
                lv_tempCount3 *= lv_index3;
                lv_tempCount5 *= lv_index3;
                if ((lv_tempCount3 > 10000000)) {
                    lv_tempCount3 = ModI(lv_tempCount3, 1000000);
                }

                if ((lv_slot != 0)) {
                    lv_tempCount2 *= lv_index3;
                    lv_tempCount4 *= lv_index3;
                    if ((lv_tempCount2 > 10000000)) {
                        lv_tempCount2 = ModI(lv_tempCount2, 1000000);
                    }

                }

                lv_index3 += StringToInt(StringSub(lv_tempString, lv_index, lv_index));
            }

        }
        gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount3;
        gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Encrypt"));
        if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/05C6B49B"), PlayerGroupSingle(lv_trigPlayer));
            lv_passFail = false;
        }

        gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount5;
        gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Encrypt2"));
        if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2]) && (gv_playerStatisticsGeneral[lv_trigPlayer][29] >= 13)) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/69EF0454"), PlayerGroupSingle(lv_trigPlayer));
            lv_passFail = false;
        }

        if ((lv_slot != 0)) {
            gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount4;
            gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Encrypt2"));
            if ((BankKeyExists(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Encrypt2") == true)) {
                if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/6BDA4AF9"), PlayerGroupSingle(lv_trigPlayer));
                    lv_passFail = false;
                }

            }

            gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount2;
            gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Encrypt"));
            if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/89ED6D65"), PlayerGroupSingle(lv_trigPlayer));
                lv_passFail = false;
            }
            else {
                gv_playerStatisticsGeneral[lv_trigPlayer][2] += 1;
                gv_playerStatisticsGeneral[lv_trigPlayer][27] += 10;
                gv_playerCurrency[lv_trigPlayer][4] += 5;
                if ((gv_playerStatisticsGeneral[lv_trigPlayer][2] == 1)) {
                    gv_playerCurrency[lv_trigPlayer][4] = gv_playerStatisticsGeneral[lv_trigPlayer][27];
                }

                if ((gv_playerStatisticsGeneral[lv_trigPlayer][29] < 20)) {
                    Wait(1.0, c_timeGame);
                    gv_playerStatisticsGeneral[lv_trigPlayer][29] = 20;
                }

            }
        }

        if ((BankKeyExists(gv_banksPlayerBanks[lv_trigPlayer], "0", "FutureSpace1") == true) && (BankKeyExists(gv_banksPlayerBanks[lv_trigPlayer], "0", "FutureSpace2") == true) && (BankKeyExists(gv_banksPlayerBanks[lv_trigPlayer], "0", "Carrot1") == true) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2] > 0)) {
            lv_protectIndex = 7;
            lv_count = 0;
            lv_tempCount = gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2];
            lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "FutureSpace1");
            lv_index = 1;
            for ( ; ( (autoC4D22036_ai >= 0 && lv_index <= autoC4D22036_ae) || (autoC4D22036_ai < 0 && lv_index >= autoC4D22036_ae) ) ; lv_index += autoC4D22036_ai ) {
                lv_count += 1;
                gv_playerEmptyField1[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            lv_index = 1;
            for ( ; ( (autoE02A2654_ai >= 0 && lv_index <= autoE02A2654_ae) || (autoE02A2654_ai < 0 && lv_index >= autoE02A2654_ae) ) ; lv_index += autoE02A2654_ai ) {
                lv_count += 1;
                gv_playerEmptyField2[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            lv_index = 1;
            for ( ; ( (auto4978F44E_ai >= 0 && lv_index <= auto4978F44E_ae) || (auto4978F44E_ai < 0 && lv_index >= auto4978F44E_ae) ) ; lv_index += auto4978F44E_ai ) {
                lv_count += 1;
                gv_playerEmptyField3[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            lv_index = 1;
            for ( ; ( (auto9FC2D8B3_ai >= 0 && lv_index <= auto9FC2D8B3_ae) || (auto9FC2D8B3_ai < 0 && lv_index >= auto9FC2D8B3_ae) ) ; lv_index += auto9FC2D8B3_ai ) {
                lv_count += 1;
                gv_playerEmptyField4[lv_trigPlayer][lv_index] = StringToInt(StringWord(lv_tempString, lv_count));
                lv_tempCount += ((StringToInt(StringWord(lv_tempString, lv_count)) + gv_banksCheckMath[(lv_protectIndex + 1)]) * gv_banksCheckMath[lv_protectIndex]);
                lv_protectIndex += 1;
                if ((lv_protectIndex > 12)) {
                    lv_protectIndex = 0;
                }

            }
            lv_tempCount += lv_tempCount3;
            lv_tempCount += lv_tempCount5;
            gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount;
            gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "FutureSpace2"));
            if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/E221B9B3"), PlayerGroupSingle(lv_trigPlayer));
                lv_passFail = false;
            }

            lv_tempString = IntToString(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][25][2]);
            lv_index = 1;
            for ( ; ( (auto33307635_ai >= 0 && lv_index <= auto33307635_ae) || (auto33307635_ai < 0 && lv_index >= auto33307635_ae) ) ; lv_index += auto33307635_ai ) {
                if ((StringSub(lv_tempString, lv_index, lv_index) != "")) {
                    lv_index3 = 1;
                    lv_index3 += StringToInt(StringSub(lv_tempString, lv_index, lv_index));
                    lv_tempCount -= StringToInt(StringSub(lv_tempString, lv_index, lv_index));
                    lv_tempCount *= lv_index3;
                }

            }
            gv_banksCheck[lv_trigPlayer][2][1] = lv_tempCount;
            gv_banksCheck[lv_trigPlayer][2][2] = StringToInt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Carrot1"));
            if ((gv_banksCheck[lv_trigPlayer][2][1] != gv_banksCheck[lv_trigPlayer][2][2])) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/A9DB6A5F"), PlayerGroupSingle(lv_trigPlayer));
                lv_passFail = false;
            }

            if ((GameIsOnline() == true) && ((BankKeyExists(gv_banksPlayerBanks[lv_trigPlayer], "0", "Enc") == true))) {
                if (((lib13390EF9_gf_CBCDecrypt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], "0", "Enc"), PlayerHandle(lv_trigPlayer)) == IntToString(lv_tempCount)) || ((lib13390EF9_gf_CBCDecrypt(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], "0", "Enc"), gv_banksHandle[lv_trigPlayer]) == IntToString(lv_tempCount)) && (gv_banksHandle[lv_trigPlayer] != "") && (PlayerHandle(lv_trigPlayer) != "")))) {
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/98B91FE0"), PlayerGroupSingle(lv_trigPlayer));
                    lv_passFail = false;
                }
            }

        }

        gf_BankFailedResponse(lv_trigPlayer, lv_passFail, true);
    }

}

void gf_BankHardChecks (int lp_trigPlayer) {
    // Variable Declarations
    int lv_trigPlayer;
    string lv_tempString;
    string lv_tempString2;
    int lv_slot;
    int lv_tempInt;
    int lv_tempInt2;
    int lv_tempInt3;
    int lv_index;
    int lv_index2;
    int lv_index3;

    // Automatic Variable Declarations
    const int auto4E8C125B_ae = 7;
    const int auto4E8C125B_ai = 1;
    const int auto41E65646_ae = 5;
    const int auto41E65646_ai = 1;
    const int auto9F5C358B_ae = 8;
    const int auto9F5C358B_ai = 1;
    const int auto2CCFDCD5_ae = 10;
    const int auto2CCFDCD5_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_tempString = "";
    lv_tempString2 = "";
    lv_slot = gv_banksSlotSelected[lp_trigPlayer];

    // Implementation
    lv_slot = gv_banksSlotSelected[lp_trigPlayer];
    if ((((TriggerIsEnabled(gt_TestGlornify) == true) && (PlayerGroupHasPlayer(gv_testersGroup, lv_trigPlayer) == true)) || ((PlayerGroupCount(gv_generalTeamsAll) == 1) && (TriggerIsEnabled(gt_TestGlornify) == true) && (TriggerIsEnabled(gt_TestBuff) == true) && ((PlayerHandle(lv_trigPlayer) == "1-S2-1-5476687") || (PlayerHandle(lv_trigPlayer) == "2-S2-1-5385336"))))) {
        gv_banksSaved[lv_trigPlayer] = true;
        return ;
    }

    lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero");
    lv_tempInt = StringToInt(StringWord(lv_tempString, 2));
    lv_tempInt2 = StringToInt(StringWord(lv_tempString, 17));
    if ((((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] == 50) && (gv_playerStatisticsGeneral[lv_trigPlayer][26] == 0)) || ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] > 50) && (gv_questsPlayerProgress[lv_trigPlayer][6] < 4) && (gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 0)) || (gv_playerHeroHeroClassTierType[lv_trigPlayer][2] > (lv_tempInt + 1)) || (gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] > CeilingI(((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 2) + 5))) || (gv_playerHeroHeroLevelExp[lv_trigPlayer][2] > (gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]] * 2)))) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/3A766521"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_index = 1;
    for ( ; ( (auto4E8C125B_ai >= 0 && lv_index <= auto4E8C125B_ae) || (auto4E8C125B_ai < 0 && lv_index >= auto4E8C125B_ae) ) ; lv_index += auto4E8C125B_ai ) {
        if ((gv_playerHeroHeroClassTierType[lv_trigPlayer][2] == lv_index) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < (gv_heroesStatsTierLevels[(lv_index - 1)] + 0))) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/C5F69625"), PlayerGroupSingle(lv_trigPlayer));
            gf_BankFailedResponse(lv_trigPlayer, false, false);
            return ;
        }

    }
    lv_tempInt2 = 0;
    lv_index = 0;
    for ( ; ( (auto41E65646_ai >= 0 && lv_index <= auto41E65646_ae) || (auto41E65646_ai < 0 && lv_index >= auto41E65646_ae) ) ; lv_index += auto41E65646_ai ) {
        lv_tempInt = StringToInt(StringWord(lv_tempString, (4 + lv_index)));
        lv_tempInt2 += lv_tempInt;
        if ((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 0) && ((gv_playerHeroHeroStats[lv_trigPlayer][lv_index] > (lv_tempInt + 50)) || (lv_tempInt < 0) || (lv_tempInt > 1000))) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/016E2D26"), PlayerGroupSingle(lv_trigPlayer));
            gf_BankFailedResponse(lv_trigPlayer, false, false);
            return ;
        }

    }
    lv_index = 0;
    for ( ; ( (auto9F5C358B_ai >= 0 && lv_index <= auto9F5C358B_ae) || (auto9F5C358B_ai < 0 && lv_index >= auto9F5C358B_ae) ) ; lv_index += auto9F5C358B_ai ) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_heroesStatsTierLevels[lv_index])) {
            lv_tempInt3 = (lv_index + 1);
        }

    }
    if (((lv_tempInt2 > (gv_heroesStatsBankTest[lv_tempInt3] + 800)) || (lv_tempInt2 > 2020))) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/702863FD"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(0), "Statistics");
    lv_tempInt = StringToInt(StringWord(lv_tempString, 1));
    if ((gv_playerCurrency[lv_trigPlayer][1] > (lv_tempInt + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] * 5000))) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(184)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(14)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(30)) == false)) {
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        gf_GeneralErrorMessage(StringExternal("Param/Value/4D674B86"), PlayerGroupSingle(lv_trigPlayer));
        return ;
    }

    lv_tempInt = StringToInt(StringWord(lv_tempString, 2));
    if ((gv_playerCurrency[lv_trigPlayer][2] > ((lv_tempInt + 10000) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] * 5000))) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(184)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(30)) == false)) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/3AF4BD6E"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_tempInt = StringToInt(StringWord(lv_tempString, 3));
    if ((gv_playerCurrency[lv_trigPlayer][3] > ((lv_tempInt + 60000) + 0)) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(15)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(184)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(30)) == false)) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/8AB5CF11"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_tempInt = StringToInt(StringWord(lv_tempString, 4));
    if ((gv_playerCurrency[lv_trigPlayer][4] > ((lv_tempInt + 10000) + 0))) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/AF5743F0"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_tempInt2 = 0;
    lv_tempString2 = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Hero");
    lv_tempInt2 = StringToInt(StringWord(lv_tempString2, 17));
    if (((lv_tempInt2 > gv_generalLevelCap))) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/9F372027"), PlayerGroupSingle(lv_trigPlayer));
        gf_BankFailedResponse(lv_trigPlayer, false, false);
        return ;
    }

    lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Equipped");
    lv_index3 = 3;
    lv_index = 1;
    for ( ; ( (auto2CCFDCD5_ai >= 0 && lv_index <= auto2CCFDCD5_ae) || (auto2CCFDCD5_ai < 0 && lv_index >= auto2CCFDCD5_ae) ) ; lv_index += auto2CCFDCD5_ai ) {
        lv_tempInt = StringToInt(StringWord(lv_tempString, lv_index3));
        if ((((PlayerHandle(lv_trigPlayer) != "1-S2-1-5476687") && (lv_tempInt > 30)) || ((lv_tempInt >= 26) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][13] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][14] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][15] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][16] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][17] == 0)) || ((lv_tempInt >= 29) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][18] == 0)) || ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] > 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] != lv_index)) || ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] > 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] > FloorI(((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4) + 3))) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) || ((lv_index == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[2])) || ((lv_index >= 2) && (lv_index < 7) && (((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[1]) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] < gv_itemsTwilightRanges[2])) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] > gv_itemsTwilightRanges[3]))) || ((lv_index < 9) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][4] < 6) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[1])) || ((lv_index < 9) && ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][6] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][7] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][8] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][9] >= gv_itemsTwilightRanges[1]))) || ((gv_playerStatisticsGeneral[lv_trigPlayer][11] < gv_playerStatisticsGeneral[lv_trigPlayer][13]) && (lv_tempInt >= 27)))) {
            if (((lv_tempInt >= 26) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][13] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][14] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][15] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][16] == 0) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][17] == 0))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/1CCB3DB0"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((lv_tempInt >= 29) && (gv_playerStatisticsRaidBossCleared[lv_trigPlayer][18] == 0))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/81B67B95"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] > 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] != lv_index))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/2580CB78"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] > 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] > FloorI(((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4) + 3))) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/D8100B7A"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((lv_index == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[2]))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/9AE736A0"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((lv_index >= 2) && (lv_index < 7) && (((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[1]) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] < gv_itemsTwilightRanges[2])) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] > gv_itemsTwilightRanges[3])))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/FDDABC96"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((lv_index < 9) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][4] < 6) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][5] >= gv_itemsTwilightRanges[1]))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/84A50ADE"), PlayerGroupSingle(lv_trigPlayer));
            }

            if (((lv_index < 9) && ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][6] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][7] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][8] >= gv_itemsTwilightRanges[1]) || (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][9] >= gv_itemsTwilightRanges[1])))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/4602A461"), PlayerGroupSingle(lv_trigPlayer));
            }

            gf_BankFailedResponse(lv_trigPlayer, false, false);
            return ;
        }

        lv_index3 += 9;
    }
    lv_tempString = BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_slot), "Pack");
    lv_index3 = 3;
    gv_banksSaved[lv_trigPlayer] = true;
}

trigger auto_gf_BankItemLoading_Trigger = null;
int auto_gf_BankItemLoading_lp_trigPlayer;
int auto_gf_BankItemLoading_lp_slotType;
int auto_gf_BankItemLoading_lp_slotIndex;

void gf_BankItemLoading (int lp_trigPlayer, int lp_slotType, int lp_slotIndex) {
    auto_gf_BankItemLoading_lp_trigPlayer = lp_trigPlayer;
    auto_gf_BankItemLoading_lp_slotType = lp_slotType;
    auto_gf_BankItemLoading_lp_slotIndex = lp_slotIndex;

    if (auto_gf_BankItemLoading_Trigger == null) {
        auto_gf_BankItemLoading_Trigger = TriggerCreate("auto_gf_BankItemLoading_TriggerFunc");
    }

    TriggerExecute(auto_gf_BankItemLoading_Trigger, false, false);
}

bool auto_gf_BankItemLoading_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_BankItemLoading_lp_trigPlayer;
    int lp_slotType = auto_gf_BankItemLoading_lp_slotType;
    int lp_slotIndex = auto_gf_BankItemLoading_lp_slotIndex;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;
    int lv_slotType;
    int lv_slotIndex;
    int lv_stashSlot;
    int lv_itemTier;
    int lv_itemRarity;
    int[21] lv_itemStats;
    text[11] lv_itemTooltip;

    // Automatic Variable Declarations
    int auto8049942B_val;
    const int auto42F13893_ae = 9;
    const int auto42F13893_ai = 1;
    const int autoBA3551F1_ae = 9;
    const int autoBA3551F1_ai = 1;
    const int auto3E28B743_ae = 9;
    const int auto3E28B743_ai = 1;
    const int auto9E09B80A_ae = 9;
    const int auto9E09B80A_ai = 1;
    const int auto7B444314_ae = 9;
    const int auto7B444314_ai = 1;
    const int auto4C69F057_ae = 20;
    const int auto4C69F057_ai = 1;
    const int auto1E689276_ae = 7;
    const int auto1E689276_ai = 1;
    const int auto1AFDDCE7_ae = 9;
    const int auto1AFDDCE7_ai = 1;
    const int autoC9CF6A01_ae = 9;
    const int autoC9CF6A01_ai = 1;
    const int auto6A28AF31_ae = 7;
    const int auto6A28AF31_ai = 1;
    int auto9835A0E4_val;
    const int auto8E2E20C5_ae = 20;
    const int auto8E2E20C5_ai = 1;
    const int auto19BD9E01_ae = 20;
    const int auto19BD9E01_ai = 1;
    const int auto0291E7BA_ae = 20;
    const int auto0291E7BA_ai = 1;
    const int auto6FDB36DF_ae = 20;
    const int auto6FDB36DF_ai = 1;
    const int auto1661CB88_ae = 20;
    const int auto1661CB88_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_slotType = lp_slotType;
    lv_slotIndex = lp_slotIndex;
    auto8049942B_val = lv_slotType;
    if (auto8049942B_val == 1) {
        lv_index = 1;
        for ( ; ( (auto42F13893_ai >= 0 && lv_index <= auto42F13893_ae) || (auto42F13893_ai < 0 && lv_index >= auto42F13893_ae) ) ; lv_index += auto42F13893_ai ) {
            lv_itemStats[lv_index] = gv_inventoryEquippedStats[lv_trigPlayer][lv_slotIndex][lv_index];
        }
    }
    else if (auto8049942B_val == 2) {
        lv_index = 1;
        for ( ; ( (autoBA3551F1_ai >= 0 && lv_index <= autoBA3551F1_ae) || (autoBA3551F1_ai < 0 && lv_index >= autoBA3551F1_ae) ) ; lv_index += autoBA3551F1_ai ) {
            lv_itemStats[lv_index] = gv_inventoryPackStats[lv_trigPlayer][lv_slotIndex][lv_index];
        }
    }
    else if (auto8049942B_val == 3) {
        lv_stashSlot = (((gv_inventoryStashTabSelected[lv_trigPlayer] - 1) * 24) + lv_slotIndex);
        lv_index = 1;
        for ( ; ( (auto3E28B743_ai >= 0 && lv_index <= auto3E28B743_ae) || (auto3E28B743_ai < 0 && lv_index >= auto3E28B743_ae) ) ; lv_index += auto3E28B743_ai ) {
            lv_itemStats[lv_index] = gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index];
        }
    }
    else if (auto8049942B_val == 4) {
        lv_index = 1;
        for ( ; ( (auto9E09B80A_ai >= 0 && lv_index <= auto9E09B80A_ae) || (auto9E09B80A_ai < 0 && lv_index >= auto9E09B80A_ae) ) ; lv_index += auto9E09B80A_ai ) {
            lv_itemStats[lv_index] = gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_index];
        }
    }
    else if (auto8049942B_val == 5) {
        lv_index = 1;
        for ( ; ( (auto7B444314_ai >= 0 && lv_index <= auto7B444314_ae) || (auto7B444314_ai < 0 && lv_index >= auto7B444314_ae) ) ; lv_index += auto7B444314_ai ) {
            lv_itemStats[lv_index] = gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_index];
        }
    }
    else {
    }
    if ((lv_itemStats[1] == 0)) {
        lv_index = 1;
        for ( ; ( (auto4C69F057_ai >= 0 && lv_index <= auto4C69F057_ae) || (auto4C69F057_ai < 0 && lv_index >= auto4C69F057_ae) ) ; lv_index += auto4C69F057_ai ) {
            lv_itemStats[lv_index] = 0;
        }
    }
    else {
        lv_itemTier = lv_itemStats[3];
        lv_itemRarity = lv_itemStats[4];
        if ((lv_itemStats[5] <= 6) && (lv_itemRarity < 6)) {
            lv_itemStats[10] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 1.5));
        }
        else {
            if ((lv_itemStats[5] > 6) && (lv_itemStats[5] <= 16)) {
                lv_itemStats[10] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 1.5));
            }

        }
        if (((lv_itemRarity == 6) || (lv_itemStats[1] == 9))) {
            lv_itemStats[10] = 1;
        }

        lv_index = 6;
        for ( ; ( (auto1E689276_ai >= 0 && lv_index <= auto1E689276_ae) || (auto1E689276_ai < 0 && lv_index >= auto1E689276_ae) ) ; lv_index += auto1E689276_ai ) {
            if ((lv_itemStats[lv_index] >= 1) && (lv_itemStats[lv_index] <= 6)) {
                lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 1.0));
            }
            else {
                if ((lv_itemStats[lv_index] > 6) && (lv_itemStats[lv_index] <= 16)) {
                    lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 1.0));
                }

            }
            if ((lv_itemStats[1] == 9) && (lv_itemStats[lv_index] >= 1)) {
                lv_itemStats[(lv_index + 5)] = 1;
            }

        }
        lv_index = 8;
        for ( ; ( (auto1AFDDCE7_ai >= 0 && lv_index <= auto1AFDDCE7_ae) || (auto1AFDDCE7_ai < 0 && lv_index >= auto1AFDDCE7_ae) ) ; lv_index += auto1AFDDCE7_ai ) {
            if ((lv_itemStats[lv_index] >= 1) && (lv_itemStats[lv_index] <= 6)) {
                lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 0.5));
            }
            else {
                if ((lv_itemStats[lv_index] > 6) && (lv_itemStats[lv_index] <= 16)) {
                    lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 0.5));
                }

            }
            if ((lv_itemStats[1] == 9) && (lv_itemStats[lv_index] >= 1)) {
                lv_itemStats[(lv_index + 5)] = 1;
            }

        }
        lv_itemTooltip[1] = gv_itemsBaseName[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity];
        lv_itemTooltip[2] = ((gv_itemsBaseName[lv_itemStats[1]][0][0] + StringExternal("Param/Value/4A385B4A")) + (IntToText(lv_itemStats[3]) + StringExternal("Param/Value/2639A2C6")));
        lv_index = 5;
        for ( ; ( (autoC9CF6A01_ai >= 0 && lv_index <= autoC9CF6A01_ae) || (autoC9CF6A01_ai < 0 && lv_index >= autoC9CF6A01_ae) ) ; lv_index += autoC9CF6A01_ai ) {
            if ((lv_itemStats[lv_index] >= 1)) {
                if ((lv_itemStats[1] != 9)) {
                    if ((lv_itemRarity == 6) && (lv_index == 5)) {
                        lv_itemTooltip[(lv_index - 2)] = (gv_itemsStatTooltip[lv_itemStats[lv_index]] + StringToText(""));
                    }
                    else {
                        if ((lv_itemStats[1] == 10) && (lv_itemRarity > 4) && (lv_index > 5)) {
                            lv_itemTooltip[(lv_index - 2)] = (gv_itemsGlyphTooltip[lv_itemStats[lv_index]] + StringToText(""));
                        }
                        else {
                            lv_itemTooltip[(lv_index - 2)] = (gv_itemsStatTooltip[lv_itemStats[lv_index]] + FixedToText(((lv_itemStats[(lv_index + 5)] * (gv_itemsStatValue[lv_itemStats[lv_index]] / 100.0)) / 1.0), 2));
                        }
                    }
                }
                else {
                    lv_itemTooltip[(lv_index - 2)] = (gv_itemsGlyphTooltip[lv_itemStats[lv_index]] + StringToText(""));
                }
            }

        }
        lv_itemTooltip[0] = lv_itemTooltip[1];
        lv_index = 2;
        for ( ; ( (auto6A28AF31_ai >= 0 && lv_index <= auto6A28AF31_ae) || (auto6A28AF31_ai < 0 && lv_index >= auto6A28AF31_ae) ) ; lv_index += auto6A28AF31_ai ) {
            lv_itemTooltip[0] = ((lv_itemTooltip[0] + StringExternal("Param/Value/20500239")) + lv_itemTooltip[lv_index]);
        }
    }
    auto9835A0E4_val = lv_slotType;
    if (auto9835A0E4_val == 1) {
        lv_index = 1;
        for ( ; ( (auto8E2E20C5_ai >= 0 && lv_index <= auto8E2E20C5_ae) || (auto8E2E20C5_ai < 0 && lv_index >= auto8E2E20C5_ae) ) ; lv_index += auto8E2E20C5_ai ) {
            gv_inventoryEquippedStats[lv_trigPlayer][lv_slotIndex][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogEquippedItems[lv_slotIndex][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_slotIndex][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_slotIndex][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_slotIndex][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
    }
    else if (auto9835A0E4_val == 2) {
        lv_index = 1;
        for ( ; ( (auto19BD9E01_ai >= 0 && lv_index <= auto19BD9E01_ae) || (auto19BD9E01_ai < 0 && lv_index >= auto19BD9E01_ae) ) ; lv_index += auto19BD9E01_ai ) {
            gv_inventoryPackStats[lv_trigPlayer][lv_slotIndex][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_slotIndex][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
    }
    else if (auto9835A0E4_val == 3) {
        lv_index = 1;
        for ( ; ( (auto0291E7BA_ai >= 0 && lv_index <= auto0291E7BA_ae) || (auto0291E7BA_ai < 0 && lv_index >= auto0291E7BA_ae) ) ; lv_index += auto0291E7BA_ai ) {
            gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index] = lv_itemStats[lv_index];
        }
        if ((lp_slotIndex <= 24)) {
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[lv_slotIndex][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_slotIndex][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_slotIndex][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_slotIndex][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
        }

    }
    else if (auto9835A0E4_val == 4) {
        lv_index = 1;
        for ( ; ( (auto6FDB36DF_ai >= 0 && lv_index <= auto6FDB36DF_ae) || (auto6FDB36DF_ai < 0 && lv_index >= auto6FDB36DF_ae) ) ; lv_index += auto6FDB36DF_ai ) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_slotIndex] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_itemHonorDialogItem[1], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
    }
    else if (auto9835A0E4_val == 5) {
        lv_index = 1;
        for ( ; ( (auto1661CB88_ai >= 0 && lv_index <= auto1661CB88_ae) || (auto1661CB88_ai < 0 && lv_index >= auto1661CB88_ae) ) ; lv_index += auto1661CB88_ai ) {
            gv_inventoryPackStats[lv_trigPlayer][lv_slotIndex][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_slotIndex][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_slotIndex][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
    }
    else {
    }
    return true;
}

void gf_BankFailedResponse (int lp_trigPlayer, bool lp_passFail, bool lp_passFailEdit) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_trigSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    if (((TriggerIsEnabled(gt_BankVariablesCheck) == false) || ((GameIsOnline() == false) && (PlayerHandle(lv_trigPlayer) != "")) || ((GameIsOnline() == false) && (GameIsTestMap(false) != true)))) {
        while (true) {
            SoundPlayForPlayer(SoundLink("SargerasLaugh", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
        }
    }

    if ((lp_passFail == true) && (lp_passFailEdit == false)) {
        gf_GeneralErrorMessage((PlayerName(lv_trigPlayer) + StringExternal("Param/Value/0C79905E")), PlayerGroupAll());
        gv_banksCoughtCheating[lv_trigPlayer] = true;
    }

    if ((lp_passFail == false) && (lp_passFailEdit == true)) {
        gf_GeneralErrorMessage((PlayerName(lv_trigPlayer) + StringExternal("Param/Value/C461C7FD")), PlayerGroupAll());
        gv_banksCoughtCheating[lv_trigPlayer] = true;
    }

    if ((PlayerHandle(lv_trigPlayer) != gv_banksHandle[lv_trigPlayer]) && (gv_banksHandle[lv_trigPlayer] != "")) {
        gf_GeneralErrorMessage((PlayerName(lv_trigPlayer) + StringExternal("Param/Value/2FD8B3C1")), PlayerGroupAll());
        gv_banksCoughtCheating[lv_trigPlayer] = true;
    }

    if ((lp_passFail == false) && (lp_passFailEdit == false)) {
        gf_GeneralErrorMessage((PlayerName(lv_trigPlayer) + StringExternal("Param/Value/B154829D")), PlayerGroupAll());
        gv_banksCoughtCheating[lv_trigPlayer] = true;
    }

    if ((gv_banksCoughtCheating[lv_trigPlayer] == true)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_ReplaceUnit(gv_playerHeroHero[lv_trigPlayer], "Chicken", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        PlayerGroupRemove(gv_generalTeamsAll, lv_trigPlayer);
        CameraPan(lv_trigPlayer, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
        gv_helpPlayerSelected[lv_trigPlayer] = 15;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
        libNtve_gf_CinematicMode(true, PlayerGroupSingle(lv_trigPlayer), c_transitionDurationDefault);
    }

}

void gf_BankTempStats (int lp_trigPlayer) {
    // Variable Declarations
    int lv_trigPlayer;
    int[16] lv_stats;
    int lv_index;

    // Automatic Variable Declarations
    const int autoDD955415_ae = 14;
    const int autoDD955415_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    while (true) {
        if ((gv_banksTempStatistic[lv_trigPlayer][1] > 1000)) {
            gv_banksTempStatistic[lv_trigPlayer][1] -= 1000;
        }
        else {
            break;
        }
    }
    lv_stats[1] = (gv_banksTempStatistic[lv_trigPlayer][1] * 8);
    while (true) {
        if ((gv_banksTempStatistic[lv_trigPlayer][3] > 1000)) {
            gv_banksTempStatistic[lv_trigPlayer][3] -= 1000;
        }
        else {
            break;
        }
    }
    lv_stats[2] = (gv_banksTempStatistic[lv_trigPlayer][3] * 12);
    lv_stats[3] = (gv_banksTempStatistic[lv_trigPlayer][4] / 10000);
    lv_stats[4] = (gv_banksTempStatistic[lv_trigPlayer][5] / 10000);
    lv_stats[5] = (gv_banksTempStatistic[lv_trigPlayer][6] / 200);
    lv_stats[6] = (gv_banksTempStatistic[lv_trigPlayer][7] / 5000);
    lv_stats[7] = (gv_banksTempStatistic[lv_trigPlayer][8] / 5);
    lv_stats[8] = (gv_banksTempStatistic[lv_trigPlayer][10] / 3);
    lv_stats[9] = (gv_banksTempStatistic[lv_trigPlayer][13] * 3);
    lv_stats[10] = (gv_banksTempStatistic[lv_trigPlayer][14] * 20);
    lv_stats[11] = (gv_banksTempStatistic[lv_trigPlayer][15] / 2);
    lv_stats[12] = (gv_banksTempStatistic[lv_trigPlayer][19] * 3);
    lv_stats[13] = (gv_banksTempStatistic[lv_trigPlayer][17] * 250);
    lv_stats[14] = (gv_banksTempStatistic[lv_trigPlayer][20] * 500);
    lv_index = 1;
    for ( ; ( (autoDD955415_ai >= 0 && lv_index <= autoDD955415_ae) || (autoDD955415_ai < 0 && lv_index >= autoDD955415_ae) ) ; lv_index += autoDD955415_ai ) {
        lv_stats[15] += lv_stats[lv_index];
    }
    gv_playerStatisticsGeneral[lv_trigPlayer][30] = lv_stats[15];
    gv_playerStatisticsGeneral[lv_trigPlayer][27] = lv_stats[15];
}

void gf_DialogCreateEXPGoldUI () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    text[9] lv_tempText;
    text[9] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;

    // Automatic Variable Declarations
    const int auto5759D129_ae = 3;
    const int auto5759D129_ai = 1;
    const int autoF3360A9C_ae = 6;
    const int autoF3360A9C_ai = 1;
    const int auto92782569_ae = 5;
    const int auto92782569_ai = 1;
    const int auto8489D9E1_ae = 5;
    const int auto8489D9E1_ai = 1;
    const int auto06B78727_ae = 5;
    const int auto06B78727_ai = 1;
    const int auto9ECBA8E1_ae = 5;
    const int auto9ECBA8E1_ai = 1;
    const int autoDA3B7360_ae = 5;
    const int autoDA3B7360_ai = 1;
    const int auto62F42731_ae = 5;
    const int auto62F42731_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(600, 180, c_anchorBottom, -160, 100, true);
    gv_eXPDialogDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 0;
    lv_yPos = 48;
    lv_xSize = 550;
    lv_ySize = 61;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ui_void_mission_soa_duration_bar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    gv_eXPDialogWidth = DialogControlGetWidth(DialogControlLastCreated(), 1);
    gv_eXPDialogWidth -= 5;
    gv_eXPDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 24), (lv_ySize - 34), c_anchorTopLeft, (lv_xPos + 11), (lv_yPos + 17), StringToText(""), "Assets\\Textures\\border-protoss-transportslot-filled.dds", c_triggerImageTypeBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_eXPDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 20), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 10), (lv_yPos + 15), StringToText(""), StringToText(""), gv_dialogHighlighted);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
    gv_eXPDialogItems[0] = DialogControlLastCreated();
    DialogCreate(660, 60, c_anchorTopRight, -7, 0, true);
    gv_currencyDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_index = 0;
    for ( ; ( (auto5759D129_ai >= 0 && lv_index <= auto5759D129_ae) || (auto5759D129_ai < 0 && lv_index >= auto5759D129_ae) ) ; lv_index += auto5759D129_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), gv_currencyNames[lv_index], gv_currencyIcons[lv_index][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), gv_currencyIcons[lv_index][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 45, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 12), StringExternal("Param/Value/C36893C7"), Color(100,100,100), false, 0.0);
        gv_currencyDialogPointsItems[lv_index] = DialogControlLastCreated();
        lv_xPos += (130 + ((3 - lv_index) * 20));
    }
    DialogCreate(300, 350, c_anchorBottomLeft, 300, -50, true);
    gv_mainDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 180;
    lv_ySize = 54;
    lv_tempText[1] = StringExternal("Param/Value/0AE69AF2");
    lv_tempText[2] = StringExternal("Param/Value/ABF68F22");
    lv_tempText[3] = StringExternal("Param/Value/84B7A8C1");
    lv_tempText[4] = StringExternal("Param/Value/966E33AA");
    lv_tempText[5] = StringExternal("Param/Value/FC08641D");
    lv_tempText[6] = StringExternal("Param/Value/371479A7");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(100.00, 100.00, 100.00);
    lv_tempColor[5] = Color(0.00, 50.20, 100.00);
    lv_tempColor[6] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (autoF3360A9C_ai >= 0 && lv_index <= autoF3360A9C_ae) || (autoF3360A9C_ai < 0 && lv_index >= autoF3360A9C_ae) ) ; lv_index += autoF3360A9C_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_mainDialogItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 15), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yPos += 50;
    }
    DialogCreate(2300, 1600, c_anchorCenter, -25, -25, true);
    gv_screenEffectsDialogBox = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 4000, 100, c_anchorTop, -200, -50, StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.69, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[6][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\war3_loading_screen_credits.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[0][0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2150, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\war3_loading_screen_credits.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[0][1] = DialogControlLastCreated();
    lv_xPos = 0;
    lv_yPos = 50;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 50, c_anchorTop, (lv_xPos - 50), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[0][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTop, (lv_xPos - 220), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_minimap_icon_alert.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[0][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, (lv_xPos - 25), (lv_yPos + 0), StringExternal("Param/Value/F483308E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[0][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, (lv_xPos + 200), (lv_yPos + 2), StringExternal("Param/Value/7A9C63EB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[0][4] = DialogControlLastCreated();
    lv_index2 = 2;
    for ( ; ( (auto92782569_ai >= 0 && lv_index2 <= auto92782569_ae) || (auto92782569_ai < 0 && lv_index2 >= auto92782569_ae) ) ; lv_index2 += auto92782569_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][lv_index2], PlayerGroupAll(), 1.0, 100.0);
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, (lv_xPos - 40), (lv_yPos + 45), StringExternal("Param/Value/C28F231A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[1][4] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, (lv_xPos + 110), (lv_yPos + 45), StringExternal("Param/Value/653A7BC4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[1][5] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    lv_xPos = 0;
    lv_yPos = -250;
    lv_xSize = 250;
    lv_ySize = 150;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 575, 80, c_anchorCenter, (lv_xPos - 10), (lv_yPos + 80), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[2][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 200), (lv_ySize + 50), c_anchorCenter, (lv_xPos - 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[2][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 200), (lv_ySize + 50), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 30), StringToText(""), "Assets\\Textures\\ui_glues_icons_ladder_tier_wings_gold_1.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[2][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 15), (lv_ySize + 15), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_glues_icons_league_matchmaking_grandmaster.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[2][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 15), (lv_ySize + 15), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_glues_icons_ladder_tier0_star.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[2][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorCenter, (lv_xPos + 30), (lv_yPos + 95), StringExternal("Param/Value/6F44BF03"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[2][1] = DialogControlLastCreated();
    lv_index2 = 0;
    for ( ; ( (auto8489D9E1_ai >= 0 && lv_index2 <= auto8489D9E1_ae) || (auto8489D9E1_ai < 0 && lv_index2 >= auto8489D9E1_ae) ) ; lv_index2 += auto8489D9E1_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[2][lv_index2], PlayerGroupAll(), 0.0, 100.0);
    }
    lv_xPos = 0;
    lv_yPos = -360;
    lv_xSize = 250;
    lv_ySize = 150;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 300), (lv_ySize + 100), c_anchorCenter, (lv_xPos - 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[3][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), (lv_ySize + 50), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\decal_spray_0023_01.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[3][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 150), (lv_ySize + 100), c_anchorCenter, (lv_xPos + 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\terrangroundtargetaoeui4_arrows1.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[3][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 90, 90, c_anchorCenter, (lv_xPos + 200), (lv_yPos + 80), StringToText(""), "Assets\\Textures\\ui_glues_ladder_score_warningicon.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[3][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 90, 90, c_anchorCenter, (lv_xPos - 230), (lv_yPos + 80), StringToText(""), "Assets\\Textures\\ui_glues_ladder_score_warningicon.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[3][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, (lv_xPos + 0), (lv_yPos + 90), StringExternal("Param/Value/540770F8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[3][1] = DialogControlLastCreated();
    lv_index2 = 0;
    for ( ; ( (auto06B78727_ai >= 0 && lv_index2 <= auto06B78727_ae) || (auto06B78727_ai < 0 && lv_index2 >= auto06B78727_ae) ) ; lv_index2 += auto06B78727_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[3][lv_index2], PlayerGroupAll(), 0.0, 100.0);
    }
    lv_xPos = 0;
    lv_yPos = -320;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorCenter, (lv_xPos + 0), (lv_yPos + 90), StringExternal("Param/Value/6226FE60"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_screenEffectsDialogItem[1][1] = DialogControlLastCreated();
    lv_xPos = -600;
    lv_yPos = -550;
    lv_xSize = 250;
    lv_ySize = 150;
    lv_index = 3;
    for ( ; ( (auto9ECBA8E1_ai >= 0 && lv_index <= auto9ECBA8E1_ae) || (auto9ECBA8E1_ai < 0 && lv_index >= auto9ECBA8E1_ae) ) ; lv_index += auto9ECBA8E1_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (100 + RandomInt(1, 150)), (125 + RandomInt(1, 150)), c_anchorCenter, (0 + RandomInt(-800, 800)), (0 + RandomInt(-600, 600)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        gv_screenEffectsDialogItem[5][lv_index] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 120, c_anchorCenter, (lv_xPos - 90), (lv_yPos + 90), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[5][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, (lv_xPos + 0), (lv_yPos + 90), StringExternal("Param/Value/82545325"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[5][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, (lv_xPos + 170), (lv_yPos + 90), StringExternal("Param/Value/0E06A29C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[5][0] = DialogControlLastCreated();
    lv_index2 = 0;
    for ( ; ( (autoDA3B7360_ai >= 0 && lv_index2 <= autoDA3B7360_ae) || (autoDA3B7360_ai < 0 && lv_index2 >= autoDA3B7360_ae) ) ; lv_index2 += autoDA3B7360_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[5][lv_index2], PlayerGroupAll(), 0.0, 100.0);
    }
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 300;
    lv_ySize = 85;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 300), (lv_ySize + 100), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 50.20, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[4][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorCenter, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_ingame_lotv_bossbarframe_fill.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[4][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 150), (lv_ySize + 50), c_anchorCenter, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[4][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 4), c_anchorCenter, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_screenEffectsDialogItem[4][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorCenter, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(82.35, 62.35, 1.57), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[4][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorCenter, (lv_xPos + 15), (lv_yPos + 10), StringExternal("Param/Value/068272AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_screenEffectsDialogItem[4][5] = DialogControlLastCreated();
    lv_index2 = 0;
    for ( ; ( (auto62F42731_ai >= 0 && lv_index2 <= auto62F42731_ae) || (auto62F42731_ai < 0 && lv_index2 >= auto62F42731_ae) ) ; lv_index2 += auto62F42731_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[4][lv_index2], PlayerGroupAll(), 0.0, 100.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 1200, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\korhal_platform_reentrycloudsbig.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_screenEffectsDialogItem[1][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    gv_screenEffectsDialogItem[1][2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 2400, 1600);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    gv_screenEffectsDialogItem[1][3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 2400, 1600);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "KerriganSearchFlashImpact", PlayerGroupAll());
    PortraitWaitForLoad(PortraitGetTriggerControl(DialogControlLastCreated()));
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 1.200000,1.200000,1.500000 0.100000");
    DialogCreate(1200, 700, c_anchorCenter, -25, -25, true);
    gv_endDialogBox = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 700, c_anchorCenter, (lv_xPos + 15), (lv_yPos + 10), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_endDialogItem = DialogControlLastCreated();
}

void gf_DialogUsedMainButtons (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto475C8FF3_val;
    const int auto011F8083_ae = 5;
    const int auto011F8083_ai = 1;
    const int auto579844FE_ae = 15;
    const int auto579844FE_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    auto475C8FF3_val = lv_dialogItemUsed;
    if (auto475C8FF3_val == gv_mainDialogItems[1]) {
        if ((DialogIsVisible(gv_questsLogDialogBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_questsLogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_questsLogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto475C8FF3_val == gv_mainDialogItems[2]) {
        if ((DialogIsVisible(gv_mapDialogBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto475C8FF3_val == gv_mainDialogItems[3]) {
        if ((DialogIsVisible(gv_heroStatsDialogBox, lv_trigPlayer) == false)) {
            lv_tempText = ((StringExternal("Param/Value/6E5038D1") + FixedToText(UnitWeaponDamage(gv_playerHeroHero[lv_trigPlayer], 2, c_unitAttributeHover, false), 2)) + (StringExternal("Param/Value/109A426D") + FixedToText(UnitWeaponSpeedMultiplier(gv_playerHeroHero[lv_trigPlayer], 1), 2)) + (StringExternal("Param/Value/76D33380") + FixedToText(UnitWeaponDamage(gv_playerHeroHero[lv_trigPlayer], 1, c_unitAttributeHover, false), 2)));
            lv_tempText = (lv_tempText + (StringExternal("Param/Value/E84AC4DC") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeMax, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/DD1942B1") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeRegen, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/28F2B7C8") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropEnergyMax, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/9F66B3FC") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropEnergyRegen, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/64C49867") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeArmor, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/BF945C04") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropMovementSpeed, c_unitPropCurrent), 2)));
            libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroPortrait[3], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroPortrait[2], UnitGetName(gv_playerHeroHero[lv_trigPlayer]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_heroStatsDialogHeroPortrait[1], (CatalogFieldValueGet(c_gameCatalogActor, (UnitGetType(gv_playerHeroHero[lv_trigPlayer])), "UnitIcon", c_playerAny)), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[0][0], (StringExternal("Param/Value/305B8300") + IntToText(gv_playerHeroHeroStats[lv_trigPlayer][0])), PlayerGroupSingle(lv_trigPlayer));
            lv_index = 0;
            for ( ; ( (auto011F8083_ai >= 0 && lv_index <= auto011F8083_ae) || (auto011F8083_ai < 0 && lv_index >= auto011F8083_ae) ) ; lv_index += auto011F8083_ai ) {
                libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[lv_index][16], (StringExternal("Param/Value/84799119") + IntToText(gv_playerHeroHeroStats[lv_trigPlayer][lv_index])), PlayerGroupSingle(lv_trigPlayer));
                lv_index2 = 1;
                for ( ; ( (auto579844FE_ai >= 0 && lv_index2 <= auto579844FE_ae) || (auto579844FE_ai < 0 && lv_index2 >= auto579844FE_ae) ) ; lv_index2 += auto579844FE_ai ) {
                    DialogControlSetVisible(gv_heroStatsDialogHeroStats[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
                    if ((gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTier][lv_unitType][lv_index] >= lv_index2)) {
                        DialogControlSetVisible(gv_heroStatsDialogHeroStats[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                    }

                }
            }
            libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[0][16], (StringExternal("Param/Value/8D2443D2") + FixedToText(UnitWeaponRange(gv_playerHeroHero[lv_trigPlayer], 2), 1)), PlayerGroupSingle(lv_trigPlayer));
            DialogSetVisible(gv_heroStatsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_heroStatsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto475C8FF3_val == gv_mainDialogItems[4]) {
        if ((DialogIsVisible(gv_inventoryDialogPackBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
            DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
            DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto475C8FF3_val == gv_mainDialogItems[5]) {
        if ((DialogIsVisible(gv_partyDialogBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_partyDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_partyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto475C8FF3_val == gv_mainDialogItems[6]) {
        if ((DialogIsVisible(gv_helpDialogDialogBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_helpDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            DialogSetVisible(gv_helpDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else {
    }
}

void gf_DialogUsedHelp (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int autoFB352201_ae;
    const int autoFB352201_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    if ((lv_dialogItemUsed == gv_helpDialogDialogItems[0][0])) {
        DialogSetVisible(gv_helpDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        return ;
    }
    else {
        if ((DialogIsVisible(gv_helpDialogDialogBox, lv_trigPlayer) == false)) {
            DialogSetVisible(gv_helpDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    autoFB352201_ae = gv_helpIndex;
    lv_index = 1;
    for ( ; ( (autoFB352201_ai >= 0 && lv_index <= autoFB352201_ae) || (autoFB352201_ai < 0 && lv_index >= autoFB352201_ae) ) ; lv_index += autoFB352201_ai ) {
        if ((lv_dialogItemUsed == gv_helpDialogDialogItems[lv_index][1])) {
            gv_helpPlayerSelected[lv_trigPlayer] = lv_index;
            if (((lv_index == 3) || (lv_index == 2) || (lv_index == 9))) {
                DialogSetVisible(gv_heroTreeDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                gf_DialogUsedHeroTree(lv_trigPlayer, gv_heroTreeDialogMainButtons[0]);
            }

        }

    }
    libNtve_gf_SetDialogItemText(gv_helpDialogDialogItems[0][1], (StringExternal("Param/Value/E5F99F2B") + gv_helpHelpText[gv_helpPlayerSelected[lv_trigPlayer]][1]), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_helpDialogDialogItems[0][2], (StringExternal("Param/Value/FA4C78D1") + gv_helpHelpText[gv_helpPlayerSelected[lv_trigPlayer]][2]), PlayerGroupSingle(lv_trigPlayer));
    if ((TimerGetRemaining(gv_helpPlayerTimer[lv_trigPlayer]) <= 0.1)) {
        gv_playerStatisticsAchievements[lv_trigPlayer][35][2] += 1;
    }

    TimerStart(gv_helpPlayerTimer[lv_trigPlayer], 6.0, false, c_timeGame);
}

void gf_DialogUsedMapNews (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int autoDE923F90_val;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoDE923F90_val = lv_dialogItemUsed;
    if (autoDE923F90_val == gv_mapDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 5;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoDE923F90_val == gv_mapDialogMainButtons[2]) {
        DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoDE923F90_val == gv_newsDialogItems[1]) {
        DialogSetVisible(gv_newsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoDE923F90_val == gv_modeDialogItems[1]) {
        DialogSetVisible(gv_modeDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
}

void gf_DialogUsedScreenEffects (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int auto2634583A_val;
    const int auto9922EAB5_ae = 5;
    const int auto9922EAB5_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto2634583A_val = lv_dialogItemUsed;
    if (auto2634583A_val == gv_screenEffectsDialogItem[4][1]) {
        gf_DialogShowHeroSelection(lv_trigPlayer);
        lv_index = 0;
        for ( ; ( (auto9922EAB5_ai >= 0 && lv_index <= auto9922EAB5_ae) || (auto9922EAB5_ai < 0 && lv_index >= auto9922EAB5_ae) ) ; lv_index += auto9922EAB5_ai ) {
            DialogControlSetVisible(gv_screenEffectsDialogItem[4][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[4][lv_index], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
        }
        DialogControlSetVisible(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
    }
    else {
    }
}

void gf_DialogUsedEXPBar (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int autoE17C9905_val;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoE17C9905_val = lv_dialogItemUsed;
    if (autoE17C9905_val == gv_eXPDialogItems[0]) {
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
    }
    else {
    }
}

void gf_InitVariablesRegionHelpTutorial () {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    bool lv_passFail;

    // Automatic Variable Declarations
    int autoF84F29F4_ae;
    const int autoF84F29F4_ai = 1;
    const int auto2B986C9C_ae = 15;
    const int auto2B986C9C_ai = 1;

    // Variable Initialization

    // Implementation
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/32C0AC60");
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(5);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/6AD9E04A");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/135DCD84");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 420;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 420;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(4);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/D81C207D");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/3666C8BA");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 417;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 340;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(2);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/90178F35");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/F8A6CF1C");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 362;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 420;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(3);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/87C6F5AD");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/FC859CDC");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 312;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 460;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(6);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/B1FEC284");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/037F19A7");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 290;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 360;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(8);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/0BCE1D58");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/50CAF45C");
    gv_regionsWeather[gv_regionsIndex] = 5;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 335;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 270;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(7);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/4E341345");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/9F873112");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 325;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 525;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(9);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/793D4027");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/6E129082");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 205;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 465;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(20);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/CD6F527D");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/5AF4C7B6");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 465;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 330;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(21);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/F23548F8");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/DD62C6FF");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 435;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 555;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(22);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/A5DECE07");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/63905C2D");
    gv_regionsWeather[gv_regionsIndex] = 1;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 505;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 450;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(23);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/E192C873");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/9E99D9C5");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 310;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 595;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(64);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/D06FB209");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/2B040037");
    gv_regionsWeather[gv_regionsIndex] = 5;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 575;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 360;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(68);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/99E1DB4A");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/B3B1712F");
    gv_regionsWeather[gv_regionsIndex] = 5;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 540;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 260;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(65);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/1C42D62E");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/9A92B7E4");
    gv_regionsWeather[gv_regionsIndex] = 4;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 650;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 180;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(67);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/4B6885BF");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/8B1CF974");
    gv_regionsWeather[gv_regionsIndex] = 2;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 230;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 195;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(66);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/48309414");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/E35B8320");
    gv_regionsWeather[gv_regionsIndex] = 6;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 390;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 200;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(69);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/2B22BFDD");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/F42ACACD");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 128;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 275;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(76);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/B6991D71");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/C9C537F4");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 710;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 310;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(80);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/C512E1BF");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/990823D2");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 640;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 425;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(73);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/8DC79F77");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/9D7A583B");
    gv_regionsWeather[gv_regionsIndex] = 1;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 667;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 365;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(105);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/AF8E102B");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/D500D58A");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 730;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 380;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(113);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/BBBED45F");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/A9E5EC35");
    gv_regionsWeather[gv_regionsIndex] = 7;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 135;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 390;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(106);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/1999B048");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/BE1C81C3");
    gv_regionsWeather[gv_regionsIndex] = 2;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 700;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 465;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(111);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/9A9E6604");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/3E45C663");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 145;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 520;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(107);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/58101033");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/009DB393");
    gv_regionsWeather[gv_regionsIndex] = 6;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 670;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 540;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(112);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/5EB7AC04");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/B9BE9635");
    gv_regionsWeather[gv_regionsIndex] = 8;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 207;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 630;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(108);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/8C6C949D");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/64C4AA98");
    gv_regionsWeather[gv_regionsIndex] = 5;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 525;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 615;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(110);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/C65F3870");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/3CAF371A");
    gv_regionsWeather[gv_regionsIndex] = 3;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 290;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 715;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(109);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/7657C9F6");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/5713D550");
    gv_regionsWeather[gv_regionsIndex] = 0;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = 385;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = 680;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(155);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/93866B9C");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/D78268C4");
    gv_regionsWeather[gv_regionsIndex] = 1;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = -300;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = -300;
    gv_regionsIndex += 1;
    gv_regionsRegion[gv_regionsIndex] = RegionFromId(114);
    gv_regionsNames[gv_regionsIndex] = StringExternal("Param/Value/3414D1C4");
    gv_regionsPlayerRegionName[gv_regionsIndex] = StringExternal("Param/Value/E03C5172");
    gv_regionsWeather[gv_regionsIndex] = 1;
    gv_mapDialogRegionsXY[gv_regionsIndex][1] = -300;
    gv_mapDialogRegionsXY[gv_regionsIndex][2] = -300;
    gv_dungeonsStatusText[1] = StringExternal("Param/Value/5AE5B638");
    gv_dungeonsStatusText[2] = StringExternal("Param/Value/4F9D7782");
    gv_dungeonsStatusText[3] = StringExternal("Param/Value/F779B73A");
    gv_dungeonsStatusText[4] = StringExternal("Param/Value/B55361FF");
    gv_dungeonsStatusText[5] = StringExternal("Param/Value/F263E7CE");
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/F0E2E229");
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/5D76523D");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(50.20, 50.20, 50.20);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(48);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(51);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(49);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/4BAF0E24");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 20;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/9BAFD5FF");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(0.00, 94.12, 0.00);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(34);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(56);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(57);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(35);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(36);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(47);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/1B2A253A");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 26;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/573CA529");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(0.00, 50.20, 0.00);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(58);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(62);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(63);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(59);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(60);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(61);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/71324FCD");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 32;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/34331717");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(83.53, 98.43, 51.76);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(83);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(85);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(86);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(81);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(84);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(82);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/EA27721B");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 37;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/97B219D5");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(69.41, 38.82, 38.82);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(87);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(91);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(92);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(88);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(90);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(89);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/4163C169");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 40;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/3E7636FF");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(100.00, 0.00, 0.00);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(131);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(115);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(116);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(127);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(129);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(128);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/700951AC");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 43;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/5EFA4FE7");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(100.00, 100.00, 50.20);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(136);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(117);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(118);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(133);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(135);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(134);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/8806B1BE");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 47;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/00C829CA");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(100.00, 0.00, 100.00);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(132);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(119);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(120);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(125);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(130);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(126);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/F276E4E4");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 50;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/E4137BE7");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(80.39, 43.53, 6.27);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(169);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(163);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(164);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(171);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(173);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(172);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/D622CC2F");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 52;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/3A4F2114");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(46.67, 30.20, 56.86);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(170);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(165);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(166);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(174);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(176);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(175);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/BD569829");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 55;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/A4782ABC");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(28.24, 28.24, 28.24);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(179);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(167);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(168);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(180);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(182);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(181);
    gv_regionsDungeonsIndex += 1;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][1] = StringExternal("Param/Value/C81847DB");
    gv_dungeonsLevels[gv_regionsDungeonsIndex] = 57;
    gv_regionsDungeonsNameDescription[gv_regionsDungeonsIndex][2] = StringExternal("Param/Value/A9FB8E02");
    gv_dungeonEnterDialogColors[gv_regionsDungeonsIndex] = Color(42.35, 21.18, 0.00);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][1] = RegionFromId(209);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][2] = RegionFromId(200);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][3] = RegionFromId(201);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][4] = RegionFromId(210);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][5] = RegionFromId(212);
    gv_regionsDungeonsRegion[gv_regionsDungeonsIndex][6] = RegionFromId(211);
    autoF84F29F4_ae = gv_regionsDungeonsIndex;
    lv_index = 1;
    for ( ; ( (autoF84F29F4_ai >= 0 && lv_index <= autoF84F29F4_ae) || (autoF84F29F4_ai < 0 && lv_index >= autoF84F29F4_ae) ) ; lv_index += autoF84F29F4_ai ) {
        TimerStart(gv_regionsDungeonsCloseTimer[lv_index], 30.0, false, c_timeGame);
    }
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(2);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(1);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = null;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = null;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = null;
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/E76A80CF");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(100.00, 0.00, 0.00);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(5);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(33);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(30);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/2A5D1C11");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(100.00, 100.00, 100.00);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(8);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(45);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(46);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/6A02C0DB");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(94.90, 90.59, 2.35);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(21);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(43);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(44);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/C0CB5FBB");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(0.00, 50.20, 25.10);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(66);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(99);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(100);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/60F603FB");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(75.29, 75.29, 75.29);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(73);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(74);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(75);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/AD568320");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(56.08, 40.00, 1.96);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(113);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(121);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(122);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/748BB212");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(67.06, 87.45, 99.61);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(108);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(123);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(124);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/C95F5145");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(88.63, 81.96, 68.63);
    gv_regionsTeleporterIndex += 1;
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][1] = RegionFromId(155);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][2] = RegionFromId(156);
    gv_regionsTeleporterRegions[gv_regionsTeleporterIndex][3] = RegionFromId(157);
    gv_teleporterDialogRegionsNames[gv_regionsTeleporterIndex] = StringExternal("Param/Value/CBD6896B");
    gv_teleporterDialogRegionsColors[gv_regionsTeleporterIndex] = Color(100.00, 100.00, 50.20);
    lv_index = 0;
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(213);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(214);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 5;
    gv_dungeonsD11CreepCountTypes[5][lv_index] = "Evilarthas";
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(215);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(220);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 15;
    gv_dungeonsD11CreepCountTypes[5][lv_index] = "Evilsylvanas";
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(216);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(221);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 30;
    gv_dungeonsD11CreepCountTypes[5][lv_index] = "Maidenofpain";
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(217);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(227);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 55;
    gv_dungeonsD11CreepCountTypes[5][lv_index] = "Darkwizard";
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(218);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(228);
    gv_dungeonsD11CreepCountTypes[5][lv_index] = "Kelthuzadghost";
    gv_dungeonsD11CreepCountTypesIndex[5] = lv_index;
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(219);
    gv_dungeonsD11Regions[2][lv_index] = RegionFromId(229);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 100;
    gv_dungeonsD11RegionsIndex[2] = lv_index;
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(222);
    gv_dungeonsD11CreepSpawnWeight[lv_index] = 40;
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(223);
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(224);
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(225);
    lv_index += 1;
    gv_dungeonsD11Regions[1][lv_index] = RegionFromId(226);
    gv_dungeonsD11RegionsIndex[1] = lv_index;
    lv_index = 0;
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(19);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/27ADA115");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(14);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/BB7333A9");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(15);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/A0C9C70B");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(17);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/BEA6290C");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(16);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/7366509B");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(18);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/10FB4D01");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(52);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/C98A0211");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(53);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/B1BE13E8");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(101);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/7C3793C3");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(183);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/20351295");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(184);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/C11E1C71");
    lv_index += 1;
    gv_regionsVendors[lv_index] = RegionFromId(202);
    gv_regionsVendorsNames[lv_index] = StringExternal("Param/Value/56CC56FB");
    lv_index = 0;
    lv_index = 1;
    for ( ; ( (auto2B986C9C_ai >= 0 && lv_index <= auto2B986C9C_ae) || (auto2B986C9C_ai < 0 && lv_index >= auto2B986C9C_ae) ) ; lv_index += auto2B986C9C_ai ) {
        if ((gv_regionsVendors[lv_index] != null)) {
            TextTagCreate(gv_regionsVendorsNames[lv_index], 32, RegionGetCenter(gv_regionsVendors[lv_index]), 0.6, true, false, PlayerGroupAll());
        }

    }
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btntransmute.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/DAEAA7D0");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/F227A3E1");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnscrollofhealing.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/CD38672D");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/8D8C8C9A");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnspiritlink.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/51A6FECA");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/21CF30C2");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btntomebrown.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/DEEDEC90");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/3540B8E5");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnspy.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/D69EEB67");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/157F1361");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnmassteleport.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/57013DAE");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/988E40F1");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btndust.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/164F1F48");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/638FE373");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnsteelmelee.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/553532FF");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/A25B11DA");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnrobeofthemagi.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/75132C2D");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/01434CA8");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnpickupitem.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/8C231520");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/A4907A3A");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btntomeofretraining.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/D3CF76C6");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/2FED7E6B");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnadvancedspikedbarricades.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/8EC5A3E8");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/9F8E65F1");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btncrate.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/DF56B413");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/E4B02CAA");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btndarkportal.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/21CB12F3");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/DAD3546A");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btncloudoffog.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/3AD4C98C");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/958932D2");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btn3m3.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/327F4B9E");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/D37A51AD");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btndizzy.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/93DF5DD0");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/97009DEB");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnbearden.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/BBBEC154");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/EFDB4F35");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnbattlestations.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/03F128AB");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/EFE29B6A");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnkotobeast.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/E0F84411");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/9645CD82");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnglyph.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/A45BF649");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/1014650C");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btndoom.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/2E8356ED");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/20C239F3");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btndemongate.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/4A8830A0");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/3AE5AA24");
    gv_helpIndex += 1;
    gv_helpDialogDialogIcons[gv_helpIndex] = "Assets\\Textures\\war3_btnhornoffog.dds";
    gv_helpHelpText[gv_helpIndex][1] = StringExternal("Param/Value/297AB93D");
    gv_helpHelpText[gv_helpIndex][2] = StringExternal("Param/Value/5C70C817");
    lv_index = 0;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/216FE432");
    gv_tutorialPositionsXY[lv_index][1] = 300;
    gv_tutorialPositionsXY[lv_index][2] = 200;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/8873D421");
    gv_tutorialPositionsXY[lv_index][1] = 500;
    gv_tutorialPositionsXY[lv_index][2] = 900;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/A6D791CC");
    gv_tutorialPositionsXY[lv_index][1] = 400;
    gv_tutorialPositionsXY[lv_index][2] = 200;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/DF6CC105");
    gv_tutorialPositionsXY[lv_index][1] = 500;
    gv_tutorialPositionsXY[lv_index][2] = 900;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/B3DFF4EF");
    gv_tutorialPositionsXY[lv_index][1] = 700;
    gv_tutorialPositionsXY[lv_index][2] = 100;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/2112DD97");
    gv_tutorialPositionsXY[lv_index][1] = 400;
    gv_tutorialPositionsXY[lv_index][2] = 300;
    lv_index += 1;
    gv_tutorialText[lv_index] = StringExternal("Param/Value/A18C3EAB");
    gv_tutorialPositionsXY[lv_index][1] = 500;
    gv_tutorialPositionsXY[lv_index][2] = 900;
}

void gf_DialogCreateTeleDungeonMapTutorialArenaLegendary () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int[7] lv_tempSize;
    text[9] lv_tempText;
    text[9] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto92E652C5_ae = 15;
    const int auto92E652C5_ai = 1;
    const int auto0A9E2676_ae = 3;
    const int auto0A9E2676_ai = 1;
    int autoE2DDB916_ae;
    const int autoE2DDB916_ai = 1;
    const int auto5EA825C2_ae = 15;
    const int auto5EA825C2_ai = 1;
    const int auto68F782D3_ae = 3;
    const int auto68F782D3_ai = 1;
    const int auto2827F9A9_ae = 5;
    const int auto2827F9A9_ai = 1;
    const int auto2C82A71F_ae = 5;
    const int auto2C82A71F_ai = 1;
    const int auto2FF13608_ae = 15;
    const int auto2FF13608_ai = 1;
    const int auto2E780265_ae = 2;
    const int auto2E780265_ai = 1;
    const int autoEDA1D413_ae = 10;
    const int autoEDA1D413_ai = 1;
    const int autoBFCEA043_ae = 2;
    const int autoBFCEA043_ai = 1;
    const int autoD49C599D_ae = 25;
    const int autoD49C599D_ai = 1;
    const int autoBA2E8FC6_ae = 7;
    const int autoBA2E8FC6_ai = 1;
    const int auto3D1218A8_ae = 2;
    const int auto3D1218A8_ai = 1;
    int autoD65C7C39_ae;
    const int autoD65C7C39_ai = 1;
    const int auto3763F1FD_ae = 15;
    const int auto3763F1FD_ai = 1;
    const int auto1EEC3644_ae = 2;
    const int auto1EEC3644_ai = 1;
    const int auto65790734_ae = gv_generalPlayerCap;
    const int auto65790734_ai = 1;
    const int auto6E9FA773_ae = 5;
    const int auto6E9FA773_ai = 1;
    const int autoDD4D77B0_ae = 15;
    const int autoDD4D77B0_ai = 1;
    const int auto57100903_ae = 3;
    const int auto57100903_ai = 1;
    const int auto03A9E3F4_ae = 4;
    const int auto03A9E3F4_ai = 1;
    const int auto89A7FEDA_ae = 2;
    const int auto89A7FEDA_ai = 1;
    const int autoBC098B07_ae = 5;
    const int autoBC098B07_ai = 1;
    const int auto299B93D4_ae = 15;
    const int auto299B93D4_ai = 1;
    const int auto4BE1E318_ae = 3;
    const int auto4BE1E318_ai = 1;
    const int autoFF903FE2_ae = 10;
    const int autoFF903FE2_ai = 1;
    const int auto22226896_ae = 6;
    const int auto22226896_ai = 1;
    const int autoD5C61F64_ae = 15;
    const int autoD5C61F64_ai = 1;
    const int autoD62AEC25_ae = 2;
    const int autoD62AEC25_ai = 1;
    const int auto5355A48C_ae = 3;
    const int auto5355A48C_ai = 1;
    const int auto28540EB1_ae = 2;
    const int auto28540EB1_ai = 1;
    const int auto5E554C94_ae = 5;
    const int auto5E554C94_ai = 1;
    const int auto6EBA7643_ae = 10;
    const int auto6EBA7643_ai = 1;
    const int auto7F0005BF_ae = 1;
    const int auto7F0005BF_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(525, 750, c_anchorTopLeft, 200, 100, true);
    gv_teleporterDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 425;
    lv_ySize = 670;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 375, 70, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto92E652C5_ai >= 0 && lv_index <= auto92E652C5_ae) || (auto92E652C5_ai < 0 && lv_index >= auto92E652C5_ae) ) ; lv_index += auto92E652C5_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 25)), (40 + RandomInt(1, 25)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 350)), ((lv_yPos + 25) + RandomInt(1, 425)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 120), (lv_yPos + 25), StringExternal("Param/Value/A7C5F112"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 30;
    lv_yPos = 670;
    lv_xSize = 210;
    lv_ySize = 60;
    lv_tempText[2] = StringExternal("Param/Value/161A15EB");
    lv_tempText[3] = StringExternal("Param/Value/67DCC97A");
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 2;
    for ( ; ( (auto0A9E2676_ai >= 0 && lv_index <= auto0A9E2676_ae) || (auto0A9E2676_ai < 0 && lv_index >= auto0A9E2676_ae) ) ; lv_index += auto0A9E2676_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_teleporterDialogMainItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 260;
    }
    lv_xPos = 100;
    lv_yPos = 135;
    lv_xSize = 250;
    lv_ySize = 60;
    autoE2DDB916_ae = gv_regionsTeleporterIndex;
    lv_index = 1;
    for ( ; ( (autoE2DDB916_ai >= 0 && lv_index <= autoE2DDB916_ae) || (autoE2DDB916_ai < 0 && lv_index >= autoE2DDB916_ae) ) ; lv_index += autoE2DDB916_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, gv_teleporterDialogRegionsColors[lv_index], c_triggerBlendModeNormal);
        gv_teleporterDialogRegionsItems[lv_index][3] = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_teleporterDialogRegionsItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 20), gv_teleporterDialogRegionsNames[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 275), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 268), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 85, c_anchorTopLeft, (lv_xPos + 255), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_teleporterDialogRegionsItems[lv_index][2] = DialogControlLastCreated();
        lv_yPos += 60;
    }
    DialogCreate(700, 650, c_anchorTopLeft, 100, 100, true);
    gv_dungeonEnterDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 600;
    lv_ySize = 550;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ulaan_dirt_crackednormal.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    gv_dungeonEnterDialogUniqueItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(0.00, 100.00, 0.00), c_triggerBlendModeNormal);
    gv_dungeonEnterDialogUniqueItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto5EA825C2_ai >= 0 && lv_index <= auto5EA825C2_ae) || (auto5EA825C2_ai < 0 && lv_index >= auto5EA825C2_ae) ) ; lv_index += auto5EA825C2_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 35)), (40 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 480)), ((lv_yPos + 25) + RandomInt(1, 510)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, (lv_xPos + 190), (lv_yPos + 25), StringExternal("Param/Value/9D44FFE3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEnterDialogUniqueItems[1] = DialogControlLastCreated();
    lv_xPos = 90;
    lv_yPos = 160;
    lv_xSize = 300;
    lv_ySize = 285;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 310, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 35), StringExternal("Param/Value/471D2ACC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEnterDialogUniqueItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos - 25), StringExternal("Param/Value/AC1168F9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 135), (lv_yPos - 25), StringExternal("Param/Value/6F31C58D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEnterDialogUniqueItems[6] = DialogControlLastCreated();
    lv_xPos = 25;
    lv_yPos = 545;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/0064DCE8");
    lv_tempText[2] = StringExternal("Param/Value/8920A72E");
    lv_tempText[3] = StringExternal("Param/Value/1CDF4A8D");
    lv_tempColor[1] = Color(75.29, 75.29, 75.29);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto68F782D3_ai >= 0 && lv_index <= auto68F782D3_ae) || (auto68F782D3_ai < 0 && lv_index >= auto68F782D3_ae) ) ; lv_index += auto68F782D3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_dungeonEnterDialogMainItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_dungeonEnterDialogMainItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_dungeonEnterDialogMainItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 225;
    }
    lv_xPos = 250;
    lv_yPos = 490;
    lv_xSize = 165;
    lv_ySize = 60;
    lv_tempText[4] = StringExternal("Param/Value/CE5DDC22");
    lv_tempText[5] = StringExternal("Param/Value/E682C149");
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_tempColor[5] = Color(100.00, 0.00, 0.00);
    lv_index = 4;
    for ( ; ( (auto2827F9A9_ai >= 0 && lv_index <= auto2827F9A9_ae) || (auto2827F9A9_ai < 0 && lv_index >= auto2827F9A9_ae) ) ; lv_index += auto2827F9A9_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_dungeonEnterDialogMainItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_dungeonEnterDialogMainItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_dungeonEnterDialogMainItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 180;
    }
    lv_xPos = 375;
    lv_yPos = 160;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 275, 80, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 40), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos - 10), (StringExternal("Param/Value/E391A048") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEnterDialogUniqueItems[4] = DialogControlLastCreated();
    lv_yPos = 235;
    lv_index = 1;
    for ( ; ( (auto2C82A71F_ai >= 0 && lv_index <= auto2C82A71F_ae) || (auto2C82A71F_ai < 0 && lv_index >= auto2C82A71F_ae) ) ; lv_index += auto2C82A71F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 22), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 0.00), c_triggerBlendModeNormal);
        gv_dungeonEnterDialogPartyItems[lv_index][2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos - 2), (StringExternal("Param/Value/51783359") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_dungeonEnterDialogPartyItems[lv_index][1] = DialogControlLastCreated();
        lv_yPos += 37;
    }
    lv_xPos = 365;
    lv_yPos = 365;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos - 50), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_dungeonEnterDialogHeroicItems[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 15), StringExternal("Param/Value/A2A1488A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 208), (lv_yPos + 13), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 38, 38, c_anchorTopLeft, (lv_xPos + 208), (lv_yPos + 13), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_dungeonEnterDialogHeroicItems[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos + 202), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, (lv_xPos + 190), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_dungeonEnterDialogHeroicItems[2] = DialogControlLastCreated();
    lv_xPos = 355;
    lv_yPos = 405;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos - 50), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_dungeonEnterDialogLegendaryItems[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringExternal("Param/Value/F01E0362"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 218), (lv_yPos + 13), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 38, 38, c_anchorTopLeft, (lv_xPos + 218), (lv_yPos + 13), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_dungeonEnterDialogLegendaryItems[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos + 212), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 50.20, 50.20), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 85, c_anchorTopLeft, (lv_xPos + 195), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_pink.dds", c_triggerImageTypeNormal, false, Color(100.00, 73.33, 73.33), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_dungeonEnterDialogLegendaryItems[2] = DialogControlLastCreated();
    lv_xPos = 355;
    lv_yPos = 445;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos - 50), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_dungeonEnterDialogHardcoreItems[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 15), StringExternal("Param/Value/AC80B46F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 218), (lv_yPos + 13), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 38, 38, c_anchorTopLeft, (lv_xPos + 218), (lv_yPos + 13), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_dungeonEnterDialogHardcoreItems[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos + 212), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 50.20, 50.20), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 85, c_anchorTopLeft, (lv_xPos + 195), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_pink.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_dungeonEnterDialogHardcoreItems[2] = DialogControlLastCreated();
    DialogCreate(2400, 1600, c_anchorTopLeft, -50, -50, true);
    gv_dungeonCheckDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\war3_loading_screen_credits.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_xPos = 780;
    lv_yPos = 200;
    lv_xSize = 400;
    lv_ySize = 300;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    lv_index = 1;
    for ( ; ( (auto2FF13608_ai >= 0 && lv_index <= auto2FF13608_ae) || (auto2FF13608_ai < 0 && lv_index >= auto2FF13608_ae) ) ; lv_index += auto2FF13608_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 35)), (20 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 330)), ((lv_yPos + 25) + RandomInt(1, 200)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 310, 200, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 35), StringExternal("Param/Value/389CAF20"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonCheckDialogMainItems[3] = DialogControlLastCreated();
    lv_xPos = 775;
    lv_yPos = 450;
    lv_xSize = 190;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/65FC9DBA");
    lv_tempText[2] = StringExternal("Param/Value/CC7F300F");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto2E780265_ai >= 0 && lv_index <= auto2E780265_ae) || (auto2E780265_ai < 0 && lv_index >= auto2E780265_ae) ) ; lv_index += auto2E780265_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_dungeonCheckDialogMainItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 220;
    }
    DialogCreate(400, 325, c_anchorCenter, -200, 200, true);
    gv_dungeonLeaveDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 25;
    lv_yPos = 25;
    lv_xSize = 350;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    lv_index = 1;
    for ( ; ( (autoEDA1D413_ai >= 0 && lv_index <= autoEDA1D413_ae) || (autoEDA1D413_ai < 0 && lv_index >= autoEDA1D413_ae) ) ; lv_index += autoEDA1D413_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 35)), (20 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 290)), ((lv_yPos + 25) + RandomInt(1, 175)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 270, 300, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 35), StringExternal("Param/Value/5A74FC08"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 12;
    lv_yPos = 220;
    lv_xSize = 180;
    lv_ySize = 60;
    lv_tempText[1] = StringExternal("Param/Value/94168861");
    lv_tempText[2] = StringExternal("Param/Value/428176AE");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (autoBFCEA043_ai >= 0 && lv_index <= autoBFCEA043_ae) || (autoBFCEA043_ai < 0 && lv_index >= autoBFCEA043_ae) ) ; lv_index += autoBFCEA043_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_dungeonLeaveDialogMainItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 16), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 200;
    }
    DialogCreate(900, 900, c_anchorTopLeft, 0, -25, true);
    gv_mapDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 800;
    lv_ySize = 800;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoD49C599D_ai >= 0 && lv_index <= autoD49C599D_ae) || (autoD49C599D_ai < 0 && lv_index >= autoD49C599D_ae) ) ; lv_index += autoD49C599D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 25)), (40 + RandomInt(1, 25)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 720)), ((lv_yPos + 25) + RandomInt(1, 720)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 370), (lv_yPos + 25), StringExternal("Param/Value/00C83D88"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 100;
    lv_yPos = 150;
    lv_xSize = 700;
    lv_ySize = 635;
    lv_tempColor[1] = Color(0.00, 0.00, 0.00);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 16), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 8), StringToText(""), "MiniMapA.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 635, c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 635, c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 635, c_anchorTopLeft, (lv_xPos + 675), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 635, c_anchorTopLeft, (lv_xPos + 675), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoBA2E8FC6_ai >= 0 && lv_index <= autoBA2E8FC6_ae) || (autoBA2E8FC6_ai < 0 && lv_index >= autoBA2E8FC6_ae) ) ; lv_index += autoBA2E8FC6_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 560, 30, c_anchorTopLeft, (lv_xPos - 10), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 150, 40, c_anchorTopLeft, (lv_xPos + 380), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, (lv_xPos + 605), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 105, 195, c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 460), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 130, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 515), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 100, c_anchorTopLeft, (lv_xPos + 285), (lv_yPos + 545), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 180, c_anchorTopLeft, (lv_xPos + 400), (lv_yPos + 470), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 210, 230, c_anchorTopLeft, (lv_xPos + 500), (lv_yPos + 405), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xPos = 200;
    lv_yPos = 795;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/1130727B");
    lv_tempText[2] = StringExternal("Param/Value/7B0EE6C4");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto3D1218A8_ai >= 0 && lv_index <= auto3D1218A8_ae) || (auto3D1218A8_ai < 0 && lv_index >= auto3D1218A8_ae) ) ; lv_index += auto3D1218A8_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_mapDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 270;
    }
    lv_tempSplat[0] = "Assets\\Textures\\decal_protoss_0005_01.dds";
    autoD65C7C39_ae = gv_regionsIndex;
    lv_index = 1;
    for ( ; ( (autoD65C7C39_ai >= 0 && lv_index <= autoD65C7C39_ae) || (autoD65C7C39_ai < 0 && lv_index >= autoD65C7C39_ae) ) ; lv_index += autoD65C7C39_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 27, 27, c_anchorTopLeft, (gv_mapDialogRegionsXY[lv_index][1] - 0), (gv_mapDialogRegionsXY[lv_index][2] - 0), gv_regionsPlayerRegionName[lv_index], lv_tempSplat[0], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_mapDialogRegions[lv_index] = DialogControlLastCreated();
    }
    DialogCreate(2400, 1600, c_anchorTopLeft, -50, -50, true);
    gv_tutorialSkipDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\war3_loading_screen_credits.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_xPos = 400;
    lv_yPos = 200;
    lv_xSize = 400;
    lv_ySize = 300;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    lv_index = 1;
    for ( ; ( (auto3763F1FD_ai >= 0 && lv_index <= auto3763F1FD_ae) || (auto3763F1FD_ai < 0 && lv_index >= auto3763F1FD_ae) ) ; lv_index += auto3763F1FD_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 35)), (20 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 330)), ((lv_yPos + 25) + RandomInt(1, 200)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 310, 200, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 35), StringExternal("Param/Value/A3110CA1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 395;
    lv_yPos = 450;
    lv_xSize = 190;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/5BB7B665");
    lv_tempText[2] = StringExternal("Param/Value/EA012352");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto1EEC3644_ai >= 0 && lv_index <= auto1EEC3644_ae) || (auto1EEC3644_ai < 0 && lv_index >= auto1EEC3644_ae) ) ; lv_index += auto1EEC3644_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_tutorialSkipDialogItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 220;
    }
    lv_index = 1;
    for ( ; ( (auto65790734_ai >= 0 && lv_index <= auto65790734_ae) || (auto65790734_ai < 0 && lv_index >= auto65790734_ae) ) ; lv_index += auto65790734_ai ) {
        DialogCreate(600, 300, c_anchorTopLeft, 100, 100, true);
        gv_tutorialDialogBox[lv_index] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        lv_xPos = 150;
        lv_yPos = 25;
        lv_xSize = 380;
        lv_ySize = 180;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
        lv_index2 = 1;
        for ( ; ( (auto6E9FA773_ai >= 0 && lv_index2 <= auto6E9FA773_ae) || (auto6E9FA773_ai < 0 && lv_index2 >= auto6E9FA773_ae) ) ; lv_index2 += auto6E9FA773_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 20)), (20 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 300)), ((lv_yPos + 25) + RandomInt(1, 110)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 310, 200, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 30), StringExternal("Param/Value/3EC37F40"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_tutorialDialogItems[lv_index][2] = DialogControlLastCreated();
        lv_xPos = 15;
        lv_yPos = 10;
        lv_xSize = 185;
        lv_ySize = 210;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnbloodelfpeasant.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_tutorialDialogItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    }
    DialogCreate(700, 700, c_anchorTopLeft, 100, 100, true);
    gv_arenaDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 600;
    lv_ySize = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 320, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 190), StringToText(""), "Assets\\Textures\\decaldarkspacelines03_diffuse.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ulaan_dirt_crackednormal.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 30), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoDD4D77B0_ai >= 0 && lv_index <= autoDD4D77B0_ae) || (autoDD4D77B0_ai < 0 && lv_index >= autoDD4D77B0_ae) ) ; lv_index += autoDD4D77B0_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 35)), (40 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 530)), ((lv_yPos + 25) + RandomInt(1, 530)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, (lv_xPos + 250), (lv_yPos + 23), StringExternal("Param/Value/6BAF7B99"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 90;
    lv_yPos = 140;
    lv_xSize = 510;
    lv_ySize = 125;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 435, 180, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 30), StringExternal("Param/Value/E8A2F348"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 95), (lv_yPos - 20), StringExternal("Param/Value/200948E2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 325), (lv_yPos - 20), StringExternal("Param/Value/5732C989"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_arenaDialogTextItems[1] = DialogControlLastCreated();
    lv_xPos = 25;
    lv_yPos = 595;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/3F53664C");
    lv_tempText[2] = StringExternal("Param/Value/046B095A");
    lv_tempText[3] = StringExternal("Param/Value/30A8DD6C");
    lv_tempColor[1] = Color(75.29, 75.29, 75.29);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto57100903_ai >= 0 && lv_index <= auto57100903_ae) || (auto57100903_ai < 0 && lv_index >= auto57100903_ae) ) ; lv_index += auto57100903_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_arenaDialogMainItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_arenaDialogMainItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_arenaDialogMainItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 225;
    }
    lv_xPos = 250;
    lv_yPos = 540;
    lv_xSize = 165;
    lv_ySize = 60;
    lv_tempText[4] = StringExternal("Param/Value/AF09F09D");
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_index = 4;
    for ( ; ( (auto03A9E3F4_ai >= 0 && lv_index <= auto03A9E3F4_ae) || (auto03A9E3F4_ai < 0 && lv_index >= auto03A9E3F4_ae) ) ; lv_index += auto03A9E3F4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_arenaDialogMainItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_arenaDialogMainItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_arenaDialogMainItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 180;
    }
    lv_xPos = 60;
    lv_tempInt = 0;
    lv_index2 = 1;
    for ( ; ( (auto89A7FEDA_ai >= 0 && lv_index2 <= auto89A7FEDA_ae) || (auto89A7FEDA_ai < 0 && lv_index2 >= auto89A7FEDA_ae) ) ; lv_index2 += auto89A7FEDA_ai ) {
        lv_yPos = 275;
        lv_index = 1;
        for ( ; ( (autoBC098B07_ai >= 0 && lv_index <= autoBC098B07_ae) || (autoBC098B07_ai < 0 && lv_index >= autoBC098B07_ae) ) ; lv_index += autoBC098B07_ai ) {
            lv_tempInt += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos - 5), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            gv_arenaDialogPartyItems[lv_tempInt][0] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 20), (StringExternal("Param/Value/7C768A16") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_arenaDialogPartyItems[lv_tempInt][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 208), (lv_yPos + 13), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 38, 38, c_anchorTopLeft, (lv_xPos + 208), (lv_yPos + 13), StringToText(""), StringToText(""), gv_dialogHighlighted);
            gv_arenaDialogPartyItems[lv_tempInt][1] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos + 202), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, (lv_xPos + 190), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_arenaDialogPartyItems[lv_tempInt][3] = DialogControlLastCreated();
            lv_yPos += 44;
        }
        lv_xPos += 300;
    }
    DialogCreate(850, 700, c_anchorTopRight, 100, 100, true);
    gv_dungeonEndDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 750;
    lv_ySize = 540;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ulaan_dirt_crackednormal.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 30), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto299B93D4_ai >= 0 && lv_index <= auto299B93D4_ae) || (auto299B93D4_ai < 0 && lv_index >= auto299B93D4_ae) ) ; lv_index += auto299B93D4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 35)), (40 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 690)), ((lv_yPos + 25) + RandomInt(1, 310)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, (lv_xPos + 210), (lv_yPos + 23), StringExternal("Param/Value/49D5F979"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEndDialogPartyItems[0][1] = DialogControlLastCreated();
    lv_xPos = 110;
    lv_yPos = 500;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 230, 80, c_anchorTopLeft, (lv_xPos - 40), (lv_yPos - 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos - 5), (lv_yPos + 12), StringExternal("Param/Value/EB9C418C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEndDialogPartyItems[0][2] = DialogControlLastCreated();
    lv_xPos = 500;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 290, 80, c_anchorTopLeft, (lv_xPos - 40), (lv_yPos - 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 15), StringExternal("Param/Value/C5C4AFBE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 15), StringExternal("Param/Value/95CA5E5D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_dungeonEndDialogPartyItems[0][3] = DialogControlLastCreated();
    lv_xPos = 275;
    lv_yPos = 525;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[3] = StringExternal("Param/Value/C9767038");
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 3;
    for ( ; ( (auto4BE1E318_ai >= 0 && lv_index <= auto4BE1E318_ae) || (auto4BE1E318_ai < 0 && lv_index >= auto4BE1E318_ae) ) ; lv_index += auto4BE1E318_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_dungeonEndDialogPartyItems[0][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 225;
    }
    lv_tempText[1] = StringExternal("Param/Value/7198BA36");
    lv_tempSize[1] = 125;
    lv_tempText[2] = StringExternal("Param/Value/233B46FF");
    lv_tempSize[2] = 95;
    lv_tempText[3] = StringExternal("Param/Value/F23FEC4E");
    lv_tempSize[3] = 100;
    lv_tempText[4] = StringExternal("Param/Value/66EE8047");
    lv_tempSize[4] = 125;
    lv_tempText[5] = StringExternal("Param/Value/73A02F54");
    lv_tempSize[5] = 125;
    lv_tempText[6] = StringExternal("Param/Value/24E91DF0");
    lv_tempSize[6] = 125;
    lv_yPos = 115;
    lv_index = 0;
    for ( ; ( (autoFF903FE2_ai >= 0 && lv_index <= autoFF903FE2_ae) || (autoFF903FE2_ai < 0 && lv_index >= autoFF903FE2_ae) ) ; lv_index += autoFF903FE2_ai ) {
        lv_xPos = 45;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 870, 55, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        lv_index2 = 1;
        for ( ; ( (auto22226896_ai >= 0 && lv_index2 <= auto22226896_ae) || (auto22226896_ai < 0 && lv_index2 >= auto22226896_ae) ) ; lv_index2 += auto22226896_ai ) {
            if ((lv_index == 0)) {
                if ((lv_index2 == 1)) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 20), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    if ((lv_index2 == 2)) {
                        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 20), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
                    }
                    else {
                        if ((lv_index2 == 3)) {
                            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 20), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
                        }
                        else {
                            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 20), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
                        }
                    }
                }
            }
            else {
                if ((lv_index2 >= 4)) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 35, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
                    gv_dungeonEndDialogPartyItems[lv_index][(lv_index2 + 3)] = DialogControlLastCreated();
                }

                if ((lv_index2 == 1)) {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 20), (StringExternal("Param/Value/DC677302") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 20), (StringExternal("Param/Value/3A556D0C") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                gv_dungeonEndDialogPartyItems[lv_index][lv_index2] = DialogControlLastCreated();
            }
            lv_xPos += lv_tempSize[lv_index2];
        }
        lv_yPos += 33;
    }
    DialogCreate(1000, 870, c_anchorCenter, -300, -100, true);
    gv_legendaryDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 50;
    lv_xSize = 900;
    lv_ySize = 770;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 250), 60, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 615, c_anchorTopLeft, 450, 100, StringToText(""), "Assets\\Textures\\decalspacelines03_diffuse.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    lv_index = 1;
    for ( ; ( (autoD5C61F64_ai >= 0 && lv_index <= autoD5C61F64_ae) || (autoD5C61F64_ai < 0 && lv_index >= autoD5C61F64_ae) ) ; lv_index += autoD5C61F64_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 800)), ((lv_yPos + 30) + RandomInt(1, 500)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 285), (lv_yPos + 25), StringExternal("Param/Value/9A9563E1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnthecaptain.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/5F4971F2");
    lv_tempText[2] = StringExternal("Param/Value/340DBE32");
    lv_tempText[3] = StringExternal("Param/Value/F33EFF3D");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_tempColor[3] = Color(0.00, 50.20, 100.00);
    lv_yPos = 760;
    lv_xPos = 235;
    lv_xSize = 220;
    lv_ySize = 70;
    lv_index2 = 1;
    for ( ; ( (autoD62AEC25_ai >= 0 && lv_index2 <= autoD62AEC25_ae) || (autoD62AEC25_ai < 0 && lv_index2 >= autoD62AEC25_ae) ) ; lv_index2 += autoD62AEC25_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_legendaryDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 400;
    }
    lv_yPos = 690;
    lv_xPos = 400;
    lv_xSize = 180;
    lv_ySize = 60;
    lv_index2 = 3;
    for ( ; ( (auto5355A48C_ai >= 0 && lv_index2 <= auto5355A48C_ae) || (auto5355A48C_ai < 0 && lv_index2 >= auto5355A48C_ae) ) ; lv_index2 += auto5355A48C_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_legendaryDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 16), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos += 170;
    lv_yPos += 0;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 270, 60, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos - 3), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos + 16), StringExternal("Param/Value/943E6853"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_legendaryDialogStats[0][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 34), (lv_yPos + 14), StringToText(""), gv_currencyIcons[3][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 10), StringToText(""), gv_currencyIcons[3][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xPos = 185;
    lv_index = 1;
    for ( ; ( (auto28540EB1_ai >= 0 && lv_index <= auto28540EB1_ae) || (auto28540EB1_ai < 0 && lv_index >= auto28540EB1_ae) ) ; lv_index += auto28540EB1_ai ) {
        lv_yPos = 100;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 780, c_anchorTopLeft, (lv_xPos - 70), (lv_yPos - 80), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
        gv_legendaryDialogStats[lv_index][8] = DialogControlLastCreated();
        lv_yPos = 130;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 85), (lv_yPos + 0), StringExternal("Param/Value/62AE3599"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 45, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 13), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_legendaryDialogStats[lv_index][9] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        lv_yPos += 25;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos + 0), StringExternal("Param/Value/EED35D6B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_legendaryDialogStats[lv_index][0] = DialogControlLastCreated();
        lv_yPos += 45;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 400, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 0), StringExternal("Param/Value/9CEEB63F"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_legendaryDialogStats[lv_index][6] = DialogControlLastCreated();
        lv_yPos += 80;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 360, 390, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos + 0), StringExternal("Param/Value/A6BA9336"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_legendaryDialogStats[lv_index][7] = DialogControlLastCreated();
        lv_yPos += 245;
        lv_index2 = 1;
        for ( ; ( (auto5E554C94_ai >= 0 && lv_index2 <= auto5E554C94_ae) || (auto5E554C94_ai < 0 && lv_index2 >= auto5E554C94_ae) ) ; lv_index2 += auto5E554C94_ai ) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 0), (StringExternal("Param/Value/BC61966E") + (IntToText(lv_index2) + StringExternal("Param/Value/A7407ECA"))), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 490, 50, c_anchorTopLeft, (lv_xPos - 90), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 320, 50, c_anchorTopLeft, (lv_xPos + 85), (lv_yPos + 0), (StringExternal("Param/Value/DF40E4CB") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_legendaryDialogStats[lv_index][lv_index2] = DialogControlLastCreated();
            lv_yPos += 33;
        }
        lv_xPos += 410;
    }
    DialogCreate(550, 525, c_anchorTopLeft, 200, 100, true);
    gv_tutorialDialog2Box = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 125;
    lv_yPos = 35;
    lv_xSize = 425;
    lv_ySize = 475;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    lv_index2 = 1;
    for ( ; ( (auto6EBA7643_ai >= 0 && lv_index2 <= auto6EBA7643_ae) || (auto6EBA7643_ai < 0 && lv_index2 >= auto6EBA7643_ae) ) ; lv_index2 += auto6EBA7643_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 20)), (20 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 50) + RandomInt(1, 430)), ((lv_yPos + 50) + RandomInt(1, 450)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 295, 415, c_anchorTopLeft, (lv_xPos + 85), (lv_yPos + 30), StringExternal("Param/Value/5A510C25"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tutorialDialog2Items[1] = DialogControlLastCreated();
    lv_xPos = 25;
    lv_yPos = 10;
    lv_xSize = 185;
    lv_ySize = 210;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnbloodelfpeasant.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_tutorialDialog2Items[0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/2867142A");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_xPos = 240;
    lv_yPos = 460;
    lv_xSize = 190;
    lv_ySize = 65;
    lv_index2 = 1;
    for ( ; ( (auto7F0005BF_ai >= 0 && lv_index2 <= auto7F0005BF_ae) || (auto7F0005BF_ai < 0 && lv_index2 >= auto7F0005BF_ae) ) ; lv_index2 += auto7F0005BF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_tutorialDialog2Items[2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 37), (lv_yPos + 19), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
}

void gf_DialogUsedTeleportSelection (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    int auto9B7234EB_val;
    int auto295E7E6D_ae;
    const int auto295E7E6D_ai = 1;
    int auto7230FD57_ae;
    const int auto7230FD57_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    auto9B7234EB_val = lv_dialogItemUsed;
    if (auto9B7234EB_val == gv_teleporterDialogMainItems[2]) {
        if ((gv_tutorial2Progress >= 1)) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/E2C93D34"), PlayerGroupSingle(lv_trigPlayer));
        }
        else {
            if ((gv_regionsTeleporterSelected[lv_trigPlayer] >= 1) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], gv_regionsTeleporterRegions[gv_regionsTeleporterSelected[lv_trigPlayer]][2]) == false)) {
                DialogSetVisible(gv_teleporterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Teleport", gv_playerHeroHero[lv_trigPlayer], 1);
                Wait(0.2, c_timeGame);
                if ((gv_regionsTeleporterSelected[lv_trigPlayer] == 1)) {
                    UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(gv_regionsDungeonsRegion[gv_dungeonsDungeonSelected[lv_trigPlayer]][3]), false);
                }
                else {
                    UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(gv_regionsTeleporterRegions[gv_regionsTeleporterSelected[lv_trigPlayer]][3]), false);
                }
                CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
                UnitClearSelection(lv_trigPlayer);
                UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
            }

        }
    }
    else if (auto9B7234EB_val == gv_teleporterDialogMainItems[3]) {
        DialogSetVisible(gv_teleporterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else {
    }
    auto295E7E6D_ae = gv_regionsTeleporterIndex;
    lv_index = 1;
    for ( ; ( (auto295E7E6D_ai >= 0 && lv_index <= auto295E7E6D_ae) || (auto295E7E6D_ai < 0 && lv_index >= auto295E7E6D_ae) ) ; lv_index += auto295E7E6D_ai ) {
        if ((lv_dialogItemUsed == gv_teleporterDialogRegionsItems[lv_index][1])) {
            auto7230FD57_ae = gv_regionsTeleporterIndex;
            lv_index2 = 1;
            for ( ; ( (auto7230FD57_ai >= 0 && lv_index2 <= auto7230FD57_ae) || (auto7230FD57_ai < 0 && lv_index2 >= auto7230FD57_ae) ) ; lv_index2 += auto7230FD57_ai ) {
                DialogControlSetVisible(gv_teleporterDialogRegionsItems[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            DialogControlSetVisible(gv_teleporterDialogRegionsItems[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
            gv_regionsTeleporterSelected[lv_trigPlayer] = lv_index;
        }

    }
}

void gf_DialogUsedDungeonSetup (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempDungeon;
    int lv_tempInt;
    int lv_tempInt2;

    // Automatic Variable Declarations
    int auto3254384B_val;
    playergroup autoC1CC90FC_g;
    int autoC1CC90FC_var;
    const int autoBCAED6E0_ae = 10;
    const int autoBCAED6E0_ai = 1;
    unitgroup auto84C721D7_g;
    int auto84C721D7_u;
    unit auto84C721D7_var;
    unitgroup auto831389AF_g;
    int auto831389AF_u;
    unit auto831389AF_var;
    unitgroup auto4E0DFC87_g;
    int auto4E0DFC87_u;
    unit auto4E0DFC87_var;
    const int auto95119DA5_ae = 3;
    const int auto95119DA5_ai = 1;
    const int auto2ED35876_ae = 4;
    const int auto2ED35876_ai = 1;
    playergroup auto429A2095_g;
    int auto429A2095_var;
    int autoDDC890B1_ae;
    const int autoDDC890B1_ai = 1;
    const int auto48E5F948_ae = gv_questsQuestSlots;
    const int auto48E5F948_ai = 1;
    const int autoCEEB2BFC_ae = 4;
    const int autoCEEB2BFC_ai = 1;
    playergroup auto701DB48C_g;
    int auto701DB48C_var;
    const int autoA2EA767C_ae = 10;
    const int autoA2EA767C_ai = 1;
    unitgroup auto560C2CA4_g;
    int auto560C2CA4_u;
    unit auto560C2CA4_var;
    const int autoC63FF653_ae = 8;
    const int autoC63FF653_ai = 3;
    unitgroup autoB70E7BFC_g;
    int autoB70E7BFC_u;
    unit autoB70E7BFC_var;
    int autoDFD03E5D_val;
    const int autoFF09F4FE_ae = 4;
    const int autoFF09F4FE_ai = 1;
    playergroup autoFFCB777E_g;
    int autoFFCB777E_var;
    const int autoAF764977_ae = 3;
    const int autoAF764977_ai = 1;
    const int auto09151479_ae = 3;
    const int auto09151479_ai = 1;
    const int auto11DC6EAF_ae = 3;
    const int auto11DC6EAF_ai = 1;
    const int auto95256794_ae = 3;
    const int auto95256794_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_tempDungeon = gv_dungeonsDungeonSelected[lv_trigPlayer];
    auto3254384B_val = lv_dialogItemUsed;
    if (auto3254384B_val == gv_dungeonEnterDialogMainItems[1][1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 14;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogMainItems[2][1]) {
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_tempDungeon], lv_trigPlayer) == true) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 2)) {
            if ((((gv_survivalLevelsPassed > 1) && (gv_dungeonsDungeonSelected[lv_trigPlayer] == 0)) || ((gv_dungeonsHardcore[lv_tempDungeon] == true) && (gv_dungeonsDog[lv_tempDungeon] == false) && (TimerGetElapsed(gv_regionsDungeonsOpenTimer[lv_tempDungeon]) > 120.0)))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/0591066B"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                DialogSetVisible(gv_dungeonEnterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                gv_regionsDungeonsActive[lv_tempDungeon] = true;
                TimerStart(gv_regionsDungeonsCloseTimer[lv_tempDungeon], gv_regionsDungeonsCloseTime, false, c_timeGame);
                TimerStart(gv_playerCombatTimer[lv_trigPlayer], 8.0, false, c_timeGame);
                if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) >= 70.0)) {
                    libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(22*100/255,128*100/255,0), PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) < 70.0) && (UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) >= 30.0)) {
                        libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(lv_trigPlayer));
                    }
                    else {
                        if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) < 30.0)) {
                            libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                        }

                    }
                }
                DialogControlFadeTransparency(gv_screenEffectsDialogItem[6][0], PlayerGroupSingle(lv_trigPlayer), 0.0, 40.0);
                DialogControlFadeTransparency(gv_screenEffectsDialogItem[6][0], PlayerGroupSingle(lv_trigPlayer), 10.0, 100.0);
                TimerPause(gv_regionsDungeonsCloseTimer[lv_tempDungeon], true);
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Teleport", gv_playerHeroHero[lv_trigPlayer], 1);
                Wait(0.2, c_timeGame);
                UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(gv_regionsDungeonsRegion[lv_tempDungeon][4]), false);
                CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
                UnitClearSelection(lv_trigPlayer);
                UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
                if ((gv_survivalLevelsPassed == -1) && (gv_dungeonsDungeonSelected[lv_trigPlayer] == 0)) {
                    gv_survivalLevelsPassed = 0;
                    Wait(12.0, c_timeGame);
                    gf_SurvivalCreepSpawn();
                }

            }
        }

    }
    else if (auto3254384B_val == gv_dungeonEndDialogPartyItems[0][0]) {
        DialogSetVisible(gv_dungeonEndDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogMainItems[3][1]) {
        DialogSetVisible(gv_dungeonEnterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogMainItems[4][1]) {
        if ((gv_dungeonsActiveStatus[lv_tempDungeon] == 1)) {
            if ((gv_dungeonsDungeonSelected[lv_trigPlayer] == 0) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/09EE4C74"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                gv_dungeonsActiveStatus[lv_tempDungeon] = 5;
                libNtve_gf_SetDialogItemText(gv_dungeonCheckDialogMainItems[3], gv_dungeonsStatusText[5], PlayerGroupSingle(lv_trigPlayer));
                DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/63CDC151"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogMainItems[5][1]) {
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_tempDungeon], lv_trigPlayer) == true) && (gv_dungeonsPartyLeader[lv_tempDungeon] == lv_trigPlayer) && (gv_dungeonsActiveStatus[lv_tempDungeon] >= 1)) {
            gv_dungeonsActiveStatus[lv_tempDungeon] = 4;
            libNtve_gf_SetDialogItemText(gv_dungeonCheckDialogMainItems[3], gv_dungeonsStatusText[4], PlayerGroupSingle(lv_trigPlayer));
            DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/6AAB5CDB"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (auto3254384B_val == gv_dungeonCheckDialogMainItems[1]) {
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_tempDungeon], lv_trigPlayer) == true) && (gv_dungeonsPartyLeader[lv_tempDungeon] == lv_trigPlayer) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 4) && (gv_generalTutorialMode == false)) {
            if ((UnitGroupCount(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[lv_tempDungeon][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                gv_regionsDungeonsActive[lv_tempDungeon] = false;
                TimerStart(gv_regionsDungeonsCloseTimer[lv_tempDungeon], gv_regionsDungeonsCloseTime, false, c_timeGame);
                TimerPause(gv_regionsDungeonsCloseTimer[lv_tempDungeon], true);
                gv_dungeonsActiveStatus[lv_tempDungeon] = 1;
                gv_dungeonsPartyLeader[lv_tempDungeon] = 0;
                autoC1CC90FC_g = gv_dungeonsParty[lv_tempDungeon];
                autoC1CC90FC_var = -1;
                while (true) {
                    autoC1CC90FC_var = PlayerGroupNextPlayer(autoC1CC90FC_g, autoC1CC90FC_var);
                    if (autoC1CC90FC_var < 0) { break; }
                    lv_index = 1;
                    for ( ; ( (autoBCAED6E0_ai >= 0 && lv_index <= autoBCAED6E0_ae) || (autoBCAED6E0_ai < 0 && lv_index >= autoBCAED6E0_ae) ) ; lv_index += autoBCAED6E0_ai ) {
                        gv_dungeonsDungeonStatistics[autoC1CC90FC_var][lv_index][lv_tempDungeon] = 0;
                    }
                }
                PlayerGroupClear(gv_dungeonsParty[lv_tempDungeon]);
                libNtve_gf_StopTimer(gv_regionsDungeonsOpenTimer[lv_tempDungeon]);
                auto84C721D7_g = UnitGroup(null, 0, gv_regionsDungeonsRegion[lv_tempDungeon][1], UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto84C721D7_u = UnitGroupCount(auto84C721D7_g, c_unitCountAll);
                for (;; auto84C721D7_u -= 1) {
                    auto84C721D7_var = UnitGroupUnitFromEnd(auto84C721D7_g, auto84C721D7_u);
                    if (auto84C721D7_var == null) { break; }
                    UnitRemove(auto84C721D7_var);
                }
                auto831389AF_g = UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_tempDungeon][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto831389AF_u = UnitGroupCount(auto831389AF_g, c_unitCountAll);
                for (;; auto831389AF_u -= 1) {
                    auto831389AF_var = UnitGroupUnitFromEnd(auto831389AF_g, auto831389AF_u);
                    if (auto831389AF_var == null) { break; }
                    UnitRemove(auto831389AF_var);
                }
                auto4E0DFC87_g = UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[lv_tempDungeon][2], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto4E0DFC87_u = UnitGroupCount(auto4E0DFC87_g, c_unitCountAll);
                for (;; auto4E0DFC87_u -= 1) {
                    auto4E0DFC87_var = UnitGroupUnitFromEnd(auto4E0DFC87_g, auto4E0DFC87_u);
                    if (auto4E0DFC87_var == null) { break; }
                    if ((DialogIsVisible(gv_dungeonEnterDialogBox, UnitGetOwner(auto4E0DFC87_var)) == true)) {
                        DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(UnitGetOwner(auto4E0DFC87_var)), false);
                        gf_DungeonDialogUpdate(UnitGetOwner(auto4E0DFC87_var), lv_tempDungeon);
                        SoundPlayForPlayer(SoundLink("DestructibleDebris6x6_Explosion", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(auto4E0DFC87_var)), 125.0, 0.0);
                    }

                }
                DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                gv_dungeonsHeroic[lv_tempDungeon] = false;
                DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                gv_dungeonsLegendary[lv_tempDungeon] = false;
                DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                gv_dungeonsHardcore[lv_tempDungeon] = false;
                lv_index = 1;
                for ( ; ( (auto95119DA5_ai >= 0 && lv_index <= auto95119DA5_ae) || (auto95119DA5_ai < 0 && lv_index >= auto95119DA5_ae) ) ; lv_index += auto95119DA5_ai ) {
                    DialogControlSetEnabled(gv_dungeonEnterDialogLegendaryItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                    DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                }
            }
            else {
                DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                gv_dungeonsActiveStatus[lv_tempDungeon] = 2;
                gf_GeneralErrorMessage(StringExternal("Param/Value/69D3D96A"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

        if ((gv_dungeonsActiveStatus[lv_tempDungeon] == 5) && (PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]) == 0)) {
            if ((UnitGroupCount(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[lv_tempDungeon][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                if ((gv_dungeonsHeroic[lv_tempDungeon] == true)) {
                    if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][100] == 4)) {
                        lv_index = 1;
                        for ( ; ( (auto2ED35876_ai >= 0 && lv_index <= auto2ED35876_ae) || (auto2ED35876_ai < 0 && lv_index >= auto2ED35876_ae) ) ; lv_index += auto2ED35876_ai ) {
                            if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
                                auto429A2095_g = gv_generalParties[lv_index][1];
                                auto429A2095_var = -1;
                                while (true) {
                                    auto429A2095_var = PlayerGroupNextPlayer(auto429A2095_g, auto429A2095_var);
                                    if (auto429A2095_var < 0) { break; }
                                    if ((gv_questsPlayerProgress[auto429A2095_var][100] != 4)) {
                                        gf_GeneralErrorMessage(StringExternal("Param/Value/A2EDA999"), gv_generalParties[lv_index][1]);
                                        gv_dungeonsHeroic[lv_tempDungeon] = false;
                                        gv_dungeonsLegendary[lv_tempDungeon] = false;
                                        gv_dungeonsHardcore[lv_tempDungeon] = false;
                                        return ;
                                    }

                                }
                            }

                        }
                    }
                    else {
                        gv_dungeonsHeroic[lv_tempDungeon] = false;
                        gv_dungeonsLegendary[lv_tempDungeon] = false;
                        gv_dungeonsHardcore[lv_tempDungeon] = false;
                    }
                    autoDDC890B1_ae = gv_regionsDungeonsIndex;
                    lv_index = 1;
                    for ( ; ( (autoDDC890B1_ai >= 0 && lv_index <= autoDDC890B1_ae) || (autoDDC890B1_ai < 0 && lv_index >= autoDDC890B1_ae) ) ; lv_index += autoDDC890B1_ai ) {
                        if ((lv_tempDungeon == lv_index)) {
                            lv_tempInt2 = lv_index;
                        }

                    }
                    if ((gv_dungeonsLegendary[lv_tempDungeon] == true)) {
                        lv_tempInt2 += 100;
                        if ((gv_dungeonsHardcore[lv_tempDungeon] == true)) {
                            lv_tempInt2 += 100;
                        }

                        if ((gv_questsPlayerProgress[lv_trigPlayer][121] == 2)) {
                            TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 3300.0, false, c_timeGame);
                            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "BrokenShield", gv_playerHeroHero[lv_trigPlayer], 1);
                            gv_dungeonsGMQuest[lv_trigPlayer] = lv_tempDungeon;
                        }

                        if ((gv_questsPlayerProgress[lv_trigPlayer][122] == 2)) {
                            TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 2100.0, false, c_timeGame);
                            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "PocketFullofRocks", gv_playerHeroHero[lv_trigPlayer], 1);
                            gv_dungeonsGMQuest[lv_trigPlayer] = lv_tempDungeon;
                        }

                        if ((gv_questsPlayerProgress[lv_trigPlayer][123] == 2)) {
                            TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 2520.0, false, c_timeGame);
                            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "MentalCap", gv_playerHeroHero[lv_trigPlayer], 1);
                            gv_dungeonsGMQuest[lv_trigPlayer] = lv_tempDungeon;
                            lv_index = 1;
                            for ( ; ( (auto48E5F948_ai >= 0 && lv_index <= auto48E5F948_ae) || (auto48E5F948_ai < 0 && lv_index >= auto48E5F948_ae) ) ; lv_index += auto48E5F948_ai ) {
                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 123)) {
                                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] = 0;
                                }

                            }
                        }

                    }

                }

                gv_regionsDungeonsActive[lv_tempDungeon] = true;
                TimerStart(gv_regionsDungeonsCloseTimer[lv_tempDungeon], 60.0, false, c_timeGame);
                TimerStart(gv_regionsDungeonsOpenTimer[lv_tempDungeon], 10000.0, false, c_timeGame);
                TimerPause(gv_regionsDungeonsCloseTimer[lv_tempDungeon], false);
                gv_dungeonsActiveStatus[lv_tempDungeon] = 2;
                gv_dungeonsPartyLeader[lv_tempDungeon] = lv_trigPlayer;
                lv_index = 1;
                for ( ; ( (autoCEEB2BFC_ai >= 0 && lv_index <= autoCEEB2BFC_ae) || (autoCEEB2BFC_ai < 0 && lv_index >= autoCEEB2BFC_ae) ) ; lv_index += autoCEEB2BFC_ai ) {
                    if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
                        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_generalParties[lv_index][1], gv_dungeonsParty[lv_tempDungeon]);
                    }

                }
                if ((PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]) == 0)) {
                    PlayerGroupAdd(gv_dungeonsParty[lv_tempDungeon], lv_trigPlayer);
                }

                auto701DB48C_g = gv_dungeonsParty[lv_tempDungeon];
                auto701DB48C_var = -1;
                while (true) {
                    auto701DB48C_var = PlayerGroupNextPlayer(auto701DB48C_g, auto701DB48C_var);
                    if (auto701DB48C_var < 0) { break; }
                    lv_index = 1;
                    for ( ; ( (autoA2EA767C_ai >= 0 && lv_index <= autoA2EA767C_ae) || (autoA2EA767C_ai < 0 && lv_index >= autoA2EA767C_ae) ) ; lv_index += autoA2EA767C_ai ) {
                        gv_dungeonsDungeonStatistics[auto701DB48C_var][lv_index][lv_tempDungeon] = 0;
                    }
                }
                auto560C2CA4_g = UnitGroup(null, 0, gv_regionsDungeonsRegion[lv_tempDungeon][1], UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto560C2CA4_u = UnitGroupCount(auto560C2CA4_g, c_unitCountAll);
                for (;; auto560C2CA4_u -= 1) {
                    auto560C2CA4_var = UnitGroupUnitFromEnd(auto560C2CA4_g, auto560C2CA4_u);
                    if (auto560C2CA4_var == null) { break; }
                    UnitRemove(auto560C2CA4_var);
                }
                lv_tempInt = 1;
                while ((gv_regionsDungeonsRespawnType[lv_tempDungeon][lv_tempInt] != null)) {
                    gf_DungeonCreepSpawn(gv_regionsDungeonsRespawnType[lv_tempDungeon][lv_tempInt], PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]), gv_regionsDungeonsRespawnXY[lv_tempDungeon][lv_tempInt][1], gv_regionsDungeonsRespawnXY[lv_tempDungeon][lv_tempInt][2], gv_dungeonsHeroic[lv_tempDungeon], lv_tempInt2);
                    lv_tempInt += 1;
                }
                if ((lv_tempDungeon == 11)) {
                    if ((lv_tempInt2 == 0)) {
                        lv_tempInt2 = 11;
                    }

                    gf_DungeonD11Setup(PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]), gv_dungeonsHeroic[lv_tempDungeon], lv_tempInt2);
                    lv_tempInt2 = UnitGroupCount(UnitGroup(null, 15, gv_regionsDungeonsRegion[11][1], UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    gv_dungeonsD11CreepBossCount = 0;
                    lv_index = 5;
                    for ( ; ( (autoC63FF653_ai >= 0 && lv_index <= autoC63FF653_ae) || (autoC63FF653_ai < 0 && lv_index >= autoC63FF653_ae) ) ; lv_index += autoC63FF653_ai ) {
                        if ((lv_tempInt2 > lv_index)) {
                            gv_dungeonsD11CreepBossCount += 1;
                        }

                    }
                }

                autoB70E7BFC_g = UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[lv_tempDungeon][2], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoB70E7BFC_u = UnitGroupCount(autoB70E7BFC_g, c_unitCountAll);
                for (;; autoB70E7BFC_u -= 1) {
                    autoB70E7BFC_var = UnitGroupUnitFromEnd(autoB70E7BFC_g, autoB70E7BFC_u);
                    if (autoB70E7BFC_var == null) { break; }
                    if ((DialogIsVisible(gv_dungeonEnterDialogBox, UnitGetOwner(autoB70E7BFC_var)) == true)) {
                        DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(UnitGetOwner(autoB70E7BFC_var)), false);
                        gf_DungeonDialogUpdate(UnitGetOwner(autoB70E7BFC_var), lv_tempDungeon);
                        SoundPlayForPlayer(SoundLink("DiabloSmall_voxRoar", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(autoB70E7BFC_var)), 125.0, 0.0);
                    }

                }
            }
            else {
                DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                gf_GeneralErrorMessage(StringExternal("Param/Value/AA55F465"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (auto3254384B_val == gv_dungeonCheckDialogMainItems[2]) {
        DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        autoDFD03E5D_val = gv_dungeonsActiveStatus[lv_tempDungeon];
        if (autoDFD03E5D_val == 4) {
            gv_dungeonsActiveStatus[lv_tempDungeon] = 2;
        }
        else if (autoDFD03E5D_val == 5) {
            gv_dungeonsActiveStatus[lv_tempDungeon] = 1;
        }
        else {
        }
    }
    else if (auto3254384B_val == gv_dungeonLeaveDialogMainItems[1]) {
        TimerStart(gv_regionsDungeonsCloseTimer[lv_tempDungeon], 130.0, false, c_timeGame);
        DialogSetVisible(gv_dungeonLeaveDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Teleport", gv_playerHeroHero[lv_trigPlayer], 1);
        Wait(0.2, c_timeGame);
        if ((gv_dungeonsDungeonSelected[lv_trigPlayer] == 10) && (gv_questsPlayerProgress[lv_trigPlayer][100] == 3)) {
            UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(gv_regionsTeleporterRegions[9][3]), false);
        }
        else {
            UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(gv_regionsDungeonsRegion[lv_tempDungeon][3]), false);
        }
        CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else if (auto3254384B_val == gv_dungeonLeaveDialogMainItems[2]) {
        DialogSetVisible(gv_dungeonLeaveDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogHeroicItems[1]) {
        if (((gv_generalEndGameMode == true) || (gv_questsPlayerProgress[lv_trigPlayer][100] == 4))) {
            if ((gv_dungeonsHeroic[lv_tempDungeon] == false)) {
                if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 1) && (gv_questsPlayerProgress[lv_trigPlayer][100] == 4)) {
                    lv_index = 1;
                    for ( ; ( (autoFF09F4FE_ai >= 0 && lv_index <= autoFF09F4FE_ae) || (autoFF09F4FE_ai < 0 && lv_index >= autoFF09F4FE_ae) ) ; lv_index += autoFF09F4FE_ai ) {
                        if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
                            autoFFCB777E_g = gv_generalParties[lv_index][1];
                            autoFFCB777E_var = -1;
                            while (true) {
                                autoFFCB777E_var = PlayerGroupNextPlayer(autoFFCB777E_g, autoFFCB777E_var);
                                if (autoFFCB777E_var < 0) { break; }
                                if ((gv_questsPlayerProgress[autoFFCB777E_var][100] != 4)) {
                                    gf_GeneralErrorMessage(StringExternal("Param/Value/F572392A"), gv_generalParties[lv_index][1]);
                                    return ;
                                }

                            }
                        }

                    }
                    DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), true);
                    gv_dungeonsHeroic[lv_tempDungeon] = true;
                    lv_index = 1;
                    for ( ; ( (autoAF764977_ai >= 0 && lv_index <= autoAF764977_ae) || (autoAF764977_ai < 0 && lv_index >= autoAF764977_ae) ) ; lv_index += autoAF764977_ai ) {
                        DialogControlSetEnabled(gv_dungeonEnterDialogLegendaryItems[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                }

            }
            else {
                if ((gv_dungeonsHeroic[lv_tempDungeon] == true) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 1)) {
                    DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                    gv_dungeonsHeroic[lv_tempDungeon] = false;
                    DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                    gv_dungeonsLegendary[lv_tempDungeon] = false;
                    DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                    gv_dungeonsHardcore[lv_tempDungeon] = false;
                    lv_index = 1;
                    for ( ; ( (auto09151479_ai >= 0 && lv_index <= auto09151479_ae) || (auto09151479_ai < 0 && lv_index >= auto09151479_ae) ) ; lv_index += auto09151479_ai ) {
                        DialogControlSetEnabled(gv_dungeonEnterDialogLegendaryItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                        DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                    }
                }

            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/1824362E"), gv_generalParties[lv_index][1]);
        }
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogLegendaryItems[1]) {
        if ((gv_generalEndGameMode == true)) {
            if ((gv_dungeonsHeroic[lv_tempDungeon] == true) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][135] == 4) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 1)) {
                if ((gv_dungeonsLegendary[lv_tempDungeon] == false)) {
                    if (((gv_dungeonsDungeonSelected[lv_trigPlayer] == 0) || (gv_legendaryDungeonMods[1][0] == lv_tempDungeon) || (gv_legendaryDungeonMods[2][0] == lv_tempDungeon))) {
                        DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), true);
                        gv_dungeonsLegendary[lv_tempDungeon] = true;
                        lv_index = 1;
                        for ( ; ( (auto11DC6EAF_ai >= 0 && lv_index <= auto11DC6EAF_ae) || (auto11DC6EAF_ai < 0 && lv_index >= auto11DC6EAF_ae) ) ; lv_index += auto11DC6EAF_ai ) {
                            DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                        }
                    }

                }
                else {
                    if ((gv_dungeonsLegendary[lv_tempDungeon] == true)) {
                        DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_dungeonsLegendary[lv_tempDungeon] = false;
                        DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_dungeonsHardcore[lv_tempDungeon] = false;
                        lv_index = 1;
                        for ( ; ( (auto95256794_ai >= 0 && lv_index <= auto95256794_ae) || (auto95256794_ai < 0 && lv_index >= auto95256794_ae) ) ; lv_index += auto95256794_ai ) {
                            DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                        }
                    }

                }
            }

        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/DD66E232"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (auto3254384B_val == gv_dungeonEnterDialogHardcoreItems[1]) {
        if ((gv_generalEndGameMode == true)) {
            if ((gv_dungeonsHeroic[lv_tempDungeon] == true) && (gv_dungeonsLegendary[lv_tempDungeon] == true) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][135] == 4) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 1)) {
                if ((gv_dungeonsHardcore[lv_tempDungeon] == false)) {
                    if (((gv_dungeonsDungeonSelected[lv_trigPlayer] == 0) || (gv_legendaryDungeonMods[1][0] == lv_tempDungeon) || (gv_legendaryDungeonMods[2][0] == lv_tempDungeon))) {
                        DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), true);
                        gv_dungeonsHardcore[lv_tempDungeon] = true;
                    }

                }
                else {
                    if ((gv_dungeonsHardcore[lv_tempDungeon] == true)) {
                        DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_dungeonsHardcore[lv_tempDungeon] = false;
                    }

                }
            }

        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/29F0E12B"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else {
    }
}

void gf_DungeonD11Setup (int lp_playerCount, bool lp_heroic, int lp_dungeonIndex) {
    // Variable Declarations
    int lv_playerCount;
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_tempWeight;
    int lv_spawnType;
    string lv_spawnUnit;
    int lv_tempXY;

    // Automatic Variable Declarations
    const int auto2A1D74D1_ae = 2;
    const int auto2A1D74D1_ai = 1;
    int auto70B97675_ae;
    const int auto70B97675_ai = 1;

    // Variable Initialization
    lv_playerCount = lp_playerCount;

    // Implementation
    lv_index = 1;
    for ( ; ( (auto2A1D74D1_ai >= 0 && lv_index <= auto2A1D74D1_ae) || (auto2A1D74D1_ai < 0 && lv_index >= auto2A1D74D1_ae) ) ; lv_index += auto2A1D74D1_ai ) {
        auto70B97675_ae = gv_dungeonsD11RegionsIndex[lv_index];
        lv_index2 = 1;
        for ( ; ( (auto70B97675_ai >= 0 && lv_index2 <= auto70B97675_ae) || (auto70B97675_ai < 0 && lv_index2 >= auto70B97675_ae) ) ; lv_index2 += auto70B97675_ai ) {
            if ((gv_dungeonsD11Regions[lv_index][lv_index2] != null)) {
                while ((lv_tempWeight < gv_dungeonsD11CreepSpawnWeight[(5 + lv_index)])) {
                    while (true) {
                        lv_spawnType = RandomInt(1, 4);
                        if (((lv_tempWeight + gv_dungeonsD11CreepSpawnWeight[lv_spawnType]) <= gv_dungeonsD11CreepSpawnWeight[(5 + lv_index)])) {
                            lv_tempWeight += gv_dungeonsD11CreepSpawnWeight[lv_spawnType];
                            lv_spawnUnit = gv_dungeonsD11CreepCountTypes[lv_spawnType][RandomInt(1, gv_dungeonsD11CreepCountTypesIndex[lv_spawnType])];
                            gf_DungeonCreepSpawn(lv_spawnUnit, lv_playerCount, PointGetX(PointWithOffset(RegionGetCenter(gv_dungeonsD11Regions[lv_index][lv_index2]), RandomFixed(-1.0, 1.0), 0.0)), PointGetY(PointWithOffset(RegionGetCenter(gv_dungeonsD11Regions[lv_index][lv_index2]), 0.0, RandomFixed(-1.0, 1.0))), lp_heroic, lp_dungeonIndex);
                            if ((lv_tempWeight >= gv_dungeonsD11CreepSpawnWeight[(5 + lv_index)])) {
                                break;
                            }

                        }

                    }
                }
                lv_tempWeight = 0;
            }

        }
    }
    lv_spawnUnit = gv_dungeonsD11CreepCountTypes[5][RandomInt(1, gv_dungeonsD11CreepCountTypesIndex[5])];
    lv_spawnType = RandomInt(1, gv_dungeonsD11RegionsIndex[1]);
    gf_DungeonCreepSpawn(lv_spawnUnit, lv_playerCount, PointGetX(PointWithOffset(RegionGetCenter(gv_dungeonsD11Regions[1][lv_spawnType]), RandomFixed(-0.5, 0.5), 0.0)), PointGetY(PointWithOffset(RegionGetCenter(gv_dungeonsD11Regions[1][lv_spawnType]), 0.0, RandomFixed(-0.5, 0.5))), lp_heroic, lp_dungeonIndex);
}

void gf_DungeonDialogUpdate (int lp_trigPlayer, int lp_tempDungeon) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_tempDungeon;
    int lv_index2;
    int lv_index;

    // Automatic Variable Declarations
    const int auto5417F05E_ae = 3;
    const int auto5417F05E_ai = 1;
    const int auto373A83F8_ae = 3;
    const int auto373A83F8_ai = 1;
    const int auto7FF47BB7_ae = 3;
    const int auto7FF47BB7_ai = 1;
    const int autoD47DA440_ae = 5;
    const int autoD47DA440_ai = 1;
    const int auto9858EFC3_ae = 3;
    const int auto9858EFC3_ai = 1;
    const int autoB9BCB98B_ae = 3;
    const int autoB9BCB98B_ai = 1;
    const int autoB9577D61_ae = 3;
    const int autoB9577D61_ai = 1;
    const int auto17927341_ae = 3;
    const int auto17927341_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_tempDungeon = lp_tempDungeon;

    // Implementation
    libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[6], gv_dungeonsStatusText[gv_dungeonsActiveStatus[lv_tempDungeon]], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[1], gv_regionsDungeonsNameDescription[lv_tempDungeon][1], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[5], gv_regionsDungeonsNameDescription[lv_tempDungeon][2], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogUniqueItems[2], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogUniqueItems[3], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogUniqueItems[4], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogHeroicItems[2], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogHeroicItems[3], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
    DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), false);
    DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), false);
    DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
    if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_dungeonsActiveStatus[lv_tempDungeon] == 1)) {
        DialogControlSetEnabled(gv_dungeonEnterDialogHeroicItems[1], PlayerGroupSingle(lv_trigPlayer), true);
    }
    else {
        DialogControlSetEnabled(gv_dungeonEnterDialogHeroicItems[1], PlayerGroupSingle(lv_trigPlayer), false);
    }
    if ((gv_dungeonsHeroic[lv_tempDungeon] == false)) {
        DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), false);
        lv_index = 1;
        for ( ; ( (auto5417F05E_ai >= 0 && lv_index <= auto5417F05E_ae) || (auto5417F05E_ai < 0 && lv_index >= auto5417F05E_ae) ) ; lv_index += auto5417F05E_ai ) {
            DialogControlSetEnabled(gv_dungeonEnterDialogLegendaryItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
            DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else {
        if ((gv_dungeonsHeroic[lv_tempDungeon] == true)) {
            DialogControlSetVisible(gv_dungeonEnterDialogHeroicItems[2], PlayerGroupSingle(lv_trigPlayer), true);
            lv_index = 1;
            for ( ; ( (auto373A83F8_ai >= 0 && lv_index <= auto373A83F8_ae) || (auto373A83F8_ai < 0 && lv_index >= auto373A83F8_ae) ) ; lv_index += auto373A83F8_ai ) {
                DialogControlSetEnabled(gv_dungeonEnterDialogLegendaryItems[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
            if ((gv_dungeonsLegendary[lv_tempDungeon] == true)) {
                DialogControlSetVisible(gv_dungeonEnterDialogLegendaryItems[2], PlayerGroupSingle(lv_trigPlayer), true);
                lv_index = 1;
                for ( ; ( (auto7FF47BB7_ai >= 0 && lv_index <= auto7FF47BB7_ae) || (auto7FF47BB7_ai < 0 && lv_index >= auto7FF47BB7_ae) ) ; lv_index += auto7FF47BB7_ai ) {
                    DialogControlSetEnabled(gv_dungeonEnterDialogHardcoreItems[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                }
            }

            if ((gv_dungeonsHardcore[lv_tempDungeon] == true)) {
                DialogControlSetVisible(gv_dungeonEnterDialogHardcoreItems[2], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }

    }
    lv_index2 = 1;
    for ( ; ( (autoD47DA440_ai >= 0 && lv_index2 <= autoD47DA440_ae) || (autoD47DA440_ai < 0 && lv_index2 >= autoD47DA440_ae) ) ; lv_index2 += autoD47DA440_ai ) {
        DialogControlSetVisible(gv_dungeonEnterDialogPartyItems[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetVisible(gv_dungeonEnterDialogPartyItems[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
        if ((PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]) >= lv_index2)) {
            libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogPartyItems[lv_index2][1], (StringExternal("Param/Value/BACE2F6A") + PlayerName(PlayerGroupPlayer(gv_dungeonsParty[lv_tempDungeon], lv_index2))), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemColor(gv_dungeonEnterDialogPartyItems[lv_index2][2], gv_dungeonEnterDialogColors[lv_tempDungeon], PlayerGroupSingle(lv_trigPlayer));
            DialogControlSetVisible(gv_dungeonEnterDialogPartyItems[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), true);
            DialogControlSetVisible(gv_dungeonEnterDialogPartyItems[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    lv_index2 = 1;
    for ( ; ( (auto9858EFC3_ai >= 0 && lv_index2 <= auto9858EFC3_ae) || (auto9858EFC3_ai < 0 && lv_index2 >= auto9858EFC3_ae) ) ; lv_index2 += auto9858EFC3_ai ) {
        DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[2][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[4][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[5][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
    }
    if ((gv_dungeonsActiveStatus[lv_tempDungeon] > 1)) {
        if ((PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]) == 1)) {
            libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[4], (StringExternal("Param/Value/6E9C8236") + StringExternal("Param/Value/43160419")), PlayerGroupSingle(lv_trigPlayer));
        }
        else {
            if ((PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]) > 1)) {
                libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[4], (StringExternal("Param/Value/1DF90918") + IntToText(PlayerGroupCount(gv_dungeonsParty[lv_tempDungeon]))), PlayerGroupSingle(lv_trigPlayer));
            }

        }
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_tempDungeon], lv_trigPlayer) == true)) {
            lv_index2 = 1;
            for ( ; ( (autoB9577D61_ai >= 0 && lv_index2 <= autoB9577D61_ae) || (autoB9577D61_ai < 0 && lv_index2 >= autoB9577D61_ae) ) ; lv_index2 += autoB9577D61_ai ) {
                DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[2][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
            }
            if ((lv_trigPlayer == gv_dungeonsPartyLeader[lv_tempDungeon])) {
                lv_index2 = 1;
                for ( ; ( (auto17927341_ai >= 0 && lv_index2 <= auto17927341_ae) || (auto17927341_ai < 0 && lv_index2 >= auto17927341_ae) ) ; lv_index2 += auto17927341_ai ) {
                    DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[5][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                }
            }

        }

    }
    else {
        libNtve_gf_SetDialogItemText(gv_dungeonEnterDialogUniqueItems[4], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        lv_index2 = 1;
        for ( ; ( (autoB9BCB98B_ai >= 0 && lv_index2 <= autoB9BCB98B_ae) || (autoB9BCB98B_ai < 0 && lv_index2 >= autoB9BCB98B_ae) ) ; lv_index2 += autoB9BCB98B_ai ) {
            DialogControlSetEnabled(gv_dungeonEnterDialogMainItems[4][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
        }
    }
    DialogSetVisible(gv_dungeonEnterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
}

void gf_DungeonDialogEnd (int lp_tempDungeon) {
    // Variable Declarations
    int lv_tempDungeon;
    playergroup lv_tempGroup;
    int lv_index2;
    int lv_index;
    int lv_tempCount;

    // Automatic Variable Declarations
    const int auto7B6783E0_ae = 10;
    const int auto7B6783E0_ai = 1;
    const int autoCC251CA5_ae = 6;
    const int autoCC251CA5_ai = 1;
    playergroup autoFFBEBE4D_g;
    int autoFFBEBE4D_var;
    const int auto0CB2B93F_ae = 6;
    const int auto0CB2B93F_ai = 1;
    const int autoC3D91469_ae = 9;
    const int autoC3D91469_ai = 1;
    playergroup auto112B371A_g;
    int auto112B371A_var;
    const int auto53B86276_ae = 9;
    const int auto53B86276_ai = 1;

    // Variable Initialization
    lv_tempDungeon = lp_tempDungeon;
    lv_tempGroup = gv_dungeonsParty[lp_tempDungeon];

    // Implementation
    lv_index = 1;
    for ( ; ( (auto7B6783E0_ai >= 0 && lv_index <= auto7B6783E0_ae) || (auto7B6783E0_ai < 0 && lv_index >= auto7B6783E0_ae) ) ; lv_index += auto7B6783E0_ai ) {
        lv_index2 = 1;
        for ( ; ( (autoCC251CA5_ai >= 0 && lv_index2 <= autoCC251CA5_ae) || (autoCC251CA5_ai < 0 && lv_index2 >= autoCC251CA5_ae) ) ; lv_index2 += autoCC251CA5_ai ) {
            libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[lv_index][lv_index2], StringToText(""), lv_tempGroup);
        }
    }
    autoFFBEBE4D_g = lv_tempGroup;
    autoFFBEBE4D_var = -1;
    while (true) {
        autoFFBEBE4D_var = PlayerGroupNextPlayer(autoFFBEBE4D_g, autoFFBEBE4D_var);
        if (autoFFBEBE4D_var < 0) { break; }
        lv_tempCount += 1;
        libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[lv_tempCount][1], (StringExternal("Param/Value/E8B9E958") + TextWithColor(PlayerName(autoFFBEBE4D_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoFFBEBE4D_var, false)))), lv_tempGroup);
        lv_index = 2;
        for ( ; ( (auto0CB2B93F_ai >= 0 && lv_index <= auto0CB2B93F_ae) || (auto0CB2B93F_ai < 0 && lv_index >= auto0CB2B93F_ae) ) ; lv_index += auto0CB2B93F_ai ) {
            libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[lv_tempCount][lv_index], (StringExternal("Param/Value/B0C417C0") + TextWithColor(IntToText(gv_dungeonsDungeonStatistics[autoFFBEBE4D_var][lv_index][lv_tempDungeon]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoFFBEBE4D_var, false)))), lv_tempGroup);
        }
        lv_index = 7;
        for ( ; ( (autoC3D91469_ai >= 0 && lv_index <= autoC3D91469_ae) || (autoC3D91469_ai < 0 && lv_index >= autoC3D91469_ae) ) ; lv_index += autoC3D91469_ai ) {
            libNtve_gf_SetDialogItemTooltip(gv_dungeonEndDialogPartyItems[lv_tempCount][lv_index], IntToText(gv_dungeonsDungeonStatistics[autoFFBEBE4D_var][lv_index][lv_tempDungeon]), lv_tempGroup);
        }
    }
    libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][3], (StringExternal("Param/Value/4780C036") + FixedToText(TimerGetElapsed(gv_regionsDungeonsOpenTimer[lp_tempDungeon]), 0)), lv_tempGroup);
    libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][1], gv_regionsDungeonsNameDescription[lp_tempDungeon][1], lv_tempGroup);
    if ((gv_dungeonsHardcore[lp_tempDungeon] == true)) {
        libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][2], (StringExternal("Param/Value/A159661F") + StringExternal("Param/Value/3539C9C8")), lv_tempGroup);
    }
    else {
        if ((gv_dungeonsLegendary[lp_tempDungeon] == true)) {
            libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][2], (StringExternal("Param/Value/CEA5DA39") + StringExternal("Param/Value/DA2647C0")), lv_tempGroup);
        }
        else {
            if ((gv_dungeonsHeroic[lp_tempDungeon] == true)) {
                libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][2], (StringExternal("Param/Value/DF3C3D7B") + StringExternal("Param/Value/63C02DBA")), lv_tempGroup);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_dungeonEndDialogPartyItems[0][2], (StringExternal("Param/Value/9E64F228") + StringExternal("Param/Value/B6AE3D7C")), lv_tempGroup);
            }
        }
    }
    DialogSetVisible(gv_dungeonEndDialogBox, lv_tempGroup, true);
    Wait(2.0, c_timeGame);
    auto112B371A_g = lv_tempGroup;
    auto112B371A_var = -1;
    while (true) {
        auto112B371A_var = PlayerGroupNextPlayer(auto112B371A_g, auto112B371A_var);
        if (auto112B371A_var < 0) { break; }
        lv_index = 1;
        for ( ; ( (auto53B86276_ai >= 0 && lv_index <= auto53B86276_ae) || (auto53B86276_ai < 0 && lv_index >= auto53B86276_ae) ) ; lv_index += auto53B86276_ai ) {
            gv_dungeonsDungeonStatistics[auto112B371A_var][lv_index][lv_tempDungeon] = 0;
        }
    }
}

trigger auto_gf_TutorialTutorialStages_Trigger = null;
playergroup auto_gf_TutorialTutorialStages_lp_playerGroup;
int auto_gf_TutorialTutorialStages_lp_index;

void gf_TutorialTutorialStages (playergroup lp_playerGroup, int lp_index) {
    auto_gf_TutorialTutorialStages_lp_playerGroup = lp_playerGroup;
    auto_gf_TutorialTutorialStages_lp_index = lp_index;

    if (auto_gf_TutorialTutorialStages_Trigger == null) {
        auto_gf_TutorialTutorialStages_Trigger = TriggerCreate("auto_gf_TutorialTutorialStages_TriggerFunc");
    }

    TriggerExecute(auto_gf_TutorialTutorialStages_Trigger, false, false);
}

bool auto_gf_TutorialTutorialStages_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_gf_TutorialTutorialStages_lp_playerGroup;
    int lp_index = auto_gf_TutorialTutorialStages_lp_index;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    playergroup lv_tempGroup;
    int lv_tempPlayer;
    sound lv_tempSound;

    // Automatic Variable Declarations
    int autoA681E317_val;
    const int autoADB872A0_ae = 10;
    const int autoADB872A0_ai = 1;
    const int auto4F403C6F_ae = 8;
    const int auto4F403C6F_ai = 1;
    const int autoD4642AD4_ae = 4;
    const int autoD4642AD4_ai = 1;
    const int autoE8940D73_ae = 10;
    const int autoE8940D73_ai = 1;
    const int auto9EA2A8A0_ae = 4;
    const int auto9EA2A8A0_ai = 1;
    const int auto6F629413_ae = 10;
    const int auto6F629413_ai = 1;
    const int auto6545D45B_ae = 5;
    const int auto6545D45B_ai = 1;
    const int autoE8669FF0_ae = 10;
    const int autoE8669FF0_ai = 1;
    const int auto9696E4E0_ae = 10;
    const int auto9696E4E0_ai = 1;
    const int auto451AEBD1_ae = 6;
    const int auto451AEBD1_ai = 1;
    const int auto7B8D5504_ae = 10;
    const int auto7B8D5504_ai = 1;
    const int auto1623D6C9_ae = 10;
    const int auto1623D6C9_ai = 1;
    const int autoC8D1B7AB_ae = 3;
    const int autoC8D1B7AB_ai = 1;
    unitgroup auto9AC473EB_g;
    int auto9AC473EB_u;
    unit auto9AC473EB_var;
    const int autoE39E0501_ae = 10;
    const int autoE39E0501_ai = 1;
    unitgroup auto915397DF_g;
    int auto915397DF_u;
    unit auto915397DF_var;

    // Variable Initialization
    lv_index = lp_index;
    lv_tempGroup = PlayerGroupSingle(1);
    lv_tempPlayer = 1;

    // Implementation
    autoA681E317_val = lv_index;
    if (autoA681E317_val == 0) {
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, false);
    }
    else if (autoA681E317_val == 1) {
        SoundPlayForPlayer(SoundLink("War3Music_PursuitTheme", -1), c_maxPlayers, lv_tempGroup, 300.0, 0.0);
        lv_tempSound = SoundLastPlayed();
        DialogDestroy(gv_tutorialDialogBox[1]);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 0.0, 100.0);
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], true, PlayerGroupAll());
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, true);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 0.0);
        Wait(1.0, c_timeGame);
        DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopRight, 150, 50);
        libNtve_gf_SetDialogItemTextWriteout(gv_tutorialDialog2Items[1], true, lv_tempGroup);
        libNtve_gf_SetDialogItemTextWriteoutDuration(gv_tutorialDialog2Items[1], 6.0, lv_tempGroup);
        libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/DB1755C5"), lv_tempGroup);
        DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, true);
        Wait(0.5, c_timeGame);
        lv_index2 = 1;
        for ( ; ( (autoADB872A0_ai >= 0 && lv_index2 <= autoADB872A0_ae) || (autoADB872A0_ai < 0 && lv_index2 >= autoADB872A0_ae) ) ; lv_index2 += autoADB872A0_ai ) {
            DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (auto4F403C6F_ai >= 0 && lv_index <= auto4F403C6F_ae) || (auto4F403C6F_ai < 0 && lv_index >= auto4F403C6F_ae) ) ; lv_index += auto4F403C6F_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(203)), (-0.5 * lv_index), 0.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(204)), (-0.5 * lv_index), 0.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(204)), (-0.5 * lv_index), 0.5));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(204)), (-0.5 * lv_index), -0.5));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(205)), (-0.5 * lv_index), 0.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(206)), (-0.5 * lv_index), 0.0));
        }
        gv_playerHeroHeroLevelExp[lv_tempPlayer][1] = 3;
        gf_HeroHeroLevels(lv_tempPlayer);
        Wait(0.5, c_timeGame);
        lv_index = 1;
        for ( ; ( (autoD4642AD4_ai >= 0 && lv_index <= autoD4642AD4_ae) || (autoD4642AD4_ai < 0 && lv_index >= autoD4642AD4_ae) ) ; lv_index += autoD4642AD4_ai ) {
            gv_playerHeroHeroLevelExp[lv_tempPlayer][1] += 1;
            gf_HeroHeroLevels(lv_tempPlayer);
            Wait(0.1, c_timeGame);
        }
        DialogSetTransparency(gv_heroSelectionDialogBox, 100.0);
        gf_DialogShowHeroSelection(lv_tempPlayer);
        gv_tutorial2Progress = 2;
        lv_index2 = 1;
        for ( ; ( (autoE8940D73_ai >= 0 && lv_index2 <= autoE8940D73_ae) || (autoE8940D73_ai < 0 && lv_index2 >= autoE8940D73_ae) ) ; lv_index2 += autoE8940D73_ai ) {
            DialogSetTransparency(gv_heroSelectionDialogBox, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        while (!((gv_tutorial2Progress == 3))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (auto9EA2A8A0_ai >= 0 && lv_index <= auto9EA2A8A0_ae) || (auto9EA2A8A0_ai < 0 && lv_index >= auto9EA2A8A0_ae) ) ; lv_index += auto9EA2A8A0_ai ) {
            gv_playerHeroHeroLevelExp[lv_tempPlayer][1] += 1;
            gf_HeroHeroLevels(lv_tempPlayer);
            Wait(0.1, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopLeft, 50, 75);
        libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/02752F0A"), lv_tempGroup);
        DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, true);
        lv_index2 = 1;
        for ( ; ( (auto6F629413_ai >= 0 && lv_index2 <= auto6F629413_ae) || (auto6F629413_ai < 0 && lv_index2 >= auto6F629413_ae) ) ; lv_index2 += auto6F629413_ai ) {
            DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        gv_questsPlayerProgress[lv_tempPlayer][12] = 1;
        gv_playerHeroHeroLevelExp[lv_tempPlayer][2] += 500;
        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[12][1]][1], PlayerGroupSingle(lv_tempPlayer), true);
        UnitSetPosition(gv_playerHeroHero[lv_tempPlayer], RegionRandomPoint(RegionFromId(46)), false);
        CameraPan(lv_tempPlayer, RegionGetCenter(RegionFromId(46)), 0.0, -1, 10.0, false);
        UnitBehaviorAdd(gv_playerHeroHero[1], "Tutorial2", gv_playerHeroHero[1], 1);
        gv_playerCurrency[lv_tempPlayer][1] += 1000000;
        lv_index = 1;
        for ( ; ( (auto6545D45B_ai >= 0 && lv_index <= auto6545D45B_ae) || (auto6545D45B_ai < 0 && lv_index >= auto6545D45B_ae) ) ; lv_index += auto6545D45B_ai ) {
            gf_DialogUsedHeroVendor(lv_tempPlayer, gv_heroVendorDialogMainButtons[3]);
            gf_DialogUsedHeroVendor(lv_tempPlayer, gv_heroVendorDialogMainButtons[4]);
            Wait(0.2, c_timeGame);
        }
        gv_playerCurrency[lv_tempPlayer][1] = 500;
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.5, 100.0);
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], false, PlayerGroupAll());
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, false);
        Wait(3.0, c_timeGame);
        DialogSetTransparency(gv_heroStatsDialogBox, 100.0);
        gf_DialogUsedMainButtons(lv_tempPlayer, gv_mainDialogItems[3]);
        lv_index2 = 1;
        for ( ; ( (autoE8669FF0_ai >= 0 && lv_index2 <= autoE8669FF0_ae) || (autoE8669FF0_ai < 0 && lv_index2 >= autoE8669FF0_ae) ) ; lv_index2 += autoE8669FF0_ai ) {
            DialogSetTransparency(gv_heroStatsDialogBox, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        while (!((gv_tutorial2Progress == 4))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], true, PlayerGroupAll());
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 0.0, 100.0);
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, true);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 0.0);
        DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopRight, 150, 50);
        libNtve_gf_SetDialogItemTextWriteoutDuration(gv_tutorialDialog2Items[1], 3.0, lv_tempGroup);
        libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/20EA18E0"), lv_tempGroup);
        DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, true);
        Wait(0.5, c_timeGame);
        lv_index2 = 1;
        for ( ; ( (auto9696E4E0_ai >= 0 && lv_index2 <= auto9696E4E0_ae) || (auto9696E4E0_ai < 0 && lv_index2 >= auto9696E4E0_ae) ) ; lv_index2 += auto9696E4E0_ai ) {
            DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        gv_playerHeroHeroLevelExp[lv_tempPlayer][1] = 12;
        gf_HeroHeroLevels(lv_tempPlayer);
        Wait(0.5, c_timeGame);
        lv_index = 1;
        for ( ; ( (auto451AEBD1_ai >= 0 && lv_index <= auto451AEBD1_ae) || (auto451AEBD1_ai < 0 && lv_index >= auto451AEBD1_ae) ) ; lv_index += auto451AEBD1_ai ) {
            gv_playerHeroHeroLevelExp[lv_tempPlayer][1] += 1;
            gf_HeroHeroLevels(lv_tempPlayer);
            Wait(0.1, c_timeGame);
        }
        DialogSetTransparency(gv_heroSelectionDialogBox, 100.0);
        gf_DialogShowHeroSelection(lv_tempPlayer);
        gv_tutorial2Progress = 5;
        lv_index2 = 1;
        for ( ; ( (auto7B8D5504_ai >= 0 && lv_index2 <= auto7B8D5504_ae) || (auto7B8D5504_ai < 0 && lv_index2 >= auto7B8D5504_ae) ) ; lv_index2 += auto7B8D5504_ai ) {
            DialogSetTransparency(gv_heroSelectionDialogBox, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        while (!((gv_tutorial2Progress == 6))) {
            Wait(1.0, c_timeGame);
        }
        DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopLeft, 125, 50);
        libNtve_gf_SetDialogItemTextWriteoutDuration(gv_tutorialDialog2Items[1], 6.0, lv_tempGroup);
        libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/D87C59F0"), lv_tempGroup);
        DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, true);
        Wait(0.5, c_timeGame);
        lv_index2 = 1;
        for ( ; ( (auto1623D6C9_ai >= 0 && lv_index2 <= auto1623D6C9_ae) || (auto1623D6C9_ai < 0 && lv_index2 >= auto1623D6C9_ae) ) ; lv_index2 += auto1623D6C9_ai ) {
            DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        gv_playerCurrency[lv_tempPlayer][1] += 1000000;
        lv_index = 1;
        for ( ; ( (autoC8D1B7AB_ai >= 0 && lv_index <= autoC8D1B7AB_ae) || (autoC8D1B7AB_ai < 0 && lv_index >= autoC8D1B7AB_ae) ) ; lv_index += autoC8D1B7AB_ai ) {
            gf_DialogUsedHeroVendor(lv_tempPlayer, gv_heroVendorDialogMainButtons[3]);
            gf_DialogUsedHeroVendor(lv_tempPlayer, gv_heroVendorDialogMainButtons[4]);
            Wait(0.2, c_timeGame);
        }
        gv_playerCurrency[lv_tempPlayer][1] = 500;
        gv_dungeonsDungeonSelected[1] = 1;
        Wait(0.5, c_timeGame);
        DialogSetTransparency(gv_dungeonCheckDialogBox, 100.0);
        DialogDestroy(gv_dungeonCheckDialogBox);
        gf_DialogUsedDungeonSetup(lv_tempPlayer, gv_dungeonEnterDialogMainItems[4][1]);
        Wait(0.5, c_timeGame);
        gf_DialogUsedDungeonSetup(lv_tempPlayer, gv_dungeonCheckDialogMainItems[1]);
        Wait(0.5, c_timeGame);
        gf_DialogUsedDungeonSetup(lv_tempPlayer, gv_dungeonEnterDialogMainItems[2][1]);
        Wait(0.5, c_timeGame);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.5, 100.0);
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], false, PlayerGroupAll());
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CasterPantsTheHonorable", 0, 0, RegionRandomPoint(RegionFromId(35)));
        UnitGroupAdd(gv_tutorial2TempGroup, UnitLastCreated());
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, lv_tempPlayer);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RageyMcTankerton", 0, 0, RegionRandomPoint(RegionFromId(35)));
        UnitGroupAdd(gv_tutorial2TempGroup, UnitLastCreated());
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, lv_tempPlayer);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "RespawnTimer", 2);
        gf_TutorialDungeon();
        auto9AC473EB_g = UnitGroup(null, 15, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9AC473EB_u = UnitGroupCount(auto9AC473EB_g, c_unitCountAll);
        for (;; auto9AC473EB_u -= 1) {
            auto9AC473EB_var = UnitGroupUnitFromEnd(auto9AC473EB_g, auto9AC473EB_u);
            if (auto9AC473EB_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto9AC473EB_var, RegionFromId(207)) == false)) {
                UnitRemove(auto9AC473EB_var);
            }
            else {
                UnitBehaviorAdd(auto9AC473EB_var, "Tutorial3", auto9AC473EB_var, 1);
                if ((UnitTypeTestAttribute(UnitGetType(auto9AC473EB_var), c_unitAttributeBiological) == true)) {
                    UnitBehaviorAdd(auto9AC473EB_var, "Heroic2", auto9AC473EB_var, 1);
                }

            }
        }
        while (!((UnitGroupCount(UnitGroup(null, 15, RegionFromId(207), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        gv_tutorial2Progress = 7;
        Wait(1.0, c_timeGame);
        gf_SurvivalEnd(lv_tempPlayer, gv_dungeonsLevels[1], 3, 0);
        Wait(5.0, c_timeGame);
        while (!((DialogIsVisible(gv_itemSurvivalDialogBox, lv_tempPlayer) == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], true, PlayerGroupAll());
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 0.0, 100.0);
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, true);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 0.0);
        DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopRight, 150, 50);
        libNtve_gf_SetDialogItemTextWriteoutDuration(gv_tutorialDialog2Items[1], 6.0, lv_tempGroup);
        libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/ACC9E28B"), lv_tempGroup);
        DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
        DialogSetVisible(gv_tutorialDialog2Box, lv_tempGroup, true);
        SoundStop(lv_tempSound, true);
        Wait(0.5, c_timeGame);
        lv_index2 = 1;
        for ( ; ( (autoE39E0501_ai >= 0 && lv_index2 <= autoE39E0501_ae) || (autoE39E0501_ai < 0 && lv_index2 >= autoE39E0501_ae) ) ; lv_index2 += autoE39E0501_ai ) {
            DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
            Wait(0.1, c_timeGame);
        }
        Wait(2.0, c_timeGame);
        gv_questsPlayerProgress[lv_tempPlayer][12] = 1;
        gv_playerHeroHeroLevelExp[lv_tempPlayer][2] += 500;
        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[12][1]][1], PlayerGroupSingle(lv_tempPlayer), true);
        UnitSetPosition(gv_playerHeroHero[lv_tempPlayer], RegionRandomPoint(RegionFromId(208)), false);
        CameraPan(lv_tempPlayer, RegionGetCenter(RegionFromId(207)), 0.0, -1, 10.0, false);
        auto915397DF_g = gv_tutorial2TempGroup;
        auto915397DF_u = UnitGroupCount(auto915397DF_g, c_unitCountAll);
        for (;; auto915397DF_u -= 1) {
            auto915397DF_var = UnitGroupUnitFromEnd(auto915397DF_g, auto915397DF_u);
            if (auto915397DF_var == null) { break; }
            UnitSetPosition(auto915397DF_var, RegionRandomPoint(RegionFromId(208)), false);
        }
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.5, 100.0);
        SoundPlayForPlayer(SoundLink("War3Music_Credits", -1), c_maxPlayers, lv_tempGroup, 300.0, 0.0);
        libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], false, PlayerGroupAll());
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, false);
        gv_invasionBadUnitUpgradeCount = 24;
        gv_invasionGoodUnitUpgradeCount = 24;
        TriggerExecute(gt_InvasionTimerExpires, true, false);
        Wait(30.0, c_timeGame);
        TriggerExecute(gt_InvasionTimerExpires, true, false);
        Wait(30.0, c_timeGame);
        TriggerExecute(gt_InvasionTimerExpires, true, false);
        Wait(30.0, c_timeGame);
        TriggerExecute(gt_InvasionTimerExpires, true, false);
        Wait(30.0, c_timeGame);
        TriggerExecute(gt_InvasionTimerExpires, true, false);
    }
    else {
    }
    return true;
}

trigger auto_gf_TutorialDungeon_Trigger = null;

void gf_TutorialDungeon () {
    if (auto_gf_TutorialDungeon_Trigger == null) {
        auto_gf_TutorialDungeon_Trigger = TriggerCreate("auto_gf_TutorialDungeon_TriggerFunc");
    }

    TriggerExecute(auto_gf_TutorialDungeon_Trigger, false, false);
}

bool auto_gf_TutorialDungeon_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto86948240_g;
    int auto86948240_u;
    unit auto86948240_var;

    // Implementation
    while (true) {
        Wait(3.0, c_timeGame);
        if ((gv_tutorial2Progress == 6)) {
            auto86948240_g = gv_tutorial2TempGroup;
            auto86948240_u = UnitGroupCount(auto86948240_g, c_unitCountAll);
            for (;; auto86948240_u -= 1) {
                auto86948240_var = UnitGroupUnitFromEnd(auto86948240_g, auto86948240_u);
                if (auto86948240_var == null) { break; }
                if ((UnitOrderCount(auto86948240_var) == 0)) {
                    if ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(auto86948240_var), 4.5), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        UnitIssueOrder(auto86948240_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), PointWithOffset(UnitGetPosition(gv_playerHeroHero[1]), RandomFixed(-0.5, 0.5), RandomFixed(-0.5, 0.5))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(auto86948240_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 15, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto86948240_var)))), c_orderQueueReplace);
                    }
                }

            }
        }

    }
    return true;
}

void gf_DialogUsedTutorial (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    if ((lv_dialogItemUsed == gv_tutorialSkipDialogItems[2])) {
        DialogSetVisible(gv_tutorialSkipDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        return ;
    }

    if ((lv_dialogItemUsed == gv_tutorialSkipDialogItems[1])) {
        DialogSetVisible(gv_tutorialSkipDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        gf_TutorialSkip(lv_trigPlayer);
        return ;
    }

}

trigger auto_gf_TutorialUpdate_Trigger = null;
int auto_gf_TutorialUpdate_lp_trigPlayer;
int auto_gf_TutorialUpdate_lp_index;

void gf_TutorialUpdate (int lp_trigPlayer, int lp_index) {
    auto_gf_TutorialUpdate_lp_trigPlayer = lp_trigPlayer;
    auto_gf_TutorialUpdate_lp_index = lp_index;

    if (auto_gf_TutorialUpdate_Trigger == null) {
        auto_gf_TutorialUpdate_Trigger = TriggerCreate("auto_gf_TutorialUpdate_TriggerFunc");
    }

    TriggerExecute(auto_gf_TutorialUpdate_Trigger, false, false);
}

bool auto_gf_TutorialUpdate_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_TutorialUpdate_lp_trigPlayer;
    int lp_index = auto_gf_TutorialUpdate_lp_index;

    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    const int auto3ABEA592_ae = 10;
    const int auto3ABEA592_ai = 1;
    const int auto81443D8B_ae = 10;
    const int auto81443D8B_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_index = lp_index;

    // Implementation
    Wait(2.0, c_timeGame);
    gv_tutorialPlayer[lv_trigPlayer] = lv_index;
    libNtve_gf_SetDialogItemImage(gv_tutorialDialogItems[lv_trigPlayer][1], (CatalogFieldValueGet(c_gameCatalogActor, (UnitGetType(gv_playerHeroHero[lv_trigPlayer])), "UnitIcon", c_playerAny)), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_tutorialDialogItems[lv_trigPlayer][2], gv_tutorialText[gv_tutorialPlayer[lv_trigPlayer]], PlayerGroupSingle(lv_trigPlayer));
    DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - 0));
    DialogSetPosition(gv_tutorialDialogBox[lv_trigPlayer], c_anchorTopLeft, gv_tutorialPositionsXY[gv_tutorialPlayer[lv_trigPlayer]][1], gv_tutorialPositionsXY[gv_tutorialPlayer[lv_trigPlayer]][2]);
    DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), true);
    lv_index = 1;
    for ( ; ( (auto3ABEA592_ai >= 0 && lv_index <= auto3ABEA592_ae) || (auto3ABEA592_ai < 0 && lv_index >= auto3ABEA592_ae) ) ; lv_index += auto3ABEA592_ai ) {
        DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - (lv_index * 10)));
        Wait(0.05, c_timeGame);
    }
    Wait(7.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto81443D8B_ai >= 0 && lv_index <= auto81443D8B_ae) || (auto81443D8B_ai < 0 && lv_index >= auto81443D8B_ae) ) ; lv_index += auto81443D8B_ai ) {
        DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (0 + (lv_index * 10)));
        Wait(0.05, c_timeGame);
    }
    DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), false);
    gv_tutorialPlayer[lv_trigPlayer] += 1;
    return true;
}

void gf_TutorialSkip (int lp_trigPlayer) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    const int auto4DA15BB6_ae = 2;
    const int auto4DA15BB6_ai = 1;
    const int autoE95A31A0_ae = 2;
    const int autoE95A31A0_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    libNtve_gf_CinematicMode(true, PlayerGroupSingle(lv_trigPlayer), c_transitionDurationDefault);
    lv_index = 1;
    for ( ; ( (auto4DA15BB6_ai >= 0 && lv_index <= auto4DA15BB6_ae) || (auto4DA15BB6_ai < 0 && lv_index >= auto4DA15BB6_ae) ) ; lv_index += auto4DA15BB6_ai ) {
        gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
        gf_HeroHeroLevels(lv_trigPlayer);
        Wait(0.1, c_timeGame);
    }
    gf_DialogShowHeroSelection(lv_trigPlayer);
    gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 1;
    gf_DialogUsedHeroSelection(lv_trigPlayer, gv_heroSelectionDialogMainButtons[3][1]);
    Wait(0.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (autoE95A31A0_ai >= 0 && lv_index <= autoE95A31A0_ae) || (autoE95A31A0_ai < 0 && lv_index >= autoE95A31A0_ae) ) ; lv_index += autoE95A31A0_ai ) {
        gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
        gf_HeroHeroLevels(lv_trigPlayer);
        Wait(0.1, c_timeGame);
    }
    Wait(0.1, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupSingle(lv_trigPlayer), c_transitionDurationDefault);
    UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(RegionFromId(30)), false);
    CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], OrderTargetingUnit(AbilityCommand("Interact", 0), UnitFromId(877735969)), c_orderQueueReplace);
    TextTagShow(gv_questsQuestMarker[1][1], PlayerGroupSingle(lv_trigPlayer), false);
    TextTagShow(gv_questsQuestMarker[2][1], PlayerGroupSingle(lv_trigPlayer), false);
    TextTagShow(gv_questsQuestMarker[3][1], PlayerGroupSingle(lv_trigPlayer), true);
    gv_questsPlayerProgress[lv_trigPlayer][0] = 4;
    gv_questsPlayerProgress[lv_trigPlayer][1] = 4;
    gv_questsPlayerProgress[lv_trigPlayer][2] = 4;
    gv_questsPlayerProgress[lv_trigPlayer][3] = 1;
}

void gf_DialogCreatePartyHelp () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_yPos;
    int lv_yPos2;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int lv_tempInt;
    text[9] lv_tempText;
    text[9] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;

    // Automatic Variable Declarations
    const int auto5D76E1EF_ae = 15;
    const int auto5D76E1EF_ai = 1;
    const int auto5F499EEF_ae = 2;
    const int auto5F499EEF_ai = 1;
    const int auto06E97DAC_ae = gv_generalPlayerCap;
    const int auto06E97DAC_ai = 1;
    const int auto6EECD3A2_ae = 3;
    const int auto6EECD3A2_ai = 1;
    const int auto3D2F5124_ae = 4;
    const int auto3D2F5124_ai = 1;
    const int auto7B33A21C_ae = 15;
    const int auto7B33A21C_ai = 1;
    const int autoC4511350_ae = 3;
    const int autoC4511350_ai = 1;
    const int auto8B16154D_ae = gv_generalPlayerCap;
    const int auto8B16154D_ai = 1;
    const int auto5803616A_ae = 2;
    const int auto5803616A_ai = 1;
    const int autoCC9F0411_ae = 2;
    const int autoCC9F0411_ai = 1;
    const int auto4CB7511C_ae = 5;
    const int auto4CB7511C_ai = 1;
    const int auto307181E4_ae = gv_generalPlayerCap;
    const int auto307181E4_ai = 1;
    const int autoBA52DBB4_ae = 5;
    const int autoBA52DBB4_ai = 1;
    const int autoC1FC1207_ae = 4;
    const int autoC1FC1207_ai = 1;
    const int autoFC67A30B_ae = 5;
    const int autoFC67A30B_ai = 1;
    const int auto24AFC27D_ae = 4;
    const int auto24AFC27D_ai = 1;
    const int auto79D4FE38_ae = 15;
    const int auto79D4FE38_ai = 1;
    const int autoADB8F89C_ae = 2;
    const int autoADB8F89C_ai = 1;
    const int auto78698730_ae = 9;
    const int auto78698730_ai = 1;
    const int auto32D1BA8E_ae = 6;
    const int auto32D1BA8E_ai = 1;
    const int autoDDA63892_ae = 1;
    const int autoDDA63892_ai = 1;
    const int auto534A0A26_ae = 1;
    const int auto534A0A26_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(600, 600, c_anchorTopRight, -75, 15, true);
    gv_partyStartDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 10;
    lv_yPos = 50;
    lv_xSize = 525;
    lv_ySize = 515;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto5D76E1EF_ai >= 0 && lv_index <= auto5D76E1EF_ae) || (auto5D76E1EF_ai < 0 && lv_index >= auto5D76E1EF_ae) ) ; lv_index += auto5D76E1EF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 460)), ((lv_yPos + 15) + RandomInt(1, 450)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 205), (lv_yPos + 24), StringExternal("Param/Value/FAD58241"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_tempText[1] = StringExternal("Param/Value/9D36A226");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempText[2] = StringExternal("Param/Value/8E452E47");
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_xSize = 190;
    lv_ySize = 65;
    lv_xPos = 70;
    lv_yPos = 505;
    lv_index2 = 1;
    for ( ; ( (auto5F499EEF_ai >= 0 && lv_index2 <= auto5F499EEF_ae) || (auto5F499EEF_ai < 0 && lv_index2 >= auto5F499EEF_ae) ) ; lv_index2 += auto5F499EEF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        gv_partyStartDialogMainButtons[lv_index2][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_partyStartDialogMainButtons[lv_index2][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_partyStartDialogMainButtons[lv_index2][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 21), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_partyStartDialogMainButtons[lv_index2][3] = DialogControlLastCreated();
        lv_xPos += 210;
    }
    lv_xPos = 40;
    lv_yPos = 120;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 55), (lv_yPos - 0), (StringExternal("Param/Value/B3A1B472") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, (lv_xPos + 212), (lv_yPos + 8), (StringExternal("Param/Value/92AF7265") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 310), (lv_yPos - 0), (StringExternal("Param/Value/595867A3") + StringExternal("Param/Value/D8F719C1")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yPos = 160;
    lv_index = 1;
    for ( ; ( (auto06E97DAC_ai >= 0 && lv_index <= auto06E97DAC_ae) || (auto06E97DAC_ai < 0 && lv_index >= auto06E97DAC_ae) ) ; lv_index += auto06E97DAC_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 525, 35, c_anchorTopLeft, (lv_xPos - 35), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_partyStartDialogPlayerItems[lv_index][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 0), (StringExternal("Param/Value/42040613") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_partyStartDialogPlayerItems[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, (lv_xPos + 216), (lv_yPos - 0), (StringExternal("Param/Value/7771031F") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_partyStartDialogPlayerItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 290), (lv_yPos - 0), (StringExternal("Param/Value/5EE68EAE") + StringExternal("Param/Value/CF2BD93A")), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_partyStartDialogPlayerItems[lv_index][3] = DialogControlLastCreated();
        lv_index2 = 0;
        for ( ; ( (auto6EECD3A2_ai >= 0 && lv_index2 <= auto6EECD3A2_ae) || (auto6EECD3A2_ai < 0 && lv_index2 >= auto6EECD3A2_ae) ) ; lv_index2 += auto6EECD3A2_ai ) {
            DialogControlSetVisible(gv_partyStartDialogPlayerItems[lv_index][lv_index2], PlayerGroupAll(), false);
        }
        lv_yPos += 35;
    }
    lv_index = 1;
    for ( ; ( (auto3D2F5124_ai >= 0 && lv_index <= auto3D2F5124_ae) || (auto3D2F5124_ai < 0 && lv_index >= auto3D2F5124_ae) ) ; lv_index += auto3D2F5124_ai ) {
        DialogControlSetEnabled(gv_partyStartDialogMainButtons[1][lv_index], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_partyStartDialogMainButtons[2][lv_index], PlayerGroupAll(), false);
    }
    DialogCreate(700, 475, c_anchorBottomLeft, -25, -20, true);
    gv_partyDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 10;
    lv_yPos = 50;
    lv_xSize = 550;
    lv_ySize = 400;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto7B33A21C_ai >= 0 && lv_index <= auto7B33A21C_ae) || (auto7B33A21C_ai < 0 && lv_index >= auto7B33A21C_ae) ) ; lv_index += auto7B33A21C_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 450)), ((lv_yPos + 15) + RandomInt(1, 440)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 240), (lv_yPos + 24), StringExternal("Param/Value/DB2D93CF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 75, 120, StringExternal("Param/Value/C7A6CF86"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 175, 125, StringExternal("Param/Value/35BB1C39"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_partyDialogPlayerItems[0][0] = DialogControlLastCreated();
    lv_tempText[1] = StringExternal("Param/Value/4CACCB79");
    lv_tempText[2] = StringExternal("Param/Value/6D25CB4F");
    lv_tempText[3] = StringExternal("Param/Value/6F55226C");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 100.00, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_xSize = 165;
    lv_ySize = 55;
    lv_xPos = 30;
    lv_yPos = 400;
    lv_index2 = 1;
    for ( ; ( (autoC4511350_ai >= 0 && lv_index2 <= autoC4511350_ae) || (autoC4511350_ai < 0 && lv_index2 >= autoC4511350_ae) ) ; lv_index2 += autoC4511350_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_partyDialogMainButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 28), (lv_yPos + 16), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 175;
    }
    lv_xPos = 30;
    lv_yPos = 155;
    lv_index = 1;
    for ( ; ( (auto8B16154D_ai >= 0 && lv_index <= auto8B16154D_ae) || (auto8B16154D_ai < 0 && lv_index >= auto8B16154D_ae) ) ; lv_index += auto8B16154D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 195, 27, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 3), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_partyDialogPlayerItems[lv_index][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos - 0), (StringExternal("Param/Value/439FAEA0") + IntToText(lv_index)), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_partyDialogPlayerItems[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_xPos + 152), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        gv_partyDialogPlayerItems[lv_index][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 24, 24, c_anchorTopLeft, (lv_xPos + 150), (lv_yPos - 2), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
        gv_partyDialogPlayerItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, (lv_xPos + 148), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_partyDialogPlayerItems[lv_index][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, (lv_xPos + 140), (lv_yPos - 12), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_partyDialogPlayerItems[lv_index][3] = DialogControlLastCreated();
        lv_yPos += 27;
    }
    lv_xSize = 150;
    lv_ySize = 70;
    lv_yPos = 150;
    lv_yPos2 = 150;
    lv_index = 1;
    for ( ; ( (auto5803616A_ai >= 0 && lv_index <= auto5803616A_ae) || (auto5803616A_ai < 0 && lv_index >= auto5803616A_ae) ) ; lv_index += auto5803616A_ai ) {
        lv_xPos = 195;
        lv_index2 = 1;
        for ( ; ( (autoCC9F0411_ai >= 0 && lv_index2 <= autoCC9F0411_ae) || (autoCC9F0411_ai < 0 && lv_index2 >= autoCC9F0411_ae) ) ; lv_index2 += autoCC9F0411_ai ) {
            lv_tempInt += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 110, 30, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\castanarglass_diffuse.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
            gv_partyDialogPartyButtons[lv_tempInt][6] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 175, 50, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos - 10), (StringExternal("Param/Value/CB3E79DE") + IntToText(lv_tempInt)), Color(50.20, 50.20, 50.20), false, 2.0);
            gv_partyDialogPartyButtons[lv_tempInt][7] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 130, 40, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 20), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
            gv_partyDialogPartyButtons[lv_tempInt][8] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_xPos + 147), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            gv_partyDialogPartyButtons[lv_tempInt][5] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, (lv_xPos + 145), (lv_yPos - 12), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            gv_partyDialogPartyButtons[lv_tempInt][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, (lv_xPos + 142), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_partyDialogPartyButtons[lv_tempInt][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, (lv_xPos + 135), (lv_yPos - 22), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_partyDialogPartyButtons[lv_tempInt][3] = DialogControlLastCreated();
            lv_yPos += 20;
            lv_index3 = 1;
            for ( ; ( (auto4CB7511C_ai >= 0 && lv_index3 <= auto4CB7511C_ae) || (auto4CB7511C_ai < 0 && lv_index3 >= auto4CB7511C_ae) ) ; lv_index3 += auto4CB7511C_ai ) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 25, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_partyDialogPartyNames[lv_tempInt][lv_index3][0] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos - 0), (StringExternal("Param/Value/1046A11E") + IntToText(lv_index3)), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_partyDialogPartyNames[lv_tempInt][lv_index3][1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_xPos + 147), (lv_yPos - 0), StringExternal("Param/Value/2932B6A8"), StringToText(""), gv_dialogHighlighted);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 95.0);
                gv_partyDialogPartyNames[lv_tempInt][lv_index3][2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, (lv_xPos + 145), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\ui_ingame_custommutators_selecteditem_remove_highlight.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                gv_partyDialogPartyNames[lv_tempInt][lv_index3][3] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 1), StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_partyleader.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_partyDialogPartyNames[lv_tempInt][lv_index3][4] = DialogControlLastCreated();
                lv_yPos += 17;
            }
            lv_yPos = lv_yPos2;
            lv_xPos += 155;
        }
        lv_yPos2 += 140;
        lv_yPos = lv_yPos2;
    }
    DialogControlSetVisible(gv_partyDialogPlayerItems[0][0], PlayerGroupAll(), false);
    lv_index = 1;
    for ( ; ( (auto307181E4_ai >= 0 && lv_index <= auto307181E4_ae) || (auto307181E4_ai < 0 && lv_index >= auto307181E4_ae) ) ; lv_index += auto307181E4_ai ) {
        lv_index2 = 0;
        for ( ; ( (autoBA52DBB4_ai >= 0 && lv_index2 <= autoBA52DBB4_ae) || (autoBA52DBB4_ai < 0 && lv_index2 >= autoBA52DBB4_ae) ) ; lv_index2 += autoBA52DBB4_ai ) {
            DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index][lv_index2], PlayerGroupAll(), false);
        }
    }
    lv_index = 1;
    for ( ; ( (autoC1FC1207_ai >= 0 && lv_index <= autoC1FC1207_ae) || (autoC1FC1207_ai < 0 && lv_index >= autoC1FC1207_ae) ) ; lv_index += autoC1FC1207_ai ) {
        DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index][3], PlayerGroupAll(), false);
        lv_index2 = 1;
        for ( ; ( (autoFC67A30B_ai >= 0 && lv_index2 <= autoFC67A30B_ae) || (autoFC67A30B_ai < 0 && lv_index2 >= autoFC67A30B_ae) ) ; lv_index2 += autoFC67A30B_ai ) {
            lv_index3 = 0;
            for ( ; ( (auto24AFC27D_ai >= 0 && lv_index3 <= auto24AFC27D_ae) || (auto24AFC27D_ai < 0 && lv_index3 >= auto24AFC27D_ae) ) ; lv_index3 += auto24AFC27D_ai ) {
                DialogControlSetVisible(gv_partyDialogPartyNames[lv_index][lv_index2][lv_index3], PlayerGroupAll(), false);
            }
        }
    }
    DialogCreate(600, 625, c_anchorLeft, -25, -20, true);
    gv_helpDialogDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 500;
    lv_ySize = 550;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 65, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto79D4FE38_ai >= 0 && lv_index <= auto79D4FE38_ae) || (auto79D4FE38_ai < 0 && lv_index >= auto79D4FE38_ae) ) ; lv_index += auto79D4FE38_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 30)), (40 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 450)), ((lv_yPos + 15) + RandomInt(1, 500)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 23), StringExternal("Param/Value/8BD4C2F9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 70, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 26), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_helpDialogDialogItems[0][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 370, 470, c_anchorTopLeft, 120, 140, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_helpDialogDialogItems[0][2] = DialogControlLastCreated();
    lv_tempText[1] = StringExternal("Param/Value/C0C0EAEE");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_xSize = 190;
    lv_ySize = 65;
    lv_xPos = 205;
    lv_yPos = 545;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 18), (lv_ySize - 18), c_anchorTopLeft, (lv_xPos + 9), (lv_yPos + 9), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_helpDialogDialogItems[0][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 28), (lv_yPos + 18), lv_tempText[1], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 70;
    lv_ySize = 70;
    lv_xPos = 40;
    lv_tempInt = 0;
    lv_index = 1;
    for ( ; ( (autoADB8F89C_ai >= 0 && lv_index <= autoADB8F89C_ae) || (autoADB8F89C_ai < 0 && lv_index >= autoADB8F89C_ae) ) ; lv_index += autoADB8F89C_ai ) {
        lv_yPos = 25;
        lv_index2 = 1;
        for ( ; ( (auto78698730_ai >= 0 && lv_index2 <= auto78698730_ae) || (auto78698730_ai < 0 && lv_index2 >= auto78698730_ae) ) ; lv_index2 += auto78698730_ai ) {
            lv_tempInt += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btn3m1.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), gv_helpDialogDialogIcons[lv_tempInt], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_helpDialogDialogItems[lv_tempInt][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), gv_helpHelpText[lv_tempInt][1], StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
            gv_helpDialogDialogItems[lv_tempInt][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            lv_yPos += 64;
        }
        lv_xPos += 450;
    }
    lv_xPos = 105;
    lv_yPos = 10;
    lv_index2 = 1;
    for ( ; ( (auto32D1BA8E_ai >= 0 && lv_index2 <= auto32D1BA8E_ae) || (auto32D1BA8E_ai < 0 && lv_index2 >= auto32D1BA8E_ae) ) ; lv_index2 += auto32D1BA8E_ai ) {
        lv_tempInt += 1;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btn3m1.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), gv_helpDialogDialogIcons[lv_tempInt], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_helpDialogDialogItems[lv_tempInt][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), gv_helpHelpText[lv_tempInt][1], StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        gv_helpDialogDialogItems[lv_tempInt][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_xPos += 64;
    }
    lv_xPos = 105;
    lv_yPos = 545;
    lv_index2 = 1;
    for ( ; ( (autoDDA63892_ai >= 0 && lv_index2 <= autoDDA63892_ae) || (autoDDA63892_ai < 0 && lv_index2 >= autoDDA63892_ae) ) ; lv_index2 += autoDDA63892_ai ) {
        lv_tempInt += 1;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btn3m1.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), gv_helpDialogDialogIcons[lv_tempInt], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_helpDialogDialogItems[lv_tempInt][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), gv_helpHelpText[lv_tempInt][1], StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        gv_helpDialogDialogItems[lv_tempInt][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    }
    lv_xPos = 425;
    lv_yPos = 545;
    lv_index2 = 1;
    for ( ; ( (auto534A0A26_ai >= 0 && lv_index2 <= auto534A0A26_ae) || (auto534A0A26_ai < 0 && lv_index2 >= auto534A0A26_ae) ) ; lv_index2 += auto534A0A26_ai ) {
        lv_tempInt += 1;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btn3m1.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), gv_helpDialogDialogIcons[lv_tempInt], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_helpDialogDialogItems[lv_tempInt][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), gv_helpHelpText[lv_tempInt][1], StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        gv_helpDialogDialogItems[lv_tempInt][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    }
}

void gf_DialogUsedParty (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_trigParty;
    int lv_trigLeader;
    int lv_trigJoiner;
    int[4] lv_tempInt;

    // Automatic Variable Declarations
    int auto1CCC5EC3_val;
    const int autoBF88F617_ae = 4;
    const int autoBF88F617_ai = 1;
    const int autoE58788BB_ae = 4;
    const int autoE58788BB_ai = 1;
    const int autoC0C3964D_ae = 4;
    const int autoC0C3964D_ai = 1;
    const int auto9335D368_ae = 4;
    const int auto9335D368_ai = 1;
    const int auto0174074D_ae = 4;
    const int auto0174074D_ai = 1;
    const int autoEFEFA477_ae = 5;
    const int autoEFEFA477_ai = 1;
    const int auto675D5BAB_ae = 3;
    const int auto675D5BAB_ai = 1;
    const int auto90758F01_ae = 8;
    const int auto90758F01_ai = 1;
    const int auto6D7FC702_ae = 3;
    const int auto6D7FC702_ai = 1;
    playergroup autoF9089F6A_g;
    int autoF9089F6A_var;
    const int auto414A7EE5_ae = 8;
    const int auto414A7EE5_ai = 1;
    const int auto86599ACE_ae = gv_generalPlayerCap;
    const int auto86599ACE_ai = 1;
    const int autoD056B8DA_ae = 5;
    const int autoD056B8DA_ai = 1;
    const int auto4CE8499A_ae = gv_generalPlayerCap;
    const int auto4CE8499A_ai = 1;
    const int autoD76DFFFE_ae = 4;
    const int autoD76DFFFE_ai = 1;
    const int auto22817841_ae = 8;
    const int auto22817841_ai = 1;
    const int autoF848B9EE_ae = 8;
    const int autoF848B9EE_ai = 1;
    const int auto22011EDC_ae = 4;
    const int auto22011EDC_ai = 1;
    const int auto1E9A9C3C_ae = 8;
    const int auto1E9A9C3C_ai = 1;
    const int auto78203486_ae = 8;
    const int auto78203486_ai = 1;
    const int autoA35EA239_ae = 4;
    const int autoA35EA239_ai = 1;
    const int auto833A184C_ae = 5;
    const int auto833A184C_ai = 1;
    const int autoDEB4E237_ae = 4;
    const int autoDEB4E237_ai = 1;
    const int autoCAF5C4D1_ae = 3;
    const int autoCAF5C4D1_ai = 1;
    const int auto26497B51_ae = 8;
    const int auto26497B51_ai = 1;
    const int autoE1E7D992_ae = 4;
    const int autoE1E7D992_ai = 1;
    const int autoF5F24D87_ae = 5;
    const int autoF5F24D87_ai = 1;
    const int auto69E20032_ae = gv_generalPlayerCap;
    const int auto69E20032_ai = 1;
    const int auto648D7B5C_ae = 5;
    const int auto648D7B5C_ai = 1;
    const int auto2D0A20AD_ae = 1;
    const int auto2D0A20AD_ai = 1;
    const int autoAD9E0470_ae = 4;
    const int autoAD9E0470_ai = 1;
    const int auto97368055_ae = 5;
    const int auto97368055_ai = 1;
    const int auto5B99AEA4_ae = 4;
    const int auto5B99AEA4_ai = 1;
    playergroup auto7A66E6F0_g;
    int auto7A66E6F0_var;
    const int auto403DF4BE_ae = 1;
    const int auto403DF4BE_ai = 1;
    const int auto906E550C_ae = 3;
    const int auto906E550C_ai = 1;
    const int autoE513E15C_ae = 4;
    const int autoE513E15C_ai = 1;
    const int auto5F076B43_ae = gv_generalPlayerCap;
    const int auto5F076B43_ai = 1;
    const int autoB9A46E64_ae = 5;
    const int autoB9A46E64_ai = 1;
    const int auto48DEE3A2_ae = 5;
    const int auto48DEE3A2_ai = 1;
    playergroup auto65E70312_g;
    int auto65E70312_var;
    const int auto93AF4CD4_ae = 4;
    const int auto93AF4CD4_ai = 1;
    const int auto77E943AF_ae = 5;
    const int auto77E943AF_ai = 1;
    const int autoD2322138_ae = 8;
    const int autoD2322138_ai = 1;
    const int auto92EB4A85_ae = 8;
    const int auto92EB4A85_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto1CCC5EC3_val = lv_dialogItemUsed;
    if (auto1CCC5EC3_val == gv_partyStartDialogMainButtons[1][1]) {
        libNtve_gf_SetDialogItemText(gv_partyStartDialogMainButtons[2][3], (StringExternal("Param/Value/14FF403E") + StringToText("")), PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (autoBF88F617_ai >= 0 && lv_index <= autoBF88F617_ae) || (autoBF88F617_ai < 0 && lv_index >= autoBF88F617_ae) ) ; lv_index += autoBF88F617_ai ) {
            DialogControlSetEnabled(gv_partyStartDialogMainButtons[1][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
            DialogControlSetEnabled(gv_partyStartDialogMainButtons[2][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
        }
        DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        return ;
    }
    else if (auto1CCC5EC3_val == gv_partyStartDialogMainButtons[2][1]) {
        if ((gv_playerHeroHero[lv_trigPlayer] == null)) {
            lv_index = 1;
            for ( ; ( (autoE58788BB_ai >= 0 && lv_index <= autoE58788BB_ae) || (autoE58788BB_ai < 0 && lv_index >= autoE58788BB_ae) ) ; lv_index += autoE58788BB_ai ) {
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[1][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
            }
            libNtve_gf_SetDialogItemText(gv_partyStartDialogMainButtons[2][3], (StringExternal("Param/Value/62F2792E") + StringToText("")), PlayerGroupSingle(lv_trigPlayer));
            gf_BankLoadBank30(lv_trigPlayer, gv_heroLoadDialogSlotSelected[lv_trigPlayer]);
            gf_DialogUsedHeroCreateLoad(lv_trigPlayer, true);
            gf_PartyStartUpdate(lv_trigPlayer);
            lv_index = 1;
            for ( ; ( (autoC0C3964D_ai >= 0 && lv_index <= autoC0C3964D_ae) || (autoC0C3964D_ai < 0 && lv_index >= autoC0C3964D_ae) ) ; lv_index += autoC0C3964D_ai ) {
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        else {
            DialogSetVisible(gv_partyStartDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
    }
    else if (auto1CCC5EC3_val == gv_partyDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 6;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (auto1CCC5EC3_val == gv_partyDialogMainButtons[2]) {
        lv_index = 1;
        for ( ; ( (auto9335D368_ai >= 0 && lv_index <= auto9335D368_ae) || (auto9335D368_ai < 0 && lv_index >= auto9335D368_ae) ) ; lv_index += auto9335D368_ai ) {
            if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true) && (PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
                lv_trigParty = lv_index;
                lv_index2 = 1;
                for ( ; ( (auto0174074D_ai >= 0 && lv_index2 <= auto0174074D_ae) || (auto0174074D_ai < 0 && lv_index2 >= auto0174074D_ae) ) ; lv_index2 += auto0174074D_ai ) {
                    lv_index3 = 2;
                    for ( ; ( (autoEFEFA477_ai >= 0 && lv_index3 <= autoEFEFA477_ae) || (autoEFEFA477_ai < 0 && lv_index3 >= autoEFEFA477_ae) ) ; lv_index3 += autoEFEFA477_ai ) {
                        DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                    DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index2][3], PlayerGroupSingle(lv_trigPlayer), false);
                    lv_index3 = 1;
                    for ( ; ( (auto675D5BAB_ai >= 0 && lv_index3 <= auto675D5BAB_ae) || (auto675D5BAB_ai < 0 && lv_index3 >= auto675D5BAB_ae) ) ; lv_index3 += auto675D5BAB_ai ) {
                        if ((PlayerGroupHasPlayer(gv_generalParties[lv_index2][lv_index3], lv_trigPlayer) == true)) {
                            PlayerGroupRemove(gv_generalParties[lv_index2][lv_index3], lv_trigPlayer);
                            gf_GeneralPartyMessage((PlayerName(lv_trigPlayer) + StringExternal("Param/Value/1E14217A")), gv_generalParties[lv_index2][1]);
                            gf_GeneralPartyMessage(StringExternal("Param/Value/B29D10D2"), PlayerGroupSingle(lv_trigPlayer));
                        }

                    }
                    lv_index3 = 6;
                    for ( ; ( (auto90758F01_ai >= 0 && lv_index3 <= auto90758F01_ae) || (auto90758F01_ai < 0 && lv_index3 >= auto90758F01_ae) ) ; lv_index3 += auto90758F01_ai ) {
                        libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_index2][lv_index3], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lv_trigPlayer));
                    }
                }
                if ((lv_trigPlayer == gv_generalPartiesLeaders[lv_trigParty])) {
                    if ((PlayerGroupCount(gv_generalParties[lv_trigParty][1]) >= 1)) {
                        gv_generalPartiesLeaders[lv_trigParty] = PlayerGroupPlayer(gv_generalParties[lv_trigParty][1], RandomInt(1, PlayerGroupCount(gv_generalParties[lv_trigParty][1])));
                    }
                    else {
                        gv_generalPartiesLeaders[lv_trigParty] = 0;
                        lv_index3 = 1;
                        for ( ; ( (auto6D7FC702_ai >= 0 && lv_index3 <= auto6D7FC702_ae) || (auto6D7FC702_ai < 0 && lv_index3 >= auto6D7FC702_ae) ) ; lv_index3 += auto6D7FC702_ai ) {
                            autoF9089F6A_g = gv_generalParties[lv_trigParty][lv_index3];
                            autoF9089F6A_var = -1;
                            while (true) {
                                autoF9089F6A_var = PlayerGroupNextPlayer(autoF9089F6A_g, autoF9089F6A_var);
                                if (autoF9089F6A_var < 0) { break; }
                                lv_index2 = 6;
                                for ( ; ( (auto414A7EE5_ai >= 0 && lv_index2 <= auto414A7EE5_ae) || (auto414A7EE5_ai < 0 && lv_index2 >= auto414A7EE5_ae) ) ; lv_index2 += auto414A7EE5_ai ) {
                                    libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lv_trigJoiner));
                                }
                            }
                            PlayerGroupClear(gv_generalParties[lv_trigParty][lv_index3]);
                        }
                    }
                    lv_index2 = 1;
                    for ( ; ( (auto86599ACE_ai >= 0 && lv_index2 <= auto86599ACE_ae) || (auto86599ACE_ai < 0 && lv_index2 >= auto86599ACE_ae) ) ; lv_index2 += auto86599ACE_ai ) {
                        lv_index3 = 2;
                        for ( ; ( (autoD056B8DA_ai >= 0 && lv_index3 <= autoD056B8DA_ae) || (autoD056B8DA_ai < 0 && lv_index3 >= autoD056B8DA_ae) ) ; lv_index3 += autoD056B8DA_ai ) {
                            DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
                        }
                    }
                }

            }

        }
    }
    else if (auto1CCC5EC3_val == gv_partyDialogMainButtons[3]) {
        DialogSetVisible(gv_partyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto4CE8499A_ai >= 0 && lv_index <= auto4CE8499A_ae) || (auto4CE8499A_ai < 0 && lv_index >= auto4CE8499A_ae) ) ; lv_index += auto4CE8499A_ai ) {
        if ((lv_dialogItemUsed == gv_partyDialogPlayerItems[lv_index][2]) && (gv_playerHeroHeroLevelExp[lv_index][1] >= 1)) {
            lv_index2 = 1;
            for ( ; ( (autoD76DFFFE_ai >= 0 && lv_index2 <= autoD76DFFFE_ae) || (autoD76DFFFE_ai < 0 && lv_index2 >= autoD76DFFFE_ae) ) ; lv_index2 += autoD76DFFFE_ai ) {
                if ((lv_trigPlayer == gv_generalPartiesLeaders[lv_index2])) {
                    lv_trigJoiner = lv_index;
                    lv_trigParty = lv_index2;
                    lv_trigLeader = gv_generalPartiesLeaders[lv_trigParty];
                    if ((PlayerGroupCount(gv_generalParties[lv_trigParty][1]) < 5)) {
                        if ((PlayerGroupHasPlayer(gv_generalParties[lv_trigParty][3], lv_trigJoiner) == false) && (gv_banksLoadedIn[lv_trigPlayer] == true)) {
                            PlayerGroupAdd(gv_generalParties[lv_trigParty][3], lv_trigJoiner);
                            DialogControlSetVisible(gv_partyDialogPlayerItems[lv_trigJoiner][3], PlayerGroupSingle(lv_trigLeader), true);
                            lv_index3 = 6;
                            for ( ; ( (autoF848B9EE_ai >= 0 && lv_index3 <= autoF848B9EE_ae) || (autoF848B9EE_ai < 0 && lv_index3 >= autoF848B9EE_ae) ) ; lv_index3 += autoF848B9EE_ai ) {
                                libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(0.00, 50.20, 0.00), PlayerGroupSingle(lv_trigJoiner));
                            }
                            if ((PlayerGroupHasPlayer(gv_generalParties[lv_trigParty][2], lv_trigJoiner) == false)) {
                                gf_GeneralPartyMessage((PlayerName(lv_trigJoiner) + StringExternal("Param/Value/E9D427A0")), gv_generalParties[lv_trigParty][1]);
                                gf_GeneralPartyMessage((PlayerName(lv_trigLeader) + StringExternal("Param/Value/6ABD1C76")), PlayerGroupSingle(lv_trigJoiner));
                                DialogSetVisible(gv_partyDialogBox, PlayerGroupSingle(lv_trigJoiner), true);
                            }

                        }
                        else {
                            PlayerGroupRemove(gv_generalParties[lv_trigParty][3], lv_index);
                            DialogControlSetVisible(gv_partyDialogPlayerItems[lv_trigParty][3], PlayerGroupSingle(lv_trigLeader), false);
                            lv_index3 = 6;
                            for ( ; ( (auto22817841_ai >= 0 && lv_index3 <= auto22817841_ae) || (auto22817841_ai < 0 && lv_index3 >= auto22817841_ae) ) ; lv_index3 += auto22817841_ai ) {
                                libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lv_trigJoiner));
                            }
                        }
                    }
                    else {
                        gf_GeneralErrorMessage(StringExternal("Param/Value/EE08653C"), PlayerGroupSingle(lv_trigPlayer));
                    }
                }

            }
        }

    }
    lv_index = 1;
    for ( ; ( (auto22011EDC_ai >= 0 && lv_index <= auto22011EDC_ae) || (auto22011EDC_ai < 0 && lv_index >= auto22011EDC_ae) ) ; lv_index += auto22011EDC_ai ) {
        if ((lv_dialogItemUsed == gv_partyDialogPartyButtons[lv_index][2])) {
            if ((PlayerGroupCount(gv_generalParties[lv_index][1]) == 0)) {
                lv_trigParty = lv_index;
                lv_trigJoiner = lv_trigPlayer;
                lv_trigLeader = lv_trigPlayer;
                PlayerGroupAdd(gv_generalParties[lv_trigParty][2], lv_trigPlayer);
                PlayerGroupAdd(gv_generalParties[lv_trigParty][3], lv_trigPlayer);
                gv_generalPartiesLeaders[lv_trigParty] = lv_trigPlayer;
                lv_index3 = 6;
                for ( ; ( (auto78203486_ai >= 0 && lv_index3 <= auto78203486_ae) || (auto78203486_ai < 0 && lv_index3 >= auto78203486_ae) ) ; lv_index3 += auto78203486_ai ) {
                    libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigJoiner));
                }
            }
            else {
                if ((PlayerGroupCount(gv_generalParties[lv_trigParty][1]) < 5)) {
                    if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][2], lv_trigPlayer) == false)) {
                        lv_trigJoiner = lv_trigPlayer;
                        lv_trigParty = lv_index;
                        lv_trigLeader = gv_generalPartiesLeaders[lv_trigParty];
                        PlayerGroupAdd(gv_generalParties[lv_trigParty][2], lv_trigJoiner);
                        if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][3], lv_trigJoiner) == false)) {
                            gf_GeneralPartyMessage((PlayerName(lv_trigJoiner) + StringExternal("Param/Value/E18131F6")), gv_generalParties[lv_trigParty][1]);
                            DialogControlSetVisible(gv_partyDialogPartyButtons[lv_trigParty][3], PlayerGroupSingle(lv_trigJoiner), true);
                        }

                    }
                    else {
                        PlayerGroupRemove(gv_generalParties[lv_trigParty][2], lv_trigJoiner);
                        DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index][3], PlayerGroupSingle(lv_trigJoiner), false);
                        lv_index3 = 6;
                        for ( ; ( (auto1E9A9C3C_ai >= 0 && lv_index3 <= auto1E9A9C3C_ae) || (auto1E9A9C3C_ai < 0 && lv_index3 >= auto1E9A9C3C_ae) ) ; lv_index3 += auto1E9A9C3C_ai ) {
                            libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lv_trigJoiner));
                        }
                    }
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/761550F0"), PlayerGroupSingle(lv_trigJoiner));
                }
            }
        }

    }
    lv_index = 1;
    for ( ; ( (autoA35EA239_ai >= 0 && lv_index <= autoA35EA239_ae) || (autoA35EA239_ai < 0 && lv_index >= autoA35EA239_ae) ) ; lv_index += autoA35EA239_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto833A184C_ai >= 0 && lv_index2 <= auto833A184C_ae) || (auto833A184C_ai < 0 && lv_index2 >= auto833A184C_ae) ) ; lv_index2 += auto833A184C_ai ) {
            if ((lv_dialogItemUsed == gv_partyDialogPartyNames[lv_index][lv_index2][2]) && (lv_trigPlayer == gv_generalPartiesLeaders[lv_index])) {
                lv_trigParty = lv_index;
                lv_trigLeader = gv_generalPartiesLeaders[lv_trigParty];
                DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
                lv_trigJoiner = PlayerGroupPlayer(gv_generalParties[lv_index][1], lv_index2);
                gf_DialogUsedParty(lv_trigJoiner, gv_partyDialogMainButtons[2]);
                Wait(0.3, c_timeGame);
                DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
    }
    if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigJoiner) == true) && (PlayerGroupHasPlayer(gv_generalParties[lv_trigParty][2], lv_trigJoiner) == true) && (PlayerGroupHasPlayer(gv_generalParties[lv_trigParty][3], lv_trigJoiner) == true) && (PlayerGroupCount(gv_generalParties[lv_trigParty][1]) < 5)) {
        lv_index2 = 1;
        for ( ; ( (autoDEB4E237_ai >= 0 && lv_index2 <= autoDEB4E237_ae) || (autoDEB4E237_ai < 0 && lv_index2 >= autoDEB4E237_ae) ) ; lv_index2 += autoDEB4E237_ai ) {
            lv_index3 = 1;
            for ( ; ( (autoCAF5C4D1_ai >= 0 && lv_index3 <= autoCAF5C4D1_ae) || (autoCAF5C4D1_ai < 0 && lv_index3 >= autoCAF5C4D1_ae) ) ; lv_index3 += autoCAF5C4D1_ai ) {
                libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_index2][lv_index3], Color(149*100/255,150*100/255,151*100/255), PlayerGroupSingle(lv_trigJoiner));
                if ((PlayerGroupHasPlayer(gv_generalParties[lv_index2][lv_index3], lv_trigJoiner) == true)) {
                    PlayerGroupRemove(gv_generalParties[lv_index2][lv_index3], lv_trigJoiner);
                }

            }
        }
        PlayerGroupAdd(gv_generalParties[lv_trigParty][1], lv_trigJoiner);
        lv_index3 = 6;
        for ( ; ( (auto26497B51_ai >= 0 && lv_index3 <= auto26497B51_ae) || (auto26497B51_ai < 0 && lv_index3 >= auto26497B51_ae) ) ; lv_index3 += auto26497B51_ai ) {
            libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_trigParty][lv_index3], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigJoiner));
        }
        gf_GeneralPartyMessage((PlayerName(lv_trigJoiner) + StringExternal("Param/Value/3C79DD62")), gv_generalParties[lv_trigParty][1]);
        lv_index2 = 1;
        for ( ; ( (autoE1E7D992_ai >= 0 && lv_index2 <= autoE1E7D992_ae) || (autoE1E7D992_ai < 0 && lv_index2 >= autoE1E7D992_ae) ) ; lv_index2 += autoE1E7D992_ai ) {
            lv_index3 = 2;
            for ( ; ( (autoF5F24D87_ai >= 0 && lv_index3 <= autoF5F24D87_ae) || (autoF5F24D87_ai < 0 && lv_index3 >= autoF5F24D87_ae) ) ; lv_index3 += autoF5F24D87_ai ) {
                DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index2][lv_index3], PlayerGroupSingle(lv_trigJoiner), false);
            }
        }
    }

    lv_index2 = 1;
    for ( ; ( (auto69E20032_ai >= 0 && lv_index2 <= auto69E20032_ae) || (auto69E20032_ai < 0 && lv_index2 >= auto69E20032_ae) ) ; lv_index2 += auto69E20032_ai ) {
        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index2) == true)) {
            libNtve_gf_SetDialogItemText(gv_partyDialogPlayerItems[lv_index2][1], (StringExternal("Param/Value/4AE5A219") + PlayerName(lv_index2)), PlayerGroupAll());
            lv_index3 = 0;
            for ( ; ( (auto2D0A20AD_ai >= 0 && lv_index3 <= auto2D0A20AD_ae) || (auto2D0A20AD_ai < 0 && lv_index3 >= auto2D0A20AD_ae) ) ; lv_index3 += auto2D0A20AD_ai ) {
                DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupAll(), true);
            }
        }
        else {
            lv_index3 = 0;
            for ( ; ( (auto648D7B5C_ai >= 0 && lv_index3 <= auto648D7B5C_ae) || (auto648D7B5C_ai < 0 && lv_index3 >= auto648D7B5C_ae) ) ; lv_index3 += auto648D7B5C_ai ) {
                DialogControlSetEnabled(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupAll(), false);
                DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupAll(), false);
            }
        }
    }
    lv_index = 1;
    for ( ; ( (autoAD9E0470_ai >= 0 && lv_index <= autoAD9E0470_ae) || (autoAD9E0470_ai < 0 && lv_index >= autoAD9E0470_ae) ) ; lv_index += autoAD9E0470_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto97368055_ai >= 0 && lv_index2 <= auto97368055_ae) || (auto97368055_ai < 0 && lv_index2 >= auto97368055_ae) ) ; lv_index2 += auto97368055_ai ) {
            libNtve_gf_SetDialogItemText(gv_partyDialogPartyNames[lv_index][lv_index2][1], StringToText(""), PlayerGroupAll());
            lv_index3 = 0;
            for ( ; ( (auto5B99AEA4_ai >= 0 && lv_index3 <= auto5B99AEA4_ae) || (auto5B99AEA4_ai < 0 && lv_index3 >= auto5B99AEA4_ae) ) ; lv_index3 += auto5B99AEA4_ai ) {
                DialogControlSetVisible(gv_partyDialogPartyNames[lv_index][lv_index2][lv_index3], PlayerGroupAll(), false);
            }
        }
        if ((PlayerGroupCount(gv_generalParties[lv_index][1]) > 0)) {
            lv_index2 = 0;
            auto7A66E6F0_g = gv_generalParties[lv_index][1];
            auto7A66E6F0_var = -1;
            while (true) {
                auto7A66E6F0_var = PlayerGroupNextPlayer(auto7A66E6F0_g, auto7A66E6F0_var);
                if (auto7A66E6F0_var < 0) { break; }
                lv_index2 += 1;
                libNtve_gf_SetDialogItemText(gv_partyDialogPartyNames[lv_index][lv_index2][1], (StringExternal("Param/Value/6DB1E0E6") + PlayerName(auto7A66E6F0_var)), PlayerGroupAll());
                if ((auto7A66E6F0_var == gv_generalPartiesLeaders[lv_index])) {
                    DialogControlSetVisible(gv_partyDialogPartyNames[lv_index][lv_index2][4], PlayerGroupAll(), true);
                }

                lv_index3 = 0;
                for ( ; ( (auto403DF4BE_ai >= 0 && lv_index3 <= auto403DF4BE_ae) || (auto403DF4BE_ai < 0 && lv_index3 >= auto403DF4BE_ae) ) ; lv_index3 += auto403DF4BE_ai ) {
                    DialogControlSetVisible(gv_partyDialogPartyNames[lv_index][lv_index2][lv_index3], PlayerGroupAll(), true);
                }
                lv_index3 = 2;
                for ( ; ( (auto906E550C_ai >= 0 && lv_index3 <= auto906E550C_ae) || (auto906E550C_ai < 0 && lv_index3 >= auto906E550C_ae) ) ; lv_index3 += auto906E550C_ai ) {
                    DialogControlSetVisible(gv_partyDialogPartyNames[lv_index][lv_index2][lv_index3], PlayerGroupSingle(gv_generalPartiesLeaders[lv_index]), true);
                }
            }
        }

    }
    lv_index = 1;
    for ( ; ( (autoE513E15C_ai >= 0 && lv_index <= autoE513E15C_ae) || (autoE513E15C_ai < 0 && lv_index >= autoE513E15C_ae) ) ; lv_index += autoE513E15C_ai ) {
        if ((PlayerGroupCount(gv_generalParties[lv_index][1]) > 0)) {
            lv_trigLeader = gv_generalPartiesLeaders[lv_index];
            lv_index2 = 1;
            for ( ; ( (auto5F076B43_ai >= 0 && lv_index2 <= auto5F076B43_ae) || (auto5F076B43_ai < 0 && lv_index2 >= auto5F076B43_ae) ) ; lv_index2 += auto5F076B43_ai ) {
                lv_index3 = 2;
                for ( ; ( (autoB9A46E64_ai >= 0 && lv_index3 <= autoB9A46E64_ae) || (autoB9A46E64_ai < 0 && lv_index3 >= autoB9A46E64_ae) ) ; lv_index3 += autoB9A46E64_ai ) {
                    DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupSingle(lv_trigLeader), false);
                }
                if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index2) == true) && (PlayerGroupHasPlayer(gv_generalParties[1][1], lv_index2) == false) && (PlayerGroupHasPlayer(gv_generalParties[2][1], lv_index2) == false) && (PlayerGroupHasPlayer(gv_generalParties[3][1], lv_index2) == false) && (PlayerGroupHasPlayer(gv_generalParties[4][1], lv_index2) == false)) {
                    lv_index3 = 2;
                    for ( ; ( (auto48DEE3A2_ai >= 0 && lv_index3 <= auto48DEE3A2_ae) || (auto48DEE3A2_ai < 0 && lv_index3 >= auto48DEE3A2_ae) ) ; lv_index3 += auto48DEE3A2_ai ) {
                        DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][lv_index3], PlayerGroupSingle(lv_trigLeader), true);
                    }
                    if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][3], lv_index2) == false)) {
                        DialogControlSetVisible(gv_partyDialogPlayerItems[lv_index2][3], PlayerGroupSingle(lv_trigLeader), false);
                    }

                }

            }
            if ((PlayerGroupCount(gv_generalParties[lv_index][1]) == 1)) {
                gf_PartyAlone(lv_trigLeader, lv_index);
            }

        }

    }
    auto65E70312_g = gv_generalTeamsAll;
    auto65E70312_var = -1;
    while (true) {
        auto65E70312_var = PlayerGroupNextPlayer(auto65E70312_g, auto65E70312_var);
        if (auto65E70312_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_generalParties[1][1], auto65E70312_var) == false) && (PlayerGroupHasPlayer(gv_generalParties[2][1], auto65E70312_var) == false) && (PlayerGroupHasPlayer(gv_generalParties[3][1], auto65E70312_var) == false) && (PlayerGroupHasPlayer(gv_generalParties[4][1], auto65E70312_var) == false)) {
            lv_index2 = 1;
            for ( ; ( (auto93AF4CD4_ai >= 0 && lv_index2 <= auto93AF4CD4_ae) || (auto93AF4CD4_ai < 0 && lv_index2 >= auto93AF4CD4_ae) ) ; lv_index2 += auto93AF4CD4_ai ) {
                lv_index3 = 2;
                for ( ; ( (auto77E943AF_ai >= 0 && lv_index3 <= auto77E943AF_ae) || (auto77E943AF_ai < 0 && lv_index3 >= auto77E943AF_ae) ) ; lv_index3 += auto77E943AF_ai ) {
                    DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index2][lv_index3], PlayerGroupSingle(auto65E70312_var), true);
                }
                if ((PlayerGroupHasPlayer(gv_generalParties[lv_index2][2], auto65E70312_var) == false)) {
                    DialogControlSetVisible(gv_partyDialogPartyButtons[lv_index2][3], PlayerGroupSingle(auto65E70312_var), false);
                }

                if ((PlayerGroupHasPlayer(gv_generalParties[lv_index2][3], auto65E70312_var) == true)) {
                    lv_index3 = 6;
                    for ( ; ( (auto92EB4A85_ai >= 0 && lv_index3 <= auto92EB4A85_ae) || (auto92EB4A85_ai < 0 && lv_index3 >= auto92EB4A85_ae) ) ; lv_index3 += auto92EB4A85_ai ) {
                        libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_index2][lv_index3], Color(0.00, 50.20, 0.00), PlayerGroupSingle(auto65E70312_var));
                    }
                }
                else {
                    lv_index3 = 6;
                    for ( ; ( (autoD2322138_ai >= 0 && lv_index3 <= autoD2322138_ae) || (autoD2322138_ai < 0 && lv_index3 >= autoD2322138_ae) ) ; lv_index3 += autoD2322138_ai ) {
                        libNtve_gf_SetDialogItemColor(gv_partyDialogPartyButtons[lv_index2][lv_index3], Color(50.20, 50.20, 50.20), PlayerGroupSingle(auto65E70312_var));
                    }
                }
            }
        }

    }
}

trigger auto_gf_PartyUpdateTooltips_Trigger = null;
int auto_gf_PartyUpdateTooltips_lp_trigPlayer;

void gf_PartyUpdateTooltips (int lp_trigPlayer) {
    auto_gf_PartyUpdateTooltips_lp_trigPlayer = lp_trigPlayer;

    if (auto_gf_PartyUpdateTooltips_Trigger == null) {
        auto_gf_PartyUpdateTooltips_Trigger = TriggerCreate("auto_gf_PartyUpdateTooltips_TriggerFunc");
    }

    TriggerExecute(auto_gf_PartyUpdateTooltips_Trigger, false, false);
}

bool auto_gf_PartyUpdateTooltips_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_PartyUpdateTooltips_lp_trigPlayer;

    // Variable Declarations
    int lv_trigPlayer;
    text lv_tempText;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    lv_tempText = ((StringExternal("Param/Value/FAF2CEBD") + IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][1])) + (StringExternal("Param/Value/EE1295FE") + UnitTypeGetName(UnitGetType(gv_playerHeroHero[lv_trigPlayer]))));
    lv_tempText = (lv_tempText + (StringExternal("Param/Value/A8924844") + gv_regionsPlayerRegionName[gv_playerHeroHeroRegionIndex[lv_trigPlayer]]));
    libNtve_gf_SetDialogItemTooltip(gv_partyDialogPlayerItems[lv_trigPlayer][0], lv_tempText, PlayerGroupAll());
    TCUI_SetLocationLabel(gv_regionsPlayerRegionName[gv_playerHeroHeroRegionIndex[lv_trigPlayer]], PlayerGroupSingle(lv_trigPlayer));
    TCUI_SetHeroLevelLabelLevel(gv_playerHeroHeroLevelExp[lv_trigPlayer][1], PlayerGroupSingle(lv_trigPlayer));
    return true;
}

trigger auto_gf_PartyStartUpdate_Trigger = null;
int auto_gf_PartyStartUpdate_lp_trigPlayer;

void gf_PartyStartUpdate (int lp_trigPlayer) {
    auto_gf_PartyStartUpdate_lp_trigPlayer = lp_trigPlayer;

    if (auto_gf_PartyStartUpdate_Trigger == null) {
        auto_gf_PartyStartUpdate_Trigger = TriggerCreate("auto_gf_PartyStartUpdate_TriggerFunc");
    }

    TriggerExecute(auto_gf_PartyStartUpdate_Trigger, false, false);
}

bool auto_gf_PartyStartUpdate_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_PartyStartUpdate_lp_trigPlayer;

    // Variable Declarations
    int lv_trigPlayer;
    text lv_tempText;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto71421A81_g;
    int auto71421A81_var;
    const int autoF12283FE_ae = 3;
    const int autoF12283FE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    if ((lv_trigPlayer == 0)) {
        auto71421A81_g = gv_generalTeamsAll;
        auto71421A81_var = -1;
        while (true) {
            auto71421A81_var = PlayerGroupNextPlayer(auto71421A81_g, auto71421A81_var);
            if (auto71421A81_var < 0) { break; }
            lv_trigPlayer = auto71421A81_var;
            libNtve_gf_SetDialogItemText(gv_partyStartDialogPlayerItems[lv_trigPlayer][1], (StringExternal("Param/Value/CDEF486B") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_partyStartDialogPlayerItems[lv_trigPlayer][2], (StringExternal("Param/Value/66731CAB") + StringExternal("Param/Value/74CC1687")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_partyStartDialogPlayerItems[lv_trigPlayer][3], (StringExternal("Param/Value/C410C4F3") + StringExternal("Param/Value/547ECD54")), PlayerGroupAll());
            lv_index = 0;
            for ( ; ( (autoF12283FE_ai >= 0 && lv_index <= autoF12283FE_ae) || (autoF12283FE_ai < 0 && lv_index >= autoF12283FE_ae) ) ; lv_index += autoF12283FE_ai ) {
                DialogControlSetVisible(gv_partyStartDialogPlayerItems[lv_trigPlayer][lv_index], PlayerGroupAll(), true);
            }
        }
    }
    else {
        libNtve_gf_SetDialogItemText(gv_partyStartDialogPlayerItems[lv_trigPlayer][2], (StringExternal("Param/Value/FCA06D8E") + IntToText(gv_banksHeroLevelExp[lv_trigPlayer][gv_banksSlotSelected[lv_trigPlayer]])), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_partyStartDialogPlayerItems[lv_trigPlayer][3], (StringExternal("Param/Value/28568B30") + UnitTypeGetName(gv_heroesStatsUnitType[gv_banksHeroClassTierType[lv_trigPlayer][gv_banksSlotSelected[lv_trigPlayer]][1]][gv_banksHeroClassTierType[lv_trigPlayer][gv_banksSlotSelected[lv_trigPlayer]][2]][gv_banksHeroClassTierType[lv_trigPlayer][gv_banksSlotSelected[lv_trigPlayer]][3]])), PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_PartyAlone_Trigger = null;
int auto_gf_PartyAlone_lp_trigPlayer;
int auto_gf_PartyAlone_lp_partyIndex;

void gf_PartyAlone (int lp_trigPlayer, int lp_partyIndex) {
    auto_gf_PartyAlone_lp_trigPlayer = lp_trigPlayer;
    auto_gf_PartyAlone_lp_partyIndex = lp_partyIndex;

    if (auto_gf_PartyAlone_Trigger == null) {
        auto_gf_PartyAlone_Trigger = TriggerCreate("auto_gf_PartyAlone_TriggerFunc");
    }

    TriggerExecute(auto_gf_PartyAlone_Trigger, false, false);
}

bool auto_gf_PartyAlone_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_PartyAlone_lp_trigPlayer;
    int lp_partyIndex = auto_gf_PartyAlone_lp_partyIndex;

    // Variable Declarations
    int lv_trigPlayer;
    int lv_partyindex;
    int lv_timer;
    int lv_timeLimit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeLimit = 120;

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_partyindex = lp_partyIndex;
    while ((lv_timer < lv_timeLimit) && (PlayerGroupCount(gv_generalParties[lv_partyindex][1]) == 1)) {
        lv_timer += 1;
        if ((PlayerGroupCount(gv_generalParties[lv_partyindex][1]) > 1)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    if ((PlayerGroupHasPlayer(gv_generalParties[lv_partyindex][1], lv_trigPlayer) == true) && (lv_timer >= lv_timeLimit) && (PlayerGroupCount(gv_generalParties[lv_partyindex][1]) == 1)) {
        gf_DialogUsedParty(lv_trigPlayer, gv_partyDialogMainButtons[2]);
    }

    return true;
}

void gf_InitVariablesQuestsCreateGuilds () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = 0;
    lv_index += 1;
    gv_guildName[lv_index] = StringExternal("Param/Value/C62460C2");
    gv_guildBuffs[lv_index][1] = "Warrior5";
    gv_guildBuffs[lv_index][2] = "Warrior2";
    gv_guildBuffs[lv_index][3] = "Warrior";
    gv_guildBuffs[lv_index][4] = "Warrior3";
    gv_guildBuffs[lv_index][5] = "Warrior6";
    gv_guildBuffs[lv_index][6] = "Warrior4";
    lv_index += 1;
    gv_guildName[lv_index] = StringExternal("Param/Value/AFCC04B2");
    gv_guildBuffs[lv_index][1] = "Ranger4";
    gv_guildBuffs[lv_index][2] = "Ranger";
    gv_guildBuffs[lv_index][3] = "Ranger6";
    gv_guildBuffs[lv_index][4] = "Ranger2";
    gv_guildBuffs[lv_index][5] = "Ranger5";
    gv_guildBuffs[lv_index][6] = "Ranger3";
    lv_index += 1;
    gv_guildName[lv_index] = StringExternal("Param/Value/FAF8CAC7");
    gv_guildBuffs[lv_index][1] = "Mystic2";
    gv_guildBuffs[lv_index][2] = "Mystic3";
    gv_guildBuffs[lv_index][3] = "Mystic";
    gv_guildBuffs[lv_index][4] = "Mystic4";
    gv_guildBuffs[lv_index][5] = "Mystic5";
    gv_guildBuffs[lv_index][6] = "Mystic6";
    lv_index = 0;
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/56CD1EB0");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/DCA2E96F");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnsnazzyscroll.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/AC984317");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/362E0CF6");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btngem.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/8D1FC664");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/1D65B93E");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnmoonkey.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/43E9825B");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/6478E26D");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnvialempty.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/0C67F51E");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/B42047A1");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnupgraderegenerationaura.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/1EB5ABFB");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/85F21AEE");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnorboffrost.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/26B14F25");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/6669E258");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_bronze.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnorboffire.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/C0AF6238");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/160ECDEE");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnorboflightning.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/D7DFD464");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/73BD72F0");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnorbofvenom.dds";
    gv_questsItemsIndex += 1;
    gv_questsItemsNameTooltip[gv_questsItemsIndex][1] = StringExternal("Param/Value/1FCBA5ED");
    gv_questsItemsNameTooltip[gv_questsItemsIndex][2] = StringExternal("Param/Value/BA7464DD");
    gv_questsItemsIcon[gv_questsItemsIndex][1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_diamond.dds";
    gv_questsItemsIcon[gv_questsItemsIndex][2] = "Assets\\Textures\\war3_btnseal.dds";
    gv_questsQuestText[0][0] = StringExternal("Param/Value/84B58719");
    gv_questsQuestRewardText[0][0] = StringExternal("Param/Value/81557F56");
    gv_questsQuestRewardText[1][0] = StringExternal("Param/Value/5047ED21");
    gv_questsQuestRewardText[1][1] = StringExternal("Param/Value/2405E575");
    gv_questsQuestRewardText[1][2] = StringExternal("Param/Value/9412E824");
    gv_questsQuestRewardText[1][3] = StringExternal("Param/Value/4A9C5F1F");
    gv_questsQuestRewardText[1][4] = StringExternal("Param/Value/DCCFB3E6");
    gv_questsQuestRewardText[2][1] = StringExternal("Param/Value/9C811422");
    gv_questsQuestRewardText[2][2] = StringExternal("Param/Value/DAE287D6");
    gv_questsQuestRewardText[2][3] = StringExternal("Param/Value/0DED73AD");
    gv_questsQuestRewardText[2][4] = StringExternal("Param/Value/1F2507C3");
    gv_questsQuestRewardText[2][5] = StringExternal("Param/Value/0AF24D84");
    gv_questsQuestRewardText[2][6] = StringExternal("Param/Value/2A8B17C4");
    gv_questsQuestRewardText[3][1] = StringExternal("Param/Value/37B87ED7");
    gv_questsQuestRewardText[4][1] = StringExternal("Param/Value/F5C8DA6E");
    gv_questsQuestTypeText[1] = StringExternal("Param/Value/2F68EFEC");
    gv_questsQuestTypeText[2] = StringExternal("Param/Value/CA9C9A7E");
    gv_questsQuestTypeText[3] = StringExternal("Param/Value/B312E06F");
    gv_questsQuestTypeText[4] = StringExternal("Param/Value/4A59D741");
    gv_questsQuestTypeText[5] = StringExternal("Param/Value/202EE229");
    gf_QuestsTalk(UnitFromId(350260925), StringExternal("Param/Value/0DFE4930"), StringExternal("Param/Value/01402E3D"), StringExternal("Param/Value/3053BFB2"));
    gf_QuestsTalk(UnitFromId(438661342), StringExternal("Param/Value/16892E34"), StringExternal("Param/Value/520BA554"), StringExternal("Param/Value/E2835F31"));
    gf_QuestsTalk(UnitFromId(790609453), StringExternal("Param/Value/32BDECEF"), StringExternal("Param/Value/BA9B163C"), StringExternal("Param/Value/2D92EE7C"));
    gf_QuestsTalk(UnitFromId(877735969), StringExternal("Param/Value/7D95693D"), StringExternal("Param/Value/4F001EB4"), StringExternal("Param/Value/24BF240A"));
    gf_QuestsTalk(UnitFromId(1185290986), StringExternal("Param/Value/DBFB409A"), StringExternal("Param/Value/E55F9406"), StringExternal("Param/Value/9A4D538B"));
    gf_QuestsTalk(UnitFromId(1332294256), StringExternal("Param/Value/76CA5C9D"), StringExternal("Param/Value/9D12B822"), StringExternal("Param/Value/455614A4"));
    gf_QuestsTalk(UnitFromId(551911954), StringExternal("Param/Value/B0B0A856"), StringExternal("Param/Value/38080263"), StringExternal("Param/Value/D425BEB5"));
    gf_QuestsTalk(UnitFromId(274840670), StringExternal("Param/Value/7F3B318C"), StringExternal("Param/Value/762F43FD"), StringExternal("Param/Value/73475055"));
    gf_QuestsTalk(UnitFromId(1420236890), StringExternal("Param/Value/A1C8483F"), StringExternal("Param/Value/580172F8"), StringExternal("Param/Value/DE69A312"));
    gf_QuestsTalk(UnitFromId(332520740), StringExternal("Param/Value/841548F9"), StringExternal("Param/Value/D0F7F86E"), StringExternal("Param/Value/2483DE42"));
    gf_QuestsTalk(UnitFromId(1212417713), StringExternal("Param/Value/1454E2AD"), StringExternal("Param/Value/B77724BD"), StringExternal("Param/Value/C12F6D7B"));
    gf_QuestsTalk(UnitFromId(862238213), StringExternal("Param/Value/07E469E4"), StringExternal("Param/Value/0B610549"), StringExternal("Param/Value/20CBFF9C"));
    gf_QuestsTalk(UnitFromId(1828721297), StringExternal("Param/Value/3319D5C2"), StringExternal("Param/Value/0484B666"), StringExternal("Param/Value/CB783379"));
    gf_QuestsTalk(UnitFromId(129926024), StringToText(""), StringToText(""), StringToText(""));
    gf_QuestsTalk(UnitFromId(715543549), StringExternal("Param/Value/1495F781"), StringExternal("Param/Value/71036288"), StringToText(""));
    gf_QuestsTalk(UnitFromId(791971072), StringExternal("Param/Value/1E95752D"), StringExternal("Param/Value/04274941"), StringExternal("Param/Value/6263DF53"));
    gf_QuestsTalk(UnitFromId(1820888318), StringExternal("Param/Value/ACEF80A1"), StringExternal("Param/Value/60CE96DE"), StringExternal("Param/Value/A7D4EEE3"));
    gf_QuestsTalk(UnitFromId(1205136783), StringExternal("Param/Value/969C350F"), StringExternal("Param/Value/736E3B33"), StringExternal("Param/Value/FC6C0818"));
    gf_QuestsTalk(UnitFromId(411642260), StringExternal("Param/Value/77B5CAE5"), StringExternal("Param/Value/8305E27E"), StringExternal("Param/Value/B86A8EFA"));
    gf_QuestsTalk(UnitFromId(1025792419), StringExternal("Param/Value/FBF0D76C"), StringExternal("Param/Value/849B47BF"), StringExternal("Param/Value/71A74D02"));
    gf_QuestsTalk(UnitFromId(1418798365), StringExternal("Param/Value/0D2912B7"), StringExternal("Param/Value/D9847066"), StringExternal("Param/Value/1E46892C"));
    gf_QuestsTalk(UnitFromId(901761178), StringExternal("Param/Value/A34647B4"), StringExternal("Param/Value/B351013B"), StringExternal("Param/Value/AAEE4A6A"));
    gf_QuestsTalk(UnitFromId(179713533), StringExternal("Param/Value/E8CA62B5"), StringExternal("Param/Value/1748E3F7"), StringExternal("Param/Value/92E642DA"));
    gf_QuestsTalk(UnitFromId(547689918), StringExternal("Param/Value/086763E5"), StringExternal("Param/Value/00587876"), StringExternal("Param/Value/B68AAB55"));
    gf_QuestsTalk(UnitFromId(172285639), StringExternal("Param/Value/1EDFE775"), StringExternal("Param/Value/E2A3A588"), StringExternal("Param/Value/4D9324D9"));
    gf_QuestsTalk(UnitFromId(1706311941), StringExternal("Param/Value/46EEABC2"), StringExternal("Param/Value/1CC882F3"), StringExternal("Param/Value/229EAB1D"));
    gf_QuestsTalk(UnitFromId(1520780189), StringExternal("Param/Value/97D6B7E4"), StringExternal("Param/Value/9BAFD9B4"), StringExternal("Param/Value/1AC18298"));
    gf_QuestsTalk(UnitFromId(1682361120), StringExternal("Param/Value/2F9DB656"), StringExternal("Param/Value/18204C31"), StringExternal("Param/Value/F1AB6685"));
    gf_QuestsTalk(UnitFromId(1000088543), StringExternal("Param/Value/A2A94DD7"), StringExternal("Param/Value/21518E20"), StringExternal("Param/Value/AD986F54"));
    gf_QuestsTalk(UnitFromId(1323123791), StringExternal("Param/Value/B20BAB4C"), StringExternal("Param/Value/F693DCEA"), StringExternal("Param/Value/33B73C45"));
    gf_QuestsTalk(UnitFromId(466433349), StringExternal("Param/Value/AEBDD3BC"), StringExternal("Param/Value/C606BE52"), StringExternal("Param/Value/1CC3528A"));
    gf_QuestsTalk(UnitFromId(386148473), StringExternal("Param/Value/868DA729"), StringExternal("Param/Value/3096BA5D"), StringExternal("Param/Value/C668B1D9"));
    gf_QuestsTalk(UnitFromId(886602581), StringExternal("Param/Value/DD13D774"), StringExternal("Param/Value/E25A54A5"), StringExternal("Param/Value/9B8E9197"));
    gf_QuestsTalk(UnitFromId(1416183278), StringExternal("Param/Value/178A0456"), StringExternal("Param/Value/B1E4DC07"), StringExternal("Param/Value/0776A6AF"));
    gf_QuestsTalk(UnitFromId(2018875911), StringExternal("Param/Value/9FF31FCA"), StringExternal("Param/Value/666DC935"), StringExternal("Param/Value/8A2DA1B8"));
    gf_QuestsTalk(UnitFromId(1679891546), StringExternal("Param/Value/CBAE28E9"), StringExternal("Param/Value/225A46F1"), StringExternal("Param/Value/3856BF8B"));
    gf_QuestsTalk(UnitFromId(1800773472), StringExternal("Param/Value/DA14BDC9"), StringExternal("Param/Value/CC3D2E80"), StringExternal("Param/Value/210D668B"));
    gf_QuestsTalk(UnitFromId(1532980905), StringExternal("Param/Value/68F01F86"), StringExternal("Param/Value/FFB8B936"), StringExternal("Param/Value/A0C45708"));
    gf_QuestsTalk(UnitFromId(771969852), StringExternal("Param/Value/D6CD0D63"), StringExternal("Param/Value/F3BCD9D6"), StringExternal("Param/Value/44CD596E"));
    gf_QuestsTalk(UnitFromId(503168786), StringExternal("Param/Value/8AA9C465"), StringExternal("Param/Value/0BFA63CB"), StringExternal("Param/Value/211DEBAC"));
    gf_QuestsTalk(UnitFromId(485450523), StringExternal("Param/Value/D9963F6A"), StringExternal("Param/Value/6CE52CB5"), StringExternal("Param/Value/FA60373A"));
    gf_QuestsCreateQuest(1, 1, StringExternal("Param/Value/48C5ED2F"), StringExternal("Param/Value/E354F829"), 0, 0, 1, 7, 0, "Timberwolf", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 1, 3, 20);
    gf_QuestsCreateQuest(2, 5, StringExternal("Param/Value/8D087B7B"), StringExternal("Param/Value/F6D2D466"), 1, 0, 3, 0, 0, "Pandarenbrewmaster", gv_questsQuestUnitType[0][0], "StackofPies", 1, 2, 1200, 20);
    gf_QuestsCreateQuest(4, 9, StringExternal("Param/Value/33008DCF"), StringExternal("Param/Value/CE4D4B97"), 2, 0, 3, 0, 0, "Thecaptain", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 1, 0, 15);
    gf_QuestsCreateQuest(1, 1, StringExternal("Param/Value/E22BEFBB"), StringExternal("Param/Value/C34C0ED3"), 3, 0, 2, 6, 0, "Grain", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 1100, 30);
    gf_QuestsCreateQuest(5, 5, StringExternal("Param/Value/3467F71E"), StringExternal("Param/Value/BB6E72E0"), 3, 0, 2, 7, 0, "OTspShimmeringPortal", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 3, 3, 40);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/475EE524"), StringExternal("Param/Value/5D400922"), 3, 0, 1, 5, 2, "Skeletonwarrior", "Skeletalarcher", gv_questsQuestBuff[0], 1, 4, 200, 0);
    gf_QuestsCreateQuest(3, 3, StringExternal("Param/Value/70B93719"), StringExternal("Param/Value/29F90783"), 3, 0, 1, 1, 0, "Druidoftheclawmorphed", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 3, 4, 50);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/A66D393D"), StringExternal("Param/Value/521F17FA"), 6, 5, 1, 8, 0, "Mudgolem", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 4, 4, 50);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/4F7FC640"), StringExternal("Param/Value/5B5678D0"), 6, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 2, 30);
    gf_QuestsCreateQuest(11, 12, StringExternal("Param/Value/6403F5CA"), StringExternal("Param/Value/F9ADE1D1"), 3, 0, 3, 0, 0, "OldMarv", "Giantwolf", gv_questsQuestBuff[0], 1, 2, 2000, 30);
    gf_QuestsCreateQuest(1, 1, StringExternal("Param/Value/7CEAC47C"), StringExternal("Param/Value/8EF58FC8"), 7, 4, 1, 8, 1, "Giantwhitewolf", "Spiritwolf1", gv_questsQuestBuff[0], 1, 4, 320, 0);
    gf_QuestsCreateQuest(12, 12, StringExternal("Param/Value/090F9DAC"), StringExternal("Param/Value/046138C3"), 1, 0, 4, 4, 0, "Spiritpig", "Quillbeast1", gv_questsQuestBuff[0], 4, 2, 2, 120);
    gf_QuestsCreateEscort(gv_questsQuestIndex, "Spike", RegionFromId(31), RegionFromId(27), RegionFromId(28), RegionFromId(29), RegionFromId(32), gv_questsEscortRegions[0][0]);
    gf_QuestsCreateQuest(10, 10, StringExternal("Param/Value/01A99806"), StringExternal("Param/Value/00B50A62"), 12, 69, 1, 1, 1, "Owlbear", "Snowyowl", gv_questsQuestBuff[0], 3, 1, 3, 140);
    gf_QuestsCreateQuest(7, 7, StringExternal("Param/Value/13E51AD6"), StringExternal("Param/Value/532CD4F7"), 8, 0, 2, 16, 0, "GoldOre", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 3500, 100);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/50E21B9A"), StringExternal("Param/Value/3F412CE5"), 9, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 5, 4, 100);
    gf_QuestsCreateQuest(4, 4, StringExternal("Param/Value/ED3DC32D"), StringExternal("Param/Value/6009990D"), 15, 0, 1, 1, 0, "Cenarius", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 7, 5, 300);
    gf_QuestsCreateQuest(9, 8, StringExternal("Param/Value/80D6DEF7"), StringExternal("Param/Value/51DD20C9"), 15, 12, 3, 0, 0, "Stormreaverwarlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 3, 0, 50);
    gf_QuestsCreateQuest(5, 10, StringExternal("Param/Value/B31AF3A6"), StringExternal("Param/Value/6369C64A"), 17, 14, 2, 9, 0, "HairBead", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 500, 0);
    gf_QuestsCreateQuest(13, 13, StringExternal("Param/Value/A0BEA9AE"), StringExternal("Param/Value/24D0F3C3"), 15, 0, 2, 4, 0, "ConcentratedAcid", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 3500, 110);
    gf_QuestsCreateQuest(6, 6, StringExternal("Param/Value/67649140"), StringExternal("Param/Value/2C062AF9"), 15, 0, 1, 8, 1, "Darktrollshadowpriest", "Satyrtrickster", gv_questsQuestBuff[0], 2, 6, 5, 120);
    gf_QuestsCreateQuest(14, 2, StringExternal("Param/Value/798778C7"), StringExternal("Param/Value/026ECB09"), 7, 0, 4, 5, 0, "Broodmother", "Dalaranmutant", gv_questsQuestBuff[0], 1, 2, 9000, 170);
    gf_QuestsCreateEscort(gv_questsQuestIndex, "Timmy", RegionFromId(38), RegionFromId(37), RegionFromId(39), RegionFromId(40), RegionFromId(41), RegionFromId(42));
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/420ABA6D"), StringExternal("Param/Value/F3389000"), 16, 0, 1, 14, 8, "Darktrolltrapper", "Headhunter", gv_questsQuestBuff[0], 3, 1, 2, 320);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/5539639C"), StringExternal("Param/Value/CE2902D7"), 20, 0, 1, 2, 0, "Overlordarachnathid", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 6, 5, 130);
    gf_QuestsCreateQuest(15, 2, StringExternal("Param/Value/9FA819F7"), StringExternal("Param/Value/4BAF27C6"), 2, 0, 3, 0, 0, "Villagerwoman", "Harpyrogue", gv_questsQuestBuff[0], 1, 1, 1500, 90);
    gf_QuestsCreateQuest(20, 8, StringExternal("Param/Value/649A95F6"), StringExternal("Param/Value/A56551A6"), 6, 0, 2, 5, 0, "SalivaSample", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 2000, 90);
    gf_QuestsCreateQuest(9, 19, StringExternal("Param/Value/0D17B314"), StringExternal("Param/Value/B9329208"), 20, 17, 3, 0, 0, "Sign", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 300, 0);
    gf_QuestsCreateQuest(19, 19, StringExternal("Param/Value/80CCD5D3"), StringExternal("Param/Value/63D9527A"), 26, 0, 1, 8, 0, "Wisp", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 2, 5000, 130);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/EB671C51"), StringExternal("Param/Value/E9AC62D6"), 25, 27, 1, 7, 5, "Salamanderhatchling", "Draeneisalamander", gv_questsQuestBuff[0], 2, 9, 4, 130);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/6654EF33"), StringExternal("Param/Value/F8CC4243"), 28, 54, 1, 1, 0, "Thunderlizard", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 200, 220);
    gf_QuestsCreateQuest(4, 4, StringExternal("Param/Value/7A618364"), StringExternal("Param/Value/47E697F1"), 16, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 200, 0);
    gf_QuestsCreateQuest(4, 24, StringExternal("Param/Value/9FD48BD8"), StringExternal("Param/Value/FFAFABF5"), 30, 0, 3, 0, 0, "WarriorsSteward", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 50, 0);
    gf_QuestsCreateQuest(4, 25, StringExternal("Param/Value/0622C2F9"), StringExternal("Param/Value/DD560087"), 30, 0, 3, 0, 0, "RangersSteward", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 50, 0);
    gf_QuestsCreateQuest(4, 26, StringExternal("Param/Value/5F104EB1"), StringExternal("Param/Value/0FD674AA"), 30, 0, 3, 0, 0, "MysticSteward", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 50, 0);
    gf_QuestsCreateQuest(1, 1, StringExternal("Param/Value/38093B48"), StringExternal("Param/Value/588DAB66"), 18, 11, 1, 8, 8, "Murgulsnarecaster", "Murloctiderunner", gv_questsQuestBuff[0], 1, 2, 12000, 230);
    gf_QuestsCreateQuest(1, 9, StringExternal("Param/Value/EF3A7F6E"), StringExternal("Param/Value/692F701A"), 34, 0, 3, 0, 0, "Thecaptain", "Murgulslave", gv_questsQuestBuff[0], 1, 3, 100, 150);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/90B5B4E7"), StringExternal("Param/Value/11BF1F16"), 35, 0, 2, 13, 0, "WaterSample", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 9, 5, 150);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/DB357571"), StringExternal("Param/Value/AE6B087A"), 36, 22, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 3, 350);
    gf_QuestsCreateQuest(9, 8, StringExternal("Param/Value/A6F75245"), StringExternal("Param/Value/468DB45D"), 37, 0, 3, 0, 0, "Stormreaverwarlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 6, 0, 130);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/C71E1014"), StringExternal("Param/Value/9423849A"), 23, 0, 1, 1, 0, "Goblinshredder", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 6000, 180);
    gf_QuestsCreateQuest(18, 18, StringExternal("Param/Value/24C0F309"), StringExternal("Param/Value/D910D6A8"), 21, 0, 4, 5, 0, "Riderlesswyvern", "Salamanderhatchling", gv_questsQuestBuff[0], 1, 4, 700, 0);
    gf_QuestsCreateEscort(gv_questsQuestIndex, "Winkie2", RegionFromId(93), RegionFromId(95), RegionFromId(96), RegionFromId(97), RegionFromId(98), RegionFromId(94));
    gf_QuestsCreateQuest(5, 5, StringExternal("Param/Value/603250B4"), StringExternal("Param/Value/4D21FA70"), 23, 0, 2, 6, 0, "MurlocTrash", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 8, 5, 170);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/E552C874"), StringExternal("Param/Value/5893A6D7"), 41, 0, 2, 8, 0, "CactusFlower", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 3500, 180);
    gf_QuestsCreateQuest(5, 5, StringExternal("Param/Value/94396B79"), StringExternal("Param/Value/51525E65"), 42, 0, 1, 5, 4, "Furbolg", "Polarfurbolg", gv_questsQuestBuff[0], 2, 9, 4, 300);
    gf_QuestsCreateQuest(9, 16, StringExternal("Param/Value/7F28D3EA"), StringExternal("Param/Value/E048FAA1"), 38, 0, 3, 0, 0, "CaptainZeke", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 2, 15000, 250);
    gf_QuestsCreateQuest(16, 16, StringExternal("Param/Value/F73BA68C"), StringExternal("Param/Value/4BD70A1D"), 44, 0, 1, 14, 7, "Ogremagi", "Stonemaulogre", gv_questsQuestBuff[0], 3, 1, 2, 250);
    gf_QuestsCreateQuest(16, 16, StringExternal("Param/Value/FC8E64B3"), StringExternal("Param/Value/7BC4DE81"), 45, 0, 1, 1, 1, "Stonemaulwarchief", "Ogrelord", gv_questsQuestBuff[0], 1, 3, 200, 350);
    gf_QuestsCreateQuest(16, 9, StringExternal("Param/Value/3B210B95"), StringExternal("Param/Value/0F92F0D9"), 46, 0, 3, 0, 0, "Thecaptain", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 500, 0);
    gf_QuestsCreateQuest(21, 23, StringExternal("Param/Value/A6EBCBD9"), StringExternal("Param/Value/FB7993AA"), 26, 0, 3, 0, 0, "Mikku", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 350, 0);
    gf_QuestsCreateQuest(23, 22, StringExternal("Param/Value/DFA9AC0D"), StringExternal("Param/Value/ECE9DF1F"), 48, 0, 3, 0, 0, "Drakk", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 350, 0);
    gf_QuestsCreateQuest(22, 21, StringExternal("Param/Value/3D3C9315"), StringExternal("Param/Value/B9FD1DCA"), 49, 0, 3, 0, 0, "Rikkit", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 350, 0);
    gf_QuestsCreateQuest(21, 21, StringExternal("Param/Value/12F5330D"), StringExternal("Param/Value/F3ECD62E"), 50, 0, 1, 1, 0, "Furbolgpanda", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 11, 6, 400);
    gf_QuestsCreateQuest(27, 27, StringExternal("Param/Value/1E8C8BFE"), StringExternal("Param/Value/0CDE3D0B"), 44, 0, 1, 1, 0, "Junglestalker", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 15000, 300);
    gf_QuestsCreateQuest(7, 7, StringExternal("Param/Value/92D7281A"), StringExternal("Param/Value/D80A1881"), 23, 0, 1, 1, 0, "Chimaera", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 12000, 260);
    gf_QuestsCreateQuest(5, 5, StringExternal("Param/Value/B2178A07"), StringExternal("Param/Value/AA0485B0"), 53, 0, 1, 1, 0, "Nagacoutl", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 9, 5, 280);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/6EFE7C12"), StringExternal("Param/Value/52A784C1"), 31, 0, 5, 14000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 100, 150);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/1454BBCD"), StringExternal("Param/Value/55A15288"), 32, 0, 5, 22000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 100, 150);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/904CF138"), StringExternal("Param/Value/F8BF7B7F"), 33, 0, 5, 15000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 100, 150);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/414E205D"), StringExternal("Param/Value/8D942C3B"), 55, 0, 5, 30000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 150, 250);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/DC088AB3"), StringExternal("Param/Value/D5399ABD"), 56, 0, 5, 100000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 150, 250);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/D9513468"), StringExternal("Param/Value/5A0E8C38"), 57, 0, 5, 25000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 150, 250);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/6086B497"), StringExternal("Param/Value/AC9543CD"), 58, 38, 5, 40000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 200, 400);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/5150A472"), StringExternal("Param/Value/09935305"), 59, 38, 5, 200000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 200, 400);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/C2961EAC"), StringExternal("Param/Value/DE19D886"), 60, 38, 5, 100, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 200, 400);
    gf_QuestsCreateQuest(2, 6, StringExternal("Param/Value/F0B63712"), StringExternal("Param/Value/F5A07486"), 40, 0, 3, 0, 0, "Peon", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 3000, 200);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/598930A9"), StringExternal("Param/Value/57E590BC"), 3, 0, 2, 1, 0, "EmptyVial2", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 4, 0, 50);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/B72C23B6"), StringExternal("Param/Value/0457D0CE"), 65, 16, 2, 1, 0, "EnchantedStone", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 400, 0);
    gf_QuestsCreateQuest(8, 1, StringExternal("Param/Value/E00238CB"), StringExternal("Param/Value/6897F683"), 66, 0, 3, 0, 0, "Villagerman", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 70, 170);
    gf_QuestsCreateQuest(1, 8, StringExternal("Param/Value/56F5203C"), StringExternal("Param/Value/15F9225A"), 67, 0, 2, 1, 0, "OrmisMiningPick", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 100, 220);
    gf_QuestsCreateQuest(10, 10, StringExternal("Param/Value/8D309B24"), StringExternal("Param/Value/5D35497D"), 7, 0, 1, 6, 0, "Grizzlybear1", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 3, 3, 90);
    gf_QuestsCreateQuest(10, 10, StringExternal("Param/Value/7BB9306F"), StringExternal("Param/Value/E595C957"), 69, 36, 1, 8, 0, "Kotobeastnorider", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 150, 160);
    gf_QuestsCreateQuest(10, 20, StringExternal("Param/Value/49CC9B5B"), StringExternal("Param/Value/6C45BFB6"), 70, 0, 3, 0, 0, "BeastMaster", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 150, 180);
    gf_QuestsCreateQuest(6, 6, StringExternal("Param/Value/990CFAAA"), StringExternal("Param/Value/1FFAEE69"), 71, 0, 2, 13, 0, "PowerCore2", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 12, 4, 230);
    gf_QuestsCreateQuest(6, 10, StringExternal("Param/Value/11D393B8"), StringExternal("Param/Value/529CC10B"), 72, 0, 3, 0, 0, "Highelvenfemale", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 1, 230);
    gf_QuestsCreateQuest(17, 17, StringExternal("Param/Value/829BAD19"), StringExternal("Param/Value/6F1EFD12"), 44, 0, 5, 18, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 12, 5, 250);
    gf_QuestsCreateQuest(17, 17, StringExternal("Param/Value/BC2A5CB5"), StringExternal("Param/Value/C104F85D"), 74, 0, 5, 12, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 13, 6, 325);
    gf_QuestsCreateQuest(17, 17, StringExternal("Param/Value/D95327A1"), StringExternal("Param/Value/43DE2FB1"), 75, 0, 5, 4, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 14, 6, 400);
    gf_QuestsCreateQuest(16, 28, StringExternal("Param/Value/4814E259"), StringExternal("Param/Value/F05F225D"), 47, 64, 3, 0, 0, "Timmy2", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 600, 0);
    gf_QuestsCreateQuest(28, 16, StringExternal("Param/Value/A061090B"), StringExternal("Param/Value/3DAC922A"), 77, 0, 4, 5, 0, "Ogremagi", "Stonemaulogre", gv_questsQuestBuff[0], 1, 3, 800, 0);
    gf_QuestsCreateEscort(gv_questsQuestIndex, "Timmy2", RegionFromId(149), RegionFromId(150), RegionFromId(151), RegionFromId(152), RegionFromId(153), RegionFromId(154));
    gf_QuestsCreateQuest(2, 3, StringExternal("Param/Value/9E0B0296"), StringExternal("Param/Value/B230E9C0"), 78, 0, 1, 5, 8, "Whitedirewolf", "Poisonent", gv_questsQuestBuff[0], 1, 2, 22000, 450);
    gf_QuestsCreateQuest(29, 1, StringExternal("Param/Value/961A57CC"), StringExternal("Param/Value/E3BDA47D"), 79, 0, 3, 0, 0, "Villagerman", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 10000, 400);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/3A51059E"), StringExternal("Param/Value/2752F6FE"), 73, 29, 1, 1, 0, "Elderhydra", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 350, 500);
    gf_QuestsCreateQuest(1, 1, StringExternal("Param/Value/33ADB8B3"), StringExternal("Param/Value/6019D964"), 80, 0, 1, 1, 0, "Cluckers", gv_questsQuestUnitType[0][0], "Heroic2", 1, 4, 750, 0);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/8C43A855"), StringExternal("Param/Value/161EBC0C"), 81, 82, 2, 10, 0, "GiantSeed2", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 300, 500);
    gf_QuestsCreateQuest(5, 21, StringExternal("Param/Value/75852653"), StringExternal("Param/Value/07DBAFD7"), 54, 51, 3, 0, 0, "Rikkit", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 300, 0);
    gf_QuestsCreateQuest(21, 21, StringExternal("Param/Value/606B8430"), StringExternal("Param/Value/9FB3C153"), 84, 0, 1, 1, 0, "Frostwyrm", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 400, 400);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/10213382"), StringExternal("Param/Value/2D780173"), 38, 0, 1, 10, 32, "Skeletalorc", "Skeletalmage", gv_questsQuestBuff[0], 1, 2, 18000, 300);
    gf_QuestsCreateQuest(8, 30, StringExternal("Param/Value/44303F3A"), StringExternal("Param/Value/8184ADC1"), 86, 0, 3, 0, 0, "HermitKraag", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 450, 0);
    gf_QuestsCreateQuest(9, 9, StringExternal("Param/Value/AAFACAAA"), StringExternal("Param/Value/D93706E1"), 87, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 12, 5, 450);
    gf_QuestsCreateQuest(9, 8, StringExternal("Param/Value/0FFC3B3D"), StringExternal("Param/Value/534C5D3B"), 88, 0, 3, 0, 0, "Stormreaverwarlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 7, 0, 200);
    gf_QuestsCreateQuest(9, 8, StringExternal("Param/Value/E66EFE5E"), StringExternal("Param/Value/A99A5AA6"), 89, 0, 1, 1, 0, "Bloodelfwagon", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 4, 8, 0, 700);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/94B4D943"), StringExternal("Param/Value/BC0EF271"), 90, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 700, 0);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/C816CC8E"), StringExternal("Param/Value/F3E5360D"), 91, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 400, 450);
    gf_QuestsCreateQuest(9, 8, StringExternal("Param/Value/9977BF89"), StringExternal("Param/Value/FED30E2E"), 92, 0, 3, 0, 0, "Stormreaverwarlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 200, 350);
    gf_QuestsCreateQuest(4, 4, StringExternal("Param/Value/212EF371"), StringExternal("Param/Value/C1E5E85D"), 92, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 300, 0);
    gf_QuestsCreateQuest(4, 31, StringExternal("Param/Value/D14F810B"), StringExternal("Param/Value/02F7AE24"), 94, 0, 3, 0, 0, "DarkPedestal", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 100, 0);
    gf_QuestsCreateQuest(31, 31, StringExternal("Param/Value/4AE6EB94"), StringExternal("Param/Value/FEEF456F"), 95, 0, 5, 2, 1, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 1500, 0);
    gf_QuestsCreateQuest(1, 32, StringExternal("Param/Value/0C585C9E"), StringExternal("Param/Value/BAC3BB7C"), 94, 79, 3, 0, 0, "Timmy3", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 400, 0);
    gf_QuestsCreateQuest(32, 33, StringExternal("Param/Value/C31C0E3A"), StringExternal("Param/Value/ABC90B8E"), 97, 0, 4, 4, 0, "Tentacle", "Giantskeleton", gv_questsQuestBuff[0], 3, 1, 4, 500);
    gf_QuestsCreateEscort(gv_questsQuestIndex, "Timmy3", RegionFromId(158), RegionFromId(159), RegionFromId(160), RegionFromId(161), RegionFromId(162), gv_questsEscortRegions[0][0]);
    gf_QuestsCreateQuest(34, 34, StringExternal("Param/Value/D93D931F"), StringExternal("Param/Value/371B9710"), 95, 0, 2, 14, 0, "Soul2", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 14, 6, 500);
    gf_QuestsCreateQuest(4, 35, StringExternal("Param/Value/EE821AEB"), StringExternal("Param/Value/BFBEEDA5"), 96, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 5, 10, 0, 700);
    gf_QuestsCreateQuest(6, 6, StringExternal("Param/Value/C3B86820"), StringExternal("Param/Value/570138D1"), 43, 47, 2, 12, 0, "VolcanicRock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 12, 4, 240);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/77325A71"), StringExternal("Param/Value/8795BCCD"), 101, 0, 1, 8, 0, "Bronzedragon", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 15000, 300);
    gf_QuestsCreateQuest(16, 16, StringExternal("Param/Value/40DD2006"), StringExternal("Param/Value/B61DED8D"), 47, 0, 1, 7, 1, "Diremammoth", "Magnataurreaver", gv_questsQuestBuff[0], 1, 3, 250, 320);
    gf_QuestsCreateQuest(16, 16, StringExternal("Param/Value/3F7F4EDF"), StringExternal("Param/Value/36CED295"), 103, 0, 2, 8, 0, "IceBlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 650, 0);
    gf_QuestsCreateQuest(16, 16, StringExternal("Param/Value/880BC260"), StringExternal("Param/Value/EDC88401"), 104, 86, 1, 60, 60, "Skeletonwarrior", "Skeletalarcher", gv_questsQuestBuff[0], 3, 1, 2, 320);
    gf_QuestsCreateQuest(27, 27, StringExternal("Param/Value/A0B0891E"), StringExternal("Param/Value/8181EC8F"), 52, 54, 1, 1, 0, "Netherdrake", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 22000, 330);
    gf_QuestsCreateQuest(4, 4, StringExternal("Param/Value/A6868382"), StringExternal("Param/Value/481130D8"), 47, 0, 1, 5, 5, "Tuskarrfighter", "Tuskarrspearman", gv_questsQuestBuff[0], 1, 3, 250, 290);
    gf_QuestsCreateQuest(4, 4, StringExternal("Param/Value/892E6E31"), StringExternal("Param/Value/85038205"), 107, 0, 1, 7, 5, "Nagamyrmidon", "Summoner", gv_questsQuestBuff[0], 1, 4, 700, 0);
    gf_QuestsCreateQuest(36, 36, StringExternal("Param/Value/4591312D"), StringExternal("Param/Value/7C7646BD"), 47, 0, 2, 3, 5, "Stick", "PureSnow", gv_questsQuestBuff[0], 0, 0, 0, 240);
    gf_QuestsCreateQuest(36, 36, StringExternal("Param/Value/8E357620"), StringExternal("Param/Value/FAB1DB79"), 109, 0, 2, 4, 0, "SmoothStone", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 0, 0, 0, 240);
    gf_QuestsCreateQuest(20, 20, StringExternal("Param/Value/FB6CAF9A"), StringExternal("Param/Value/4C0355F6"), 43, 46, 1, 1, 0, "Dragonbuilding", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 2, 10, 5, 320);
    gf_QuestsCreateQuest(7, 7, StringExternal("Param/Value/35608708"), StringExternal("Param/Value/2EBEA74B"), 111, 0, 1, 1, 0, "Mountaingiant", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 1, 24000, 320);
    gf_QuestsCreateQuest(1, 2, StringExternal("Param/Value/E2CDBE1E"), StringExternal("Param/Value/CD6FCBED"), 79, 0, 2, 10, 0, "ShinyDust", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 1, 300);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/251C122F"), StringExternal("Param/Value/78B23B87"), 112, 0, 1, 10, 0, "Corruptedmoonwell", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 400, 600);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/BC22199E"), StringExternal("Param/Value/FA4D7FB3"), 61, 88, 5, 3, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 350, 550);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/0B966E61"), StringExternal("Param/Value/4185BA50"), 62, 88, 5, 400000, 30000, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 350, 550);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/7A914026"), StringExternal("Param/Value/090A1C76"), 63, 88, 5, 100000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 350, 550);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/25379E36"), StringExternal("Param/Value/1641833F"), 115, 0, 5, 50000, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 450, 750);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/2AA43EAD"), StringExternal("Param/Value/D4E3A1A5"), 116, 0, 5, 20, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 450, 750);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/503C7B79"), StringExternal("Param/Value/DF36A240"), 117, 0, 5, 2, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 450, 750);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/12187A17"), StringExternal("Param/Value/6E9B1386"), 118, 125, 5, 1, 1, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 750, 0);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/16D1BC1A"), StringExternal("Param/Value/25173CF6"), 119, 125, 5, 1, 1, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 750, 0);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/1AA19A85"), StringExternal("Param/Value/5EF5DEAF"), 120, 125, 5, 1250000, 1, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 750, 0);
    gf_QuestsCreateQuest(35, 33, StringExternal("Param/Value/548B17A1"), StringExternal("Param/Value/678F6AF8"), 100, 0, 3, 1, 0, "Timmy5", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 300, 0);
    gf_QuestsCreateQuest(33, 33, StringExternal("Param/Value/33AAC86E"), StringExternal("Param/Value/7FDA126E"), 124, 0, 1, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 5, 0);
    gf_QuestsCreateQuest(39, 39, StringExternal("Param/Value/026FE16C"), StringExternal("Param/Value/3765EF37"), 124, 0, 5, 8, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(39, 39, StringExternal("Param/Value/0B70AB7A"), StringExternal("Param/Value/14769A6F"), 126, 0, 5, 6, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(39, 39, StringExternal("Param/Value/42D59CA9"), StringExternal("Param/Value/68FD9550"), 127, 0, 5, 6, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/82024CAB"), StringExternal("Param/Value/27ADA0DA"), 124, 0, 5, 30, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(39, 39, StringExternal("Param/Value/F031D79E"), StringExternal("Param/Value/A615B182"), 129, 0, 1, 1, 0, "Mountaingiant", gv_questsQuestUnitType[0][0], "Heroic2", 1, 0, 0, 0);
    gf_QuestsCreateQuest(37, 37, StringExternal("Param/Value/D18F0830"), StringExternal("Param/Value/854640AE"), 135, 0, 1, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 1500, 0);
    gf_QuestsCreateQuest(41, 22, StringExternal("Param/Value/EDA1A3C9"), StringExternal("Param/Value/EB9A7819"), 130, 0, 1, 1, 1, "Goblinshredder", "Furbolgpanda", "Heroic2", 1, 3, 500, 0);
    gf_QuestsCreateQuest(41, 8, StringExternal("Param/Value/CF0D70E8"), StringExternal("Param/Value/80DA5152"), 132, 0, 3, 0, 0, "Stormreaverwarlock", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(8, 8, StringExternal("Param/Value/02492EC6"), StringExternal("Param/Value/222A4C7A"), 129, 0, 1, 1, 0, "Snowyowl", gv_questsQuestUnitType[0][0], "Heroic2", 1, 0, 0, 0);
    gf_QuestsCreateQuest(37, 37, StringExternal("Param/Value/8F011BD0"), StringExternal("Param/Value/9596954D"), 124, 0, 1, 5, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 3, 900, 0);
    gf_QuestsCreateQuest(25, 25, StringExternal("Param/Value/014CB0B7"), StringExternal("Param/Value/0B415CBA"), 54, 0, 1, 10, 1, "Riderlesswyvern", "Spiritwyvern", gv_questsQuestBuff[0], 1, 4, 750, 0);
    gf_QuestsCreateQuest(24, 24, StringExternal("Param/Value/E988A5B5"), StringExternal("Param/Value/F4837DD0"), 35, 0, 1, 7, 3, "Seaturtlehatchling", "Dragonturtle", gv_questsQuestBuff[0], 1, 4, 700, 0);
    gf_QuestsCreateQuest(26, 26, StringExternal("Param/Value/071CED55"), StringExternal("Param/Value/DD55AED7"), 27, 0, 1, 8, 0, "Faeriedragon", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 4, 650, 0);
    gf_QuestsCreateQuest(37, 37, StringExternal("Param/Value/2A64A30B"), StringExternal("Param/Value/D6D75F3A"), 124, 0, 1, 1, 1, "Enragedowlbear", "Bluedragonspawnoverseer", gv_questsQuestBuff[0], 2, 16, 6, 0);
    gf_QuestsCreateQuest(37, 37, StringExternal("Param/Value/D180D0D3"), StringExternal("Param/Value/A4E5E67E"), 140, 0, 1, 1, 1, "Enragedowlbear", "Bluedragonspawnoverseer", gv_questsQuestBuff[0], 2, 16, 6, 0);
    gf_QuestsCreateQuest(41, 39, StringExternal("Param/Value/FB8BD247"), StringExternal("Param/Value/8F722E4F"), 124, 0, 3, 1, 0, "Molly", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 3, 1, 10, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/F6DE6C1E"), StringExternal("Param/Value/C07AF4A7"), 141, 0, 1, 1, 1, "Cenarius", "Witchdoctor", "Heroic2", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/9D8C462F"), StringExternal("Param/Value/DF91C688"), 142, 0, 1, 1, 1, "Hydrahatchling", "Furbolgpanda", "Heroic2", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/7543F7A9"), StringExternal("Param/Value/FC0383DD"), 143, 0, 1, 1, 1, "Firelord", "Lightningrevenant", "Heroic2", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/EB1A4CFC"), StringExternal("Param/Value/57BF054B"), 144, 0, 1, 1, 1, "AncientofwondersUprooted", "Doomguard", "Heroic2", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/FD352C17"), StringExternal("Param/Value/A73A471E"), 145, 0, 1, 1, 1, "Eredardiabolist", "Tichondrius", "Heroic2", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/660C5DA3"), StringExternal("Param/Value/6D9F5B1B"), 146, 0, 1, 1, 1, "Centaurkhan", "Trollbatrider", "LegendaryMod", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/F5CABC3C"), StringExternal("Param/Value/4C28169A"), 147, 0, 1, 1, 1, "Reefelemental", "Razormanemedicineman", "LegendaryMod", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/950E6230"), StringExternal("Param/Value/86D7660E"), 148, 0, 1, 1, 1, "Eldervoidwalker", "Bloodelfwagon", "LegendaryMod", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/D8EAE83F"), StringExternal("Param/Value/1DFE8E63"), 149, 0, 1, 1, 1, "CorruptedancientofwarUprooted", "Doomguard", "LegendaryMod", 3, 1, 2, 0);
    gf_QuestsCreateQuest(41, 41, StringExternal("Param/Value/7DF77F7A"), StringExternal("Param/Value/3D5BB1B9"), 150, 0, 1, 1, 1, "Cryptlord", "Infernal", "LegendaryMod", 3, 1, 2, 0);
    gf_QuestsCreateQuest(10, 10, StringExternal("Param/Value/D5A04132"), StringExternal("Param/Value/CE0A3009"), 146, 0, 3, 1, 0, "Highelvenfemale", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(10, 10, StringExternal("Param/Value/DBDB31EA"), StringExternal("Param/Value/0BF5F73E"), 151, 152, 3, 1, 0, "Highelvenfemale", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(39, 10, StringExternal("Param/Value/8CF1C7D6"), StringExternal("Param/Value/5B5398C6"), 155, 0, 3, 1, 0, "Highelvenfemale", gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
    gf_QuestsCreateQuest(10, 39, StringExternal("Param/Value/720FC8B7"), StringExternal("Param/Value/10ED96E6"), 153, 0, 5, 1, 0, gv_questsQuestUnitType[0][0], gv_questsQuestUnitType[0][0], gv_questsQuestBuff[0], 1, 0, 0, 0);
}

void gf_DialogCreateConvoQuestsLogGuild () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int lv_tempInt;
    text[9] lv_tempText;
    text[9] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;

    // Automatic Variable Declarations
    const int auto064E9402_ae = 15;
    const int auto064E9402_ai = 1;
    const int autoDDF738D3_ae = 3;
    const int autoDDF738D3_ai = 1;
    const int auto73D58F94_ae = 8;
    const int auto73D58F94_ai = 1;
    const int auto14812FC0_ae = 15;
    const int auto14812FC0_ai = 1;
    const int autoC07EBEF8_ae = 2;
    const int autoC07EBEF8_ai = 1;
    const int autoB0FC7468_ae = 5;
    const int autoB0FC7468_ai = 1;
    const int autoDECE7BDE_ae = 1;
    const int autoDECE7BDE_ai = 1;
    const int autoD8237AA1_ae = 15;
    const int autoD8237AA1_ai = 1;
    const int autoE4061545_ae = 3;
    const int autoE4061545_ai = 1;
    const int auto0D268816_ae = 3;
    const int auto0D268816_ai = 1;
    const int auto99027AB3_ae = 15;
    const int auto99027AB3_ai = 1;
    const int auto800F21CB_ae = 2;
    const int auto800F21CB_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(700, 650, c_anchorLeft, 25, -175, true);
    gv_questsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 90;
    lv_yPos = 50;
    lv_xSize = 550;
    lv_ySize = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto064E9402_ai >= 0 && lv_index <= auto064E9402_ae) || (auto064E9402_ai < 0 && lv_index >= auto064E9402_ae) ) ; lv_index += auto064E9402_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 450)), ((lv_yPos + 15) + RandomInt(1, 500)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 195), (lv_yPos + 25), StringExternal("Param/Value/EAD12063"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 390, 400, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos + 75), StringExternal("Param/Value/B023720B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 60, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 475), StringExternal("Param/Value/81454729"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsDialogQuestButton[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 90, c_anchorTopLeft, (lv_xPos + 140), (lv_yPos + 460), StringExternal("Param/Value/C6083D21"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsDialogQuestButton[7] = DialogControlLastCreated();
    lv_tempText[1] = StringExternal("Param/Value/2435F9D1");
    lv_tempText[2] = StringExternal("Param/Value/349FBD83");
    lv_tempText[3] = StringExternal("Param/Value/B1663E74");
    lv_tempText[4] = StringExternal("Param/Value/3009E46C");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_xSize = 190;
    lv_ySize = 65;
    lv_xPos = 15;
    lv_yPos = 280;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 60), (lv_ySize + 40), c_anchorTopLeft, (lv_xPos - 30), (lv_yPos + 65), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 0.00), c_triggerBlendModeNormal);
    gv_questsDialogQuestButton[8] = DialogControlLastCreated();
    lv_index2 = 1;
    for ( ; ( (autoDDF738D3_ai >= 0 && lv_index2 <= autoDDF738D3_ae) || (autoDDF738D3_ai < 0 && lv_index2 >= autoDDF738D3_ae) ) ; lv_index2 += autoDDF738D3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_questsDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 55), (lv_yPos + 19), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yPos += 90;
    }
    lv_yPos -= 20;
    lv_xPos += 398;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_questsDialogQuestButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[4], c_triggerBlendModeNormal);
    gv_questsDialogQuestButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_questsDialogQuestButton[3] = DialogControlLastCreated();
    gv_questsDialogButtons[4] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_questsDialogQuestButton[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 19), lv_tempText[4], ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsDialogQuestButton[5] = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto73D58F94_ai >= 0 && lv_index <= auto73D58F94_ae) || (auto73D58F94_ai < 0 && lv_index >= auto73D58F94_ae) ) ; lv_index += auto73D58F94_ai ) {
        DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupAll(), false);
    }
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnmilitia.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_questsDialogItems[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogCreate(800, 750, c_anchorCenter, -200, -150, true);
    gv_questsLogDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 650;
    lv_ySize = 675;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto14812FC0_ai >= 0 && lv_index <= auto14812FC0_ae) || (auto14812FC0_ai < 0 && lv_index >= auto14812FC0_ae) ) ; lv_index += auto14812FC0_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 550)), ((lv_yPos + 15) + RandomInt(1, 440)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 250), (lv_yPos + 25), StringExternal("Param/Value/639EF9C9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 410, 400, c_anchorTopLeft, (lv_xPos + 120), (lv_yPos + 85), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsLogDialogItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 500), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsLogDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 550), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_questsLogDialogItems[2] = DialogControlLastCreated();
    lv_xPos = 20;
    lv_xSize = 110;
    lv_ySize = 110;
    lv_index = 1;
    for ( ; ( (autoC07EBEF8_ai >= 0 && lv_index <= autoC07EBEF8_ae) || (autoC07EBEF8_ai < 0 && lv_index >= autoC07EBEF8_ae) ) ; lv_index += autoC07EBEF8_ai ) {
        lv_yPos = 30;
        lv_index2 = 1;
        for ( ; ( (autoB0FC7468_ai >= 0 && lv_index2 <= autoB0FC7468_ae) || (autoB0FC7468_ai < 0 && lv_index2 >= autoB0FC7468_ae) ) ; lv_index2 += autoB0FC7468_ai ) {
            lv_tempInt += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 4), (lv_ySize - 4), c_anchorTopLeft, (lv_xPos + 2), (lv_yPos + 2), StringToText(""), "Assets\\Textures\\background_terran_0000_01.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_questsLogDialogButtons[lv_tempInt][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_questsLogDialogButtons[lv_tempInt][1] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), (lv_ySize + 40), c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 20), StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            lv_yPos += 150;
        }
        lv_xPos += 600;
    }
    lv_tempText[1] = StringExternal("Param/Value/0020AEFD");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_xSize = 190;
    lv_ySize = 65;
    lv_xPos = 285;
    lv_yPos = 665;
    lv_index2 = 1;
    for ( ; ( (autoDECE7BDE_ai >= 0 && lv_index2 <= autoDECE7BDE_ae) || (autoDECE7BDE_ai < 0 && lv_index2 >= autoDECE7BDE_ae) ) ; lv_index2 += autoDECE7BDE_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_questsLogDialogButtons[0][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 55), (lv_yPos + 19), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    DialogCreate(950, 600, c_anchorCenter, -200, -150, true);
    gv_guildDialogDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 850;
    lv_ySize = 490;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoD8237AA1_ai >= 0 && lv_index <= autoD8237AA1_ae) || (autoD8237AA1_ai < 0 && lv_index >= autoD8237AA1_ae) ) ; lv_index += autoD8237AA1_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 50) + RandomInt(1, 740)), ((lv_yPos + 50) + RandomInt(1, 440)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 375), (lv_yPos + 25), StringExternal("Param/Value/812BAEA3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_tempText[1] = StringExternal("Param/Value/A346501D");
    lv_tempText[2] = StringExternal("Param/Value/367E4836");
    lv_tempText[3] = StringExternal("Param/Value/7AD60861");
    lv_xPos = 90;
    lv_index2 = 1;
    for ( ; ( (autoE4061545_ai >= 0 && lv_index2 <= autoE4061545_ae) || (autoE4061545_ai < 0 && lv_index2 >= autoE4061545_ae) ) ; lv_index2 += autoE4061545_ai ) {
        lv_yPos = 135;
        lv_xSize = 250;
        lv_ySize = 340;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 215, 350, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 25), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 270), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 65, 65, c_anchorTopLeft, (lv_xPos + 90), (lv_yPos + 260), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 120, 120, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 230), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_guildDialogDialogItems[lv_index2][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_guildDialogDialogItems[lv_index2][3] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_xPos += 260;
    }
    lv_tempText[1] = StringExternal("Param/Value/DDB09ED0");
    lv_tempColor[1] = Color(75.29, 75.29, 75.29);
    lv_tempText[2] = StringExternal("Param/Value/1E5A7BCD");
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempText[3] = StringExternal("Param/Value/E241DC2A");
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_xSize = 200;
    lv_ySize = 65;
    lv_xPos = 125;
    lv_yPos = 480;
    lv_index2 = 1;
    for ( ; ( (auto0D268816_ai >= 0 && lv_index2 <= auto0D268816_ae) || (auto0D268816_ai < 0 && lv_index2 >= auto0D268816_ae) ) ; lv_index2 += auto0D268816_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_guildDialogDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 20), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 250;
    }
    DialogCreate(2400, 1600, c_anchorCenter, -50, -50, true);
    gv_guildConfirmDialogDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ulaan_dirt_crackednormal.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_xPos = 1000;
    lv_yPos = 700;
    lv_xSize = 400;
    lv_ySize = 325;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto99027AB3_ai >= 0 && lv_index <= auto99027AB3_ae) || (auto99027AB3_ai < 0 && lv_index >= auto99027AB3_ae) ) ; lv_index += auto99027AB3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 50) + RandomInt(1, 740)), ((lv_yPos + 50) + RandomInt(1, 440)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 360, 300, c_anchorTopLeft, (lv_xPos + 85), (lv_yPos + 25), StringExternal("Param/Value/E449163E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_guildConfirmDialogDialogButtons[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 320, 275, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 80), StringExternal("Param/Value/52820955"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_tempText[1] = StringExternal("Param/Value/C77D6748");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempText[2] = StringExternal("Param/Value/033A8B05");
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_xSize = 190;
    lv_ySize = 60;
    lv_xPos = 990;
    lv_yPos = 970;
    lv_index2 = 1;
    for ( ; ( (auto800F21CB_ai >= 0 && lv_index2 <= auto800F21CB_ae) || (auto800F21CB_ai < 0 && lv_index2 >= auto800F21CB_ae) ) ; lv_index2 += auto800F21CB_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_guildConfirmDialogDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 230;
    }
}

void gf_DialogUsedTalkQuest (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    fixed[3] lv_tempXY;

    // Automatic Variable Declarations
    int auto2F0A9102_val;
    const int autoBDE2CDB4_ae = 8;
    const int autoBDE2CDB4_ai = 1;
    const int autoAD88DE71_ae = 7;
    const int autoAD88DE71_ai = 1;
    const int auto7992BC69_ae = 8;
    const int auto7992BC69_ai = 1;
    const int autoC50577D4_ae = 8;
    const int autoC50577D4_ai = 1;
    const int auto8E576EA8_ae = gv_questsQuestSlots;
    const int auto8E576EA8_ai = 1;
    int autoBF8EA3A7_val;
    const int autoDD421344_ae = 8;
    const int autoDD421344_ai = 1;
    int autoF0FD1785_val;
    const int auto6D4A1560_ae = 3;
    const int auto6D4A1560_ai = 1;
    int auto2DBEDCC8_ae;
    const int auto2DBEDCC8_ai = 1;
    int autoCBD5CD4C_ae;
    const int autoCBD5CD4C_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto2F0A9102_val = lv_dialogItemUsed;
    if (auto2F0A9102_val == gv_questsDialogButtons[1]) {
        libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], gv_questsUnitText[gv_questsPlayerUnitSelection[lv_trigPlayer]][RandomInt(1, 3)], PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (autoBDE2CDB4_ai >= 0 && lv_index <= autoBDE2CDB4_ae) || (autoBDE2CDB4_ai < 0 && lv_index >= autoBDE2CDB4_ae) ) ; lv_index += autoBDE2CDB4_ai ) {
            DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
        }
        if ((gv_questsPlayerQuestSelection[lv_trigPlayer] != 0) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] != 4)) {
            DialogControlSetVisible(gv_questsDialogQuestButton[8], PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (auto2F0A9102_val == gv_questsDialogButtons[2]) {
        if ((gv_questsPlayerQuestSelection[lv_trigPlayer] != 0) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] != 4)) {
            libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], gv_questsQuestText[gv_questsPlayerQuestSelection[lv_trigPlayer]][1], PlayerGroupSingle(lv_trigPlayer));
            if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] == 1)) {
                lv_index = 1;
                for ( ; ( (auto7992BC69_ai >= 0 && lv_index <= auto7992BC69_ae) || (auto7992BC69_ai < 0 && lv_index >= auto7992BC69_ae) ) ; lv_index += auto7992BC69_ai ) {
                    DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                }
            }
            else {
                if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] >= 2) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] <= 3)) {
                    lv_index = 6;
                    for ( ; ( (autoAD88DE71_ai >= 0 && lv_index <= autoAD88DE71_ae) || (autoAD88DE71_ai < 0 && lv_index >= autoAD88DE71_ae) ) ; lv_index += autoAD88DE71_ai ) {
                        DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                }

            }
        }

    }
    else if (auto2F0A9102_val == gv_questsDialogButtons[3]) {
        DialogSetVisible(gv_questsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_questsPlayerQuestSelection[lv_trigPlayer] = 0;
        lv_index = 1;
        for ( ; ( (autoC50577D4_ai >= 0 && lv_index <= autoC50577D4_ae) || (autoC50577D4_ai < 0 && lv_index >= autoC50577D4_ae) ) ; lv_index += autoC50577D4_ai ) {
            DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
        }
        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 2) && (gv_questsPlayerProgress[lv_trigPlayer][1] == 2)) {
            Wait(1.0, c_timeGame);
            gv_tutorialPlayer[lv_trigPlayer] = 2;
            gf_TutorialUpdate(lv_trigPlayer, 2);
        }

    }
    else if (auto2F0A9102_val == gv_questsDialogButtons[4]) {
        lv_index2 = 1;
        for ( ; ( (auto8E576EA8_ai >= 0 && lv_index2 <= auto8E576EA8_ae) || (auto8E576EA8_ai < 0 && lv_index2 >= auto8E576EA8_ae) ) ; lv_index2 += auto8E576EA8_ai ) {
            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] == 0) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] == 1)) {
                if ((gv_questsQuestType[gv_questsPlayerQuestSelection[lv_trigPlayer]][1] == 4)) {
                    autoBF8EA3A7_val = gv_questsEscortRunning[gv_questsPlayerQuestSelection[lv_trigPlayer]];
                    if (autoBF8EA3A7_val == 0) {
                        gv_questsEscortRunning[gv_questsPlayerQuestSelection[lv_trigPlayer]] = 1;
                        gf_QuestsEscort(gv_questsPlayerQuestSelection[lv_trigPlayer]);
                    }
                    else if (autoBF8EA3A7_val == 1) {
                    }
                    else if (autoBF8EA3A7_val == 2) {
                        libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], StringExternal("Param/Value/7D211848"), PlayerGroupSingle(lv_trigPlayer));
                        return ;
                    }
                    else {
                    }
                }

                gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerQuestSelection[lv_trigPlayer]] = 2;
                gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] = gv_questsPlayerQuestSelection[lv_trigPlayer];
                libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index2][2], gv_questsUnitIcon[gv_questsQuestGiverTurnin[gv_questsPlayerQuestSelection[lv_trigPlayer]][1]], PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), true);
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[gv_questsPlayerQuestSelection[lv_trigPlayer]][1]][1], PlayerGroupSingle(lv_trigPlayer), false);
                if ((gv_questsPlayerQuestSelection[lv_trigPlayer] == 30)) {
                    DialogSetVisible(gv_guildDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                }

                lv_index = 1;
                for ( ; ( (autoDD421344_ai >= 0 && lv_index <= autoDD421344_ae) || (autoDD421344_ai < 0 && lv_index >= autoDD421344_ae) ) ; lv_index += autoDD421344_ai ) {
                    DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                }
                if ((gv_questsQuestBuff[gv_questsPlayerQuestSelection[lv_trigPlayer]] != null) && (gv_questsQuestBuff[gv_questsPlayerQuestSelection[lv_trigPlayer]] != "Heroic2") && (gv_questsQuestBuff[gv_questsPlayerQuestSelection[lv_trigPlayer]] != "LegendaryMod")) {
                    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[gv_questsPlayerQuestSelection[lv_trigPlayer]], gv_playerHeroHero[lv_trigPlayer], 1);
                }

                if ((gv_questsQuestType[gv_questsPlayerQuestSelection[lv_trigPlayer]][1] == 3)) {
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[gv_questsPlayerQuestSelection[lv_trigPlayer]][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                }

                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                autoF0FD1785_val = gv_questsPlayerQuestSelection[lv_trigPlayer];
                if (autoF0FD1785_val == 10) {
                    Wait(1.2, c_timeGame);
                    SoundPlayForPlayer(SoundLink("WolfWhat", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                    Wait(0.3, c_timeGame);
                    SoundPlayForPlayer(SoundLink("WolfSound", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                    Wait(0.3, c_timeGame);
                    lv_index = 1;
                    for ( ; ( (auto6D4A1560_ai >= 0 && lv_index <= auto6D4A1560_ae) || (auto6D4A1560_ai < 0 && lv_index >= auto6D4A1560_ae) ) ; lv_index += auto6D4A1560_ai ) {
                        Wait(0.25, c_timeGame);
                        lv_tempXY[1] = (PointGetX(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        lv_tempXY[2] = (PointGetY(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        gf_CreepsCreepSpawn(gv_questsQuestUnitType[gv_questsPlayerQuestSelection[lv_trigPlayer]][2], 0, 0, lv_tempXY[1], lv_tempXY[2]);
                    }
                }
                else if (autoF0FD1785_val == 24) {
                    Wait(1.2, c_timeGame);
                    SoundPlayForPlayer(SoundLink("HarpyYesAttack", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                    Wait(0.3, c_timeGame);
                    SoundPlayForPlayer(SoundLink("HarpyYesAttack", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                    Wait(0.3, c_timeGame);
                    auto2DBEDCC8_ae = RandomInt(3, 4);
                    lv_index = 1;
                    for ( ; ( (auto2DBEDCC8_ai >= 0 && lv_index <= auto2DBEDCC8_ae) || (auto2DBEDCC8_ai < 0 && lv_index >= auto2DBEDCC8_ae) ) ; lv_index += auto2DBEDCC8_ai ) {
                        Wait(0.25, c_timeGame);
                        lv_tempXY[1] = (PointGetX(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        lv_tempXY[2] = (PointGetY(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        gf_CreepsCreepSpawn(gv_questsQuestUnitType[gv_questsPlayerQuestSelection[lv_trigPlayer]][2], 0, 0, lv_tempXY[1], lv_tempXY[2]);
                    }
                }
                else if (autoF0FD1785_val == 26) {
                    Wait(1.2, c_timeGame);
                    SoundPlayForPlayer(SoundLink("MassTeleport", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                    Wait(0.3, c_timeGame);
                    DialogSetVisible(gv_questsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Teleport", gv_playerHeroHero[lv_trigPlayer], 1);
                    Wait(0.2, c_timeGame);
                    UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(RegionFromId(100)), false);
                    CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
                    UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
                    UnitClearSelection(lv_trigPlayer);
                    UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
                }
                else if (autoF0FD1785_val == 35) {
                    Wait(2.0, c_timeGame);
                    SoundPlayForPlayer(SoundLink("MurlocAggro", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 175.0, 0.0);
                    Wait(0.3, c_timeGame);
                    SoundPlayForPlayer(SoundLink("MurlocAggro", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 175.0, 0.0);
                    Wait(0.3, c_timeGame);
                    SoundPlayForPlayer(SoundLink("MurlocAggro", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 175.0, 0.0);
                    autoCBD5CD4C_ae = RandomInt(5, 6);
                    lv_index = 1;
                    for ( ; ( (autoCBD5CD4C_ai >= 0 && lv_index <= autoCBD5CD4C_ae) || (autoCBD5CD4C_ai < 0 && lv_index >= autoCBD5CD4C_ae) ) ; lv_index += autoCBD5CD4C_ai ) {
                        Wait(0.25, c_timeGame);
                        lv_tempXY[1] = (PointGetX(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        lv_tempXY[2] = (PointGetY(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer])) + RandomFixed(-1.5, 1.5));
                        gf_CreepsCreepSpawn("Murgulslave", 0, 0, lv_tempXY[1], lv_tempXY[2]);
                    }
                }
                else {
                }
                break;
            }

        }
    }
    else {
    }
}

void gf_DialogUsedFaction (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_faction;
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    int autoEF75AA89_val;
    const int auto635046E8_ae = 3;
    const int auto635046E8_ai = 1;
    const int autoACA2F249_ae = gv_questsQuestSlots;
    const int autoACA2F249_ai = 1;
    const int auto00A118DB_ae = 8;
    const int auto00A118DB_ai = 1;
    const int auto512B00A8_ae = 3;
    const int auto512B00A8_ai = 1;
    const int autoC36AC114_ae = 3;
    const int autoC36AC114_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoEF75AA89_val = lv_dialogItemUsed;
    if (autoEF75AA89_val == gv_guildDialogDialogButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 19;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoEF75AA89_val == gv_guildDialogDialogButtons[2]) {
        DialogSetVisible(gv_guildConfirmDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoEF75AA89_val == gv_guildDialogDialogButtons[3]) {
        DialogSetVisible(gv_guildDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        gv_questsPlayerProgress[lv_trigPlayer][30] = 2;
    }
    else if (autoEF75AA89_val == gv_guildConfirmDialogDialogButtons[1]) {
        DialogSetVisible(gv_guildConfirmDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_guildDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        gv_questsPlayerProgress[lv_trigPlayer][30] = 3;
        gv_playerHeroHeroGuild[lv_trigPlayer][1] = gv_guildConfirmDialogPlayerSelected[lv_trigPlayer];
        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 0;
        lv_index = 1;
        for ( ; ( (auto635046E8_ai >= 0 && lv_index <= auto635046E8_ae) || (auto635046E8_ai < 0 && lv_index >= auto635046E8_ae) ) ; lv_index += auto635046E8_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][(30 + lv_index)] = 5;
        }
        gv_questsPlayerProgress[lv_trigPlayer][(30 + gv_guildConfirmDialogPlayerSelected[lv_trigPlayer])] = 0;
        lv_index = 1;
        for ( ; ( (autoACA2F249_ai >= 0 && lv_index <= autoACA2F249_ae) || (autoACA2F249_ai < 0 && lv_index >= autoACA2F249_ae) ) ; lv_index += autoACA2F249_ai ) {
            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 30) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2])) {
                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += 1;
            }

        }
        DialogSetVisible(gv_questsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_questsPlayerQuestSelection[lv_trigPlayer] = 0;
        lv_index = 1;
        for ( ; ( (auto00A118DB_ai >= 0 && lv_index <= auto00A118DB_ae) || (auto00A118DB_ai < 0 && lv_index >= auto00A118DB_ae) ) ; lv_index += auto00A118DB_ai ) {
            DialogControlSetVisible(gv_questsDialogQuestButton[lv_index], PlayerGroupSingle(lv_trigPlayer), false);
        }
        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[30][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
    }
    else if (autoEF75AA89_val == gv_guildConfirmDialogDialogButtons[2]) {
        DialogSetVisible(gv_guildConfirmDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto512B00A8_ai >= 0 && lv_index <= auto512B00A8_ae) || (auto512B00A8_ai < 0 && lv_index >= auto512B00A8_ae) ) ; lv_index += auto512B00A8_ai ) {
        if ((lv_dialogItemUsed == gv_guildDialogDialogItems[lv_index][3])) {
            lv_index2 = 1;
            for ( ; ( (autoC36AC114_ai >= 0 && lv_index2 <= autoC36AC114_ae) || (autoC36AC114_ai < 0 && lv_index2 >= autoC36AC114_ae) ) ; lv_index2 += autoC36AC114_ai ) {
                DialogControlSetVisible(gv_guildDialogDialogItems[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            libNtve_gf_SetDialogItemText(gv_guildConfirmDialogDialogButtons[0], gv_guildName[lv_index], PlayerGroupSingle(lv_trigPlayer));
            DialogControlSetVisible(gv_guildDialogDialogItems[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
            gv_guildConfirmDialogPlayerSelected[lv_trigPlayer] = lv_index;
        }

    }
}

void gf_DialogUsedQuestLog (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempQuest;
    text lv_tempText;

    // Automatic Variable Declarations
    const int auto15C78C41_ae = gv_questsQuestSlots;
    const int auto15C78C41_ai = 1;
    int auto46353E50_val;
    int auto7821595D_ae;
    const int auto7821595D_ai = 1;
    int auto63D0506A_ae;
    const int auto63D0506A_ai = 1;
    int autoC8942120_ae;
    const int autoC8942120_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_index = 1;
    for ( ; ( (auto15C78C41_ai >= 0 && lv_index <= auto15C78C41_ae) || (auto15C78C41_ai < 0 && lv_index >= auto15C78C41_ae) ) ; lv_index += auto15C78C41_ai ) {
        if ((lv_dialogItemUsed == gv_questsLogDialogButtons[lv_index][1]) && (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] > 0)) {
            libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            lv_tempQuest = gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index];
            libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[3], gv_questsQuestText[lv_tempQuest][1], PlayerGroupSingle(lv_trigPlayer));
            auto46353E50_val = gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1];
            if (auto46353E50_val == 1) {
                lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]) + StringExternal("Param/Value/218CC5D0") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1]) + StringExternal("Param/Value/95707992") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]));
                libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                if ((gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2] != null)) {
                    lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]) + StringExternal("Param/Value/BC3C5937") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2]) + StringExternal("Param/Value/5BE6F458") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][3]));
                    libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[2], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                }

            }
            else if (auto46353E50_val == 2) {
                lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]) + StringExternal("Param/Value/4F7CE311") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1]) + StringExternal("Param/Value/BFE03509") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]));
                libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                if ((gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2] != null)) {
                    lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]) + StringExternal("Param/Value/0BE953D3") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2]) + StringExternal("Param/Value/B7C72DBD") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][3]));
                    libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[2], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                }

            }
            else if (auto46353E50_val == 3) {
                lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]) + StringExternal("Param/Value/3E47C0A7") + StringToText("") + StringToText("") + StringToText(""));
                libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
            }
            else if (auto46353E50_val == 4) {
                lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsEscortUnitType[0]) + StringToText("") + StringToText("") + StringToText("") + StringToText(""));
                libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
            }
            else if (auto46353E50_val == 5) {
                lv_tempText = (StringToText("") + StringExternal("Param/Value/89C375CF") + StringExternal("Param/Value/9A59D887") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1]) + StringExternal("Param/Value/90350F63") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]));
                libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
            }
            else {
            }
        }

    }
    if ((lv_dialogItemUsed == gv_questsLogDialogButtons[0][0])) {
        DialogSetVisible(gv_questsLogDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_questsLogDialogItems[2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
    }

    auto7821595D_ae = gv_questsQuestIndex;
    lv_index2 = 1;
    for ( ; ( (auto7821595D_ai >= 0 && lv_index2 <= auto7821595D_ae) || (auto7821595D_ai < 0 && lv_index2 >= auto7821595D_ae) ) ; lv_index2 += auto7821595D_ai ) {
        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), false);
        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][2]][2], PlayerGroupSingle(lv_trigPlayer), false);
        if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 0)) {
            if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][2]] == 4)) {
                gv_questsPlayerProgress[lv_trigPlayer][lv_index2] = 1;
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }

    }
    auto63D0506A_ae = gv_questsQuestIndex;
    lv_index2 = 1;
    for ( ; ( (auto63D0506A_ai >= 0 && lv_index2 <= auto63D0506A_ae) || (auto63D0506A_ai < 0 && lv_index2 >= auto63D0506A_ae) ) ; lv_index2 += auto63D0506A_ai ) {
        if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 1)) {
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    autoC8942120_ae = gv_questsQuestIndex;
    lv_index2 = 1;
    for ( ; ( (autoC8942120_ai >= 0 && lv_index2 <= autoC8942120_ae) || (autoC8942120_ai < 0 && lv_index2 >= autoC8942120_ae) ) ; lv_index2 += autoC8942120_ai ) {
        if (((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 3) || ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 2) && (gv_questsQuestType[lv_index2][1] == 3)))) {
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
}

void gf_QuestsInteracting (int lp_trigPlayer, unit lp_selected) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_unitIndex;
    int lv_tempInt;
    text lv_tempText;
    unit lv_tempUnit;

    // Automatic Variable Declarations
    const int auto25679DA0_ae = 8;
    const int auto25679DA0_ai = 1;
    const int autoFEA1604D_ae = 3;
    const int autoFEA1604D_ai = 1;
    unitgroup auto533DBC4B_g;
    int auto533DBC4B_u;
    unit auto533DBC4B_var;
    int auto33E207D6_ae;
    const int auto33E207D6_ai = 1;
    const int autoA632E2B2_ae = gv_questsQuestSlots;
    const int autoA632E2B2_ai = 1;
    const int auto6A89819A_ae = gv_questsQuestSlots;
    const int auto6A89819A_ai = 1;
    int autoD06753DE_ae;
    const int autoD06753DE_ai = 1;
    int autoCB4D102F_ae;
    const int autoCB4D102F_ai = 1;
    const int auto814C0178_ae = 8;
    const int auto814C0178_ai = 1;
    int auto72B08578_ae;
    const int auto72B08578_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_tempUnit = lp_selected;

    // Implementation
    lv_unitIndex = FixedToInt(UnitGetCustomValue(lv_tempUnit, 0));
    gv_questsPlayerUnitSelection[lv_trigPlayer] = lv_unitIndex;
    gv_questsPlayerQuestSelection[lv_trigPlayer] = 0;
    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
    UnitClearSelection(lv_trigPlayer);
    UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    DialogSetVisible(gv_questsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    libNtve_gf_SetDialogItemImage(gv_questsDialogItems[1], gv_questsUnitIcon[lv_unitIndex], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_questsDialogItems[2], gv_questsUnitText[lv_unitIndex][0], PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], gv_questsUnitText[lv_unitIndex][RandomInt(1, 3)], PlayerGroupSingle(lv_trigPlayer));
    lv_index2 = 1;
    for ( ; ( (auto25679DA0_ai >= 0 && lv_index2 <= auto25679DA0_ae) || (auto25679DA0_ai < 0 && lv_index2 >= auto25679DA0_ae) ) ; lv_index2 += auto25679DA0_ai ) {
        DialogControlSetVisible(gv_questsDialogQuestButton[lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
    }
    lv_index = 1;
    for ( ; ( (autoFEA1604D_ai >= 0 && lv_index <= autoFEA1604D_ae) || (autoFEA1604D_ai < 0 && lv_index >= autoFEA1604D_ae) ) ; lv_index += autoFEA1604D_ai ) {
        if ((lv_unitIndex == (23 + lv_index)) && (gv_playerHeroHeroGuild[lv_trigPlayer][1] == lv_index) && (gv_playerHeroHeroGuild[lv_trigPlayer][2] > 0)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_guildBuffs[lv_index][gv_playerHeroHeroGuild[lv_trigPlayer][2]], gv_playerHeroHero[lv_trigPlayer], 1);
        }

    }
    if ((lv_unitIndex == 8)) {
        auto533DBC4B_g = UnitGroupSearch(null, lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto533DBC4B_u = UnitGroupCount(auto533DBC4B_g, c_unitCountAll);
        for (;; auto533DBC4B_u -= 1) {
            auto533DBC4B_var = UnitGroupUnitFromEnd(auto533DBC4B_g, auto533DBC4B_u);
            if (auto533DBC4B_var == null) { break; }
            UnitBehaviorRemoveCategory(auto533DBC4B_var, c_unitBehaviorFlagUser1);
            UnitSetPropertyFixed(auto533DBC4B_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto533DBC4B_var, c_unitPropEnergyPercent, 100.0);
        }
    }

    auto33E207D6_ae = gv_questsQuestIndex;
    lv_index = 1;
    for ( ; ( (auto33E207D6_ai >= 0 && lv_index <= auto33E207D6_ae) || (auto33E207D6_ai < 0 && lv_index >= auto33E207D6_ae) ) ; lv_index += auto33E207D6_ai ) {
        if ((lv_index == 30) && (gv_questsQuestGiverTurnin[lv_index][1] == lv_unitIndex) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 2)) {
            DialogSetVisible(gv_guildDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
            return ;
        }

        if ((gv_questsQuestGiverTurnin[lv_index][2] == lv_unitIndex) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 2) && (gv_questsQuestType[lv_index][1] == 3)) {
            if ((gv_questsQuestBuff[lv_index] != gv_questsQuestBuff[0]) && (gv_questsQuestBuff[lv_index] != "Heroic2") && (gv_questsQuestBuff[lv_index] != "LegendaryMod")) {
                if ((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[lv_index]) == true)) {
                    UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[lv_index], c_unitBehaviorCountAll);
                    gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
                    gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 3;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                }
                else {
                    gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
                    gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 1;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
                    libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], StringExternal("Param/Value/8FDD39D9"), PlayerGroupSingle(lv_trigPlayer));
                    lv_index2 = 1;
                    for ( ; ( (autoA632E2B2_ai >= 0 && lv_index2 <= autoA632E2B2_ae) || (autoA632E2B2_ai < 0 && lv_index2 >= autoA632E2B2_ae) ) ; lv_index2 += autoA632E2B2_ai ) {
                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] == lv_index)) {
                            gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] = 0;
                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][1] = 0;
                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][2] = 0;
                            libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index2][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(lv_trigPlayer));
                            DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), false);
                            return ;
                        }

                    }
                }
            }
            else {
                gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
                gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 3;
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }

        if ((gv_questsQuestGiverTurnin[lv_index][2] == lv_unitIndex) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 3)) {
            gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gv_playerStatisticsGeneral[lv_trigPlayer][27] += 10;
            gv_playerCurrency[lv_trigPlayer][4] += 10;
            libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], gv_questsQuestText[lv_index][2], PlayerGroupSingle(lv_trigPlayer));
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index][2]][2], PlayerGroupSingle(lv_trigPlayer), false);
            lv_index2 = 1;
            for ( ; ( (auto6A89819A_ai >= 0 && lv_index2 <= auto6A89819A_ae) || (auto6A89819A_ai < 0 && lv_index2 >= auto6A89819A_ae) ) ; lv_index2 += auto6A89819A_ai ) {
                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] == lv_index)) {
                    gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] = 0;
                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][1] = 0;
                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][2] = 0;
                    libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index2][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), false);
                }

            }
            autoD06753DE_ae = gv_questsQuestIndex;
            lv_index2 = 1;
            for ( ; ( (autoD06753DE_ai >= 0 && lv_index2 <= autoD06753DE_ae) || (autoD06753DE_ai < 0 && lv_index2 >= autoD06753DE_ae) ) ; lv_index2 += autoD06753DE_ai ) {
                if (((gv_questsQuestPrerequisite[lv_index2][1] == lv_index) || (gv_questsQuestPrerequisite[lv_index2][2] == lv_index)) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 0)) {
                    if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][2]] == 4)) {
                        gv_questsPlayerProgress[lv_trigPlayer][lv_index2] = 1;
                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
                    }

                }

                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 3)) {
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                }

            }
            gf_QuestsRewards(lv_trigPlayer, gv_questsPlayerQuestSelection[lv_trigPlayer]);
            if ((gv_generalTutorialMode == true)) {
                while (!((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], "Talking") == false))) {
                    Wait(1.0, c_timeGame);
                }
                Wait(1.0, c_timeGame);
                if ((gv_questsPlayerProgress[lv_trigPlayer][2] == 4) && (gv_tutorial2Progress <= 1)) {
                    gv_tutorial2Progress = 1;
                    gf_TutorialTutorialStages(PlayerGroupSingle(lv_trigPlayer), 1);
                }

                if ((gv_questsPlayerProgress[lv_trigPlayer][12] == 4) && (gv_tutorial2Progress <= 3)) {
                    gv_tutorial2Progress = 4;
                }

            }

            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            return ;
        }

    }
    autoCB4D102F_ae = gv_questsQuestIndex;
    lv_index = 1;
    for ( ; ( (autoCB4D102F_ai >= 0 && lv_index <= autoCB4D102F_ae) || (autoCB4D102F_ai < 0 && lv_index >= autoCB4D102F_ae) ) ; lv_index += autoCB4D102F_ai ) {
        if ((gv_questsQuestGiverTurnin[lv_index][1] == lv_unitIndex) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 1)) {
            gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
            libNtve_gf_SetDialogItemText(gv_questsDialogItems[3], gv_questsQuestText[lv_index][1], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_questsDialogQuestButton[7], gv_questsQuestText[lv_index][0], PlayerGroupSingle(lv_trigPlayer));
            lv_index2 = 1;
            for ( ; ( (auto814C0178_ai >= 0 && lv_index2 <= auto814C0178_ae) || (auto814C0178_ai < 0 && lv_index2 >= auto814C0178_ae) ) ; lv_index2 += auto814C0178_ai ) {
                DialogControlSetVisible(gv_questsDialogQuestButton[lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
            }
            return ;
        }

    }
    auto72B08578_ae = gv_questsQuestIndex;
    lv_index = 1;
    for ( ; ( (auto72B08578_ai >= 0 && lv_index <= auto72B08578_ae) || (auto72B08578_ai < 0 && lv_index >= auto72B08578_ae) ) ; lv_index += auto72B08578_ai ) {
        if ((gv_questsQuestGiverTurnin[lv_index][1] == lv_unitIndex) && (gv_questsQuestGiverTurnin[lv_index][1] != gv_questsQuestGiverTurnin[lv_index][2]) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] >= 2) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index] <= 3)) {
            gv_questsPlayerQuestSelection[lv_trigPlayer] = lv_index;
            DialogControlSetVisible(gv_questsDialogQuestButton[8], PlayerGroupSingle(lv_trigPlayer), true);
            return ;
        }

    }
}

void gf_QuestsTalk (unit lp_unit, text lp_text1, text lp_text2, text lp_text3) {
    // Automatic Variable Declarations
    // Implementation
    gv_questsUnitIndex += 1;
    gv_questsUnitIcon[gv_questsUnitIndex] = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lp_unit), "UnitIcon", c_playerAny));
    gv_questsUnitText[gv_questsUnitIndex][0] = (StringExternal("Param/Value/ACAB8A29") + UnitGetName(lp_unit));
    gv_questsUnitText[gv_questsUnitIndex][1] = lp_text1;
    gv_questsUnitText[gv_questsUnitIndex][2] = lp_text2;
    gv_questsUnitText[gv_questsUnitIndex][3] = lp_text3;
    UnitGroupAdd(gv_questsUnitGroup, lp_unit);
    UnitSetCustomValue(lp_unit, 0, gv_questsUnitIndex);
    TextTagCreate(StringExternal("Param/Value/7CA59A38"), 90, UnitGetPosition(lp_unit), 1.0, true, true, PlayerGroupAll());
    gv_questsQuestMarker[gv_questsUnitIndex][1] = TextTagLastCreated();
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    TextTagCreate(StringExternal("Param/Value/5808E3DA"), 90, UnitGetPosition(lp_unit), 1.0, true, true, PlayerGroupAll());
    gv_questsQuestMarker[gv_questsUnitIndex][2] = TextTagLastCreated();
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
}

void gf_QuestsCreateQuest (int lp_giver, int lp_turnIn, text lp_giveText, text lp_finishText, int lp_prerequisite1, int lp_prerequisite2, int lp_questType, int lp_questKills1, int lp_questKills2, string lp_questKillsType1, string lp_questKillsType2, string lp_questBuff, int lp_rewardType, int lp_rewardAmount, int lp_rewardAmount2, int lp_eXPAmount) {
    // Variable Declarations
    text lv_tempText;

    // Automatic Variable Declarations
    int autoA567EF6D_val;

    // Variable Initialization

    // Implementation
    gv_questsQuestIndex += 1;
    gv_questsQuestGiverTurnin[gv_questsQuestIndex][1] = lp_giver;
    gv_questsQuestGiverTurnin[gv_questsQuestIndex][2] = lp_turnIn;
    gv_questsQuestPrerequisite[gv_questsQuestIndex][1] = lp_prerequisite1;
    gv_questsQuestPrerequisite[gv_questsQuestIndex][2] = lp_prerequisite2;
    gv_questsQuestText[gv_questsQuestIndex][1] = lp_giveText;
    gv_questsQuestText[gv_questsQuestIndex][2] = lp_finishText;
    gv_questsQuestType[gv_questsQuestIndex][1] = lp_questType;
    gv_questsQuestType[gv_questsQuestIndex][2] = lp_questKills1;
    gv_questsQuestType[gv_questsQuestIndex][3] = lp_questKills2;
    gv_questsQuestBuff[gv_questsQuestIndex] = lp_questBuff;
    gv_questsQuestUnitType[gv_questsQuestIndex][1] = lp_questKillsType1;
    gv_questsQuestUnitType[gv_questsQuestIndex][2] = lp_questKillsType2;
    gv_questsQuestReward[gv_questsQuestIndex][1] = lp_rewardType;
    gv_questsQuestReward[gv_questsQuestIndex][2] = lp_rewardAmount;
    gv_questsQuestReward[gv_questsQuestIndex][3] = lp_rewardAmount2;
    gv_questsQuestReward[gv_questsQuestIndex][4] = lp_eXPAmount;
    autoA567EF6D_val = lp_rewardType;
    if (autoA567EF6D_val == 1) {
        gv_questsQuestText[gv_questsQuestIndex][0] = ((StringExternal("Param/Value/6BBF8EB0") + (IntToText(lp_rewardAmount2) + StringExternal("Param/Value/56F1A955"))) + gv_questsQuestRewardText[lp_rewardType][lp_rewardAmount]);
    }
    else if (autoA567EF6D_val == 2) {
        gv_questsQuestText[gv_questsQuestIndex][0] = ((StringExternal("Param/Value/24B3681D") + (IntToText(lp_rewardAmount) + StringExternal("Param/Value/2F0ED320"))) + gv_questsQuestRewardText[lp_rewardType][lp_rewardAmount2]);
    }
    else if (autoA567EF6D_val == 3) {
        gv_questsQuestText[gv_questsQuestIndex][0] = ((StringExternal("Param/Value/834A2169") + (IntToText(lp_rewardAmount2) + StringExternal("Param/Value/B5DD14F3"))) + gv_questsQuestRewardText[lp_rewardType][lp_rewardAmount]);
    }
    else if (autoA567EF6D_val == 4) {
        gv_questsQuestText[gv_questsQuestIndex][0] = (StringExternal("Param/Value/BF5E1A9F") + gv_questsItemsNameTooltip[lp_rewardAmount][1]);
    }
    else {
    }
}

trigger auto_gf_QuestsCreateEscort_Trigger = null;
int auto_gf_QuestsCreateEscort_lp_questIndex;
string auto_gf_QuestsCreateEscort_lp_questUnit;
region auto_gf_QuestsCreateEscort_lp_regionsStart;
region auto_gf_QuestsCreateEscort_lp_regions1;
region auto_gf_QuestsCreateEscort_lp_regions2;
region auto_gf_QuestsCreateEscort_lp_regions3;
region auto_gf_QuestsCreateEscort_lp_regions4;
region auto_gf_QuestsCreateEscort_lp_regions5;

void gf_QuestsCreateEscort (int lp_questIndex, string lp_questUnit, region lp_regionsStart, region lp_regions1, region lp_regions2, region lp_regions3, region lp_regions4, region lp_regions5) {
    auto_gf_QuestsCreateEscort_lp_questIndex = lp_questIndex;
    auto_gf_QuestsCreateEscort_lp_questUnit = lp_questUnit;
    auto_gf_QuestsCreateEscort_lp_regionsStart = lp_regionsStart;
    auto_gf_QuestsCreateEscort_lp_regions1 = lp_regions1;
    auto_gf_QuestsCreateEscort_lp_regions2 = lp_regions2;
    auto_gf_QuestsCreateEscort_lp_regions3 = lp_regions3;
    auto_gf_QuestsCreateEscort_lp_regions4 = lp_regions4;
    auto_gf_QuestsCreateEscort_lp_regions5 = lp_regions5;

    if (auto_gf_QuestsCreateEscort_Trigger == null) {
        auto_gf_QuestsCreateEscort_Trigger = TriggerCreate("auto_gf_QuestsCreateEscort_TriggerFunc");
    }

    TriggerExecute(auto_gf_QuestsCreateEscort_Trigger, false, false);
}

bool auto_gf_QuestsCreateEscort_TriggerFunc (bool testConds, bool runActions) {
    int lp_questIndex = auto_gf_QuestsCreateEscort_lp_questIndex;
    string lp_questUnit = auto_gf_QuestsCreateEscort_lp_questUnit;
    region lp_regionsStart = auto_gf_QuestsCreateEscort_lp_regionsStart;
    region lp_regions1 = auto_gf_QuestsCreateEscort_lp_regions1;
    region lp_regions2 = auto_gf_QuestsCreateEscort_lp_regions2;
    region lp_regions3 = auto_gf_QuestsCreateEscort_lp_regions3;
    region lp_regions4 = auto_gf_QuestsCreateEscort_lp_regions4;
    region lp_regions5 = auto_gf_QuestsCreateEscort_lp_regions5;

    // Variable Declarations
    int lv_questIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_questIndex = lp_questIndex;
    gv_questsEscortRegions[lv_questIndex][0] = lp_regionsStart;
    gv_questsEscortRegions[lv_questIndex][1] = lp_regions1;
    gv_questsEscortRegions[lv_questIndex][2] = lp_regions2;
    gv_questsEscortRegions[lv_questIndex][3] = lp_regions3;
    gv_questsEscortRegions[lv_questIndex][4] = lp_regions4;
    gv_questsEscortRegions[lv_questIndex][5] = lp_regions5;
    gv_questsEscortUnitType[lv_questIndex] = lp_questUnit;
    return true;
}

trigger auto_gf_QuestsEscort_Trigger = null;
int auto_gf_QuestsEscort_lp_questIndex;

void gf_QuestsEscort (int lp_questIndex) {
    auto_gf_QuestsEscort_lp_questIndex = lp_questIndex;

    if (auto_gf_QuestsEscort_Trigger == null) {
        auto_gf_QuestsEscort_Trigger = TriggerCreate("auto_gf_QuestsEscort_TriggerFunc");
    }

    TriggerExecute(auto_gf_QuestsEscort_Trigger, false, false);
}

bool auto_gf_QuestsEscort_TriggerFunc (bool testConds, bool runActions) {
    int lp_questIndex = auto_gf_QuestsEscort_lp_questIndex;

    // Variable Declarations
    int lv_index;
    int lv_questIndex;
    int lv_customValue;
    unit lv_escortUnit;
    region[7] lv_regions;
    playergroup lv_playerGroup;
    int lv_enemySpawnIndex;
    fixed[3] lv_tempXY;
    text[5] lv_tempText;

    // Automatic Variable Declarations
    const int autoA9CBE1DF_ae = 5;
    const int autoA9CBE1DF_ai = 1;
    const int autoB6B54248_ae = 3;
    const int autoB6B54248_ai = 1;
    playergroup auto33211041_g;
    int auto33211041_var;
    playergroup autoF6BBE7CD_g;
    int autoF6BBE7CD_var;
    const int auto39A8AACF_ae = gv_questsQuestSlots;
    const int auto39A8AACF_ai = 1;
    unitgroup autoB28A5E13_g;
    int autoB28A5E13_u;
    unit autoB28A5E13_var;
    int autoEA3B4706_ae;
    const int autoEA3B4706_ai = 1;
    unitgroup auto416668BD_g;
    int auto416668BD_u;
    unit auto416668BD_var;
    playergroup auto7ED70186_g;
    int auto7ED70186_var;
    unitgroup auto3C0ED28E_g;
    int auto3C0ED28E_u;
    unit auto3C0ED28E_var;
    playergroup auto8E21A8F1_g;
    int auto8E21A8F1_var;
    const int autoA4246A12_ae = gv_questsQuestSlots;
    const int autoA4246A12_ai = 1;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    lv_tempText[1] = StringExternal("Param/Value/A763E805");
    lv_tempText[2] = StringExternal("Param/Value/DC65F56D");
    lv_tempText[3] = StringExternal("Param/Value/6E14D37C");
    lv_tempText[4] = StringExternal("Param/Value/31B7F651");
    lv_questIndex = lp_questIndex;
    lv_index = 0;
    for ( ; ( (autoA9CBE1DF_ai >= 0 && lv_index <= autoA9CBE1DF_ae) || (autoA9CBE1DF_ai < 0 && lv_index >= autoA9CBE1DF_ae) ) ; lv_index += autoA9CBE1DF_ai ) {
        lv_regions[lv_index] = gv_questsEscortRegions[lv_questIndex][lv_index];
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_questsEscortUnitType[lv_questIndex], 0, 0, RegionGetCenter(lv_regions[0]));
    lv_escortUnit = UnitLastCreated();
    lv_customValue = 1;
    UnitSetCustomValue(lv_escortUnit, 1, lv_customValue);
    lv_index = 1;
    for ( ; ( (autoB6B54248_ai >= 0 && lv_index <= autoB6B54248_ae) || (autoB6B54248_ai < 0 && lv_index >= autoB6B54248_ae) ) ; lv_index += autoB6B54248_ai ) {
        auto33211041_g = gv_generalTeamsAll;
        auto33211041_var = -1;
        while (true) {
            auto33211041_var = PlayerGroupNextPlayer(auto33211041_g, auto33211041_var);
            if (auto33211041_var < 0) { break; }
            if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[auto33211041_var], RegionCircle(UnitGetPosition(lv_escortUnit), 4.0)) == true) && ((gv_questsPlayerProgress[auto33211041_var][lv_questIndex] == 1) || (gv_questsPlayerProgress[auto33211041_var][lv_questIndex] == 2)) && (PlayerGroupHasPlayer(lv_playerGroup, auto33211041_var) == false)) {
                PlayerGroupAdd(lv_playerGroup, auto33211041_var);
                gv_questsPlayerQuestSelection[auto33211041_var] = lv_questIndex;
                gf_DialogUsedTalkQuest(auto33211041_var, gv_questsDialogButtons[4]);
                gv_questsPlayerProgress[auto33211041_var][lv_questIndex] = 2;
                libNtve_gf_ShareVisionofUnit(lv_escortUnit, true, auto33211041_var);
            }

        }
        TextTagCreate(lv_tempText[lv_index], 20, PointWithOffsetPolar(UnitGetPosition(lv_escortUnit), 0.0, libNtve_gf_RandomAngle()), 0.7, true, true, lv_playerGroup);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.8);
        Wait(3.0, c_timeGame);
    }
    gv_questsEscortRunning[lv_questIndex] = 2;
    while ((UnitIsAlive(lv_escortUnit) == true)) {
        autoF6BBE7CD_g = lv_playerGroup;
        autoF6BBE7CD_var = -1;
        while (true) {
            autoF6BBE7CD_var = PlayerGroupNextPlayer(autoF6BBE7CD_g, autoF6BBE7CD_var);
            if (autoF6BBE7CD_var < 0) { break; }
            if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[autoF6BBE7CD_var], RegionCircle(UnitGetPosition(lv_escortUnit), 7.0)) == false)) {
                if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[autoF6BBE7CD_var], RegionCircle(UnitGetPosition(lv_escortUnit), 12.0)) == false)) {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/C3ABAF78"), PlayerGroupSingle(autoF6BBE7CD_var));
                    PlayerGroupRemove(lv_playerGroup, autoF6BBE7CD_var);
                    gv_questsPlayerProgress[autoF6BBE7CD_var][lv_questIndex] = 1;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_questIndex][1]][1], PlayerGroupSingle(autoF6BBE7CD_var), true);
                    lv_index = 1;
                    for ( ; ( (auto39A8AACF_ai >= 0 && lv_index <= auto39A8AACF_ae) || (auto39A8AACF_ai < 0 && lv_index >= auto39A8AACF_ae) ) ; lv_index += auto39A8AACF_ai ) {
                        if ((gv_questsPlayerActiveQuests[autoF6BBE7CD_var][lv_index] == lv_questIndex)) {
                            gv_questsPlayerActiveQuests[autoF6BBE7CD_var][lv_index] = 0;
                            gv_questsPlayerActiveProgress[autoF6BBE7CD_var][lv_index][1] = 0;
                            gv_questsPlayerActiveProgress[autoF6BBE7CD_var][lv_index][2] = 0;
                            libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(autoF6BBE7CD_var));
                            DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index][1], PlayerGroupSingle(autoF6BBE7CD_var), false);
                        }

                    }
                    if ((PlayerGroupCount(lv_playerGroup) == 0)) {
                        UnitKill(lv_escortUnit);
                        autoB28A5E13_g = gv_questsEscortEnemyGroup[lv_questIndex];
                        autoB28A5E13_u = UnitGroupCount(autoB28A5E13_g, c_unitCountAll);
                        for (;; autoB28A5E13_u -= 1) {
                            autoB28A5E13_var = UnitGroupUnitFromEnd(autoB28A5E13_g, autoB28A5E13_u);
                            if (autoB28A5E13_var == null) { break; }
                            UnitRemove(autoB28A5E13_var);
                        }
                    }

                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/23A312BF"), PlayerGroupSingle(autoF6BBE7CD_var));
                }
            }

        }
        if ((UnitOrderCount(lv_escortUnit) == 0)) {
            if ((libNtve_gf_UnitInRegion(lv_escortUnit, lv_regions[lv_customValue]) == true) && (libNtve_gf_UnitGroupIsDead(gv_questsEscortEnemyGroup[lv_questIndex]) == true) && (lv_enemySpawnIndex < lv_customValue)) {
                autoEA3B4706_ae = RandomInt(2, 4);
                lv_index = 1;
                for ( ; ( (autoEA3B4706_ai >= 0 && lv_index <= autoEA3B4706_ae) || (autoEA3B4706_ai < 0 && lv_index >= autoEA3B4706_ae) ) ; lv_index += autoEA3B4706_ai ) {
                    lv_tempXY[1] = (PointGetX(UnitGetPosition(lv_escortUnit)) + RandomFixed(-2.5, 2.5));
                    lv_tempXY[2] = (PointGetY(UnitGetPosition(lv_escortUnit)) + RandomFixed(-2.5, 2.5));
                    gf_CreepsCreepSpawn(gv_questsQuestUnitType[lv_questIndex][RandomInt(1, 2)], 0, lv_questIndex, lv_tempXY[1], lv_tempXY[2]);
                }
                lv_enemySpawnIndex += 1;
                Wait(3.0, c_timeGame);
            }

            if ((lv_enemySpawnIndex == lv_customValue) && (libNtve_gf_UnitInRegion(lv_escortUnit, lv_regions[lv_customValue]) == false)) {
                Wait(3.0, c_timeGame);
                UnitIssueOrder(lv_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_regions[lv_customValue])), c_orderQueueReplace);
            }

            if ((libNtve_gf_UnitInRegion(lv_escortUnit, lv_regions[lv_customValue]) == true) && (lv_enemySpawnIndex == lv_customValue) && (libNtve_gf_UnitGroupIsDead(gv_questsEscortEnemyGroup[lv_questIndex]) == true)) {
                lv_customValue += 1;
                UnitSetCustomValue(lv_escortUnit, 1, lv_customValue);
                Wait(2.0, c_timeGame);
                TextTagCreate(lv_tempText[2], 20, PointWithOffsetPolar(UnitGetPosition(lv_escortUnit), 0.0, libNtve_gf_RandomAngle()), 0.7, true, true, lv_playerGroup);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
                Wait(3.0, c_timeGame);
                UnitIssueOrder(lv_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_regions[lv_customValue])), c_orderQueueReplace);
            }

            if ((libNtve_gf_UnitInRegion(lv_escortUnit, lv_regions[lv_customValue]) == false) && (lv_enemySpawnIndex < lv_customValue) && (libNtve_gf_UnitGroupIsDead(gv_questsEscortEnemyGroup[lv_questIndex]) == true)) {
                Wait(3.0, c_timeGame);
                UnitIssueOrder(lv_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_regions[lv_customValue])), c_orderQueueReplace);
            }
            else {
                if ((lv_regions[(lv_customValue + 1)] != null)) {
                    if ((libNtve_gf_UnitGroupIsDead(gv_questsEscortEnemyGroup[lv_questIndex]) == false)) {
                        auto416668BD_g = gv_questsEscortEnemyGroup[lv_questIndex];
                        auto416668BD_u = UnitGroupCount(auto416668BD_g, c_unitCountAll);
                        for (;; auto416668BD_u -= 1) {
                            auto416668BD_var = UnitGroupUnitFromEnd(auto416668BD_g, auto416668BD_u);
                            if (auto416668BD_var == null) { break; }
                            UnitIssueOrder(auto416668BD_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), UnitGetPosition(lv_escortUnit)), c_orderQueueReplace);
                        }
                    }

                }
                else {
                    TextTagCreate(lv_tempText[4], 20, PointWithOffsetPolar(UnitGetPosition(lv_escortUnit), 0.0, libNtve_gf_RandomAngle()), 0.7, true, true, lv_playerGroup);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.8);
                    gv_questsEscortRunning[lv_questIndex] = 0;
                    auto7ED70186_g = lv_playerGroup;
                    auto7ED70186_var = -1;
                    while (true) {
                        auto7ED70186_var = PlayerGroupNextPlayer(auto7ED70186_g, auto7ED70186_var);
                        if (auto7ED70186_var < 0) { break; }
                        gv_questsPlayerProgress[auto7ED70186_var][lv_questIndex] = 3;
                        gf_BankSaveBank(auto7ED70186_var, gv_banksSlotSelected[auto7ED70186_var], 0);
                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto7ED70186_var), 125.0, 0.0);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/C90A4B5B"), PlayerGroupSingle(auto7ED70186_var));
                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_questIndex][2]][2], PlayerGroupSingle(auto7ED70186_var), true);
                    }
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.000000 1.500000");
                    Wait(1.5, c_timeGame);
                    UnitRemove(lv_escortUnit);
                    return true;
                }
            }
        }

        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_escortUnit) == false)) {
        gv_questsEscortRunning[lv_questIndex] = 0;
        UnitRemove(lv_escortUnit);
        auto3C0ED28E_g = gv_questsEscortEnemyGroup[lv_questIndex];
        auto3C0ED28E_u = UnitGroupCount(auto3C0ED28E_g, c_unitCountAll);
        for (;; auto3C0ED28E_u -= 1) {
            auto3C0ED28E_var = UnitGroupUnitFromEnd(auto3C0ED28E_g, auto3C0ED28E_u);
            if (auto3C0ED28E_var == null) { break; }
            UnitRemove(auto3C0ED28E_var);
        }
        auto8E21A8F1_g = lv_playerGroup;
        auto8E21A8F1_var = -1;
        while (true) {
            auto8E21A8F1_var = PlayerGroupNextPlayer(auto8E21A8F1_g, auto8E21A8F1_var);
            if (auto8E21A8F1_var < 0) { break; }
            SoundPlayForPlayer(SoundLink("QuestFailed", -1), c_maxPlayers, PlayerGroupSingle(auto8E21A8F1_var), 125.0, 0.0);
            gv_questsPlayerProgress[auto8E21A8F1_var][lv_questIndex] = 1;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_questIndex][1]][1], PlayerGroupSingle(auto8E21A8F1_var), true);
            lv_index = 1;
            for ( ; ( (autoA4246A12_ai >= 0 && lv_index <= autoA4246A12_ae) || (autoA4246A12_ai < 0 && lv_index >= autoA4246A12_ae) ) ; lv_index += autoA4246A12_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8E21A8F1_var][lv_index] == lv_questIndex)) {
                    gv_questsPlayerActiveQuests[auto8E21A8F1_var][lv_index] = 0;
                    gv_questsPlayerActiveProgress[auto8E21A8F1_var][lv_index][1] = 0;
                    gv_questsPlayerActiveProgress[auto8E21A8F1_var][lv_index][2] = 0;
                    libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(auto8E21A8F1_var));
                    DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index][1], PlayerGroupSingle(auto8E21A8F1_var), false);
                }

            }
        }
    }

    return true;
}

void gf_QuestsRewards (int lp_trigPlayer, int lp_questComplete) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_tempQuest;
    int lv_rewardType;
    int lv_rewardType2;
    int lv_rewardEXP;
    int lv_rewardAmount;
    fixed[5] lv_tempMath;
    int lv_index;
    int lv_index2;
    int lv_index3;

    // Automatic Variable Declarations
    int autoD93587A4_val;
    int autoC82E2A4D_val;
    int auto3D8BC75F_val;
    const int auto0A3CE1F5_ae = 5;
    const int auto0A3CE1F5_ai = 1;
    const int autoB0C0EA15_ae = 5;
    const int autoB0C0EA15_ai = 1;
    int auto97B01A5A_ae;
    const int auto97B01A5A_ai = 1;
    const int autoD5709A68_ae = 2;
    const int autoD5709A68_ai = 1;
    const int auto479ABFB5_ae = 5;
    const int auto479ABFB5_ai = 1;
    int autoAE56CDCA_val;
    const int auto8828B5F0_ae = 5;
    const int auto8828B5F0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_tempQuest = lp_questComplete;
    lv_rewardType = gv_questsQuestReward[lv_tempQuest][1];
    lv_rewardType2 = gv_questsQuestReward[lv_tempQuest][2];
    lv_rewardAmount = gv_questsQuestReward[lv_tempQuest][3];
    lv_rewardEXP = gv_questsQuestReward[lv_tempQuest][4];
    gv_playerCurrency[lv_trigPlayer][3] += 1;
    gv_playerStatisticsGeneral[lv_trigPlayer][6] += 1;
    gv_playerStatisticsAchievements[lv_trigPlayer][3][2] += 1;
    libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
    if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) {
        gv_playerStatisticsGeneral[lv_trigPlayer][7] += lv_rewardEXP;
        gv_playerHeroHeroLevelExp[lv_trigPlayer][2] += lv_rewardEXP;
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] >= gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])) {
            lv_tempMath[1] = AbsI((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] - gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]));
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gv_playerHeroHeroLevelExp[lv_trigPlayer][2] = FixedToInt(lv_tempMath[1]);
            gf_HeroHeroLevels(lv_trigPlayer);
        }

        lv_tempMath[1] = (gv_eXPDialogWidth / 100.0);
        lv_tempMath[2] = ((100.0 / gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) * gv_playerHeroHeroLevelExp[lv_trigPlayer][2]);
        lv_tempMath[1] = (lv_tempMath[1] * lv_tempMath[2]);
        libNtve_gf_SetDialogItemTooltip(gv_eXPDialogItems[0], (StringExternal("Param/Value/9CBC53D5") + (IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][2]) + (StringExternal("Param/Value/69D1D115") + IntToText(gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])))), PlayerGroupSingle(lv_trigPlayer));
        DialogControlSetSize(gv_eXPDialogItems[2], PlayerGroupSingle(lv_trigPlayer), FixedToInt(lv_tempMath[1]), DialogControlGetHeight(gv_eXPDialogItems[2], lv_trigPlayer));
    }

    autoD93587A4_val = lv_rewardType;
    if (autoD93587A4_val == 1) {
        autoC82E2A4D_val = lv_rewardType2;
        if (autoC82E2A4D_val == 1) {
            gv_playerStatisticsGeneral[lv_trigPlayer][4] += lv_rewardAmount;
            gv_playerCurrency[lv_trigPlayer][1] += lv_rewardAmount;
            gv_playerStatisticsAchievements[lv_trigPlayer][1][2] += lv_rewardAmount;
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
        }
        else if (autoC82E2A4D_val == 2) {
            gv_playerStatisticsGeneral[lv_trigPlayer][5] += lv_rewardAmount;
            gv_playerCurrency[lv_trigPlayer][2] += lv_rewardAmount;
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[2], IntToText(gv_playerCurrency[lv_trigPlayer][2]), PlayerGroupSingle(lv_trigPlayer));
        }
        else if (autoC82E2A4D_val == 3) {
            gv_playerStatisticsGeneral[lv_trigPlayer][6] += lv_rewardAmount;
            gv_playerCurrency[lv_trigPlayer][3] += lv_rewardAmount;
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
        }
        else if (autoC82E2A4D_val == 4) {
            if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) {
                gv_playerStatisticsGeneral[lv_trigPlayer][7] += lv_rewardAmount;
                gv_playerHeroHeroLevelExp[lv_trigPlayer][2] += lv_rewardAmount;
                if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] >= gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])) {
                    lv_tempMath[1] = AbsI((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] - gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]));
                    gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
                    gv_playerHeroHeroLevelExp[lv_trigPlayer][2] = FixedToInt(lv_tempMath[1]);
                    gf_HeroHeroLevels(lv_trigPlayer);
                }

                lv_tempMath[1] = (gv_eXPDialogWidth / 100.0);
                lv_tempMath[2] = ((100.0 / gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) * gv_playerHeroHeroLevelExp[lv_trigPlayer][2]);
                lv_tempMath[1] = (lv_tempMath[1] * lv_tempMath[2]);
                libNtve_gf_SetDialogItemTooltip(gv_eXPDialogItems[0], (StringExternal("Param/Value/5C785B7F") + (IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][2]) + (StringExternal("Param/Value/8230986D") + IntToText(gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])))), PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetSize(gv_eXPDialogItems[2], PlayerGroupSingle(lv_trigPlayer), FixedToInt(lv_tempMath[1]), DialogControlGetHeight(gv_eXPDialogItems[2], lv_trigPlayer));
            }

        }
        else {
        }
    }
    else if (autoD93587A4_val == 2) {
        gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), lv_rewardType2, 3, lv_rewardAmount);
        auto3D8BC75F_val = lv_rewardAmount;
        if (auto3D8BC75F_val == 4) {
            gv_playerStatisticsGeneral[lv_trigPlayer][11] += 1;
        }
        else if (auto3D8BC75F_val == 5) {
            gv_playerStatisticsGeneral[lv_trigPlayer][12] += 1;
        }
        else if (auto3D8BC75F_val == 6) {
            gv_playerStatisticsGeneral[lv_trigPlayer][13] += 1;
        }
        else {
        }
    }
    else if (autoD93587A4_val == 3) {
        lv_index3 = 0;
        lv_index = 1;
        for ( ; ( (auto0A3CE1F5_ai >= 0 && lv_index <= auto0A3CE1F5_ae) || (auto0A3CE1F5_ai < 0 && lv_index >= auto0A3CE1F5_ae) ) ; lv_index += auto0A3CE1F5_ai ) {
            lv_index3 += gv_playerHeroHeroStats[lv_trigPlayer][lv_index];
        }
        lv_index = 1;
        for ( ; ( (autoB0C0EA15_ai >= 0 && lv_index <= autoB0C0EA15_ae) || (autoB0C0EA15_ai < 0 && lv_index >= autoB0C0EA15_ae) ) ; lv_index += autoB0C0EA15_ai ) {
            auto97B01A5A_ae = lv_rewardAmount;
            lv_index2 = 1;
            for ( ; ( (auto97B01A5A_ai >= 0 && lv_index2 <= auto97B01A5A_ae) || (auto97B01A5A_ai < 0 && lv_index2 >= auto97B01A5A_ae) ) ; lv_index2 += auto97B01A5A_ai ) {
                lv_index3 += 1;
                if ((lv_index3 < 2005)) {
                    gf_HeroStatsIncreased(lv_trigPlayer, lv_index, true);
                }

            }
        }
    }
    else if (autoD93587A4_val == 4) {
        gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_rewardType2] = 1;
        lv_index = 1;
        for ( ; ( (autoD5709A68_ai >= 0 && lv_index <= autoD5709A68_ae) || (autoD5709A68_ai < 0 && lv_index >= autoD5709A68_ae) ) ; lv_index += autoD5709A68_ai ) {
            libNtve_gf_SetDialogItemImage(gv_heroStatsDialogKeyItems[lv_rewardType2][lv_index], gv_questsItemsIcon[lv_rewardType2][lv_index], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_heroStatsDialogKeyItems[lv_rewardType2][lv_index], gv_questsItemsNameTooltip[lv_rewardType2][2], PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else {
    }
    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "QuestReward", gv_playerHeroHero[lv_trigPlayer], 1);
    libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[2][1], (StringExternal("Param/Value/630A53A4") + gv_questsQuestText[lv_tempQuest][0]), PlayerGroupSingle(lv_trigPlayer));
    lv_index2 = 0;
    for ( ; ( (auto479ABFB5_ai >= 0 && lv_index2 <= auto479ABFB5_ae) || (auto479ABFB5_ai < 0 && lv_index2 >= auto479ABFB5_ae) ) ; lv_index2 += auto479ABFB5_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[2][lv_index2], PlayerGroupSingle(lv_trigPlayer), 0.2, 20.0);
    }
    autoAE56CDCA_val = lv_tempQuest;
    if (autoAE56CDCA_val == 1) {
        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 4)) {
            Wait(1.0, c_timeGame);
            gv_tutorialPlayer[lv_trigPlayer] = 4;
        }
        else {
            gf_TutorialUpdate(lv_trigPlayer, 4);
        }
    }
    else if (autoAE56CDCA_val == 12) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 3)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 3;
        }

    }
    else if (autoAE56CDCA_val == 17) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 4)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 4;
        }

    }
    else if (autoAE56CDCA_val == 27) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 5)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 5;
        }

    }
    else if (autoAE56CDCA_val == 46) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 6)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 6;
        }

    }
    else if (autoAE56CDCA_val == 78) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 8)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 8;
        }

    }
    else if (autoAE56CDCA_val == 100) {
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][0] < 9)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 9;
        }

    }
    else if (autoAE56CDCA_val == 65) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
    }
    else if (autoAE56CDCA_val == 68) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", true);
    }
    else if (autoAE56CDCA_val == 73) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "HoverPad", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "HoverPad", true);
    }
    else if (autoAE56CDCA_val == 92) {
        CameraShakeStart(lv_trigPlayer, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 1.5, 100.0, 4.0);
        SoundPlayForPlayer(SoundLink("Event_EarthquakeRumble", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
    }
    else if (autoAE56CDCA_val == 110) {
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "SnowmansWrath", gv_playerHeroHero[lv_trigPlayer], 1);
    }
    else if (autoAE56CDCA_val == 124) {
        if ((gv_playerVersionBeta[lv_trigPlayer] < 10)) {
            gv_playerVersionBeta[lv_trigPlayer] = 10;
            libNtve_gf_SetDialogItemText(gv_newsDialogItems[2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            DialogSetVisible(gv_newsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
            libNtve_gf_SetDialogItemTextWriteout(gv_newsDialogItems[2], true, PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTextWriteoutDuration(gv_newsDialogItems[2], 5.0, PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_newsDialogItems[2], StringExternal("Param/Value/8FE38155"), PlayerGroupSingle(lv_trigPlayer));
            gv_playerStatisticsAchievements[lv_trigPlayer][12][2] += 1;
        }

    }
    else if (autoAE56CDCA_val == 130) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad", 1);
    }
    else if (autoAE56CDCA_val == 131) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad2", 1);
    }
    else if (autoAE56CDCA_val == 133) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HearthStone", 1);
    }
    else {
    }
    SoundPlayForPlayer(SoundLink("UI_Victory_All", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.8);
    gv_playerStatisticsGeneral[lv_trigPlayer][3] += 1;
    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
    if ((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 0) && (TriggerIsEnabled(gt_TestGlornify) == false)) {
        Wait(5.0, c_timeGame);
    }
    else {
        Wait(0.5, c_timeGame);
    }
    lv_index2 = 0;
    for ( ; ( (auto8828B5F0_ai >= 0 && lv_index2 <= auto8828B5F0_ae) || (auto8828B5F0_ai < 0 && lv_index2 >= auto8828B5F0_ae) ) ; lv_index2 += auto8828B5F0_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[2][lv_index2], PlayerGroupSingle(lv_trigPlayer), 2.0, 100.0);
    }
}

void gf_InitVariablesInvasionBeastmasterRaidsLegendaryHats () {
    // Variable Declarations
    int lv_index;
    fixed[4] lv_tempIncreases;
    fixed lv_tempMath;

    // Automatic Variable Declarations
    const int auto4580E98E_ae = 100;
    const int auto4580E98E_ai = 1;
    const int autoB5DD4828_ae = 100;
    const int autoB5DD4828_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    gv_beastMasterCreepIcon[lv_index] = "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Bluedragonspawnoverseer";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/7EDFFADE");
    gv_beastMasterQuestUnits[lv_index][1] = "Bluedragonspawnapprentice";
    gv_beastMasterQuestUnits[lv_index][2] = "Ancientwendigo";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepSpawns[lv_index] = PointFromId(971414937);
    gv_beastMasterCreepSpawnText[lv_index] = StringExternal("Param/Value/D830C511");
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Stormwyrm";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/C301A0D0");
    gv_beastMasterQuestUnits[lv_index][1] = "Netherdrake";
    gv_beastMasterQuestUnits[lv_index][2] = "Thunderlizard";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepSpawns[lv_index] = PointFromId(383765645);
    gv_beastMasterCreepSpawnText[lv_index] = StringExternal("Param/Value/B65A4FED");
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Plagueent";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/0A219F4F");
    gv_beastMasterQuestUnits[lv_index][1] = "AncientofwindUprooted";
    gv_beastMasterQuestUnits[lv_index][2] = "Spiritwolf1";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepSpawns[lv_index] = PointFromId(1047353700);
    gv_beastMasterCreepSpawnText[lv_index] = StringExternal("Param/Value/B19B6AFD");
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Blackdragon";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/FD950316");
    gv_beastMasterQuestUnits[lv_index][1] = "Dragonbuilding";
    gv_beastMasterQuestUnits[lv_index][2] = "Mountaingiant";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepSpawns[lv_index] = PointFromId(1149464066);
    gv_beastMasterCreepSpawnText[lv_index] = StringExternal("Param/Value/311B9B49");
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Enragedowlbear";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/D3586FCF");
    gv_beastMasterQuestUnits[lv_index][1] = "Cluckers";
    gv_beastMasterQuestUnits[lv_index][2] = "Owlbear";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepSpawns[lv_index] = PointFromId(1894894923);
    gv_beastMasterCreepSpawnText[lv_index] = StringExternal("Param/Value/C6BE9388");
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Gargantuanseaturtle";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/0926E460");
    gv_beastMasterQuestUnits[lv_index][1] = "Lobstrokktidallord";
    gv_beastMasterQuestUnits[lv_index][2] = "Magnataurreaver";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Lavaspawn3";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/9DD5F5DE");
    gv_beastMasterQuestUnits[lv_index][1] = "Sludgemonstrosity";
    gv_beastMasterQuestUnits[lv_index][2] = "Elderhydra";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Crystalarachnathid";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/CB849C8B");
    gv_beastMasterQuestUnits[lv_index][1] = "Stonemaulwarchief";
    gv_beastMasterQuestUnits[lv_index][2] = "Overlordarachnathid";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Giantspider";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/37D19B80");
    gv_beastMasterQuestUnits[lv_index][1] = "Lucy";
    gv_beastMasterQuestUnits[lv_index][2] = "Chimaera";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    lv_index += 1;
    gv_beastMasterCreepType[lv_index] = "Lobstrokkdeepseer";
    gv_beastMasterCreepIcon[lv_index] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterCreepType[lv_index], "UnitIcon", c_playerAny));
    gv_beastMasterCreepDescription[lv_index] = StringExternal("Param/Value/FE63804F");
    gv_beastMasterQuestUnits[lv_index][1] = "Lobstrokktidallord";
    gv_beastMasterQuestUnits[lv_index][2] = "Ogrelord";
    gv_beastMasterQuestIcons[lv_index][1] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][1], "UnitIcon", c_playerAny));
    gv_beastMasterQuestIcons[lv_index][2] = (CatalogFieldValueGet(c_gameCatalogActor, gv_beastMasterQuestUnits[lv_index][2], "UnitIcon", c_playerAny));
    gv_beastMasterCreepIndex = lv_index;
    lv_index = 0;
    gv_dungeonsBossStunReduction[1] = "StunReduction1";
    gv_dungeonsBossStunReduction[2] = "StunReduction23";
    gv_dungeonsBossStunReduction[3] = "StunReduction32";
    gv_dungeonsBossStunReduction[4] = "StunReduction4";
    gv_dungeonsBossStunReduction[5] = "StunReduction5";
    gv_dungeonsBossStunReduction[6] = "StunReduction6";
    gv_dungeonsBossStunReduction[7] = "StunReduction7";
    gv_dungeonsBossStunReduction[8] = "StunReduction8";
    gv_dungeonsBossStunReduction[9] = "StunReduction9";
    gv_dungeonsBossStunReduction[10] = "StunReduction10";
    gv_invasionBadUnitUpgradeCount = -1;
    gv_invasionBadUnitTypes[1] = "Skeletonwarrior";
    gv_survivalUnitSpawnCount[1] = 4;
    gv_invasionBadUnitTypes[2] = "Skeletalarcher";
    gv_survivalUnitSpawnCount[2] = 3;
    gv_invasionBadUnitTypes[3] = "Skeletalmage";
    gv_survivalUnitSpawnCount[3] = 3;
    gv_invasionBadUnitTypes[4] = "Skeletalorc";
    gv_survivalUnitSpawnCount[4] = 1;
    gv_invasionBadUnitTypes[5] = "Ghoul";
    gv_survivalUnitSpawnCount[5] = 2;
    gv_invasionBadUnitTypes[6] = "Zombie";
    gv_survivalUnitSpawnCount[6] = 6;
    gv_invasionBadUnitTypes[7] = "Sludgeminion";
    gv_survivalUnitSpawnCount[7] = 3;
    gv_invasionBadUnitTypes[8] = "Greatervoidwalker";
    gv_survivalUnitSpawnCount[8] = 2;
    gv_invasionBadUnitTypes[9] = "Nerubianseer";
    gv_survivalUnitSpawnCount[9] = 1;
    gv_survivalUnitSpawnCount[10] = 1;
    gv_survivalBossTypes[1] = "Magtheridon";
    gv_survivalBossTypes[2] = "Voidwalker";
    gv_survivalBossTypes[3] = "Doomguard";
    gv_survivalBossTypes[4] = "Cryptlord";
    gv_survivalBossTypes[5] = "Mannoroth";
    gv_survivalBossTypes[6] = "Airbarge";
    gv_survivalBossTypes[7] = "Fleshgolem";
    gv_survivalBossTypes[8] = "Tichondrius";
    gv_survivalBossTypes[9] = "Infernal";
    gv_survivalBossTypes[10] = "Lich";
    gv_invasionGoodUnitUpgradeCount = 1;
    gv_invasionGoodUnitTypes[1] = "Jailorkassan";
    gv_invasionGoodUnitTypes[2] = "Archer2";
    gv_invasionGoodUnitTypes[3] = "Highelvenswordsman";
    gv_invasionGoodUnitTypes[4] = "Emissary";
    gv_invasionGoodUnitTypes[5] = "Knight";
    lv_index = 0;
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/F951A2C6");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/CA36E277");
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/77AA6768");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/D29F2B45");
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/C7DDD658");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/B6D9D582");
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/0EC420D9");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/B21DDA73");
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/1A6E23CA");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/87CA062F");
    lv_index += 1;
    gv_invasionRiskLevels[lv_index] = StringExternal("Param/Value/BF545212");
    gv_invasionRiskAssessment[lv_index] = StringExternal("Param/Value/9F62A6FB");
    lv_index = 0;
    gv_invasionTime = 630;
    TimerStart(gv_invasionTimer, gv_invasionTime, false, c_timeGame);
    gv_beastMasterCreepCosts[1][0] = 300;
    gv_beastMasterCreepCosts[2][0] = -180;
    gv_invasionBaseUpgradeCost[0] = 400;
    lv_tempIncreases[1] = 5.5;
    lv_tempIncreases[2] = 0.3;
    lv_tempIncreases[3] = 0.1028;
    lv_index = 1;
    for ( ; ( (auto4580E98E_ai >= 0 && lv_index <= auto4580E98E_ae) || (auto4580E98E_ai < 0 && lv_index >= auto4580E98E_ae) ) ; lv_index += auto4580E98E_ai ) {
        lv_tempMath = (gv_invasionBaseUpgradeCost[(lv_index - 1)] / 10);
        lv_tempMath += (lv_tempIncreases[1] + ((lv_tempIncreases[2] * ((lv_tempIncreases[3] - (lv_index * 0.0002)) * lv_index)) * lv_index));
        gv_invasionBaseUpgradeCost[lv_index] = (FixedToInt(lv_tempMath) * 10);
        lv_tempMath = (gv_beastMasterCreepCosts[1][(lv_index - 1)] / 10);
        lv_tempMath += (lv_tempIncreases[1] + ((lv_tempIncreases[2] * ((lv_tempIncreases[3] - (lv_index * 0.0001)) * lv_index)) * lv_index));
        gv_beastMasterCreepCosts[1][lv_index] = (FixedToInt(lv_tempMath) * 10);
        lv_tempMath = gv_beastMasterCreepCosts[2][(lv_index - 1)];
        lv_tempMath += lv_index;
        gv_beastMasterCreepCosts[2][lv_index] = FixedToInt(lv_tempMath);
    }
    lv_index = 1;
    for ( ; ( (autoB5DD4828_ai >= 0 && lv_index <= autoB5DD4828_ae) || (autoB5DD4828_ai < 0 && lv_index >= autoB5DD4828_ae) ) ; lv_index += autoB5DD4828_ai ) {
        gv_beastMasterCreepCosts[1][lv_index] *= 10;
        gv_invasionBaseUpgradeCost[lv_index] *= 10;
    }
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/793F2EF2");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 25;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryPhysDamage";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/D6D5BA9B");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 23;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendarySpellDamage";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/A22AC78D");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 20;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryCastSpeed";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/943D119E");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 14;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryLeech";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/D9A6B890");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 8;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryMoveSpeed";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/937DF962");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 8;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryPDR";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/C1A320FA");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 7;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendarySDR";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/45146D61");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 6;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryRegen";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/F9039665");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 7;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendarySight";
    gv_legendaryModsIndex += 1;
    gv_legendaryModsNames[gv_legendaryModsIndex] = StringExternal("Param/Value/0C6BC226");
    gv_legendaryModsMF[gv_legendaryModsIndex] = 3;
    gv_legendaryMods[gv_legendaryModsIndex] = "LegendaryMod";
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "ArchTimmy";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1176267344);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/CC518977");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("VillagerKidWhat", 2);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "EternalPhoenix";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1876927631);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/3389181C");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("PhoenixWhat", -1);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 2;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Phoenixegg";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1876927631);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringToText("");
    gv_raidsBossesSound[gv_raidsBossesIndex] = null;
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Icetuskmammoth";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1537618846);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/5F63B44A");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("MammothWhat", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Ancienthydra";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(51910829);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/37FFDD5F");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("BigWaterStep", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Obsidiandestroyer";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(655995279);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/EE1F1B5A");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("TidalGuardianWhat", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Infernaljuggernaut";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(851949601);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/AA08EB97");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("InfernalMachineWhat", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Cairnebloodhoof";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1842374688);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/3CCC3658");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("Cow2_What", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Seaelemental";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(2110877356);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/A3279826");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("CreepTower_Death", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Satyrshadowdancer";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(2122892099);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/7FD9E4AD");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("SatyrReady", -1);
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Draeneiharbinger";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1363891608);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/FCA55C9B");
    gv_raidsBossesSound[gv_raidsBossesIndex] = SoundLink("MurlocAggro", -1);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 2;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Akama";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1363891608);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringToText("");
    gv_raidsBossesSound[gv_raidsBossesIndex] = null;
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Eredarwarlock";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(366882562);
    gv_raidsBossesText[gv_raidsBossesIndex] = StringExternal("Param/Value/6C38D598");
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 6;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Sylvanusbanshee";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(2009472921);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Possessedgromhellscream";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(720448533);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Revenantofthedepths";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(21705958);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Wargolem";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(1326220628);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_raidsBossesIndex += 1;
    gv_raidsBosses[gv_raidsBossesIndex] = "Netherdragon";
    gv_raidsBossesRegions[gv_raidsBossesIndex] = PointFromId(315574543);
    gv_raidsBossesMulti[gv_raidsBossesIndex] = 0;
    gv_hatsTempGroupsHat[1] = "Testers1";
    gv_hatsTempGroupsHat[2] = "Testers2";
    gv_hatsTempGroupsHat[3] = "Testers3";
    gv_hatsTempGroupsHat[4] = "HallOfFame1";
    gv_hatsTempGroupsHat[5] = "HallOfFame2";
    gv_hatsIndex = 0;
    lv_index = 0;
    gv_hatsIndex += 1;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/10DFDE4C");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead1";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/279FC429");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead12";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/86632116");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead13";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/79C391C1");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead14";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/62275088");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead15";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/091BF645");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead152";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/702FACB2");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead1522";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/3208869E");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead15222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/4155472D");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead152222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/29806BEC");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead1522222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/5FA9AA22");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 5000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead15222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/3576D0C3");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 6500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Overhead152222222";
    lv_index = 0;
    gv_hatsIndex += 1;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/0A134402");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin1";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/212834DB");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin12";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/47CE9E0C");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin122";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/4744FC12");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin1222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/7927185D");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin12222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/7A57EFAB");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin122222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/F0E1BDB7");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin1222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/B53FC6B2");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin12222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/F9574418");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin122222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/B4BA4C48");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin1222222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/3D94134B");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 5500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin12222222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/3A48ED87");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 7000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Origin122222222222";
    lv_index = 0;
    gv_hatsIndex += 1;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/6EA02BB0");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet1";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/23DC6FF1");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet12";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/86081BE6");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet122";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/0D7A3484");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet1222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/0E0BAD99");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet12222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/C0ADD2F5");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet122222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/82AD6F2A");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 4000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet1222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/FF22D93A");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 5000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet12222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/87D15F7D");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 6000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet122222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/43784E3E");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 6500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet1222222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/E4941583");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 7500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet12222222222";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/6C60E9B3");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 10000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Pet122222222222";
    lv_index = 0;
    gv_hatsIndex += 1;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/457E6592");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/9F222DB3");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 1000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/1307DFE6");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/2ADE41A1");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 2500;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = "Account2";
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/1410134F");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/AD792137");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 3000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/8F7E9493");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/CE9A2C87");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 5000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/31BD3208");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/45D3FF46");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 6000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/D9764ADB");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/76642345");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 9000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/8CC4075F");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/271CC9C0");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 10000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/E930F076");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/8BC322FC");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 14000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/687491D7");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/58D57CCB");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 15000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/76EA47F3");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/B3045498");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 7000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/C4FCF46F");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/078EDEC1");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 11000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
    lv_index += 1;
    gv_hatsNameDescription[gv_hatsIndex][lv_index][1] = StringExternal("Param/Value/8F1B1F30");
    gv_hatsNameDescription[gv_hatsIndex][lv_index][2] = StringExternal("Param/Value/73196BA3");
    gv_hatsCosts[gv_hatsIndex][lv_index] = 15000;
    gv_hatsBehavior[gv_hatsIndex][lv_index] = null;
}

void gf_DialogCreateInvasionBeastmasterHats () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int lv_tempInt;
    text[9] lv_tempText;
    text[9] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;

    // Automatic Variable Declarations
    const int auto3E2ED5F1_ae = 15;
    const int auto3E2ED5F1_ai = 1;
    const int autoCE6F37F9_ae = 3;
    const int autoCE6F37F9_ai = 1;
    const int auto49D5B0AC_ae = 15;
    const int auto49D5B0AC_ai = 1;
    const int autoDBD30E92_ae = 3;
    const int autoDBD30E92_ai = 1;
    const int auto88BC2879_ae = 2;
    const int auto88BC2879_ai = 1;
    const int autoF6D38132_ae = 15;
    const int autoF6D38132_ai = 1;
    const int autoE38C3251_ae = 3;
    const int autoE38C3251_ai = 1;
    const int auto47903436_ae = 2;
    const int auto47903436_ai = 1;
    const int auto6FEEEDB0_ae = 7;
    const int auto6FEEEDB0_ai = 1;
    const int auto3DE9A1C3_ae = 4;
    const int auto3DE9A1C3_ai = 1;
    const int auto58F69671_ae = 10;
    const int auto58F69671_ai = 1;
    const int auto52B1DC3B_ae = 2;
    const int auto52B1DC3B_ai = 1;
    const int auto41EEACB2_ae = 10;
    const int auto41EEACB2_ai = 1;
    const int autoCECEB448_ae = 2;
    const int autoCECEB448_ai = 1;
    const int auto5D686E32_ae = 20;
    const int auto5D686E32_ai = 1;
    const int auto2AFD0671_ae = 2;
    const int auto2AFD0671_ai = 1;
    const int auto0D1EE66A_ae = 5;
    const int auto0D1EE66A_ai = 1;
    const int auto3AEAA8AF_ae = 4;
    const int auto3AEAA8AF_ai = 1;
    const int auto42502B0E_ae = 3;
    const int auto42502B0E_ai = 1;
    const int auto28DEA3E1_ae = 7;
    const int auto28DEA3E1_ai = 1;
    const int auto0811B8EB_ae = 10;
    const int auto0811B8EB_ai = 1;
    const int autoDBDE8E21_ae = 2;
    const int autoDBDE8E21_ai = 1;
    const int auto4FACF58D_ae = 4;
    const int auto4FACF58D_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(1000, 700, c_anchorCenter, -130, -100, true);
    gv_invasionDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 50;
    lv_xSize = 800;
    lv_ySize = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto3E2ED5F1_ai >= 0 && lv_index <= auto3E2ED5F1_ae) || (auto3E2ED5F1_ai < 0 && lv_index >= auto3E2ED5F1_ae) ) ; lv_index += auto3E2ED5F1_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 700)), ((lv_yPos + 30) + RandomInt(1, 500)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 290), (lv_yPos + 25), StringExternal("Param/Value/BE2FA056"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnthecaptain.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/79B94139");
    lv_tempText[2] = StringExternal("Param/Value/20A42083");
    lv_tempText[3] = StringExternal("Param/Value/4BF57243");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index2 = 1;
    for ( ; ( (autoCE6F37F9_ai >= 0 && lv_index2 <= autoCE6F37F9_ae) || (autoCE6F37F9_ai < 0 && lv_index2 >= autoCE6F37F9_ae) ) ; lv_index2 += autoCE6F37F9_ai ) {
        lv_xSize = 220;
        lv_ySize = 70;
        lv_xPos = (-170 + (lv_index2 * 280));
        lv_yPos = 590;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_invasionDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 355;
    lv_yPos = 448;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 78), StringExternal("Param/Value/009E5F9F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 50, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos + 95), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 109), StringExternal("Param/Value/A2F88337"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_invasionDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 42, 42, c_anchorTopLeft, (lv_xPos + 49), (lv_yPos + 99), StringToText(""), gv_currencyIcons[2][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 95), StringToText(""), gv_currencyIcons[2][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xPos = 385;
    lv_yPos = 130;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringExternal("Param/Value/44C9BA47"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos + 0), StringExternal("Param/Value/4EA336DC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_invasionDialogItems[2] = DialogControlLastCreated();
    lv_xPos = 210;
    lv_yPos = 190;
    lv_xSize = 640;
    lv_ySize = 185;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 390, 40, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 25), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 17), StringExternal("Param/Value/49A7FE35"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 65.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 570, 135, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 30), StringExternal("Param/Value/F82D06AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_invasionDialogItems[3] = DialogControlLastCreated();
    lv_xPos = 150;
    lv_yPos = 375;
    lv_xSize = 700;
    lv_ySize = 167;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 345, 40, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 25), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 17), StringExternal("Param/Value/27A6BAED"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 65.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 630, 120, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 30), StringExternal("Param/Value/21D238E3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_invasionDialogItems[4] = DialogControlLastCreated();
    DialogCreate(800, 800, c_anchorCenter, -300, -100, true);
    gv_beastMasterDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 50;
    lv_xSize = 650;
    lv_ySize = 700;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto49D5B0AC_ai >= 0 && lv_index <= auto49D5B0AC_ae) || (auto49D5B0AC_ai < 0 && lv_index >= auto49D5B0AC_ae) ) ; lv_index += auto49D5B0AC_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 40)), (50 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 550)), ((lv_yPos + 30) + RandomInt(1, 550)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 230), (lv_yPos + 25), StringExternal("Param/Value/B4287A5D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 460, 500, c_anchorTopLeft, (lv_xPos + 120), (lv_yPos + 95), StringExternal("Param/Value/BC9BBF3A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 0;
    lv_yPos = 15;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnchaoswolfrider.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/8D31D5A7");
    lv_tempText[2] = StringExternal("Param/Value/FF588212");
    lv_tempText[3] = StringExternal("Param/Value/E9933E4B");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_xSize = 200;
    lv_ySize = 70;
    lv_yPos = 685;
    lv_xPos = 105;
    lv_index2 = 1;
    for ( ; ( (autoDBD30E92_ai >= 0 && lv_index2 <= autoDBD30E92_ae) || (autoDBD30E92_ai < 0 && lv_index2 >= autoDBD30E92_ae) ) ; lv_index2 += autoDBD30E92_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_beastMasterDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 29), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 220;
    }
    lv_xSize = 100;
    lv_ySize = 100;
    lv_xPos = 245;
    lv_yPos = 545;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 210, 65, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos - 114), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 135), (lv_yPos - 95), StringExternal("Param/Value/A382F2C9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogButtons[0] = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto88BC2879_ai >= 0 && lv_index <= auto88BC2879_ae) || (auto88BC2879_ai < 0 && lv_index >= auto88BC2879_ae) ) ; lv_index += auto88BC2879_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 270, 50, c_anchorTopLeft, (lv_xPos - 80), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos - 30), (lv_yPos - 32), StringExternal("Param/Value/C048A4D1"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_beastMasterDialogItems[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_beastMasterDialogItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 65), (lv_ySize + 65), c_anchorTopLeft, (lv_xPos - 30), (lv_yPos - 35), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_beastMasterDialogItems[lv_index][3] = DialogControlLastCreated();
        lv_xPos += 260;
    }
    DialogCreate(1300, 900, c_anchorCenter, 100, -100, true);
    gv_beastMasterDialogMonsterBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1600, c_anchorTopLeft, -50, -50, StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_xPos = 100;
    lv_yPos = 50;
    lv_xSize = 900;
    lv_ySize = 720;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoF6D38132_ai >= 0 && lv_index <= autoF6D38132_ae) || (autoF6D38132_ai < 0 && lv_index >= autoF6D38132_ae) ) ; lv_index += autoF6D38132_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 40)), (50 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 800)), ((lv_yPos + 30) + RandomInt(1, 620)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 360), (lv_yPos + 25), StringExternal("Param/Value/A70FD38C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnchaoswolfrider.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/B8680FE4");
    lv_tempText[2] = StringExternal("Param/Value/570C1145");
    lv_tempText[3] = StringExternal("Param/Value/0B6C9494");
    lv_tempText[4] = StringExternal("Param/Value/FC0D3605");
    lv_tempText[5] = StringExternal("Param/Value/5CDEC57E");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_tempColor[5] = Color(100.00, 0.00, 0.00);
    lv_xSize = 200;
    lv_ySize = 70;
    lv_yPos = 720;
    lv_index2 = 1;
    for ( ; ( (autoE38C3251_ai >= 0 && lv_index2 <= autoE38C3251_ae) || (autoE38C3251_ai < 0 && lv_index2 >= autoE38C3251_ae) ) ; lv_index2 += autoE38C3251_ai ) {
        lv_xPos = (-77 + (lv_index2 * 260));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_beastMasterDialogMonsterButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 29), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_yPos = 474;
    lv_xPos = 545;
    lv_xSize = 170;
    lv_ySize = 60;
    lv_index2 = 4;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_beastMasterDialogMonsterButtons[lv_index2] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 17), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yPos = 542;
    lv_xPos = 630;
    lv_xSize = 200;
    lv_ySize = 70;
    lv_index2 = 5;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_beastMasterDialogMonsterButtons[lv_index2] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 19), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 110;
    lv_ySize = 110;
    lv_xPos = 40;
    lv_tempInt = 0;
    lv_index = 1;
    for ( ; ( (auto47903436_ai >= 0 && lv_index <= auto47903436_ae) || (auto47903436_ai < 0 && lv_index >= auto47903436_ae) ) ; lv_index += auto47903436_ai ) {
        lv_yPos = 30;
        lv_index2 = 1;
        for ( ; ( (auto6FEEEDB0_ai >= 0 && lv_index2 <= auto6FEEEDB0_ae) || (auto6FEEEDB0_ai < 0 && lv_index2 >= auto6FEEEDB0_ae) ) ; lv_index2 += auto6FEEEDB0_ai ) {
            if ((lv_index == 1) && (lv_index2 <= 2)) {
                lv_yPos += 110;
            }
            else {
                lv_tempInt += 1;
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btn3m1.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_beastMasterDialogMonsterItems[lv_tempInt][2] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), StringToText(""), gv_dialogHighlighted);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
                gv_beastMasterDialogMonsterItems[lv_tempInt][1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                lv_yPos += 110;
            }
        }
        lv_xPos += 915;
    }
    lv_xSize = 265;
    lv_ySize = 370;
    lv_xPos = 240;
    lv_yPos = 210;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\haven_grass_rocky_low.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\decal_zerg_0006_01.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 90, 120, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos + 95), StringToText(""), lv_tempSplat[1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    gv_beastMasterDialogMonsterStats[0] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "MineralCrystalGlow", PlayerGroupAll());
    PortraitWaitForLoad(PortraitGetTriggerControl(DialogControlLastCreated()));
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.800000 0.100000");
    lv_index = 1;
    for ( ; ( (auto3DE9A1C3_ai >= 0 && lv_index <= auto3DE9A1C3_ae) || (auto3DE9A1C3_ai < 0 && lv_index >= auto3DE9A1C3_ae) ) ; lv_index += auto3DE9A1C3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorTopLeft, (190 + (lv_index * 60)), (lv_yPos + 290), StringToText(""), "Assets\\Textures\\dynamicgrassaiurjunglesplat_diff.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), (lv_ySize + 33), c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 15), StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_tempText[1] = StringExternal("Param/Value/2CD73716");
    lv_tempText[2] = StringExternal("Param/Value/E529EB5C");
    lv_xPos = 420;
    lv_yPos = 145;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 68, c_anchorTopLeft, (lv_xPos - 85), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), lv_tempText[1], ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 5), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[1] = DialogControlLastCreated();
    lv_xPos = 530;
    lv_yPos = 210;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 370, 60, c_anchorTopLeft, (lv_xPos - 70), (lv_yPos - 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), lv_tempText[2], ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 5), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[2] = DialogControlLastCreated();
    lv_yPos = 260;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 400, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 15), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[3] = DialogControlLastCreated();
    lv_xPos = 490;
    lv_yPos = 620;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 370, 64, c_anchorTopLeft, (lv_xPos - 80), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringExternal("Param/Value/8DE005D5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 145), (lv_yPos + 5), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[6] = DialogControlLastCreated();
    lv_xPos = 735;
    lv_yPos = 475;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 14), StringToText(""), gv_currencyIcons[3][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 10), StringToText(""), gv_currencyIcons[3][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 16), StringExternal("Param/Value/9FB1273F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[4] = DialogControlLastCreated();
    lv_xPos = 500;
    lv_yPos = 650;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 56, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 1), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 10), StringToText(""), gv_currencyIcons[1][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos - 4), (lv_yPos + 6), StringToText(""), gv_currencyIcons[1][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos - 110), (lv_yPos + 14), StringExternal("Param/Value/26799F03"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 53), (lv_yPos + 17), StringExternal("Param/Value/8544FD84"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastMasterDialogMonsterStats[5] = DialogControlLastCreated();
    DialogCreate(2400, 1400, c_anchorCenter, 0, 0, true);
    gv_beastMasterDialogReleaseBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1400, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    lv_xPos = 700;
    lv_yPos = 400;
    lv_xSize = 500;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto58F69671_ai >= 0 && lv_index <= auto58F69671_ae) || (auto58F69671_ai < 0 && lv_index >= auto58F69671_ae) ) ; lv_index += auto58F69671_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 20)), (35 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 350)), ((lv_yPos + 15) + RandomInt(1, 200)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 160), (lv_yPos + 26), StringExternal("Param/Value/0F1EA1CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 425, 100, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 90), StringExternal("Param/Value/AB5E75EA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 725;
    lv_yPos = 600;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/84D4BB01");
    lv_tempText[2] = StringExternal("Param/Value/F5AA79FC");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto52B1DC3B_ai >= 0 && lv_index <= auto52B1DC3B_ae) || (auto52B1DC3B_ai < 0 && lv_index >= auto52B1DC3B_ae) ) ; lv_index += auto52B1DC3B_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_beastMasterDialogReleaseButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 15), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 250;
    }
    DialogCreate(400, 325, c_anchorCenter, -200, 200, true);
    gv_beastMasterDialogExitBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 25;
    lv_yPos = 25;
    lv_xSize = 350;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    lv_index = 1;
    for ( ; ( (auto41EEACB2_ai >= 0 && lv_index <= auto41EEACB2_ae) || (auto41EEACB2_ai < 0 && lv_index >= auto41EEACB2_ae) ) ; lv_index += auto41EEACB2_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 35)), (20 + RandomInt(1, 35)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 290)), ((lv_yPos + 25) + RandomInt(1, 175)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 270, 300, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 35), StringExternal("Param/Value/A72514BD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 12;
    lv_yPos = 220;
    lv_xSize = 180;
    lv_ySize = 60;
    lv_tempText[1] = StringExternal("Param/Value/7C979B5E");
    lv_tempText[2] = StringExternal("Param/Value/E81B1F33");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (autoCECEB448_ai >= 0 && lv_index <= autoCECEB448_ae) || (autoCECEB448_ai < 0 && lv_index >= autoCECEB448_ae) ) ; lv_index += autoCECEB448_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_beastMasterDialogExitButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 16), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 200;
    }
    DialogCreate(1250, 550, c_anchorTop, 125, 0, true);
    gv_hatsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 75;
    lv_yPos = 50;
    lv_xSize = 1035;
    lv_ySize = 475;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 200), 70, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 70, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 45), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto5D686E32_ai >= 0 && lv_index <= auto5D686E32_ae) || (auto5D686E32_ai < 0 && lv_index >= auto5D686E32_ae) ) ; lv_index += auto5D686E32_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 50)), (50 + RandomInt(1, 50)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 950)), ((lv_yPos + 25) + RandomInt(1, 390)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 285), (lv_yPos + 25), StringExternal("Param/Value/27C1CC52"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 310;
    lv_yPos = 470;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/2FD0B0F5");
    lv_tempText[2] = StringExternal("Param/Value/05E9C1E2");
    lv_tempText[3] = StringExternal("Param/Value/3D71C989");
    lv_tempText[4] = StringExternal("Param/Value/605C5346");
    lv_tempText[5] = StringExternal("Param/Value/0FECB13E");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_tempColor[3] = Color(100.00, 100.00, 100.00);
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_tempColor[5] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto2AFD0671_ai >= 0 && lv_index <= auto2AFD0671_ae) || (auto2AFD0671_ai < 0 && lv_index >= auto2AFD0671_ae) ) ; lv_index += auto2AFD0671_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 42), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 350;
    }
    lv_xPos = 990;
    lv_yPos = 150;
    lv_xSize = 195;
    lv_ySize = 65;
    lv_index = 3;
    for ( ; ( (auto0D1EE66A_ai >= 0 && lv_index <= auto0D1EE66A_ae) || (auto0D1EE66A_ai < 0 && lv_index >= auto0D1EE66A_ae) ) ; lv_index += auto0D1EE66A_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 42), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yPos += 80;
    }
    lv_xSize = 240;
    lv_ySize = 70;
    lv_xPos -= 25;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xPos -= 45;
    lv_yPos -= 105;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 270, 55, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 112), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 115), StringToText(""), gv_currencyIcons[4][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 110), StringToText(""), gv_currencyIcons[4][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 120), (lv_yPos + 125), StringExternal("Param/Value/1BAACC59"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_hatsDialogMainButtons[0] = DialogControlLastCreated();
    lv_xPos = 7;
    lv_yPos = 150;
    lv_xSize = 190;
    lv_ySize = 60;
    lv_tempText[1] = StringExternal("Param/Value/434383DC");
    lv_tempText[2] = StringExternal("Param/Value/C9D385AF");
    lv_tempText[3] = StringExternal("Param/Value/C254015D");
    lv_tempText[4] = StringExternal("Param/Value/579A4BEB");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(100.00, 100.00, 100.00);
    lv_index = 1;
    for ( ; ( (auto3AEAA8AF_ai >= 0 && lv_index <= auto3AEAA8AF_ae) || (auto3AEAA8AF_ai < 0 && lv_index >= auto3AEAA8AF_ae) ) ; lv_index += auto3AEAA8AF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogTypeButtons[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 50.20, 0.00), c_triggerBlendModeNormal);
        gv_hatsDialogTypeButtons[lv_index][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_yPos += 80;
    }
    lv_xPos = 260;
    lv_yPos = 155;
    lv_xSize = 215;
    lv_ySize = 260;
    lv_index = 0;
    lv_index = 1;
    for ( ; ( (auto42502B0E_ai >= 0 && lv_index <= auto42502B0E_ae) || (auto42502B0E_ai < 0 && lv_index >= auto42502B0E_ae) ) ; lv_index += auto42502B0E_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\tyrador_concrete_cracked_low.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\decal_terran_0081_01.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(38.43, 38.43, 38.43), c_triggerBlendModeNormal);
        gv_hatsDialogItems[lv_index][4] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), 55, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 90, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 30), StringExternal("Param/Value/A29288BE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hatsDialogItems[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 165), StringToText(""), gv_currencyIcons[4][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 160), StringToText(""), gv_currencyIcons[4][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos + 172), StringExternal("Param/Value/F511D4AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hatsDialogItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogItems[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        gv_hatsDialogItems[lv_index][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 225), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 215), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 140, 140, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 180), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_hatsDialogItems[lv_index][6] = DialogControlLastCreated();
        lv_xPos += 230;
    }
    lv_xPos = 222;
    lv_yPos = 245;
    lv_xSize = 60;
    lv_ySize = 80;
    lv_index = 6;
    for ( ; ( (auto28DEA3E1_ai >= 0 && lv_index <= auto28DEA3E1_ae) || (auto28DEA3E1_ai < 0 && lv_index >= auto28DEA3E1_ae) ) ; lv_index += auto28DEA3E1_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 50.20), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 22), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 11), StringToText(""), "Assets\\Textures\\ui_arrowwhite.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), ((lv_index * 180) + 270), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_xPos += 690;
    }
    DialogCreate(2800, 1600, c_anchorTopLeft, -50, -50, true);
    gv_hatsDialogHeroBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2800, 1800, c_anchorTopLeft, -50, -50, StringToText(""), "Assets\\Textures\\char_dirt_cracked_low.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    lv_xPos = 150;
    lv_yPos = 150;
    lv_xSize = 500;
    lv_ySize = 580;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 200), 70, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 70, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 45), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto0811B8EB_ai >= 0 && lv_index <= auto0811B8EB_ae) || (auto0811B8EB_ai < 0 && lv_index >= auto0811B8EB_ae) ) ; lv_index += auto0811B8EB_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 50)), (50 + RandomInt(1, 50)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 400)), ((lv_yPos + 25) + RandomInt(1, 420)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 130), (lv_yPos + 25), StringExternal("Param/Value/D8A4009C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 180;
    lv_yPos = 680;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/431E6790");
    lv_tempText[2] = StringExternal("Param/Value/92256E54");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (autoDBDE8E21_ai >= 0 && lv_index <= autoDBDE8E21_ae) || (autoDBDE8E21_ai < 0 && lv_index >= autoDBDE8E21_ae) ) ; lv_index += autoDBDE8E21_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogHeroMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 42), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 220;
    }
    lv_xPos = 260;
    lv_yPos = 260;
    lv_xSize = 275;
    lv_ySize = 95;
    lv_tempText[1] = StringExternal("Param/Value/72A5EBE1");
    lv_tempText[2] = StringExternal("Param/Value/503199B8");
    lv_tempText[3] = StringExternal("Param/Value/F556C024");
    lv_tempText[4] = StringExternal("Param/Value/936EA614");
    lv_index = 0;
    lv_index = 1;
    for ( ; ( (auto4FACF58D_ai >= 0 && lv_index <= auto4FACF58D_ae) || (auto4FACF58D_ai < 0 && lv_index >= auto4FACF58D_ae) ) ; lv_index += auto4FACF58D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\tyrador_concrete_cracked_low.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\decal_terran_0081_01.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(38.43, 38.43, 38.43), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), 55, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 90, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 30), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_hatsDialogHeroSelectButtons[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 225), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, (lv_xPos + 215), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 140, 140, c_anchorTopLeft, (lv_xPos + 185), (lv_yPos - 30), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_hatsDialogHeroSelectButtons[lv_index][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_yPos += 105;
    }
}

void gf_DialogUsedHatsHeroes (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempCost;

    // Automatic Variable Declarations
    int autoBA0463D4_val;
    const int auto48134409_ae = 4;
    const int auto48134409_ai = 1;
    const int auto3DB4AC52_ae = 4;
    const int auto3DB4AC52_ai = 1;
    const int autoF970BF3E_ae = 4;
    const int autoF970BF3E_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    autoBA0463D4_val = lv_dialogItemUsed;
    if (autoBA0463D4_val == gv_hatsDialogHeroMainButtons[2]) {
        gv_hatsPlayerUpgradeIndex[lv_trigPlayer] = 0;
        DialogSetVisible(gv_hatsDialogHeroBox, PlayerGroupSingle(lv_trigPlayer), false);
        return ;
    }
    else if (autoBA0463D4_val == gv_hatsDialogHeroMainButtons[1]) {
        DialogSetVisible(gv_hatsDialogHeroBox, PlayerGroupSingle(lv_trigPlayer), false);
        if ((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] > 0)) {
            gv_playerStatisticsHats[lv_trigPlayer][4][(9 + gv_hatsPlayerUpgradeIndex[lv_trigPlayer])] = 0;
            gf_HatsPreleveledHero(gv_hatsPlayerUpgradeIndex[lv_trigPlayer], lv_trigPlayer);
        }

    }
    else {
        if ((lv_dialogItemUsed == gv_hatsDialogHeroSelectButtons[1][1])) {
            gv_hatsPlayerUpgradeIndex[lv_trigPlayer] = 0;
            lv_index2 = 1;
            for ( ; ( (auto48134409_ai >= 0 && lv_index2 <= auto48134409_ae) || (auto48134409_ai < 0 && lv_index2 >= auto48134409_ae) ) ; lv_index2 += auto48134409_ai ) {
                DialogControlSetVisible(gv_hatsDialogHeroSelectButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            DialogControlSetVisible(gv_hatsDialogHeroSelectButtons[1][2], PlayerGroupSingle(lv_trigPlayer), true);
        }

        lv_index = 2;
        for ( ; ( (auto3DB4AC52_ai >= 0 && lv_index <= auto3DB4AC52_ae) || (auto3DB4AC52_ai < 0 && lv_index >= auto3DB4AC52_ae) ) ; lv_index += auto3DB4AC52_ai ) {
            if ((lv_dialogItemUsed == gv_hatsDialogHeroSelectButtons[lv_index][1]) && (gv_playerStatisticsHats[lv_trigPlayer][4][(8 + lv_index)] == 2)) {
                gv_hatsPlayerUpgradeIndex[lv_trigPlayer] = (-1 + lv_index);
                lv_index2 = 1;
                for ( ; ( (autoF970BF3E_ai >= 0 && lv_index2 <= autoF970BF3E_ae) || (autoF970BF3E_ai < 0 && lv_index2 >= autoF970BF3E_ae) ) ; lv_index2 += autoF970BF3E_ai ) {
                    DialogControlSetVisible(gv_hatsDialogHeroSelectButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
                }
                DialogControlSetVisible(gv_hatsDialogHeroSelectButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
    }
}

trigger auto_gf_HatsPreleveledHero_Trigger = null;
int auto_gf_HatsPreleveledHero_lp_buyIndex;
int auto_gf_HatsPreleveledHero_lp_trigPlayer;

void gf_HatsPreleveledHero (int lp_buyIndex, int lp_trigPlayer) {
    auto_gf_HatsPreleveledHero_lp_buyIndex = lp_buyIndex;
    auto_gf_HatsPreleveledHero_lp_trigPlayer = lp_trigPlayer;

    if (auto_gf_HatsPreleveledHero_Trigger == null) {
        auto_gf_HatsPreleveledHero_Trigger = TriggerCreate("auto_gf_HatsPreleveledHero_TriggerFunc");
    }

    TriggerExecute(auto_gf_HatsPreleveledHero_Trigger, false, false);
}

bool auto_gf_HatsPreleveledHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_buyIndex = auto_gf_HatsPreleveledHero_lp_buyIndex;
    int lp_trigPlayer = auto_gf_HatsPreleveledHero_lp_trigPlayer;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempWP;
    int lv_buyIndex;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int auto8DD10938_ae = 10;
    const int auto8DD10938_ai = 1;
    const int auto7B3A3215_ae = 2;
    const int auto7B3A3215_ai = 1;
    const int auto20299679_ae = 4;
    const int auto20299679_ai = 1;
    const int autoC345C673_ae = 4;
    const int autoC345C673_ai = 1;
    const int auto0CD15E96_ae = 6;
    const int auto0CD15E96_ai = 1;
    const int autoCA9B3854_ae = 10;
    const int autoCA9B3854_ai = 1;
    const int autoAE640477_ae = 3;
    const int autoAE640477_ai = 1;
    const int autoE555C2EA_ae = 10;
    const int autoE555C2EA_ai = 1;
    const int auto123025B9_ae = 10;
    const int auto123025B9_ai = 1;
    const int auto694265C8_ae = 27;
    const int auto694265C8_ai = 1;
    const int auto8CEF9117_ae = 36;
    const int auto8CEF9117_ai = 1;
    const int autoEE4A2267_ae = 69;
    const int autoEE4A2267_ai = 1;
    const int autoD72B66BA_ae = 138;
    const int autoD72B66BA_ai = 1;
    const int auto89FD2079_ae = 29;
    const int auto89FD2079_ai = 1;
    const int auto17416796_ae = 54;
    const int auto17416796_ai = 1;
    const int auto5F1A2864_ae = 64;
    const int auto5F1A2864_ai = 1;
    const int auto8F65AC41_ae = 71;
    const int auto8F65AC41_ai = 1;
    const int auto81F68D35_ae = 101;
    const int auto81F68D35_ai = 1;
    const int auto14B885EA_ae = 137;
    const int auto14B885EA_ai = 1;
    const int auto6E7B3613_ae = 75;
    const int auto6E7B3613_ai = 1;
    const int autoDFF1E152_ae = 81;
    const int autoDFF1E152_ai = 1;
    const int auto11F4A788_ae = 91;
    const int auto11F4A788_ai = 1;
    const int auto4F15D958_ae = 111;
    const int auto4F15D958_ai = 1;
    int auto71B8A373_ae;
    const int auto71B8A373_ai = 1;
    const int autoE155B1F1_ae = 3;
    const int autoE155B1F1_ai = 1;
    int auto2ACB8A21_ae;
    const int auto2ACB8A21_ai = 1;

    // Variable Initialization
    lv_buyIndex = lp_buyIndex;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    gv_hatsPlayerUpgradeIndex[lv_trigPlayer] = 1;
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
    libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], true, PlayerGroupSingle(lv_trigPlayer));
    DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], PlayerGroupSingle(lv_trigPlayer), true);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], PlayerGroupSingle(lv_trigPlayer), 1.0, 0.0);
    DialogSetPosition(gv_tutorialDialog2Box, c_anchorTopRight, 40, 40);
    libNtve_gf_SetDialogItemText(gv_tutorialDialog2Items[1], StringExternal("Param/Value/0BDDA89D"), PlayerGroupSingle(lv_trigPlayer));
    DialogSetTransparency(gv_tutorialDialog2Box, 100.0);
    DialogSetVisible(gv_tutorialDialog2Box, PlayerGroupSingle(lv_trigPlayer), true);
    lv_index2 = 1;
    for ( ; ( (auto8DD10938_ai >= 0 && lv_index2 <= auto8DD10938_ae) || (auto8DD10938_ai < 0 && lv_index2 >= auto8DD10938_ae) ) ; lv_index2 += auto8DD10938_ai ) {
        DialogSetTransparency(gv_tutorialDialog2Box, (100 - (lv_index2 * 10)));
        Wait(0.1, c_timeGame);
    }
    UnitClearSelection(lv_trigPlayer);
    if ((lv_buyIndex >= 1)) {
        lv_index = 1;
        for ( ; ( (auto7B3A3215_ai >= 0 && lv_index <= auto7B3A3215_ae) || (auto7B3A3215_ai < 0 && lv_index >= auto7B3A3215_ae) ) ; lv_index += auto7B3A3215_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 1;
        gf_DialogUsedHeroSelection(lv_trigPlayer, gv_heroSelectionDialogMainButtons[3][1]);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 2))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (auto20299679_ai >= 0 && lv_index <= auto20299679_ae) || (auto20299679_ai < 0 && lv_index >= auto20299679_ae) ) ; lv_index += auto20299679_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 3))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (autoC345C673_ai >= 0 && lv_index <= autoC345C673_ae) || (autoC345C673_ai < 0 && lv_index >= autoC345C673_ae) ) ; lv_index += autoC345C673_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 1;
        gf_DialogUsedHeroSelection(lv_trigPlayer, gv_heroSelectionDialogMainButtons[3][1]);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 4))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (auto0CD15E96_ai >= 0 && lv_index <= auto0CD15E96_ae) || (auto0CD15E96_ai < 0 && lv_index >= auto0CD15E96_ae) ) ; lv_index += auto0CD15E96_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 5))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (autoCA9B3854_ai >= 0 && lv_index <= autoCA9B3854_ae) || (autoCA9B3854_ai < 0 && lv_index >= autoCA9B3854_ae) ) ; lv_index += autoCA9B3854_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 1;
        gf_DialogUsedHeroSelection(lv_trigPlayer, gv_heroSelectionDialogMainButtons[3][1]);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 6))) {
            Wait(1.0, c_timeGame);
        }
        lv_index = 1;
        for ( ; ( (autoAE640477_ai >= 0 && lv_index <= autoAE640477_ae) || (autoAE640477_ai < 0 && lv_index >= autoAE640477_ae) ) ; lv_index += autoAE640477_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    if ((lv_buyIndex >= 2)) {
        lv_index = 1;
        for ( ; ( (autoE555C2EA_ai >= 0 && lv_index <= autoE555C2EA_ae) || (autoE555C2EA_ai < 0 && lv_index >= autoE555C2EA_ae) ) ; lv_index += autoE555C2EA_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        gf_DialogShowHeroSelection(lv_trigPlayer);
        Wait(0.5, c_timeGame);
        while (!((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] == 7))) {
            Wait(1.0, c_timeGame);
        }
    }

    Wait(0.5, c_timeGame);
    if ((lv_buyIndex >= 3)) {
        lv_index = 1;
        for ( ; ( (auto123025B9_ai >= 0 && lv_index <= auto123025B9_ae) || (auto123025B9_ai < 0 && lv_index >= auto123025B9_ae) ) ; lv_index += auto123025B9_ai ) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gf_HeroHeroLevels(lv_trigPlayer);
            Wait(0.1, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    lv_tempWP = 5;
    lv_index = 1;
    for ( ; ( (auto694265C8_ai >= 0 && lv_index <= auto694265C8_ae) || (auto694265C8_ai < 0 && lv_index >= auto694265C8_ae) ) ; lv_index += auto694265C8_ai ) {
        gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
        gf_QuestsRewards(lv_trigPlayer, lv_index);
    }
    lv_index = 34;
    for ( ; ( (auto8CEF9117_ai >= 0 && lv_index <= auto8CEF9117_ae) || (auto8CEF9117_ai < 0 && lv_index >= auto8CEF9117_ae) ) ; lv_index += auto8CEF9117_ai ) {
        gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
        gf_QuestsRewards(lv_trigPlayer, lv_index);
    }
    lv_index = 65;
    for ( ; ( (autoEE4A2267_ai >= 0 && lv_index <= autoEE4A2267_ae) || (autoEE4A2267_ai < 0 && lv_index >= autoEE4A2267_ae) ) ; lv_index += autoEE4A2267_ai ) {
        gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
        gf_QuestsRewards(lv_trigPlayer, lv_index);
    }
    lv_index = 138;
    for ( ; ( (autoD72B66BA_ai >= 0 && lv_index <= autoD72B66BA_ae) || (autoD72B66BA_ai < 0 && lv_index >= autoD72B66BA_ae) ) ; lv_index += autoD72B66BA_ai ) {
        gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
        gf_QuestsRewards(lv_trigPlayer, lv_index);
    }
    if ((lv_buyIndex >= 2)) {
        lv_tempWP += 2;
        lv_index = 28;
        for ( ; ( (auto89FD2079_ai >= 0 && lv_index <= auto89FD2079_ae) || (auto89FD2079_ai < 0 && lv_index >= auto89FD2079_ae) ) ; lv_index += auto89FD2079_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 37;
        for ( ; ( (auto17416796_ai >= 0 && lv_index <= auto17416796_ae) || (auto17416796_ai < 0 && lv_index >= auto17416796_ae) ) ; lv_index += auto17416796_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 64;
        for ( ; ( (auto5F1A2864_ai >= 0 && lv_index <= auto5F1A2864_ae) || (auto5F1A2864_ai < 0 && lv_index >= auto5F1A2864_ae) ) ; lv_index += auto5F1A2864_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 70;
        for ( ; ( (auto8F65AC41_ai >= 0 && lv_index <= auto8F65AC41_ae) || (auto8F65AC41_ai < 0 && lv_index >= auto8F65AC41_ae) ) ; lv_index += auto8F65AC41_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 101;
        for ( ; ( (auto81F68D35_ai >= 0 && lv_index <= auto81F68D35_ae) || (auto81F68D35_ai < 0 && lv_index >= auto81F68D35_ae) ) ; lv_index += auto81F68D35_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 136;
        for ( ; ( (auto14B885EA_ai >= 0 && lv_index <= auto14B885EA_ae) || (auto14B885EA_ai < 0 && lv_index >= auto14B885EA_ae) ) ; lv_index += auto14B885EA_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
    }

    if ((lv_buyIndex >= 3)) {
        lv_tempWP += 1;
        lv_index = 72;
        for ( ; ( (auto6E7B3613_ai >= 0 && lv_index <= auto6E7B3613_ae) || (auto6E7B3613_ai < 0 && lv_index >= auto6E7B3613_ae) ) ; lv_index += auto6E7B3613_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 77;
        for ( ; ( (autoDFF1E152_ai >= 0 && lv_index <= autoDFF1E152_ae) || (autoDFF1E152_ai < 0 && lv_index >= autoDFF1E152_ae) ) ; lv_index += autoDFF1E152_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 84;
        for ( ; ( (auto11F4A788_ai >= 0 && lv_index <= auto11F4A788_ae) || (auto11F4A788_ai < 0 && lv_index >= auto11F4A788_ae) ) ; lv_index += auto11F4A788_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
        lv_index = 102;
        for ( ; ( (auto4F15D958_ai >= 0 && lv_index <= auto4F15D958_ae) || (auto4F15D958_ai < 0 && lv_index >= auto4F15D958_ae) ) ; lv_index += auto4F15D958_ai ) {
            gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 4;
            gf_QuestsRewards(lv_trigPlayer, lv_index);
        }
    }

    gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = lv_tempWP;
    auto71B8A373_ae = lv_tempWP;
    lv_index = 2;
    for ( ; ( (auto71B8A373_ai >= 0 && lv_index <= auto71B8A373_ae) || (auto71B8A373_ai < 0 && lv_index >= auto71B8A373_ae) ) ; lv_index += auto71B8A373_ai ) {
        lv_index2 = 1;
        for ( ; ( (autoE155B1F1_ai >= 0 && lv_index2 <= autoE155B1F1_ae) || (autoE155B1F1_ai < 0 && lv_index2 >= autoE155B1F1_ae) ) ; lv_index2 += autoE155B1F1_ai ) {
            DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
        }
    }
    Wait(1.0, c_timeGame);
    auto2ACB8A21_ae = gv_questsQuestIndex;
    lv_index2 = 1;
    for ( ; ( (auto2ACB8A21_ai >= 0 && lv_index2 <= auto2ACB8A21_ae) || (auto2ACB8A21_ai < 0 && lv_index2 >= auto2ACB8A21_ae) ) ; lv_index2 += auto2ACB8A21_ai ) {
        if ((gv_questsQuestPrerequisite[lv_index2][1] < 25) && (gv_questsQuestPrerequisite[lv_index2][2] < 25) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 0)) {
            if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][2]] == 4)) {
                gv_questsPlayerProgress[lv_trigPlayer][lv_index2] = 1;
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }

    }
    Wait(1.0, c_timeGame);
    gv_hatsPlayerUpgradeIndex[lv_trigPlayer] = 0;
    UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(RegionFromId(30)), false);
    CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], PlayerGroupSingle(lv_trigPlayer), 1.0, 100.0);
    libNtve_gf_SetDialogItemAcceptMouse(gv_screenEffectsDialogItem[0][0], false, PlayerGroupSingle(lv_trigPlayer));
    DialogSetVisible(gv_tutorialDialog2Box, PlayerGroupSingle(lv_trigPlayer), false);
    return true;
}

trigger auto_gf_CreepsGlornSecondLootScreen_Trigger = null;
int auto_gf_CreepsGlornSecondLootScreen_lp_trigPlayer;
int auto_gf_CreepsGlornSecondLootScreen_lp_tempTier;

void gf_CreepsGlornSecondLootScreen (int lp_trigPlayer, int lp_tempTier) {
    auto_gf_CreepsGlornSecondLootScreen_lp_trigPlayer = lp_trigPlayer;
    auto_gf_CreepsGlornSecondLootScreen_lp_tempTier = lp_tempTier;

    if (auto_gf_CreepsGlornSecondLootScreen_Trigger == null) {
        auto_gf_CreepsGlornSecondLootScreen_Trigger = TriggerCreate("auto_gf_CreepsGlornSecondLootScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreepsGlornSecondLootScreen_Trigger, false, false);
}

bool auto_gf_CreepsGlornSecondLootScreen_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_CreepsGlornSecondLootScreen_lp_trigPlayer;
    int lp_tempTier = auto_gf_CreepsGlornSecondLootScreen_lp_tempTier;

    // Variable Declarations
    int lv_trigPlayer;
    int lv_tempTier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_tempTier = lp_tempTier;

    // Implementation
    Wait(2.0, c_timeGame);
    while (!((DialogIsVisible(gv_itemSurvivalDialogBox, lv_trigPlayer) == false))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    gf_SurvivalEnd(lv_trigPlayer, lv_tempTier, 4, 0);
    return true;
}

void gf_CreepsDungeonCleared (unit lp_killingUnit, unit lp_killedUnit, int lp_dungeonIndex) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_dungeonindex;
    int lv_index;
    int lv_index2;
    int lv_d11bonus;
    int lv_deathCount;
    bool lv_continue;

    // Automatic Variable Declarations
    playergroup auto535CB1FE_g;
    int auto535CB1FE_var;
    playergroup auto97E54490_g;
    int auto97E54490_var;
    playergroup auto5DC409A7_g;
    int auto5DC409A7_var;
    const int auto8ED0BFED_ae = gv_questsQuestSlots;
    const int auto8ED0BFED_ai = 1;
    const int autoBB3B3D27_ae = gv_questsQuestSlots;
    const int autoBB3B3D27_ai = 1;
    playergroup auto8C9C08A1_g;
    int auto8C9C08A1_var;
    playergroup auto225C0EB7_g;
    int auto225C0EB7_var;
    const int auto968D4351_ae = gv_questsQuestSlots;
    const int auto968D4351_ai = 1;
    const int autoF051FA72_ae = gv_questsQuestSlots;
    const int autoF051FA72_ai = 1;
    playergroup auto6A48DAFF_g;
    int auto6A48DAFF_var;
    const int autoB225CEEF_ae = gv_questsQuestSlots;
    const int autoB225CEEF_ai = 1;
    playergroup autoB7E0D448_g;
    int autoB7E0D448_var;
    playergroup auto8FB76477_g;
    int auto8FB76477_var;
    const int auto2D4FFE20_ae = gv_questsQuestSlots;
    const int auto2D4FFE20_ai = 1;
    const int auto3BCF7FD2_ae = gv_questsQuestSlots;
    const int auto3BCF7FD2_ai = 1;
    const int auto99C8ADB8_ae = gv_questsQuestSlots;
    const int auto99C8ADB8_ai = 1;
    const int auto6AC845C0_ae = gv_questsQuestSlots;
    const int auto6AC845C0_ai = 1;
    const int auto49056E69_ae = gv_questsQuestSlots;
    const int auto49056E69_ai = 1;
    const int auto8FBB03F5_ae = gv_questsQuestSlots;
    const int auto8FBB03F5_ai = 1;

    // Variable Initialization
    lv_trigPlayer = UnitGetOwner(lp_killingUnit);
    lv_dungeonindex = lp_dungeonIndex;

    // Implementation
    if ((lv_dungeonindex == 10)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FinalPortal", 0, 0, RegionGetCenter(gv_regionsDungeonsRegion[lv_dungeonindex][5]));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Portal", 0, 0, RegionGetCenter(gv_regionsDungeonsRegion[lv_dungeonindex][5]));
    }
    if ((lv_dungeonindex == 11) && (gv_dungeonsHeroic[lv_dungeonindex] == true) && (gv_dungeonsLegendary[lv_dungeonindex] == true) && (gv_dungeonsHardcore[lv_dungeonindex] == true)) {
        gf_RaidCreepSpawnSetup(-2);
    }

    auto535CB1FE_g = gv_dungeonsParty[lv_dungeonindex];
    auto535CB1FE_var = -1;
    while (true) {
        auto535CB1FE_var = PlayerGroupNextPlayer(auto535CB1FE_g, auto535CB1FE_var);
        if (auto535CB1FE_var < 0) { break; }
        if (((gv_questsPlayerProgress[auto535CB1FE_var][115] == 2) || (gv_questsPlayerProgress[auto535CB1FE_var][120] == 2) || (gv_questsPlayerProgress[auto535CB1FE_var][121] == 2) || (gv_questsPlayerProgress[auto535CB1FE_var][122] == 2) || (gv_questsPlayerProgress[auto535CB1FE_var][123] == 2))) {
            lv_continue = true;
        }

    }
    if ((lv_continue == true)) {
        auto97E54490_g = gv_dungeonsParty[lv_dungeonindex];
        auto97E54490_var = -1;
        while (true) {
            auto97E54490_var = PlayerGroupNextPlayer(auto97E54490_g, auto97E54490_var);
            if (auto97E54490_var < 0) { break; }
            if ((gv_dungeonsDungeonStatistics[auto97E54490_var][3][lv_dungeonindex] != 0)) {
                lv_deathCount += gv_dungeonsDungeonStatistics[auto97E54490_var][3][lv_dungeonindex];
            }

        }
        auto5DC409A7_g = gv_dungeonsParty[lv_dungeonindex];
        auto5DC409A7_var = -1;
        while (true) {
            auto5DC409A7_var = PlayerGroupNextPlayer(auto5DC409A7_g, auto5DC409A7_var);
            if (auto5DC409A7_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (auto8ED0BFED_ai >= 0 && lv_index <= auto8ED0BFED_ae) || (auto8ED0BFED_ai < 0 && lv_index >= auto8ED0BFED_ae) ) ; lv_index += auto8ED0BFED_ai ) {
                if ((lv_deathCount > 0) && (gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 120)) {
                    gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][1] = 0;
                }

            }
            if ((((gv_questsPlayerProgress[auto5DC409A7_var][115] == 2) && (lv_deathCount == 0) && ((gv_playerHeroHeroLevelExp[auto5DC409A7_var][1] <= (gv_dungeonsLevels[lv_dungeonindex] + 4)) || (gv_dungeonsHeroic[lv_dungeonindex] == true) || (gv_dungeonsLegendary[lv_dungeonindex] == true))) || ((gv_questsPlayerProgress[auto5DC409A7_var][120] == 2) && (lv_deathCount == 0) && ((gv_playerHeroHeroLevelExp[auto5DC409A7_var][1] <= (gv_dungeonsLevels[lv_dungeonindex] + 4)) || (gv_dungeonsHeroic[lv_dungeonindex] == true) || (gv_dungeonsLegendary[lv_dungeonindex] == true))) || ((gv_questsPlayerProgress[auto5DC409A7_var][121] == 2) && (lv_deathCount == 0) && (gv_dungeonsLegendary[lv_dungeonindex] == true) && (UnitBehaviorCount(gv_playerHeroHero[auto5DC409A7_var], "BrokenShield") == 1) && (TimerGetRemaining(gv_playerHeroHeroGuildTimer[auto5DC409A7_var]) >= 1) && (gv_dungeonsGMQuest[auto5DC409A7_var] == lv_dungeonindex)) || ((gv_questsPlayerProgress[auto5DC409A7_var][122] == 2) && (gv_dungeonsLegendary[lv_dungeonindex] == true) && (UnitBehaviorCount(gv_playerHeroHero[auto5DC409A7_var], "PocketFullofRocks") == 1) && (TimerGetRemaining(gv_playerHeroHeroGuildTimer[auto5DC409A7_var]) >= 1) && (gv_dungeonsGMQuest[auto5DC409A7_var] == lv_dungeonindex)) || ((gv_questsPlayerProgress[auto5DC409A7_var][123] == 2) && (lv_deathCount < 5) && (gv_dungeonsLegendary[lv_dungeonindex] == true) && (UnitBehaviorCount(gv_playerHeroHero[auto5DC409A7_var], "MentalCap") >= 1) && (TimerGetRemaining(gv_playerHeroHeroGuildTimer[auto5DC409A7_var]) >= 1) && (gv_dungeonsGMQuest[auto5DC409A7_var] == lv_dungeonindex)))) {
                lv_index = 1;
                for ( ; ( (autoBB3B3D27_ai >= 0 && lv_index <= autoBB3B3D27_ae) || (autoBB3B3D27_ai < 0 && lv_index >= autoBB3B3D27_ae) ) ; lv_index += autoBB3B3D27_ai ) {
                    if (((gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index]][(1 + 1)]) || (gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][2] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index]][(2 + 1)])) && ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 115) || (gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 120) || (gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 121) || (gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 122) || (gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 123))) {
                        gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][1] += 1;
                        gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][2] += 1;
                        if ((gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveProgress[auto5DC409A7_var][lv_index][2] >= gv_questsQuestType[gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index]][(2 + 1)])) {
                            if ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 115)) {
                                gv_questsPlayerProgress[auto5DC409A7_var][115] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[115][2]][2], PlayerGroupSingle(auto5DC409A7_var), true);
                                gv_playerHeroHeroGuild[auto5DC409A7_var][2] = 4;
                            }

                            if ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 120)) {
                                gv_questsPlayerProgress[auto5DC409A7_var][120] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[120][2]][2], PlayerGroupSingle(auto5DC409A7_var), true);
                                gv_playerHeroHeroGuild[auto5DC409A7_var][2] = 5;
                            }

                            if ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 121)) {
                                gv_questsPlayerProgress[auto5DC409A7_var][121] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[121][2]][2], PlayerGroupSingle(auto5DC409A7_var), true);
                                gv_playerHeroHeroGuild[auto5DC409A7_var][2] = 6;
                                gv_playerStatisticsAchievements[auto5DC409A7_var][25][2] += 1;
                            }

                            if ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 122)) {
                                gv_questsPlayerProgress[auto5DC409A7_var][122] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[122][2]][2], PlayerGroupSingle(auto5DC409A7_var), true);
                                gv_playerHeroHeroGuild[auto5DC409A7_var][2] = 6;
                                gv_playerStatisticsAchievements[auto5DC409A7_var][25][2] += 1;
                            }

                            if ((gv_questsPlayerActiveQuests[auto5DC409A7_var][lv_index] == 123)) {
                                gv_questsPlayerProgress[auto5DC409A7_var][123] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[123][2]][2], PlayerGroupSingle(auto5DC409A7_var), true);
                                gv_playerHeroHeroGuild[auto5DC409A7_var][2] = 6;
                                gv_playerStatisticsAchievements[auto5DC409A7_var][25][2] += 1;
                            }

                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto5DC409A7_var), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/CD5BCD2A"), PlayerGroupSingle(auto5DC409A7_var));
                            gf_BankSaveBank(auto5DC409A7_var, gv_banksSlotSelected[auto5DC409A7_var], 0);
                        }

                    }

                }
            }

        }
    }

    gf_DungeonDialogEnd(lv_dungeonindex);
    libNtve_gf_StopTimer(gv_regionsDungeonsOpenTimer[lv_dungeonindex]);
    if ((gv_dungeonsMFBonus[lv_dungeonindex] == false) && (gv_dungeonsHeroic[lv_dungeonindex] == true)) {
        gv_dungeonsMFBonus[lv_dungeonindex] = true;
        auto8C9C08A1_g = gv_generalTeamsAll;
        auto8C9C08A1_var = -1;
        while (true) {
            auto8C9C08A1_var = PlayerGroupNextPlayer(auto8C9C08A1_g, auto8C9C08A1_var);
            if (auto8C9C08A1_var < 0) { break; }
            gv_playerCurrency[auto8C9C08A1_var][0] += 10;
            if ((gv_dungeonsLegendary[lv_dungeonindex] == true)) {
                gv_playerCurrency[auto8C9C08A1_var][0] += 5;
            }

            if ((gv_dungeonsHardcore[lv_dungeonindex] == true)) {
                gv_playerCurrency[auto8C9C08A1_var][0] += 5;
            }

            if ((gv_dungeonsDog[lv_dungeonindex] == true)) {
                gv_playerCurrency[auto8C9C08A1_var][0] += 5;
            }

            if ((gv_playerCurrency[auto8C9C08A1_var][0] > gv_playerStatisticsAchievements[auto8C9C08A1_var][26][2])) {
                gv_playerStatisticsAchievements[auto8C9C08A1_var][26][2] = gv_playerCurrency[auto8C9C08A1_var][0];
            }

            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[0], IntToText(gv_playerCurrency[auto8C9C08A1_var][0]), PlayerGroupSingle(auto8C9C08A1_var));
        }
    }

    if ((gv_dungeonsHeroic[lv_dungeonindex] == true)) {
        if ((lv_dungeonindex == 11)) {
            lv_d11bonus = 3;
        }

        if ((gv_dungeonsLegendary[lv_dungeonindex] == true)) {
            auto225C0EB7_g = gv_dungeonsParty[lv_dungeonindex];
            auto225C0EB7_var = -1;
            while (true) {
                auto225C0EB7_var = PlayerGroupNextPlayer(auto225C0EB7_g, auto225C0EB7_var);
                if (auto225C0EB7_var < 0) { break; }
                if ((gv_dungeonsHardcore[lv_dungeonindex] == true)) {
                    gv_playerStatisticsGeneral[auto225C0EB7_var][27] += 100;
                    gv_playerCurrency[auto225C0EB7_var][4] += 100;
                    gv_playerStatisticsGeneral[auto225C0EB7_var][25] += 5;
                    if ((gv_playerEmptyField1[auto225C0EB7_var][lv_dungeonindex] == 0)) {
                        gv_playerEmptyField1[auto225C0EB7_var][lv_dungeonindex] = 1;
                        gv_playerEmptyField1[auto225C0EB7_var][12] += 1;
                    }

                    if ((gv_dungeonsDog[lv_dungeonindex] == true)) {
                        gv_playerStatisticsGeneral[auto225C0EB7_var][27] += 200;
                        gv_playerCurrency[auto225C0EB7_var][4] += 200;
                        gv_playerStatisticsGeneral[auto225C0EB7_var][25] += 5;
                        gf_SurvivalEnd(auto225C0EB7_var, ((gv_generalLevelCap + lv_d11bonus) + ((lv_dungeonindex / 2) + 44)), 2, 0);
                    }
                    else {
                        gf_SurvivalEnd(auto225C0EB7_var, ((gv_generalLevelCap + lv_d11bonus) + ((lv_dungeonindex / 2) + 38)), 2, 0);
                    }
                    lv_index = 1;
                    for ( ; ( (auto968D4351_ai >= 0 && lv_index <= auto968D4351_ae) || (auto968D4351_ai < 0 && lv_index >= auto968D4351_ae) ) ; lv_index += auto968D4351_ai ) {
                        if ((gv_questsPlayerActiveQuests[auto225C0EB7_var][lv_index] == 155) && (gv_questsPlayerActiveProgress[auto225C0EB7_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto225C0EB7_var][lv_index]][(1 + 1)]) && (lv_dungeonindex == 11)) {
                            gv_questsPlayerActiveProgress[auto225C0EB7_var][lv_index][1] += 1;
                            gv_questsPlayerProgress[auto225C0EB7_var][155] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[155][2]][2], PlayerGroupSingle(auto225C0EB7_var), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto225C0EB7_var), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/3564ABCB"), PlayerGroupSingle(auto225C0EB7_var));
                        }

                    }
                }
                else {
                    gf_SurvivalEnd(auto225C0EB7_var, ((gv_generalLevelCap + lv_d11bonus) + ((lv_dungeonindex / 2) + 22)), 2, 0);
                }
                gv_playerStatisticsGeneral[auto225C0EB7_var][25] += 1;
                gv_playerStatisticsAchievements[auto225C0EB7_var][11][2] += 1;
                gv_playerStatisticsGeneral[auto225C0EB7_var][27] += 150;
                gv_playerCurrency[auto225C0EB7_var][4] += 150;
                if ((gv_playerStatisticsDungeonsCleared[auto225C0EB7_var][lv_dungeonindex][3] == 0)) {
                    gv_playerStatisticsDungeonsCleared[auto225C0EB7_var][lv_dungeonindex][3] = 1;
                    gv_playerStatisticsAchievements[auto225C0EB7_var][22][2] += 1;
                    gv_playerStatisticsDungeonsCleared[auto225C0EB7_var][12][3] += 1;
                }

                if ((PlayerGroupCount(gv_dungeonsParty[lv_dungeonindex]) == 1) && (gv_playerStatisticsAchievements[auto225C0EB7_var][29][1] == 5)) {
                    gv_playerStatisticsAchievements[auto225C0EB7_var][29][2] += 1;
                }

                lv_index = 1;
                for ( ; ( (autoF051FA72_ai >= 0 && lv_index <= autoF051FA72_ae) || (autoF051FA72_ai < 0 && lv_index >= autoF051FA72_ae) ) ; lv_index += autoF051FA72_ai ) {
                    if ((gv_questsPlayerActiveQuests[auto225C0EB7_var][lv_index] == 131) && (gv_questsPlayerActiveProgress[auto225C0EB7_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto225C0EB7_var][lv_index]][(1 + 1)])) {
                        gv_questsPlayerActiveProgress[auto225C0EB7_var][lv_index][1] += 1;
                        gv_questsPlayerProgress[auto225C0EB7_var][131] = 3;
                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[131][2]][2], PlayerGroupSingle(auto225C0EB7_var), true);
                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto225C0EB7_var), 125.0, 0.0);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/2A319705"), PlayerGroupSingle(auto225C0EB7_var));
                    }

                }
            }
        }
        else {
            auto6A48DAFF_g = gv_dungeonsParty[lv_dungeonindex];
            auto6A48DAFF_var = -1;
            while (true) {
                auto6A48DAFF_var = PlayerGroupNextPlayer(auto6A48DAFF_g, auto6A48DAFF_var);
                if (auto6A48DAFF_var < 0) { break; }
                gv_playerStatisticsGeneral[auto6A48DAFF_var][27] += 75;
                gv_playerStatisticsAchievements[auto6A48DAFF_var][10][2] += 1;
                gv_playerCurrency[auto6A48DAFF_var][4] += 75;
                gv_playerStatisticsGeneral[auto6A48DAFF_var][19] += 1;
                gf_SurvivalEnd(auto6A48DAFF_var, ((gv_generalLevelCap + 4) + lv_dungeonindex), 2, 0);
                if ((gv_playerStatisticsDungeonsCleared[auto6A48DAFF_var][lv_dungeonindex][2] == 0)) {
                    gv_playerStatisticsDungeonsCleared[auto6A48DAFF_var][lv_dungeonindex][2] = 1;
                    gv_playerStatisticsAchievements[auto6A48DAFF_var][21][2] += 1;
                    gv_playerStatisticsDungeonsCleared[auto6A48DAFF_var][12][2] += 1;
                }

                if ((PlayerGroupCount(gv_dungeonsParty[lv_dungeonindex]) == 1) && (gv_playerStatisticsAchievements[auto6A48DAFF_var][29][1] == 4)) {
                    gv_playerStatisticsAchievements[auto6A48DAFF_var][29][2] += 1;
                }

                lv_index = 1;
                for ( ; ( (autoB225CEEF_ai >= 0 && lv_index <= autoB225CEEF_ae) || (autoB225CEEF_ai < 0 && lv_index >= autoB225CEEF_ae) ) ; lv_index += autoB225CEEF_ai ) {
                    if ((gv_questsPlayerActiveQuests[auto6A48DAFF_var][lv_index] == 135) && (gv_questsPlayerActiveProgress[auto6A48DAFF_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto6A48DAFF_var][lv_index]][(1 + 1)])) {
                        gv_questsPlayerActiveProgress[auto6A48DAFF_var][lv_index][1] += 1;
                        if ((gv_questsPlayerActiveProgress[auto6A48DAFF_var][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[auto6A48DAFF_var][lv_index]][(1 + 1)])) {
                            gv_questsPlayerProgress[auto6A48DAFF_var][135] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[135][2]][2], PlayerGroupSingle(auto6A48DAFF_var), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto6A48DAFF_var), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/54B73F1B"), PlayerGroupSingle(auto6A48DAFF_var));
                        }

                    }

                }
            }
        }
    }
    else {
        autoB7E0D448_g = gv_dungeonsParty[lv_dungeonindex];
        autoB7E0D448_var = -1;
        while (true) {
            autoB7E0D448_var = PlayerGroupNextPlayer(autoB7E0D448_g, autoB7E0D448_var);
            if (autoB7E0D448_var < 0) { break; }
            gv_playerStatisticsGeneral[autoB7E0D448_var][27] += 15;
            gv_playerCurrency[autoB7E0D448_var][4] += 15;
            gv_playerStatisticsGeneral[autoB7E0D448_var][24] += 1;
            gf_SurvivalEnd(autoB7E0D448_var, gv_dungeonsLevels[lv_dungeonindex], 3, 0);
            if ((gv_playerStatisticsDungeonsCleared[autoB7E0D448_var][lv_dungeonindex][1] == 0)) {
                gv_playerStatisticsDungeonsCleared[autoB7E0D448_var][lv_dungeonindex][1] = 1;
                gv_playerStatisticsDungeonsCleared[autoB7E0D448_var][12][1] += 1;
            }

            if ((PlayerGroupCount(gv_dungeonsParty[lv_dungeonindex]) == 1) && (gv_playerStatisticsAchievements[autoB7E0D448_var][29][1] == 3)) {
                gv_playerStatisticsAchievements[autoB7E0D448_var][29][2] += 1;
            }

        }
    }
    auto8FB76477_g = gv_dungeonsParty[lv_dungeonindex];
    auto8FB76477_var = -1;
    while (true) {
        auto8FB76477_var = PlayerGroupNextPlayer(auto8FB76477_g, auto8FB76477_var);
        if (auto8FB76477_var < 0) { break; }
        if ((lv_dungeonindex == 3) && (gv_questsPlayerProgress[auto8FB76477_var][37] == 2)) {
            gv_questsPlayerProgress[auto8FB76477_var][37] = 3;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[37][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
            gf_GeneralQuestMessage(StringExternal("Param/Value/45BFE358"), PlayerGroupSingle(auto8FB76477_var));
            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
            lv_index = 1;
            for ( ; ( (auto2D4FFE20_ai >= 0 && lv_index <= auto2D4FFE20_ae) || (auto2D4FFE20_ai < 0 && lv_index >= auto2D4FFE20_ae) ) ; lv_index += auto2D4FFE20_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 37) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)])) {
                    gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                }

            }
        }

        if ((lv_dungeonindex == 5) && (gv_questsPlayerProgress[auto8FB76477_var][88] == 2)) {
            gv_questsPlayerProgress[auto8FB76477_var][88] = 3;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[88][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
            gf_GeneralQuestMessage(StringExternal("Param/Value/8C99DBFC"), PlayerGroupSingle(auto8FB76477_var));
            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
            lv_index = 1;
            for ( ; ( (auto3BCF7FD2_ai >= 0 && lv_index <= auto3BCF7FD2_ae) || (auto3BCF7FD2_ai < 0 && lv_index >= auto3BCF7FD2_ae) ) ; lv_index += auto3BCF7FD2_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 88) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)])) {
                    gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                }

            }
        }

        if ((lv_dungeonindex == 7) && (gv_questsPlayerProgress[auto8FB76477_var][92] == 2)) {
            gv_questsPlayerProgress[auto8FB76477_var][92] = 3;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[92][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
            gf_GeneralQuestMessage(StringExternal("Param/Value/5CBC835A"), PlayerGroupSingle(auto8FB76477_var));
            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
            lv_index = 1;
            for ( ; ( (auto99C8ADB8_ai >= 0 && lv_index <= auto99C8ADB8_ae) || (auto99C8ADB8_ai < 0 && lv_index >= auto99C8ADB8_ae) ) ; lv_index += auto99C8ADB8_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 92) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)])) {
                    gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                }

            }
        }

        if ((lv_dungeonindex == 8) && (gv_questsPlayerProgress[auto8FB76477_var][96] == 2)) {
            lv_index = 1;
            for ( ; ( (auto6AC845C0_ai >= 0 && lv_index <= auto6AC845C0_ae) || (auto6AC845C0_ai < 0 && lv_index >= auto6AC845C0_ae) ) ; lv_index += auto6AC845C0_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 96) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)])) {
                    if ((gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] == 1) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] == 0)) {
                        break;
                    }
                    else {
                        gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                        gf_GeneralQuestMessage(StringExternal("Param/Value/1430A003"), PlayerGroupSingle(auto8FB76477_var));
                        SoundPlayForPlayer(SoundLink("QuestUpdate", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
                    }
                }

                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 96) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] == gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] == gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(2 + 1)])) {
                    gv_questsPlayerProgress[auto8FB76477_var][96] = 3;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[96][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
                    gf_GeneralQuestMessage(StringExternal("Param/Value/381C37C8"), PlayerGroupSingle(auto8FB76477_var));
                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
                    CameraShakeStart(auto8FB76477_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
                }

            }
        }

        if ((lv_dungeonindex == 9) && (gv_questsPlayerProgress[auto8FB76477_var][96] == 2)) {
            lv_index = 1;
            for ( ; ( (auto49056E69_ai >= 0 && lv_index <= auto49056E69_ae) || (auto49056E69_ai < 0 && lv_index >= auto49056E69_ae) ) ; lv_index += auto49056E69_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 96) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(2 + 1)])) {
                    if ((gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] == 1)) {
                        break;
                    }
                    else {
                        gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                        gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] += 1;
                        gf_GeneralQuestMessage(StringExternal("Param/Value/AAB1E7B5"), PlayerGroupSingle(auto8FB76477_var));
                        SoundPlayForPlayer(SoundLink("QuestUpdate", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
                    }
                }

                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 96) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][2] >= gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(2 + 1)])) {
                    gv_questsPlayerProgress[auto8FB76477_var][96] = 3;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[96][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
                    gf_GeneralQuestMessage(StringExternal("Param/Value/D1D9C8AE"), PlayerGroupSingle(auto8FB76477_var));
                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
                    CameraShakeStart(auto8FB76477_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
                }

            }
        }

        if ((lv_dungeonindex == 10) && (gv_questsPlayerProgress[auto8FB76477_var][100] == 2)) {
            gv_questsPlayerProgress[auto8FB76477_var][100] = 3;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[100][2]][2], PlayerGroupSingle(auto8FB76477_var), true);
            gf_GeneralQuestMessage(StringExternal("Param/Value/DFC960B2"), PlayerGroupSingle(auto8FB76477_var));
            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(auto8FB76477_var), 125.0, 0.0);
            lv_index = 1;
            for ( ; ( (auto8FBB03F5_ai >= 0 && lv_index <= auto8FBB03F5_ae) || (auto8FBB03F5_ai < 0 && lv_index >= auto8FBB03F5_ae) ) ; lv_index += auto8FBB03F5_ai ) {
                if ((gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index] == 100) && (gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[auto8FB76477_var][lv_index]][(1 + 1)])) {
                    gv_questsPlayerActiveProgress[auto8FB76477_var][lv_index][1] += 1;
                }

            }
            gf_GeneralEndingCinematic(gv_dungeonsParty[10]);
        }

        gf_BankSaveBank(auto8FB76477_var, gv_banksSlotSelected[auto8FB76477_var], 0);
    }
}

trigger auto_gf_CreepsCreepDiesBounty_Trigger = null;
unit auto_gf_CreepsCreepDiesBounty_lp_killingUnit;
unit auto_gf_CreepsCreepDiesBounty_lp_killedUnit;

void gf_CreepsCreepDiesBounty (unit lp_killingUnit, unit lp_killedUnit) {
    auto_gf_CreepsCreepDiesBounty_lp_killingUnit = lp_killingUnit;
    auto_gf_CreepsCreepDiesBounty_lp_killedUnit = lp_killedUnit;

    if (auto_gf_CreepsCreepDiesBounty_Trigger == null) {
        auto_gf_CreepsCreepDiesBounty_Trigger = TriggerCreate("auto_gf_CreepsCreepDiesBounty_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreepsCreepDiesBounty_Trigger, false, false);
}

bool auto_gf_CreepsCreepDiesBounty_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killingUnit = auto_gf_CreepsCreepDiesBounty_lp_killingUnit;
    unit lp_killedUnit = auto_gf_CreepsCreepDiesBounty_lp_killedUnit;

    // Variable Declarations
    int lv_trigPlayer;
    unit lv_killingUnit;
    unit lv_killedUnit;
    fixed[5] lv_tempMath;
    fixed[5] lv_bounty;
    fixed lv_playerCount;
    int lv_index;
    int lv_index2;
    playergroup lv_lootGroup;
    int[6] lv_lootTable;
    text lv_tempText;
    int lv_rankUp;
    int[4] lv_tempTier;

    // Automatic Variable Declarations
    const int auto2FE6BFFC_ae = 10;
    const int auto2FE6BFFC_ai = 1;
    int autoD8721906_ae;
    const int autoD8721906_ai = 1;
    unitgroup auto2BEDEDB2_g;
    int auto2BEDEDB2_u;
    unit auto2BEDEDB2_var;
    unitgroup autoF294BF7F_g;
    int autoF294BF7F_u;
    unit autoF294BF7F_var;
    const int auto6669F341_ae = 4;
    const int auto6669F341_ai = 1;
    unitgroup auto380A59BE_g;
    int auto380A59BE_u;
    unit auto380A59BE_var;
    const int autoFC0A4F5B_ae = 20;
    const int autoFC0A4F5B_ai = 1;
    int auto5B789056_ae;
    const int auto5B789056_ai = 1;
    playergroup auto89AF0419_g;
    int auto89AF0419_var;
    int autoD9FB64A8_ae;
    const int autoD9FB64A8_ai = 1;
    const int auto4F202F29_ae = 10;
    const int auto4F202F29_ai = 1;
    const int autoAE9F47B6_ae = gv_questsQuestSlots;
    const int autoAE9F47B6_ai = 1;
    const int autoAF83A929_ae = 2;
    const int autoAF83A929_ai = 1;
    int auto1CCBED8C_val;
    const int auto71744E5C_ae = 5;
    const int auto71744E5C_ai = 1;

    // Variable Initialization
    lv_lootGroup = PlayerGroupEmpty();

    // Implementation
    lv_trigPlayer = UnitGetOwner(lp_killingUnit);
    lv_killedUnit = lp_killedUnit;
    lv_killingUnit = gv_playerHeroHero[lv_trigPlayer];
    lv_bounty[1] = UnitGetCustomValue(lv_killedUnit, 1);
    lv_bounty[2] = UnitGetCustomValue(lv_killedUnit, 2);
    lv_bounty[2] *= ((UnitBehaviorCount(lv_killingUnit, "GoldFind") * 0.5) + 1.0);
    lv_bounty[3] = UnitGetCustomValue(lv_killedUnit, 3);
    lv_bounty[4] = UnitGetCustomValue(lv_killedUnit, 4);
    lv_tempMath[1] = AbsI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] - FixedToInt(UnitGetCustomValue(lv_killedUnit, 0))));
    lv_tempMath[2] = FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 10));
    lv_lootTable[1] = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_killedUnit), "KillResource[" + IntToString(3) + "]", c_playerAny);
    lv_lootTable[2] = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_killedUnit), "KillResource[" + IntToString(0) + "]", c_playerAny);
    lv_lootTable[3] = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_killedUnit), "KillResource[" + IntToString(2) + "]", c_playerAny);
    lv_lootTable[3] += FixedToInt((UnitGetCustomValue(lv_killedUnit, 0) * 2.5));
    lv_lootTable[5] = ModI(FixedToInt(UnitGetCustomValue(lv_killedUnit, 0)), 4);
    lv_lootTable[4] = FloorI((UnitGetCustomValue(lv_killedUnit, 0) / 4.0));
    lv_index = 1;
    for ( ; ( (auto2FE6BFFC_ai >= 0 && lv_index <= auto2FE6BFFC_ae) || (auto2FE6BFFC_ai < 0 && lv_index >= auto2FE6BFFC_ae) ) ; lv_index += auto2FE6BFFC_ai ) {
        if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] > 0)) {
            lv_tempTier[1] += 1;
            lv_tempTier[2] += gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3];
        }

    }
    if (((lv_tempTier[0] == 0) || (lv_tempTier[1] == 0))) {
    }
    else {
        lv_tempTier[1] = (lv_tempTier[2] / lv_tempTier[1]);
        lv_tempTier[1] *= 4;
        lv_tempTier[0] = FixedToInt(UnitGetCustomValue(lv_killedUnit, 0));
        lv_tempTier[0] = ((lv_tempTier[0] - 1) - lv_tempTier[1]);
    }
    if ((gv_generalTutorialMode == true)) {
        lv_lootTable[2] *= 2;
    }

    if ((RandomInt(lv_lootTable[5], 4) == 4) && (lv_lootTable[5] >= 1)) {
        lv_lootTable[4] += 1;
    }

    if ((lv_lootTable[4] == 0)) {
        lv_lootTable[4] += 1;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true) && (UnitHasBehavior2(lv_killedUnit, "Boss") == false)) {
        lv_lootTable[4] += 1;
        lv_tempTier[0] -= 4;
        lv_lootTable[3] += FixedToInt((UnitGetCustomValue(lv_killedUnit, 0) * 2.5));
    }

    if ((UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
        lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.1));
    }

    if ((UnitHasBehavior2(lv_killedUnit, "LegendaryMod") == true)) {
        lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.1));
    }

    if ((UnitHasBehavior2(lv_killedUnit, "Hardcore") == true)) {
        lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.1));
    }

    if (((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == true) || (UnitHasBehavior2(lv_killedUnit, "Boss") == true)) && (lv_lootTable[4] >= 2)) {
        lv_lootTable[4] -= 1;
        lv_lootTable[3] /= 3;
        if ((lv_lootTable[4] >= 8)) {
            lv_lootTable[4] -= 1;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.1));
        }

        if ((lv_lootTable[4] >= 14)) {
            lv_lootTable[4] -= 1;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.15));
        }

        if ((lv_lootTable[4] >= 20)) {
            lv_lootTable[4] -= 1;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.2));
        }

        if ((lv_lootTable[4] >= 23)) {
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.25));
        }

        if ((lv_lootTable[4] > 16) && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == false)) {
            lv_lootTable[4] = 16;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.1));
        }

        if ((lv_lootTable[4] > 19) && (gv_generalEndGameMode == false) && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
            lv_lootTable[4] = 19;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.2));
        }

        if ((lv_lootTable[4] > 22) && (gv_generalEndGameMode == true) && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == true) && (UnitHasBehavior2(lv_killedUnit, "LegendaryMod") == false)) {
            lv_lootTable[4] = 22;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.3));
        }

        if ((lv_lootTable[4] > 24) && (gv_generalEndGameMode == true) && (UnitHasBehavior2(lv_killedUnit, "LegendaryMod") == true) && (UnitHasBehavior2(lv_killedUnit, "Hardcore") == false)) {
            lv_lootTable[4] = 24;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.4));
        }

        if ((lv_lootTable[4] > 26) && (gv_generalEndGameMode == true) && (UnitHasBehavior2(lv_killedUnit, "Hardcore") == true)) {
            lv_lootTable[4] = 26;
            lv_lootTable[3] += FixedToInt((lv_lootTable[3] * 0.5));
        }

    }

    autoD8721906_ae = (1 + FixedToInt(lv_tempMath[2]));
    lv_index = 1;
    for ( ; ( (autoD8721906_ai >= 0 && lv_index <= autoD8721906_ae) || (autoD8721906_ai < 0 && lv_index >= autoD8721906_ae) ) ; lv_index += autoD8721906_ai ) {
        if ((lv_tempMath[1] > 0.0)) {
            lv_tempMath[1] -= 1.0;
        }

    }
    if ((lv_tempMath[1] >= 5.0)) {
        lv_bounty[1] = 0.0;
    }
    else {
        lv_bounty[1] = (lv_bounty[1] * (1.0 - (lv_tempMath[1] * 0.2)));
    }
    if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true) && (lv_tempTier[0] > 0)) {
        lv_bounty[2] *= (1.0 - (lv_tempTier[0] * 0.05));
    }

    if ((lv_bounty[2] < 0.0)) {
        lv_bounty[2] = 0.0;
    }

    auto2BEDEDB2_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_killedUnit), 5.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BEDEDB2_u = UnitGroupCount(auto2BEDEDB2_g, c_unitCountAll);
    for (;; auto2BEDEDB2_u -= 1) {
        auto2BEDEDB2_var = UnitGroupUnitFromEnd(auto2BEDEDB2_g, auto2BEDEDB2_u);
        if (auto2BEDEDB2_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto2BEDEDB2_var, gv_playerHeroHeroRegion[lv_trigPlayer]) == true)) {
            PlayerGroupAdd(lv_lootGroup, UnitGetOwner(auto2BEDEDB2_var));
        }

    }
    if ((UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
        autoF294BF7F_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_killedUnit), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF294BF7F_u = UnitGroupCount(autoF294BF7F_g, c_unitCountAll);
        for (;; autoF294BF7F_u -= 1) {
            autoF294BF7F_var = UnitGroupUnitFromEnd(autoF294BF7F_g, autoF294BF7F_u);
            if (autoF294BF7F_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoF294BF7F_var, gv_playerHeroHeroRegion[lv_trigPlayer]) == true)) {
                PlayerGroupAdd(lv_lootGroup, UnitGetOwner(autoF294BF7F_var));
            }

        }
    }

    lv_index = 1;
    for ( ; ( (auto6669F341_ai >= 0 && lv_index <= auto6669F341_ae) || (auto6669F341_ai < 0 && lv_index >= auto6669F341_ae) ) ; lv_index += auto6669F341_ai ) {
        if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
            auto380A59BE_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_killedUnit), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto380A59BE_u = UnitGroupCount(auto380A59BE_g, c_unitCountAll);
            for (;; auto380A59BE_u -= 1) {
                auto380A59BE_var = UnitGroupUnitFromEnd(auto380A59BE_g, auto380A59BE_u);
                if (auto380A59BE_var == null) { break; }
                if ((libNtve_gf_UnitInRegion(auto380A59BE_var, gv_playerHeroHeroRegion[lv_trigPlayer]) == true) && (PlayerGroupHasPlayer(gv_generalParties[lv_index][1], UnitGetOwner(auto380A59BE_var)) == true)) {
                    PlayerGroupAdd(lv_lootGroup, UnitGetOwner(auto380A59BE_var));
                }

            }
        }

    }
    lv_index = 1;
    for ( ; ( (autoFC0A4F5B_ai >= 0 && lv_index <= autoFC0A4F5B_ae) || (autoFC0A4F5B_ai < 0 && lv_index >= autoFC0A4F5B_ae) ) ; lv_index += autoFC0A4F5B_ai ) {
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true) && (libNtve_gf_UnitInRegion(lv_killedUnit, gv_regionsDungeonsRegion[lv_index][1]) == true)) {
            libNtve_gf_AddPlayerGroupToPlayerGroup(gv_dungeonsParty[lv_index], lv_lootGroup);
        }

    }
    TextTagCreate((StringExternal("Param/Value/7619C2A6") + FixedToText(lv_bounty[2], 0)), 24, PointWithOffsetPolar(UnitGetPosition(lv_killedUnit), 0.2, 90.0), 0.2, true, false, lv_lootGroup);
    TextTagSetVelocity(TextTagLastCreated(), RandomFixed(0.2, 0.6), RandomFixed(70.0, 100.0));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, RandomFixed(3.5, 5.0));
    TextTagCreate((StringExternal("Param/Value/7CD8376F") + FixedToText(lv_bounty[3], 0)), 24, PointWithOffsetPolar(UnitGetPosition(lv_killedUnit), 0.2, 180.0), 0.2, true, false, lv_lootGroup);
    TextTagSetVelocity(TextTagLastCreated(), RandomFixed(0.2, 0.6), RandomFixed(100.0, 130.0));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, RandomFixed(3.5, 5.0));
    if ((lv_bounty[4] != 0.0)) {
        TextTagCreate((StringExternal("Param/Value/05F9D090") + FixedToText(lv_bounty[4], 0)), 28, PointWithOffsetPolar(UnitGetPosition(lv_killedUnit), 0.2, 180.0), 0.2, true, false, lv_lootGroup);
        TextTagSetVelocity(TextTagLastCreated(), RandomFixed(0.2, 0.6), RandomFixed(100.0, 130.0));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, RandomFixed(5.0, 7.0));
    }

    lv_lootTable[3] += (PlayerGroupCount(lv_lootGroup) * 14);
    auto5B789056_ae = lv_lootTable[1];
    lv_index = 1;
    for ( ; ( (auto5B789056_ai >= 0 && lv_index <= auto5B789056_ae) || (auto5B789056_ai < 0 && lv_index >= auto5B789056_ae) ) ; lv_index += auto5B789056_ai ) {
        if ((RandomInt(1, 100) <= lv_lootTable[2]) && (UnitHasBehavior2(lv_killedUnit, "Escort") == false)) {
            gf_ItemsGenerateRandom(lv_trigPlayer, lv_lootGroup, lv_lootTable[4], 1, lv_lootTable[3]);
            SoundPlayForPlayer(SoundLink("ItemReward", -1), c_maxPlayers, lv_lootGroup, 150.0, 0.0);
        }

    }
    lv_playerCount = PlayerGroupCount(lv_lootGroup);
    lv_bounty[1] = (lv_bounty[1] / lv_playerCount);
    lv_bounty[2] = (lv_bounty[2] / lv_playerCount);
    lv_bounty[3] = (lv_bounty[3] / lv_playerCount);
    lv_bounty[4] = (lv_bounty[4] / lv_playerCount);
    auto89AF0419_g = lv_lootGroup;
    auto89AF0419_var = -1;
    while (true) {
        auto89AF0419_var = PlayerGroupNextPlayer(auto89AF0419_g, auto89AF0419_var);
        if (auto89AF0419_var < 0) { break; }
        lv_trigPlayer = auto89AF0419_var;
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (UnitGetCustomValue(lv_killedUnit, 0) >= gv_generalLevelCap)) {
            lv_tempMath[1] = 0.0;
        }
        else {
            lv_tempMath[1] = AbsI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] - FixedToInt(UnitGetCustomValue(lv_killedUnit, 0))));
        }
        lv_tempMath[2] = FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 10));
        autoD9FB64A8_ae = (1 + FixedToInt(lv_tempMath[2]));
        lv_index = 1;
        for ( ; ( (autoD9FB64A8_ai >= 0 && lv_index <= autoD9FB64A8_ae) || (autoD9FB64A8_ai < 0 && lv_index >= autoD9FB64A8_ae) ) ; lv_index += autoD9FB64A8_ai ) {
            if ((lv_tempMath[1] > 0.0)) {
                lv_tempMath[1] -= 1.0;
            }

        }
        if ((lv_tempMath[1] >= 7.0)) {
            lv_bounty[0] = 0.0;
        }
        else {
            lv_bounty[0] = (lv_bounty[1] * ((0.7 + (lv_playerCount * 0.25)) - (lv_tempMath[1] * 0.14)));
            lv_bounty[4] = (lv_bounty[4] * (1.0 - (lv_tempMath[1] * 0.14)));
        }
        if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true)) {
            gv_playerStatisticsGeneral[lv_trigPlayer][10] += 1;
            gv_playerCurrency[lv_trigPlayer][3] += FixedToInt(lv_bounty[4]);
            gv_playerStatisticsGeneral[lv_trigPlayer][6] += FixedToInt(lv_bounty[4]);
        }
        else {
            gv_playerStatisticsGeneral[lv_trigPlayer][9] += 1;
        }
        lv_bounty[2] *= (1.0 - (lv_tempMath[1] * 0.04));
        lv_tempTier[1] = 0;
        lv_tempTier[2] = 0;
        lv_index = 1;
        for ( ; ( (auto4F202F29_ai >= 0 && lv_index <= auto4F202F29_ae) || (auto4F202F29_ai < 0 && lv_index >= auto4F202F29_ae) ) ; lv_index += auto4F202F29_ai ) {
            if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] > 0)) {
                lv_tempTier[1] += 1;
                lv_tempTier[2] += gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3];
            }

        }
        if (((lv_tempTier[0] == 0) || (lv_tempTier[1] == 0))) {
        }
        else {
            lv_tempTier[1] = (lv_tempTier[2] / lv_tempTier[1]);
            lv_tempTier[1] *= 4;
            lv_tempTier[0] = FixedToInt(UnitGetCustomValue(lv_killedUnit, 0));
            lv_tempTier[0] = ((lv_tempTier[0] - 1) - lv_tempTier[1]);
        }
        if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true) && (lv_tempTier[0] > 0)) {
            lv_bounty[2] *= (1.0 - (lv_tempTier[0] * 0.1));
        }

        if ((lv_bounty[2] < 0.0)) {
            lv_bounty[2] = 0.0;
        }

        if ((lv_bounty[2] >= 1)) {
            gv_playerCurrency[lv_trigPlayer][1] += FixedToInt(lv_bounty[2]);
            gv_playerStatisticsAchievements[lv_trigPlayer][1][2] += FixedToInt(lv_bounty[2]);
            gv_playerStatisticsGeneral[lv_trigPlayer][4] += FixedToInt(lv_bounty[2]);
        }

        lv_bounty[3] *= (1.0 - (lv_tempMath[1] * 0.04));
        if ((lv_bounty[3] >= 1)) {
            gv_playerCurrency[lv_trigPlayer][2] += FixedToInt(lv_bounty[3]);
            gv_playerStatisticsGeneral[lv_trigPlayer][5] += FixedToInt(lv_bounty[3]);
        }

        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[2], IntToText(gv_playerCurrency[lv_trigPlayer][2]), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) {
            if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < 20)) {
                lv_bounty[0] *= 1.2;
            }

            if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < 40)) {
                lv_bounty[0] *= 1.05;
            }

            gv_playerHeroHeroLevelExp[lv_trigPlayer][2] += FixedToInt(lv_bounty[0]);
            gv_playerStatisticsGeneral[lv_trigPlayer][7] += FixedToInt(lv_bounty[0]);
            libNtve_gf_SetDialogItemTooltip(gv_eXPDialogItems[0], (StringExternal("Param/Value/14031799") + (IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][2]) + (StringExternal("Param/Value/7FB06323") + IntToText(gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])))), PlayerGroupSingle(lv_trigPlayer));
            lv_tempMath[1] = (gv_eXPDialogWidth / 100.0);
            lv_tempMath[2] = ((100.0 / gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) * gv_playerHeroHeroLevelExp[lv_trigPlayer][2]);
            lv_tempMath[1] = (lv_tempMath[1] * lv_tempMath[2]);
            DialogControlSetSize(gv_eXPDialogItems[2], PlayerGroupSingle(lv_trigPlayer), FixedToInt(lv_tempMath[1]), DialogControlGetHeight(gv_eXPDialogItems[2], lv_trigPlayer));
        }

        lv_index = 1;
        for ( ; ( (autoAE9F47B6_ai >= 0 && lv_index <= autoAE9F47B6_ae) || (autoAE9F47B6_ai < 0 && lv_index >= autoAE9F47B6_ae) ) ; lv_index += autoAE9F47B6_ai ) {
            if ((gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1] == 1)) {
                lv_index2 = 1;
                for ( ; ( (autoAF83A929_ai >= 0 && lv_index2 <= autoAF83A929_ae) || (autoAF83A929_ai < 0 && lv_index2 >= autoAF83A929_ae) ) ; lv_index2 += autoAF83A929_ai ) {
                    if ((gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2] == UnitGetType(lv_killedUnit)) && (gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2] != null) && ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(lv_index2 + 1)]) || (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] > gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(lv_index2 + 1)])) && (((gv_questsQuestBuff[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] != "Heroic2") && (gv_questsQuestBuff[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] != "LegendaryMod")) || ((gv_questsQuestBuff[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] == "Heroic2") && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) || ((gv_questsQuestBuff[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] == "LegendaryMod") && (UnitHasBehavior2(lv_killedUnit, "LegendaryMod") == true)))) {
                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] += 1;
                        lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2]) + StringExternal("Param/Value/67E64424") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2]) + StringExternal("Param/Value/D450273F") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(lv_index2 + 1)]));
                        gf_GeneralQuestMessage(lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                        if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][3])) {
                            gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                            if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 3) && (gv_questsPlayerProgress[lv_trigPlayer][1] == 3)) {
                                gv_tutorialPlayer[lv_trigPlayer] = 3;
                                gf_TutorialUpdate(lv_trigPlayer, 3);
                            }

                        }

                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    }

                }
            }

        }
        lv_rankUp = 0;
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] >= gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) {
            lv_rankUp = 1;
            lv_tempMath[1] = AbsI((gv_playerHeroHeroLevelExp[lv_trigPlayer][2] - gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]));
            gv_playerHeroHeroLevelExp[lv_trigPlayer][1] += 1;
            gv_playerHeroHeroLevelExp[lv_trigPlayer][2] = FixedToInt(lv_tempMath[1]);
            gf_HeroHeroLevels(lv_trigPlayer);
            libNtve_gf_SetDialogItemTooltip(gv_eXPDialogItems[0], (StringExternal("Param/Value/9E5D06F9") + (IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][2]) + (StringExternal("Param/Value/9D67C5C4") + IntToText(gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])))), PlayerGroupSingle(lv_trigPlayer));
            lv_tempMath[1] = (gv_eXPDialogWidth / 100.0);
            lv_tempMath[2] = ((100.0 / gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) * gv_playerHeroHeroLevelExp[lv_trigPlayer][2]);
            lv_tempMath[2] += 1.0;
            lv_tempMath[1] = (lv_tempMath[1] * lv_tempMath[2]);
            DialogControlSetSize(gv_eXPDialogItems[2], PlayerGroupSingle(lv_trigPlayer), FixedToInt(lv_tempMath[1]), DialogControlGetHeight(gv_eXPDialogItems[2], lv_trigPlayer));
            UnitBehaviorAddPlayer(gv_playerHeroHero[lv_trigPlayer], "LevelUp", lv_trigPlayer, 1);
        }

        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_heroesStatsTierLevels[(gv_playerHeroHeroClassTierType[lv_trigPlayer][2] + 0)]) && (DialogControlIsVisible(gv_screenEffectsDialogItem[4][1], lv_trigPlayer) == false) && (DialogIsVisible(gv_heroSelectionDialogBox, lv_trigPlayer) == false)) {
            lv_rankUp = 2;
        }

        auto1CCBED8C_val = lv_rankUp;
        if (auto1CCBED8C_val == 1) {
            UnitSetInfoText2(gv_playerHeroHero[lv_trigPlayer], (StringExternal("Param/Value/F29A7B54") + IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][1])));
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
            libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][3], "KarassPsiStormImpact", PlayerGroupSingle(lv_trigPlayer));
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]));
            PortraitSetRenderType(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(gv_screenEffectsDialogItem[1][3]), "SetScale 0.300000 0.100000");
            DialogControlSetVisible(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), true);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 0.0, 65.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 3.0, 100.0);
        }
        else if (auto1CCBED8C_val == 2) {
            lv_index2 = 0;
            for ( ; ( (auto71744E5C_ai >= 0 && lv_index2 <= auto71744E5C_ae) || (auto71744E5C_ai < 0 && lv_index2 >= auto71744E5C_ae) ) ; lv_index2 += auto71744E5C_ai ) {
                DialogControlSetVisible(gv_screenEffectsDialogItem[4][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                DialogControlFadeTransparency(gv_screenEffectsDialogItem[4][lv_index2], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
                DialogControlFadeTransparency(gv_screenEffectsDialogItem[4][lv_index2], PlayerGroupSingle(lv_trigPlayer), 1.0, 0.0);
            }
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[4][1], PlayerGroupSingle(lv_trigPlayer), 0.0, 80.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 0.0, 100.0);
            libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][3], "KerriganSearchFlashImpact", PlayerGroupSingle(lv_trigPlayer));
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]));
            PortraitSetRenderType(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(gv_screenEffectsDialogItem[1][3]), "SetScale 1.200000,1.200000,1.500000 0.100000");
            DialogControlSetVisible(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), true);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupSingle(lv_trigPlayer), 1.0, 80.0);
        }
        else {
        }
        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
    }
    return true;
}

void gf_SurvivalEnd (int lp_trigPlayer, int lp_wavesSurvived, int lp_awardType, int lp_difficulty) {
    // Variable Declarations
    int lv_awardType;
    int lv_trigPlayer;
    int lv_tempWaves;
    int lv_tempQuantity;
    int lv_tempRarity;
    int lv_tempTier;
    int lv_tempTierChance;
    int lv_tempDifficulty;
    int lv_tempHonor;
    int lv_index;
    int lv_index2;
    int lv_glyphBonus;

    // Automatic Variable Declarations
    int autoE64ABCF4_ae;
    const int autoE64ABCF4_ai = 1;
    int autoC1249F33_val;
    const int autoD2AB8DF3_ae = 5;
    const int autoD2AB8DF3_ai = 1;
    const int autoEBD13338_ae = 30;
    const int autoEBD13338_ai = 1;
    const int auto6A8D6DEB_ae = 20;
    const int auto6A8D6DEB_ai = 1;
    const int auto3E5987BC_ae = 24;
    const int auto3E5987BC_ai = 1;
    int auto9779B579_ae;
    const int auto9779B579_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_tempWaves = lp_wavesSurvived;
    lv_awardType = lp_awardType;
    if ((TimerGetRemaining(gv_itemSurvivalTimer[lv_trigPlayer]) > 1)) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/583A8805"), PlayerGroupSingle(lv_trigPlayer));
        TimerStart(gv_itemSurvivalTimer[lv_trigPlayer], 10.0, false, c_timeGame);
        return ;
    }

    TimerStart(gv_itemSurvivalTimer[lv_trigPlayer], 10.0, false, c_timeGame);
    if ((lv_tempWaves < 5) && (lv_awardType == 1)) {
        gf_GeneralErrorMessage(StringExternal("Param/Value/922E6E60"), PlayerGroupSingle(lv_trigPlayer));
        return ;
    }

    lv_tempHonor += 10;
    autoE64ABCF4_ae = lv_tempWaves;
    lv_index = 1;
    for ( ; ( (autoE64ABCF4_ai >= 0 && lv_index <= autoE64ABCF4_ae) || (autoE64ABCF4_ai < 0 && lv_index >= autoE64ABCF4_ae) ) ; lv_index += autoE64ABCF4_ai ) {
        lv_tempHonor += FixedToInt((lv_index * 0.7));
        lv_tempHonor += 1;
    }
    autoC1249F33_val = lv_awardType;
    if (autoC1249F33_val == 1) {
        lv_tempDifficulty = lp_difficulty;
        lv_tempHonor += FixedToInt((lv_tempHonor * (0.012 * lv_tempWaves)));
        lv_tempHonor += FixedToInt((lv_tempHonor * ((0.4 + (0.2 * lv_tempDifficulty)) * lv_tempDifficulty)));
        lv_tempTier = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + FloorI((lv_tempWaves / (8.0 - (lv_tempDifficulty * (1.0 + (0.15 * lv_tempDifficulty)))))));
        lv_tempTier -= 1;
        if ((lv_tempWaves >= 70)) {
            lv_glyphBonus = 6;
        }
        else {
            if ((lv_tempWaves >= 60)) {
                lv_glyphBonus = 5;
            }
            else {
                if ((lv_tempWaves >= 50)) {
                    lv_glyphBonus = 4;
                }
                else {
                    if ((lv_tempWaves >= 40)) {
                        lv_glyphBonus = 3;
                    }
                    else {
                        if ((lv_tempWaves >= 30)) {
                            lv_glyphBonus = 2;
                            lv_tempTier += lv_tempDifficulty;
                        }
                        else {
                            if ((lv_tempWaves >= 20)) {
                                lv_glyphBonus = 1;
                            }

                        }
                    }
                }
            }
        }
        if ((lv_tempTier > 26)) {
            lv_tempTier = 26;
            gf_GeneralErrorMessage(StringExternal("Param/Value/2411D4BD"), PlayerGroupSingle(lv_trigPlayer));
        }

        if ((lv_tempWaves > gv_playerStatisticsGeneral[lv_trigPlayer][16])) {
            gv_playerStatisticsGeneral[lv_trigPlayer][16] = lv_tempWaves;
            gv_playerStatisticsAchievements[lv_trigPlayer][30][2] = lv_tempWaves;
        }

    }
    else if (autoC1249F33_val == 2) {
        lv_tempHonor /= 2;
        lv_tempHonor += (lv_tempWaves * 10);
        lv_tempTier = (FloorI((lv_tempWaves / 4)) + 1);
        lv_tempTierChance = ModI(lv_tempWaves, 4);
        lv_tempTierChance -= 1;
        if ((lv_tempWaves >= 90)) {
            lv_glyphBonus = 6;
        }
        else {
            if ((lv_tempWaves >= 72)) {
                lv_glyphBonus = 3;
            }
            else {
                lv_glyphBonus = 1;
            }
        }
    }
    else if (autoC1249F33_val == 3) {
        lv_tempHonor /= 2;
        lv_tempTier = (FloorI((lv_tempWaves / 4)) + 0);
        lv_tempTierChance = ModI(lv_tempWaves, 4);
        lv_tempTierChance += 2;
    }
    else if (autoC1249F33_val == 4) {
        lv_tempHonor /= 2;
        lv_tempHonor += (lv_tempWaves * 11);
        lv_tempTier = (FloorI((lv_tempWaves / 4)) + 1);
        lv_tempTierChance = ModI(lv_tempWaves, 4);
        lv_tempTierChance += 0;
        if ((lv_tempWaves >= 83)) {
            lv_glyphBonus = 6;
        }
        else {
            if ((lv_tempWaves >= 77)) {
                lv_glyphBonus = 5;
            }
            else {
                lv_glyphBonus = 3;
            }
        }
    }
    else if (autoC1249F33_val == 5) {
        lv_tempHonor /= 2;
        lv_tempHonor += (lv_tempWaves * 7);
        lv_tempTier = (FloorI((lv_tempWaves / 4)) + 0);
        lv_tempTierChance = ModI(lv_tempWaves, 4);
        lv_tempTierChance -= 0;
        if ((lv_tempWaves >= 67)) {
            lv_glyphBonus = 1;
        }

    }
    else {
    }
    lv_tempQuantity = RandomInt(1, 3);
    if ((lv_tempWaves >= 96) && (lp_awardType == 2)) {
        lv_tempQuantity += gv_dungeonsD11CreepBossCount;
    }

    if ((lv_tempWaves >= 30) && (lp_awardType == 1)) {
        lv_tempQuantity += FloorI(((lv_tempWaves / 10) - 3));
    }

    lv_tempRarity = ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] * 2) + FixedToInt((lv_tempHonor * 1.1)));
    lv_tempRarity += 10;
    lv_tempRarity = FixedToInt((lv_tempRarity * (1.1 - (lv_tempQuantity * 0.1))));
    gv_itemSurvivalQuantity[lv_trigPlayer] = lv_tempQuantity;
    SoundPlayForPlayer(SoundLink("LOTV_Music_Stinger_Victory_0122", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
    if ((lv_awardType == 1)) {
        lv_tempHonor *= 3;
    }

    if ((lv_awardType == 2)) {
        lv_tempHonor += (lv_tempWaves * (10 + (lv_tempWaves / 10)));
    }

    gv_playerCurrency[lv_trigPlayer][3] += lv_tempHonor;
    libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
    lv_index = 0;
    for ( ; ( (autoD2AB8DF3_ai >= 0 && lv_index <= autoD2AB8DF3_ae) || (autoD2AB8DF3_ai < 0 && lv_index >= autoD2AB8DF3_ae) ) ; lv_index += autoD2AB8DF3_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[5][lv_index], PlayerGroupSingle(lv_trigPlayer), 2.0, 100.0);
    }
    gv_itemSurvivalSlotSelected[lv_trigPlayer] = 0;
    libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[1], (StringExternal("Param/Value/6416B7BB") + IntToText(lv_tempWaves)), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[2], (StringExternal("Param/Value/6C71699D") + IntToText(lv_tempHonor)), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[3], (StringExternal("Param/Value/8F799313") + IntToText(gv_itemSurvivalQuantity[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
    libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[4], (StringExternal("Param/Value/32E4232F") + IntToText(gv_playerStatisticsGeneral[lv_trigPlayer][16])), PlayerGroupSingle(lv_trigPlayer));
    gv_itemSurvivalDialogItemIndex[lv_trigPlayer] = 1;
    lv_index = 25;
    for ( ; ( (autoEBD13338_ai >= 0 && lv_index <= autoEBD13338_ae) || (autoEBD13338_ai < 0 && lv_index >= autoEBD13338_ae) ) ; lv_index += autoEBD13338_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto6A8D6DEB_ai >= 0 && lv_index2 <= auto6A8D6DEB_ae) || (auto6A8D6DEB_ai < 0 && lv_index2 >= auto6A8D6DEB_ae) ) ; lv_index2 += auto6A8D6DEB_ai ) {
            gv_itemSurvivalStats[lv_trigPlayer][lv_index][lv_index2] = 0;
        }
        libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogItems[lv_index][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[lv_index][2], gv_itemsBaseBorder[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[lv_index][1], gv_itemsBaseIcon[0][0][0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[lv_index][4], gv_itemsAssistIcon[0], PlayerGroupSingle(lv_trigPlayer));
    }
    lv_index = 1;
    for ( ; ( (auto3E5987BC_ai >= 0 && lv_index <= auto3E5987BC_ae) || (auto3E5987BC_ai < 0 && lv_index >= auto3E5987BC_ae) ) ; lv_index += auto3E5987BC_ai ) {
        if ((RandomInt(1, 4) <= lv_tempTierChance)) {
            gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), (lv_tempTier + 1), 4, lv_tempRarity);
        }
        else {
            gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), (lv_tempTier + 0), 4, lv_tempRarity);
        }
    }
    if ((lv_glyphBonus > 0)) {
        auto9779B579_ae = (24 + lv_glyphBonus);
        lv_index = 25;
        for ( ; ( (auto9779B579_ai >= 0 && lv_index <= auto9779B579_ae) || (auto9779B579_ai < 0 && lv_index >= auto9779B579_ae) ) ; lv_index += auto9779B579_ai ) {
            if ((RandomInt(1, 4) <= lv_tempTierChance)) {
                gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), (lv_tempTier + 1), 4, lv_tempRarity);
            }
            else {
                gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), (lv_tempTier + 0), 4, lv_tempRarity);
            }
        }
    }

    if ((lv_awardType != 1)) {
        libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[4], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
    }

    DialogSetVisible(gv_itemSurvivalDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), true);
    DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
    DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
}

trigger auto_gf_CreepsCreepSpawn_Trigger = null;
string auto_gf_CreepsCreepSpawn_lp_respawningCreep;
int auto_gf_CreepsCreepSpawn_lp_spawnType;
int auto_gf_CreepsCreepSpawn_lp_regionIndex;
fixed auto_gf_CreepsCreepSpawn_lp_x;
fixed auto_gf_CreepsCreepSpawn_lp_y;

void gf_CreepsCreepSpawn (string lp_respawningCreep, int lp_spawnType, int lp_regionIndex, fixed lp_x, fixed lp_y) {
    auto_gf_CreepsCreepSpawn_lp_respawningCreep = lp_respawningCreep;
    auto_gf_CreepsCreepSpawn_lp_spawnType = lp_spawnType;
    auto_gf_CreepsCreepSpawn_lp_regionIndex = lp_regionIndex;
    auto_gf_CreepsCreepSpawn_lp_x = lp_x;
    auto_gf_CreepsCreepSpawn_lp_y = lp_y;

    if (auto_gf_CreepsCreepSpawn_Trigger == null) {
        auto_gf_CreepsCreepSpawn_Trigger = TriggerCreate("auto_gf_CreepsCreepSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreepsCreepSpawn_Trigger, false, false);
}

bool auto_gf_CreepsCreepSpawn_TriggerFunc (bool testConds, bool runActions) {
    string lp_respawningCreep = auto_gf_CreepsCreepSpawn_lp_respawningCreep;
    int lp_spawnType = auto_gf_CreepsCreepSpawn_lp_spawnType;
    int lp_regionIndex = auto_gf_CreepsCreepSpawn_lp_regionIndex;
    fixed lp_x = auto_gf_CreepsCreepSpawn_lp_x;
    fixed lp_y = auto_gf_CreepsCreepSpawn_lp_y;

    // Variable Declarations
    string lv_creepType;
    int lv_spawnType;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    fixed[4] lv_xY;
    int lv_index;
    bool lv_heroic;
    int[3] lv_timer;

    // Automatic Variable Declarations
    int auto7152F849_val;
    playergroup auto7F544117_g;
    int auto7F544117_var;
    const int auto583B6EC2_ae = gv_questsQuestSlots;
    const int auto583B6EC2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_creepType = lp_respawningCreep;
    lv_spawnType = lp_spawnType;
    lv_tempLevel = UnitTypeGetCost(lv_creepType, c_unitCostCustomResource);
    lv_xY[0] = lp_regionIndex;
    lv_xY[1] = lp_x;
    lv_xY[2] = lp_y;
    auto7152F849_val = lv_spawnType;
    if (auto7152F849_val == 0) {
        lv_timer[2] += RandomInt(1, 3);
        lv_xY[0] = 0.0;
        lv_xY[3] = lp_regionIndex;
    }
    else if (auto7152F849_val == 1) {
        lv_timer[2] += RandomInt(18, 30);
        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
            lv_timer[2] += RandomInt(180, 230);
        }

        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeUser1) == true)) {
            lv_timer[2] += RandomInt(15, 30);
        }

    }
    else if (auto7152F849_val == 2) {
        lv_timer[2] += RandomInt(2, 5);
        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
            lv_timer[2] += RandomInt(90, 130);
        }

        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeUser1) == true)) {
            lv_timer[2] += RandomInt(12, 20);
        }

    }
    else {
    }
    while ((((gv_regionsActive[FixedToInt(lv_xY[0])] == true) && (lv_xY[0] != 0.0)) || (lv_spawnType == 0)) && (lv_timer[1] < lv_timer[2])) {
        if (((UnitCount(null, c_playerAny, RegionCircle(Point(lv_xY[1], lv_xY[2]), 5.5), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) || (lv_spawnType == 0))) {
            lv_timer[1] += 1;
        }

        Wait(1.0, c_timeGame);
    }
    if ((lv_timer[1] >= lv_timer[2]) && (((gv_regionsActive[FixedToInt(lv_xY[0])] == true) && (lv_xY[0] != 0.0)) || (lv_spawnType == 0))) {
        UnitCreate(1, lv_creepType, 0, 15, Point(lv_xY[1], lv_xY[2]), libNtve_gf_RandomAngle());
        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
            auto7F544117_g = gv_generalTeamsAll;
            auto7F544117_var = -1;
            while (true) {
                auto7F544117_var = PlayerGroupNextPlayer(auto7F544117_g, auto7F544117_var);
                if (auto7F544117_var < 0) { break; }
                if ((gv_playerHeroHeroRegion[auto7F544117_var] == gv_regionsRegion[lp_regionIndex])) {
                    lv_index = 1;
                    for ( ; ( (auto583B6EC2_ai >= 0 && lv_index <= auto583B6EC2_ae) || (auto583B6EC2_ai < 0 && lv_index >= auto583B6EC2_ae) ) ; lv_index += auto583B6EC2_ai ) {
                        if ((((gv_questsQuestBuff[gv_questsPlayerActiveQuests[auto7F544117_var][lv_index]] == "Heroic2") && ((lv_creepType == gv_questsQuestUnitType[gv_questsPlayerActiveQuests[auto7F544117_var][lv_index]][1]) || (lv_creepType == gv_questsQuestUnitType[gv_questsPlayerActiveQuests[auto7F544117_var][lv_index]][2]))) || ((gv_generalEndGameMode == true) && (gv_playerHeroHeroLevelExp[auto7F544117_var][1] >= gv_generalLevelCap) && ((lv_creepType == gv_beastMasterQuestUnits[gv_beastMasterQuestPlayerIndex[auto7F544117_var]][2]) || (lv_creepType == gv_beastMasterQuestUnits[gv_beastMasterQuestPlayerIndex[auto7F544117_var]][1]))))) {
                            if (true) {
                                lv_heroic = true;
                                lv_tempLevel = ((gv_generalLevelCap + 0) + (lp_regionIndex / 3));
                                UnitBehaviorAdd(UnitLastCreated(), "Heroic2", UnitLastCreated(), 1);
                                break;
                            }

                        }

                    }
                }

            }
        }

        UnitSetInfoText2(UnitLastCreated(), (StringExternal("Param/Value/8C09C1A9") + IntToText(lv_tempLevel)));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        if ((lv_spawnType == 0)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "Escort", 15, 1);
            UnitGroupAdd(gv_questsEscortEnemyGroup[lp_regionIndex], UnitLastCreated());
        }

        UnitSetCustomValue(UnitLastCreated(), 10, lv_xY[1]);
        UnitSetCustomValue(UnitLastCreated(), 11, lv_xY[2]);
        UnitSetCustomValue(UnitLastCreated(), 12, lv_xY[0]);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
        UnitSetCustomValue(UnitLastCreated(), 0, lv_tempLevel);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.800000");
        if (((UnitTypeTestAttribute(lv_creepType, c_unitAttributeHover) == true) || (lv_spawnType == 0))) {
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (0.8 + (lv_tempLevel * 0.117))) * (1.0 + (lv_tempLevel * 0.21))) + 0.0);
            if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
                lv_tempMath *= (1.0 + (lv_tempLevel * 0.004));
                UnitBehaviorAddPlayer(UnitLastCreated(), "SinglePlayer", 15, 1);
            }

            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
            lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.02))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.07))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
            lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.15))) * (1.1 + (lv_tempLevel * 0.15))) / 5.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
            lv_tempMath = (((lv_tempLevel * 0.36) * (0.0 + (lv_tempLevel * 0.39))) * 1.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
            lv_tempInt[1] = ModI(lv_tempInt[1], 15);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
            lv_tempStat = (4.0 + (1.34 * (lv_tempLevel * (1.0 + (lv_tempLevel * 0.033)))));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 1.0);
            UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
            lv_tempStat = (((21.0 * (1.3 + (lv_tempLevel * 0.13))) * (1.1 + (lv_tempLevel * 0.09))) + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 1.0);
            UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
            lv_tempStat = (((9.0 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.06))) + RandomInt((lv_tempLevel * 0), (lv_tempLevel * 2)));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 1.0);
            UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
            if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
                lv_tempStat = (lv_tempLevel + RandomInt(1, 4));
                UnitSetCustomValue(UnitLastCreated(), 4, lv_tempStat);
            }

            UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
            UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
            UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
        }

        Wait(0.5, c_timeGame);
        libNtve_gf_PauseUnit(UnitLastCreated(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
    }

    return true;
}

trigger auto_gf_DungeonCreepSpawn_Trigger = null;
string auto_gf_DungeonCreepSpawn_lp_respawningCreep;
int auto_gf_DungeonCreepSpawn_lp_playerCount;
fixed auto_gf_DungeonCreepSpawn_lp_x;
fixed auto_gf_DungeonCreepSpawn_lp_y;
bool auto_gf_DungeonCreepSpawn_lp_heroic;
int auto_gf_DungeonCreepSpawn_lp_dungeonIndex;

void gf_DungeonCreepSpawn (string lp_respawningCreep, int lp_playerCount, fixed lp_x, fixed lp_y, bool lp_heroic, int lp_dungeonIndex) {
    auto_gf_DungeonCreepSpawn_lp_respawningCreep = lp_respawningCreep;
    auto_gf_DungeonCreepSpawn_lp_playerCount = lp_playerCount;
    auto_gf_DungeonCreepSpawn_lp_x = lp_x;
    auto_gf_DungeonCreepSpawn_lp_y = lp_y;
    auto_gf_DungeonCreepSpawn_lp_heroic = lp_heroic;
    auto_gf_DungeonCreepSpawn_lp_dungeonIndex = lp_dungeonIndex;

    if (auto_gf_DungeonCreepSpawn_Trigger == null) {
        auto_gf_DungeonCreepSpawn_Trigger = TriggerCreate("auto_gf_DungeonCreepSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_DungeonCreepSpawn_Trigger, false, false);
}

bool auto_gf_DungeonCreepSpawn_TriggerFunc (bool testConds, bool runActions) {
    string lp_respawningCreep = auto_gf_DungeonCreepSpawn_lp_respawningCreep;
    int lp_playerCount = auto_gf_DungeonCreepSpawn_lp_playerCount;
    fixed lp_x = auto_gf_DungeonCreepSpawn_lp_x;
    fixed lp_y = auto_gf_DungeonCreepSpawn_lp_y;
    bool lp_heroic = auto_gf_DungeonCreepSpawn_lp_heroic;
    int lp_dungeonIndex = auto_gf_DungeonCreepSpawn_lp_dungeonIndex;

    // Variable Declarations
    string lv_creepType;
    int lv_tempLevel;
    int lv_tempHeroicLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    fixed[3] lv_xY;
    int lv_index;
    int lv_tierIndex;
    int lv_legendaryIndex;
    int lv_playerCount;

    // Automatic Variable Declarations
    const int autoA7EA22E0_ae = 2;
    const int autoA7EA22E0_ai = 1;
    int auto8B4F2EB2_ae;
    const int auto8B4F2EB2_ai = 1;
    int auto7E8228C0_ae;
    const int auto7E8228C0_ai = 1;
    const int auto3C3C9B8A_ae = 4;
    const int auto3C3C9B8A_ai = 1;
    int auto9480AA65_ae;
    const int auto9480AA65_ai = 1;

    // Variable Initialization
    lv_playerCount = lp_playerCount;

    // Implementation
    lv_creepType = lp_respawningCreep;
    if ((lp_heroic == true)) {
        if ((lp_dungeonIndex > 100)) {
            lv_tempLevel = (gv_generalLevelCap + RandomInt(18, 21));
            if ((lp_dungeonIndex > 200)) {
                lv_tempLevel += 6;
            }

            lv_index = 1;
            for ( ; ( (autoA7EA22E0_ai >= 0 && lv_index <= autoA7EA22E0_ae) || (autoA7EA22E0_ai < 0 && lv_index >= autoA7EA22E0_ae) ) ; lv_index += autoA7EA22E0_ai ) {
                if ((((lp_dungeonIndex - 100) == gv_legendaryDungeonMods[lv_index][0]) || ((lp_dungeonIndex - 200) == gv_legendaryDungeonMods[lv_index][0]))) {
                    lv_legendaryIndex = lv_index;
                }

            }
        }
        else {
            lv_tempHeroicLevel = (lp_dungeonIndex + RandomInt(4, 6));
            lv_tempLevel = (gv_generalLevelCap + lv_tempHeroicLevel);
        }
        lv_tierIndex = FloorI(((lv_tempLevel - gv_generalLevelCap) / 4));
        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
            lv_tempLevel += RandomInt(2, 3);
            if ((lp_dungeonIndex > 200)) {
                lv_tempLevel -= 1;
            }

        }

    }
    else {
        if ((lp_dungeonIndex == 11)) {
            lv_tempLevel = RandomInt(55, 59);
        }
        else {
            lv_tempLevel = UnitTypeGetCost(lv_creepType, c_unitCostCustomResource);
        }
    }
    lv_xY[0] = lv_playerCount;
    lv_xY[1] = lp_x;
    lv_xY[2] = lp_y;
    if ((lp_heroic == true) && (lp_dungeonIndex <= 0)) {
        if (((lv_creepType == "Phoenixegg") || (lv_creepType == "Draeneiharbinger"))) {
            UnitSetCustomValue(UnitLastCreated(), 20, 10.0);
        }

        if ((lp_dungeonIndex <= -1)) {
            lv_tempLevel = (gv_generalLevelCap + RandomInt(29, 31));
            auto8B4F2EB2_ae = gv_raidsBossesIndex;
            lv_index = 13;
            for ( ; ( (auto8B4F2EB2_ai >= 0 && lv_index <= auto8B4F2EB2_ae) || (auto8B4F2EB2_ai < 0 && lv_index >= auto8B4F2EB2_ae) ) ; lv_index += auto8B4F2EB2_ai ) {
                if ((lv_creepType == gv_raidsBosses[lv_index])) {
                    lv_tempLevel += 4;
                }

            }
            if ((lv_creepType == "Netherdragon")) {
                lv_tempLevel += 12;
            }

        }
        else {
            lv_tempLevel = (gv_generalLevelCap + RandomInt(26, 28));
        }
        lv_tierIndex = FloorI(((lv_tempLevel - gv_generalLevelCap) / 4));
        if ((lv_creepType == "Netherdragon")) {
            lv_tierIndex += 4;
        }

    }

    UnitCreate(1, lv_creepType, 0, 15, Point(lv_xY[1], lv_xY[2]), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "CreepReduction", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "CreepCountReduction", UnitLastCreated(), lp_playerCount);
    if ((lv_playerCount == 1) && (lp_dungeonIndex > 300)) {
        UnitBehaviorAdd(UnitLastCreated(), "SinglePlayer", UnitLastCreated(), 1);
    }

    if (((lp_dungeonIndex == 11) || (lp_dungeonIndex == 111) || (lp_dungeonIndex == 211) || (lp_dungeonIndex == 311))) {
        UnitBehaviorAdd(UnitLastCreated(), "SupremeusVisibility2", UnitLastCreated(), 1);
        lv_tempLevel -= 1;
        if ((lv_creepType == "Infernal")) {
            UnitBehaviorRemove(UnitLastCreated(), "SupremeusVisibility", 1);
        }

        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true) && (UnitTypeTestAttribute(lv_creepType, c_unitAttributeStructure) == true)) {
            auto7E8228C0_ae = gv_dungeonsD11CreepCountTypesIndex[5];
            lv_index = 1;
            for ( ; ( (auto7E8228C0_ai >= 0 && lv_index <= auto7E8228C0_ae) || (auto7E8228C0_ai < 0 && lv_index >= auto7E8228C0_ae) ) ; lv_index += auto7E8228C0_ai ) {
                if ((lv_creepType == gv_dungeonsD11CreepCountTypes[5][lv_index])) {
                    UnitBehaviorAdd(UnitLastCreated(), "SupremeusVisibility", UnitLastCreated(), 1);
                    lv_tempLevel += 1;
                }

            }
        }

    }

    if ((lp_heroic == true)) {
        UnitBehaviorAdd(UnitLastCreated(), "Heroic2", UnitLastCreated(), 1);
        if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "BossBonus", UnitLastCreated(), 1);
        }

    }
    else {
        if ((lp_dungeonIndex == 11)) {
            lv_tempLevel = RandomInt(54, 57);
        }
        else {
            lv_tempLevel = UnitTypeGetCost(lv_creepType, c_unitCostCustomResource);
        }
    }
    if ((lp_dungeonIndex > 100)) {
        if ((lp_dungeonIndex > 200)) {
            UnitBehaviorAdd(UnitLastCreated(), "Hardcore", UnitLastCreated(), 1);
            if ((lp_dungeonIndex > 300)) {
                UnitBehaviorAdd(UnitLastCreated(), "DogMode", UnitLastCreated(), 1);
                lv_tempLevel += 7;
                if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == false) && (RandomInt(1, 12) == 1)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Champion", UnitLastCreated(), 1);
                    lv_tempLevel += 2;
                    lv_tierIndex += 1;
                }
                else {
                    lv_tierIndex += 1;
                }
            }

        }

        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, c_unitPropCurrent) * (1.0 + gv_legendaryDungeonMods[lv_legendaryIndex][5])));
        UnitBehaviorAdd(UnitLastCreated(), "LegendaryMod", UnitLastCreated(), 1);
        lv_index = 1;
        for ( ; ( (auto3C3C9B8A_ai >= 0 && lv_index <= auto3C3C9B8A_ae) || (auto3C3C9B8A_ai < 0 && lv_index >= auto3C3C9B8A_ae) ) ; lv_index += auto3C3C9B8A_ai ) {
            if ((gv_legendaryDungeonMods[lv_legendaryIndex][lv_index] >= 1)) {
                UnitBehaviorAdd(UnitLastCreated(), gv_legendaryMods[gv_legendaryDungeonMods[lv_legendaryIndex][lv_index]], UnitLastCreated(), 1);
                if ((gv_legendaryDungeonMods[lv_legendaryIndex][lv_index] == gv_legendaryModsIndex) && (lv_index == 4) && (UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
                    lv_tempLevel += 3;
                }

            }

        }
    }

    UnitSetInfoText2(UnitLastCreated(), (StringExternal("Param/Value/E8A33648") + IntToText(lv_tempLevel)));
    lv_tempStat = (3.0 + (1.4 * (lv_tempLevel * (1.0 + (lv_tempLevel * 0.03)))));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
    lv_tempStat *= ((lv_tempRatio * 0.01) + (0.1 + (lv_playerCount * 0.6)));
    UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
    lv_tempStat = (((24.0 * (1.3 + (lv_tempLevel * 0.13))) * (1.1 + (lv_tempLevel * 0.08))) + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
    lv_tempStat *= ((lv_tempRatio * 0.01) + 0.0);
    lv_tempStat *= (1.0 + (-0.55 + (lv_playerCount * 0.55)));
    if ((lp_heroic == true)) {
        lv_tempStat *= 1.2;
    }

    if ((lp_dungeonIndex > 100)) {
        lv_tempStat *= 1.2;
    }

    if ((lp_dungeonIndex > 200)) {
        lv_tempStat *= 1.2;
    }

    UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
    lv_tempStat = (((10.0 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.063))) + RandomInt((lv_tempLevel * 0), (lv_tempLevel * 2)));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
    lv_tempStat *= ((lv_tempRatio * 0.01) + (0.1 + (lv_playerCount * 0.7)));
    if ((lp_heroic == true)) {
        lv_tempStat *= 1.2;
    }

    if ((lp_dungeonIndex > 100)) {
        lv_tempStat *= 1.2;
    }

    if ((lp_dungeonIndex > 200)) {
        lv_tempStat *= 1.2;
    }

    UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
    if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
        lv_tempStat = (lv_tempLevel + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
        lv_tempStat *= (0.0 + (0.1 + (lv_playerCount * 0.7)));
        if ((lp_heroic == true)) {
            lv_tempStat *= 1.2;
        }

        if ((lp_dungeonIndex > 100)) {
            lv_tempStat *= 1.2;
        }

        if ((lp_dungeonIndex > 200)) {
            lv_tempStat *= 1.2;
        }

        UnitSetCustomValue(UnitLastCreated(), 4, lv_tempStat);
        if ((lv_playerCount > 1)) {
            UnitBehaviorAdd(UnitLastCreated(), gv_dungeonsBossStunReduction[lv_playerCount], UnitLastCreated(), 1);
            if ((lv_playerCount > 5)) {
                lv_playerCount = 5;
                UnitBehaviorAdd(UnitLastCreated(), "RaidBoss", UnitLastCreated(), 1);
                UnitBehaviorAdd(UnitLastCreated(), "AntiStun3", UnitLastCreated(), 1);
                if ((lp_dungeonIndex <= -1)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Hardcore", UnitLastCreated(), 1);
                    UnitBehaviorAdd(UnitLastCreated(), "HardcoreRaid", UnitLastCreated(), 1);
                }

                auto9480AA65_ae = gv_raidsBossesIndex;
                lv_index = 1;
                for ( ; ( (auto9480AA65_ai >= 0 && lv_index <= auto9480AA65_ae) || (auto9480AA65_ai < 0 && lv_index >= auto9480AA65_ae) ) ; lv_index += auto9480AA65_ai ) {
                    if ((UnitGetType(UnitLastCreated()) == gv_raidsBosses[lv_index])) {
                        gv_raidsBossesSpawned[lv_index] = UnitLastCreated();
                    }

                }
            }

        }

    }

    UnitSetCustomValue(UnitLastCreated(), 10, lv_xY[1]);
    UnitSetCustomValue(UnitLastCreated(), 11, lv_xY[2]);
    UnitSetCustomValue(UnitLastCreated(), 12, lv_xY[0]);
    if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == false)) {
        UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel - 1));
        if ((lp_dungeonIndex > 200)) {
            UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel - 1));
        }

    }
    else {
        if (((lp_dungeonIndex > 200) || (lp_dungeonIndex <= -1))) {
            if ((UnitHasBehavior2(UnitLastCreated(), "SupremeusVisibility") == true)) {
                UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel + 6));
            }
            else {
                UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel + 2));
            }
        }
        else {
            if ((UnitHasBehavior2(UnitLastCreated(), "SupremeusVisibility") == true)) {
                UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel + 2));
            }
            else {
                UnitSetCustomValue(UnitLastCreated(), 0, lv_tempLevel);
            }
        }
        if ((lv_tempLevel >= 83) && (UnitHasBehavior2(UnitLastCreated(), "DogMode") == false)) {
            UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel + 18));
        }

    }
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
    lv_tempStat *= 0.9;
    lv_tempMath = (((lv_tempStat * (0.63 + (lv_tempLevel * 0.115))) * (1.0 + (lv_tempLevel * 0.195))) * (0.34 + (lv_playerCount * (0.25 + (0.0035 * lv_playerCount)))));
    if ((lp_heroic == true) && (lp_dungeonIndex <= 0)) {
    }
    else {
        if ((lv_tempMath > 330000.0)) {
            lv_tempMath = 330000.0;
        }

        lv_tempMath *= (1.0 + (lv_tierIndex * 0.075));
    }
    if ((lv_tempLevel > 80) && (lv_tempMath > 330000.0)) {
        lv_tempMath = 410000.0;
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
    lv_tempMath = (((lv_tempStat * (0.8 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.014))) * (0.15 + (lv_playerCount * 0.15)));
    lv_tempMath *= (1.0 + (lv_tierIndex * 0.07));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
    lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.07))) + 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
    lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.14))) * (1.1 + (lv_tempLevel * 0.13))) / 5.0);
    lv_tempInt[1] = FixedToInt(lv_tempMath);
    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
    UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
    UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
    lv_tempMath = (((lv_tempLevel * 0.32) * (-3.0 + (lv_tempLevel * 0.46))) * (0.5 + (lv_playerCount * (0.23 + (0.01 * lv_playerCount)))));
    lv_tempMath *= (1.0 + (lv_tierIndex * 0.06));
    lv_tempInt[1] = FixedToInt(lv_tempMath);
    lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
    lv_tempInt[1] = ModI(lv_tempInt[1], 15);
    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
    UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
    UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
    UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
    UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
    UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
    UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
    return true;
}

trigger auto_gf_SurvivalCreepSpawn_Trigger = null;

void gf_SurvivalCreepSpawn () {
    if (auto_gf_SurvivalCreepSpawn_Trigger == null) {
        auto_gf_SurvivalCreepSpawn_Trigger = TriggerCreate("auto_gf_SurvivalCreepSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalCreepSpawn_Trigger, false, false);
}

bool auto_gf_SurvivalCreepSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_creepType;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    int lv_tempDifficulty;
    int lv_spawnCount;
    int lv_waveCount;
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_creepTypeIndex;
    int lv_playerCount;
    region[6] lv_spawnLocation;
    int lv_bossTimerAddition;

    // Automatic Variable Declarations
    const int autoAD2CC4FC_ae = 5;
    const int autoAD2CC4FC_ai = 1;
    const int autoAF41C778_ae = 5;
    const int autoAF41C778_ai = 1;
    int autoF700DFCB_ae;
    const int autoF700DFCB_ai = 1;
    int auto5A016D18_ae;
    const int auto5A016D18_ai = 1;
    int autoD7D3C126_ae;
    const int autoD7D3C126_ai = 1;
    int autoBC5E537F_val;
    unitgroup auto5E1F9D5C_g;
    int auto5E1F9D5C_u;
    unit auto5E1F9D5C_var;
    unitgroup auto5A83E8EA_g;
    int auto5A83E8EA_u;
    unit auto5A83E8EA_var;
    unitgroup autoCB4478E1_g;
    int autoCB4478E1_u;
    unit autoCB4478E1_var;

    // Variable Initialization
    lv_playerCount = PlayerGroupCount(gv_dungeonsParty[0]);

    // Implementation
    lv_spawnLocation[1] = RegionFromId(50);
    lv_spawnLocation[2] = RegionFromId(54);
    lv_spawnLocation[3] = RegionFromId(55);
    lv_spawnLocation[4] = RegionFromId(72);
    lv_spawnLocation[5] = RegionFromId(49);
    while ((UnitGroupCount(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_creepTypeIndex = 0;
        gv_survivalLevelsPassed += 1;
        lv_tempLevel = ((gv_generalLevelCap + 8) + gv_survivalLevelsPassed);
        lv_waveCount = (3 + FloorI((gv_survivalLevelsPassed / 6)));
        if ((gv_dungeonsHeroic[0] == true)) {
            lv_tempLevel += 5;
            lv_waveCount += 1;
            lv_tempDifficulty = 1;
        }

        if ((gv_dungeonsLegendary[0] == true)) {
            lv_tempLevel += 6;
            lv_tempDifficulty = 2;
        }

        if ((gv_dungeonsHardcore[0] == true)) {
            lv_tempLevel += 7;
            lv_tempDifficulty = 3;
        }

        libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[5][0], (StringExternal("Param/Value/1DF3C851") + IntToText(gv_survivalLevelsPassed)), gv_dungeonsParty[0]);
        SoundPlayForPlayer(SoundLink("ZergMecha_Death_BloodRun", -1), c_maxPlayers, gv_dungeonsParty[0], 150.0, 0.0);
        lv_index = 0;
        for ( ; ( (autoAD2CC4FC_ai >= 0 && lv_index <= autoAD2CC4FC_ae) || (autoAD2CC4FC_ai < 0 && lv_index >= autoAD2CC4FC_ae) ) ; lv_index += autoAD2CC4FC_ai ) {
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[5][lv_index], gv_dungeonsParty[0], 0.1, 0.0);
        }
        Wait(2.0, c_timeGame);
        lv_index = 0;
        for ( ; ( (autoAF41C778_ai >= 0 && lv_index <= autoAF41C778_ae) || (autoAF41C778_ai < 0 && lv_index >= autoAF41C778_ae) ) ; lv_index += autoAF41C778_ai ) {
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[5][lv_index], gv_dungeonsParty[0], 5.0, 100.0);
        }
        lv_bossTimerAddition = 0;
        if ((RandomInt(1, (9 - lv_tempDifficulty)) == 1)) {
            SoundPlayForPlayer(SoundLink("Yagdra_VoxRoar", -1), c_maxPlayers, gv_dungeonsParty[0], 150.0, 0.0);
            lv_spawnCount = 1;
            lv_creepTypeIndex = 10;
            lv_creepType = gv_survivalBossTypes[RandomInt(1, 10)];
            lv_waveCount = 1;
            lv_bossTimerAddition = (20 + FixedToInt((gv_survivalLevelsPassed * 1.5)));
        }

        autoF700DFCB_ae = lv_waveCount;
        lv_index = 1;
        for ( ; ( (autoF700DFCB_ai >= 0 && lv_index <= autoF700DFCB_ae) || (autoF700DFCB_ai < 0 && lv_index >= autoF700DFCB_ae) ) ; lv_index += autoF700DFCB_ai ) {
            if ((lv_creepTypeIndex != 10)) {
                lv_creepTypeIndex = RandomInt(1, 9);
                lv_creepType = gv_invasionBadUnitTypes[lv_creepTypeIndex];
                if ((RandomInt(1, 8) == 1)) {
                    lv_spawnCount = 1;
                }
                else {
                    if ((RandomInt(1, 8) == 1)) {
                        lv_spawnCount = 5;
                    }
                    else {
                        lv_spawnCount = 3;
                    }
                }
            }

            auto5A016D18_ae = gv_survivalUnitSpawnCount[lv_creepTypeIndex];
            lv_index2 = 1;
            for ( ; ( (auto5A016D18_ai >= 0 && lv_index2 <= auto5A016D18_ae) || (auto5A016D18_ai < 0 && lv_index2 >= auto5A016D18_ae) ) ; lv_index2 += auto5A016D18_ai ) {
                autoD7D3C126_ae = lv_spawnCount;
                lv_index3 = 1;
                for ( ; ( (autoD7D3C126_ai >= 0 && lv_index3 <= autoD7D3C126_ae) || (autoD7D3C126_ai < 0 && lv_index3 >= autoD7D3C126_ae) ) ; lv_index3 += autoD7D3C126_ai ) {
                    if ((UnitGroupCount(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        TimerStart(gv_regionsDungeonsCloseTimer[0], 3.0, false, c_timeGame);
                        return true;
                    }

                    UnitCreate(1, lv_creepType, 0, 15, RegionRandomPoint(lv_spawnLocation[RandomInt(1, 5)]), libNtve_gf_RandomAngle());
                    UnitBehaviorAdd(UnitLastCreated(), "CreepReduction", UnitLastCreated(), 1);
                    UnitBehaviorAdd(UnitLastCreated(), "CreepCountReduction", UnitLastCreated(), lv_playerCount);
                    if ((lv_creepTypeIndex != 10)) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetCastShadows");
                    }
                    else {
                        UnitBehaviorAdd(UnitLastCreated(), "Boss", UnitLastCreated(), 1);
                        UnitBehaviorAdd(UnitLastCreated(), gv_dungeonsBossStunReduction[lv_playerCount], UnitLastCreated(), 1);
                        UnitBehaviorAdd(UnitLastCreated(), "Wander3", UnitLastCreated(), 1);
                        if ((gv_survivalLevelsPassed > 40)) {
                            UnitBehaviorAdd(UnitLastCreated(), "ArmorReduced", UnitLastCreated(), 1);
                        }

                        if ((gv_survivalLevelsPassed > 50)) {
                            UnitBehaviorAdd(UnitLastCreated(), "ArmorReduced", UnitLastCreated(), 1);
                        }

                        if ((gv_survivalLevelsPassed > 60)) {
                            UnitBehaviorAdd(UnitLastCreated(), "ArmorReduced", UnitLastCreated(), 1);
                        }

                    }
                    if ((gv_dungeonsHeroic[0] == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Heroic2", UnitLastCreated(), 1);
                    }

                    if ((gv_dungeonsLegendary[0] == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), "LegendaryMod", UnitLastCreated(), 1);
                    }

                    if ((gv_dungeonsHardcore[0] == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Hardcore", UnitLastCreated(), 1);
                    }

                    UnitGroupAdd(gv_survivalBadUnitGroup, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, (lv_tempLevel - 15));
                    UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel - 15));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.500000");
                    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
                    lv_tempStat *= 0.4;
                    lv_tempMath = (((lv_tempStat * (0.63 + (lv_tempLevel * 0.115))) * (1.0 + (lv_tempLevel * 0.193))) * (0.37 + (lv_playerCount * (0.25 + (0.004 * lv_playerCount)))));
                    if (((lv_tempMath > 330000.0) || (lv_tempMath < 2.0))) {
                        lv_tempMath = 330000.0;
                    }

                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
                    lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.02))) * (0.6 + (lv_playerCount * 0.2)));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
                    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
                    lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.05))) + 0.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
                    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
                    lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.15))) * (1.1 + (lv_tempLevel * 0.1))) / 6.5);
                    lv_tempInt[1] = FixedToInt(lv_tempMath);
                    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
                    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
                    UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
                    UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
                    lv_tempMath = (((lv_tempLevel * 0.33) * (-3.0 + (lv_tempLevel * 0.45))) * (0.43 + (lv_playerCount * (0.18 + (0.018 * lv_playerCount)))));
                    lv_tempMath *= 0.4;
                    lv_tempInt[1] = FixedToInt(lv_tempMath);
                    lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
                    lv_tempInt[1] = ModI(lv_tempInt[1], 15);
                    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
                    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
                    UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
                    UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
                    UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
                    lv_tempStat = (1.0 + (1.1 * (lv_tempLevel * (1.0 + (lv_tempLevel * 0.03)))));
                    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
                    lv_tempStat *= ((lv_tempRatio * 0.01) + (0.2 + (lv_playerCount * 0.1)));
                    UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
                    lv_tempStat = (((2.2 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.12))) + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
                    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
                    lv_tempStat *= ((lv_tempRatio * 0.01) + 1.0);
                    lv_tempStat *= (1.0 + (0.2 + (lv_playerCount * 0.8)));
                    UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
                    lv_tempStat = (((1.0 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.11))) + RandomInt((lv_tempLevel * 0), (lv_tempLevel * 2)));
                    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
                    lv_tempStat *= ((lv_tempRatio * 0.01) + 1.0);
                    lv_tempStat *= (1.0 + (0.2 + (lv_playerCount * 0.8)));
                    UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
                    autoBC5E537F_val = lv_spawnCount;
                    if (autoBC5E537F_val == 1) {
                        UnitBehaviorAdd(UnitLastCreated(), "Heroic", UnitLastCreated(), 1);
                    }
                    else if (autoBC5E537F_val == 3) {
                        UnitBehaviorAdd(UnitLastCreated(), "Normal", UnitLastCreated(), 1);
                    }
                    else if (autoBC5E537F_val == 5) {
                        UnitBehaviorAdd(UnitLastCreated(), "Swarm", UnitLastCreated(), 1);
                    }
                    else {
                    }
                    UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
                    UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
                    UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
                    Wait(0.2, c_timeGame);
                    libNtve_gf_PauseUnit(UnitLastCreated(), false);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
                    Wait(0.1, c_timeGame);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    Wait((0.05 + (gv_survivalLevelsPassed * 0.003)), c_timeGame);
                }
                Wait(1.0, c_timeGame);
                auto5E1F9D5C_g = gv_survivalBadUnitGroup;
                auto5E1F9D5C_u = UnitGroupCount(auto5E1F9D5C_g, c_unitCountAll);
                for (;; auto5E1F9D5C_u -= 1) {
                    auto5E1F9D5C_var = UnitGroupUnitFromEnd(auto5E1F9D5C_g, auto5E1F9D5C_u);
                    if (auto5E1F9D5C_var == null) { break; }
                    if ((UnitOrder(auto5E1F9D5C_var, 0) == null)) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    }

                }
            }
            Wait((6 - lv_spawnCount), c_timeGame);
            auto5A83E8EA_g = gv_survivalBadUnitGroup;
            auto5A83E8EA_u = UnitGroupCount(auto5A83E8EA_g, c_unitCountAll);
            for (;; auto5A83E8EA_u -= 1) {
                auto5A83E8EA_var = UnitGroupUnitFromEnd(auto5A83E8EA_g, auto5A83E8EA_u);
                if (auto5A83E8EA_var == null) { break; }
                if ((UnitOrder(auto5A83E8EA_var, 0) == null)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }

            }
        }
        Wait(2.0, c_timeGame);
        if ((UnitGroupCount(gv_survivalBadUnitGroup, c_unitCountAlive) >= 1) && (UnitIsAlive(UnitFromId(779392242)) == true)) {
            autoCB4478E1_g = gv_survivalBadUnitGroup;
            autoCB4478E1_u = UnitGroupCount(autoCB4478E1_g, c_unitCountAll);
            for (;; autoCB4478E1_u -= 1) {
                autoCB4478E1_var = UnitGroupUnitFromEnd(autoCB4478E1_g, autoCB4478E1_u);
                if (autoCB4478E1_var == null) { break; }
                if ((UnitOrder(autoCB4478E1_var, 0) == null)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[0][1], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }

            }
        }

        Wait((10 + FixedToInt(((gv_survivalLevelsPassed * 0.5) * (1.0 + (gv_survivalLevelsPassed * 0.05))))), c_timeGame);
        Wait(lv_bossTimerAddition, c_timeGame);
    }
    TimerStart(gv_regionsDungeonsCloseTimer[0], 3.0, false, c_timeGame);
    return true;
    return true;
}

void gf_BeastMasterCreepSpawn (string lp_creep, int lp_playerCount, int lp_creepLevel) {
    // Variable Declarations
    string lv_creepType;
    int lv_playerCount;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    int lv_tierIndex;
    int lv_spawnIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creepType = lp_creep;
    lv_playerCount = lp_playerCount;
    lv_tempLevel = lp_creepLevel;

    // Implementation
    lv_tierIndex = FloorI(((lv_tempLevel - gv_generalLevelCap) / 4));
    if ((lp_playerCount > 1)) {
        lv_spawnIndex = RandomInt(1, 5);
        gf_GeneralBeastMasterMessage(gv_beastMasterCreepSpawnText[lv_spawnIndex], gv_generalTeamsAll);
        UnitCreate(1, lv_creepType, 0, 15, gv_beastMasterCreepSpawns[lv_spawnIndex], libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "RaidBoss", UnitLastCreated(), 1);
    }
    else {
        UnitCreate(1, lv_creepType, 0, 15, RegionRandomPoint(RegionFromId(146)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Beastmaster", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "RaidBoss", UnitLastCreated(), 1);
    }
    UnitSetInfoText2(UnitLastCreated(), (StringExternal("Param/Value/781CA78D") + IntToText(lv_tempLevel)));
    UnitBehaviorAdd(UnitLastCreated(), "CreepReduction", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "CreepCountReduction", UnitLastCreated(), lp_playerCount);
    UnitBehaviorAdd(UnitLastCreated(), gv_dungeonsBossStunReduction[lv_playerCount], UnitLastCreated(), 1);
    if ((lp_playerCount > 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "Heroic2", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), gv_dungeonsBossStunReduction[lp_playerCount], UnitLastCreated(), 1);
    }
    else {
        UnitBehaviorAdd(UnitLastCreated(), "SinglePlayer", UnitLastCreated(), 1);
    }
    UnitSetCustomValue(UnitLastCreated(), 0, lv_tempLevel);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
    if ((lp_creepLevel > 82)) {
        UnitBehaviorAdd(UnitLastCreated(), "EnrageStunless", UnitLastCreated(), 1);
    }

    if ((lp_creepLevel > 90)) {
        UnitBehaviorAdd(UnitLastCreated(), "DodgeRanged", UnitLastCreated(), 1);
    }

    if ((lv_playerCount > 5)) {
        lv_playerCount = 5;
    }

    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
    lv_tempStat *= 1.2;
    lv_tempMath = (((lv_tempStat * (0.9 + (lv_tempLevel * 0.115))) * (1.0 + (lv_tempLevel * 0.2))) * (0.32 + (lv_playerCount * (0.24 + (0.005 * lv_playerCount)))));
    lv_tempMath *= (1.0 + (lv_tierIndex * 0.07));
    if (((lv_tempMath > 400000.0) || (lv_tempMath < 2.0))) {
        lv_tempMath = 400000.0;
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
    lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.013))) * (0.2 + (lp_playerCount * 0.25)));
    lv_tempMath *= (1.0 + (lv_tierIndex * 0.07));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
    lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.07))) + 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
    lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
    lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.14))) * (1.1 + (lv_tempLevel * 0.13))) / 5.0);
    lv_tempInt[1] = FixedToInt(lv_tempMath);
    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
    UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
    UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
    lv_tempMath = (((lv_tempLevel * 0.34) * (-3.0 + (lv_tempLevel * 0.47))) * (0.39 + (lv_playerCount * (0.23 + (0.021 * lv_playerCount)))));
    lv_tempMath *= (1.0 + (lv_tierIndex * 0.06));
    lv_tempInt[1] = FixedToInt(lv_tempMath);
    lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
    lv_tempInt[1] = ModI(lv_tempInt[1], 15);
    lv_tempInt[2] = ModI(lv_tempInt[1], 4);
    lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
    UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
    UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
    UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
    lv_tempStat = (3.0 + (1.4 * (lv_tempLevel * (1.0 + (lv_tempLevel * 0.03)))));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
    lv_tempStat *= ((lv_tempRatio * 0.01) + (0.7 + (lp_playerCount * 0.3)));
    UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
    lv_tempStat = (((27.0 * (1.3 + (lv_tempLevel * 0.13))) * (1.1 + (lv_tempLevel * 0.08))) + RandomInt((lv_tempLevel * 3), (lv_tempLevel * 5)));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
    lv_tempStat *= ((lv_tempRatio * 0.01) + 0.0);
    lv_tempStat *= (1.0 + (-0.3 + (lv_playerCount * 0.55)));
    UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
    lv_tempStat = (((11.0 * (1.2 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.06))) + RandomInt((lv_tempLevel * 2), (lv_tempLevel * 2)));
    lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
    lv_tempStat *= ((lv_tempRatio * 0.01) + (0.2 + (lp_playerCount * 0.7)));
    UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
    if ((UnitTypeTestAttribute(lv_creepType, c_unitAttributeBiological) == true)) {
        lv_tempStat = (lv_tempLevel + RandomInt((lv_tempLevel * 2), (lv_tempLevel * 3)));
        lv_tempStat *= (0.0 + (1.1 + (lp_playerCount * 0.25)));
        UnitSetCustomValue(UnitLastCreated(), 4, lv_tempStat);
    }

    UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
    UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
    UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
}

void gf_RaidCreepSpawnSetup (int lp_heroic) {
    // Variable Declarations
    int lv_index;
    int lv_final;
    int lv_tempBoss;
    int lv_tempPlayers;
    int lv_tempIndex;
    int lv_tempIndex2;
    int lv_heroic;

    // Automatic Variable Declarations
    unitgroup autoCEE06288_g;
    int autoCEE06288_u;
    unit autoCEE06288_var;
    playergroup autoE967F83D_g;
    int autoE967F83D_var;
    int auto2BD12CF1_ae;
    const int auto2BD12CF1_ai = 1;

    // Variable Initialization
    lv_heroic = lp_heroic;

    // Implementation
    if ((lv_heroic == -2)) {
        lv_heroic = -1;
        lv_tempBoss = 13;
    }
    else {
        while (true) {
            lv_tempIndex2 += 1;
            lv_tempBoss = RandomInt(1, 12);
            autoCEE06288_g = UnitGroup(gv_raidsBosses[lv_tempBoss], c_playerAny, RegionCircle(gv_raidsBossesRegions[lv_tempBoss], 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCEE06288_u = UnitGroupCount(autoCEE06288_g, c_unitCountAll);
            for (;; autoCEE06288_u -= 1) {
                autoCEE06288_var = UnitGroupUnitFromEnd(autoCEE06288_g, autoCEE06288_u);
                if (autoCEE06288_var == null) { break; }
                lv_tempIndex = 1;
            }
            if ((gv_raidsBossesMulti[lv_tempBoss] == 0)) {
            }
            else {
                if ((lv_tempIndex == 1)) {
                }
                else {
                    break;
                }
            }
            if ((lv_tempIndex2 >= 15)) {
                return ;
            }

        }
    }
    autoE967F83D_g = gv_generalTeamsAll;
    autoE967F83D_var = -1;
    while (true) {
        autoE967F83D_var = PlayerGroupNextPlayer(autoE967F83D_g, autoE967F83D_var);
        if (autoE967F83D_var < 0) { break; }
        CameraShakeStart(autoE967F83D_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
        if ((gv_playerHeroHeroLevelExp[autoE967F83D_var][1] >= gv_generalLevelCap)) {
            lv_tempPlayers += 1;
            PlayerGroupAdd(gv_dungeonsParty[20], autoE967F83D_var);
        }

    }
    if ((lv_tempPlayers < 6)) {
        lv_tempPlayers = 6;
    }

    if ((lv_heroic == -1)) {
        gf_GeneralRaidMessage((StringExternal("Param/Value/8CCDE10D") + (gv_raidsBossesText[lv_tempBoss] + StringExternal("Param/Value/6EA57750"))), PlayerGroupAll());
    }
    else {
        gf_GeneralRaidMessage(gv_raidsBossesText[lv_tempBoss], PlayerGroupAll());
    }
    gf_DungeonCreepSpawn(gv_raidsBosses[lv_tempBoss], lv_tempPlayers, PointGetX(gv_raidsBossesRegions[lv_tempBoss]), PointGetY(gv_raidsBossesRegions[lv_tempBoss]), true, lv_heroic);
    TimerStart(gv_raidsBossesDespawnTimer[lv_tempBoss], 900.0, false, c_timeGame);
    SoundPlayAtPointForPlayer(gv_raidsBossesSound[lv_tempBoss], c_maxPlayers, PlayerGroupAll(), gv_raidsBossesRegions[lv_tempBoss], 0.0, 125.0, 0.0);
    if ((gv_raidsBossesMulti[lv_tempBoss] > 1)) {
        auto2BD12CF1_ae = (0 + gv_raidsBossesMulti[lv_tempBoss]);
        lv_index = 2;
        for ( ; ( (auto2BD12CF1_ai >= 0 && lv_index <= auto2BD12CF1_ae) || (auto2BD12CF1_ai < 0 && lv_index >= auto2BD12CF1_ae) ) ; lv_index += auto2BD12CF1_ai ) {
            gf_DungeonCreepSpawn(gv_raidsBosses[(lv_tempBoss + (lv_index - 1))], lv_tempPlayers, PointGetX(gv_raidsBossesRegions[(lv_tempBoss + (lv_index - 1))]), PointGetY(gv_raidsBossesRegions[(lv_tempBoss + (lv_index - 1))]), true, lv_heroic);
        }
    }

}

trigger auto_gf_InvasionCreepSpawn_Trigger = null;

void gf_InvasionCreepSpawn () {
    if (auto_gf_InvasionCreepSpawn_Trigger == null) {
        auto_gf_InvasionCreepSpawn_Trigger = TriggerCreate("auto_gf_InvasionCreepSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionCreepSpawn_Trigger, false, false);
}

bool auto_gf_InvasionCreepSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_creepType;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    int lv_index;
    int lv_index2;
    int lv_timer;
    int lv_reduceCount;

    // Automatic Variable Declarations
    int auto519FF7FF_ae;
    const int auto519FF7FF_ai = 1;
    int autoB4C4FB47_ae;
    const int autoB4C4FB47_ai = 1;
    unitgroup auto6B710783_g;
    int auto6B710783_u;
    unit auto6B710783_var;
    unitgroup autoD526A942_g;
    int autoD526A942_u;
    unit autoD526A942_var;
    unitgroup autoB2630F96_g;
    int autoB2630F96_u;
    unit autoB2630F96_var;

    // Variable Initialization
    lv_reduceCount = 25;

    // Implementation
    gv_invasionRunning = true;
    lv_timer = (8 + 0);
    auto519FF7FF_ae = gv_invasionBadUnitSpawnCountWaves[2];
    lv_index = 1;
    for ( ; ( (auto519FF7FF_ai >= 0 && lv_index <= auto519FF7FF_ae) || (auto519FF7FF_ai < 0 && lv_index >= auto519FF7FF_ae) ) ; lv_index += auto519FF7FF_ai ) {
        autoB4C4FB47_ae = gv_invasionBadUnitSpawnCountWaves[1];
        lv_index2 = 1;
        for ( ; ( (autoB4C4FB47_ai >= 0 && lv_index2 <= autoB4C4FB47_ae) || (autoB4C4FB47_ai < 0 && lv_index2 >= autoB4C4FB47_ae) ) ; lv_index2 += autoB4C4FB47_ai ) {
            if ((RandomInt(1, 100) <= 10)) {
                lv_creepType = gv_invasionBadUnitTypes[4];
                if ((gv_generalEndGameMode == true) && (RandomInt(1, 3) == 3)) {
                    lv_creepType = gv_invasionBadUnitTypes[9];
                }

            }
            else {
                if ((RandomInt(1, 100) <= 18)) {
                    lv_creepType = gv_invasionBadUnitTypes[3];
                    if ((gv_generalEndGameMode == true) && (RandomInt(1, 2) == 2)) {
                        lv_creepType = gv_invasionBadUnitTypes[8];
                    }

                }
                else {
                    if ((RandomInt(1, 100) <= 27)) {
                        lv_creepType = gv_invasionBadUnitTypes[2];
                        if ((gv_generalEndGameMode == true) && (RandomInt(1, 2) == 2)) {
                            lv_creepType = gv_invasionBadUnitTypes[7];
                        }

                    }
                    else {
                        lv_creepType = gv_invasionBadUnitTypes[1];
                        if ((gv_generalEndGameMode == true) && (RandomInt(1, 2) == 2)) {
                            lv_creepType = gv_invasionBadUnitTypes[5];
                        }

                    }
                }
            }
            lv_tempLevel = (gv_invasionBadUnitUpgradeCount * 1);
            UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel - 0));
            UnitCreate(1, lv_creepType, 0, 15, RegionRandomPoint(RegionFromId(24)), libNtve_gf_RandomAngle());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetCastShadows");
            UnitGroupAdd(gv_invasionBadUnitGroup, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
            UnitSetCustomValue(UnitLastCreated(), 0, lv_tempLevel);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.500000");
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (0.5 + (lv_tempLevel * 0.085))) * (1.0 + (lv_tempLevel * (0.12 + (lv_tempLevel * 0.001))))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
            lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.02))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.05))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
            lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.15))) * (1.1 + (lv_tempLevel * 0.1))) / 5.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
            lv_tempMath = (((lv_tempLevel * 0.25) * (0.0 + (lv_tempLevel * (0.35 + (lv_tempLevel * 0.0025))))) * 1.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
            lv_tempInt[1] = ModI(lv_tempInt[1], 15);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
            lv_tempStat = (1.0 + (1.1 * (lv_tempLevel * (0.5 + (lv_tempLevel * 0.007)))));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
            UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
            lv_tempStat = (((7.0 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.05))) + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
            UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
            lv_tempStat = (((2.0 * (1.09 + (lv_tempLevel * 0.08))) * (1.1 + (lv_tempLevel * 0.075))) + RandomInt((lv_tempLevel * 0), (lv_tempLevel * 1)));
            lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
            lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
            UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
            UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
            UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
            UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
            Wait(0.1, c_timeGame);
            libNtve_gf_PauseUnit(UnitLastCreated(), false);
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
            Wait(0.05, c_timeGame);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
        }
        Wait(lv_timer, c_timeGame);
        auto6B710783_g = gv_invasionBadUnitGroup;
        auto6B710783_u = UnitGroupCount(auto6B710783_g, c_unitCountAll);
        for (;; auto6B710783_u -= 1) {
            auto6B710783_var = UnitGroupUnitFromEnd(auto6B710783_g, auto6B710783_u);
            if (auto6B710783_var == null) { break; }
            if ((UnitOrder(auto6B710783_var, 0) == null)) {
                UnitIssueOrder(auto6B710783_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(gv_invasionBadUnitGroup, c_unitCountAlive) > (30 + lv_reduceCount))) {
            lv_reduceCount += 8;
            autoD526A942_g = gv_invasionBadUnitGroup;
            autoD526A942_u = UnitGroupCount(autoD526A942_g, c_unitCountAll);
            for (;; autoD526A942_u -= 1) {
                autoD526A942_var = UnitGroupUnitFromEnd(autoD526A942_g, autoD526A942_u);
                if (autoD526A942_var == null) { break; }
                UnitBehaviorAddPlayer(autoD526A942_var, "InvasionConsolidate", 15, 1);
            }
        }

    }
    while (true) {
        if ((UnitGroupCount(gv_invasionBadUnitGroup, c_unitCountAlive) >= 1) && (UnitIsAlive(UnitFromId(779392242)) == true)) {
            autoB2630F96_g = gv_invasionBadUnitGroup;
            autoB2630F96_u = UnitGroupCount(autoB2630F96_g, c_unitCountAll);
            for (;; autoB2630F96_u -= 1) {
                autoB2630F96_var = UnitGroupUnitFromEnd(autoB2630F96_g, autoB2630F96_u);
                if (autoB2630F96_var == null) { break; }
                if ((UnitOrder(autoB2630F96_var, 0) == null)) {
                    UnitIssueOrder(autoB2630F96_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
                }

            }
        }
        else {
            break;
        }
        Wait(10.0, c_timeGame);
    }
    gv_invasionRunning = false;
    return true;
}

trigger auto_gf_InvasionArmySpawn_Trigger = null;

void gf_InvasionArmySpawn () {
    if (auto_gf_InvasionArmySpawn_Trigger == null) {
        auto_gf_InvasionArmySpawn_Trigger = TriggerCreate("auto_gf_InvasionArmySpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionArmySpawn_Trigger, false, false);
}

bool auto_gf_InvasionArmySpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_creepType;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[5] lv_tempInt;
    int lv_index;
    int lv_index2;
    int lv_timer;
    int lv_reduceCount;

    // Automatic Variable Declarations
    int auto3972F8AA_ae;
    const int auto3972F8AA_ai = 1;
    int autoFF22574F_ae;
    const int autoFF22574F_ai = 1;
    unitgroup autoF5DF172D_g;
    int autoF5DF172D_u;
    unit autoF5DF172D_var;
    unitgroup auto89BAB664_g;
    int auto89BAB664_u;
    unit auto89BAB664_var;
    unitgroup auto8AE69C48_g;
    int auto8AE69C48_u;
    unit auto8AE69C48_var;

    // Variable Initialization
    lv_reduceCount = 20;

    // Implementation
    ActorSend(ActorFromDoodad(DoodadFromId(1259842858)), "SetScale 0.050000");
    ActorSend(ActorFromDoodad(DoodadFromId(1259842858)), "SetScale 0.300000 1.500000");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(26), "OZspShimmeringPortal");
    Wait(2.0, c_timeGame);
    lv_timer = (8 + 0);
    auto3972F8AA_ae = gv_invasionGoodUnitSpawnCountWaves[2];
    lv_index = 1;
    for ( ; ( (auto3972F8AA_ai >= 0 && lv_index <= auto3972F8AA_ae) || (auto3972F8AA_ai < 0 && lv_index >= auto3972F8AA_ae) ) ; lv_index += auto3972F8AA_ai ) {
        autoFF22574F_ae = gv_invasionGoodUnitSpawnCountWaves[1];
        lv_index2 = 1;
        for ( ; ( (autoFF22574F_ai >= 0 && lv_index2 <= autoFF22574F_ae) || (autoFF22574F_ai < 0 && lv_index2 >= autoFF22574F_ae) ) ; lv_index2 += autoFF22574F_ai ) {
            if ((RandomInt(1, 100) <= 7)) {
                lv_creepType = gv_invasionGoodUnitTypes[5];
            }
            else {
                if ((RandomInt(1, 100) <= 12)) {
                    lv_creepType = gv_invasionGoodUnitTypes[4];
                }
                else {
                    if ((RandomInt(1, 100) <= 22)) {
                        lv_creepType = gv_invasionGoodUnitTypes[3];
                    }
                    else {
                        if ((RandomInt(1, 100) <= 25)) {
                            lv_creepType = gv_invasionGoodUnitTypes[2];
                        }
                        else {
                            lv_creepType = gv_invasionGoodUnitTypes[1];
                        }
                    }
                }
            }
            lv_tempLevel = (gv_invasionGoodUnitUpgradeCount * 1);
            UnitCreate(1, lv_creepType, 0, 0, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetCastShadows");
            UnitGroupAdd(gv_invasionGoodUnitGroup, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.500000");
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (0.65 + (lv_tempLevel * 0.09))) * (1.0 + (lv_tempLevel * (0.125 + (lv_tempLevel * 0.001))))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
            lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.02))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
            lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.07))) + 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
            lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
            lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.15))) * (1.1 + (lv_tempLevel * 0.1))) / 5.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
            lv_tempMath = (((lv_tempLevel * 0.28) * (0.0 + (lv_tempLevel * (0.33 + (lv_tempLevel * 0.002))))) * 1.0);
            lv_tempInt[1] = FixedToInt(lv_tempMath);
            lv_tempInt[4] = FloorI((lv_tempInt[1] / 15.0));
            lv_tempInt[1] = ModI(lv_tempInt[1], 15);
            lv_tempInt[2] = ModI(lv_tempInt[1], 4);
            lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
            UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
            UnitBehaviorAdd(UnitLastCreated(), "Damage2", UnitLastCreated(), lv_tempInt[4]);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
            Wait(0.1, c_timeGame);
            libNtve_gf_PauseUnit(UnitLastCreated(), false);
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            Wait(0.05, c_timeGame);
        }
        Wait(lv_timer, c_timeGame);
        autoF5DF172D_g = gv_invasionGoodUnitGroup;
        autoF5DF172D_u = UnitGroupCount(autoF5DF172D_g, c_unitCountAll);
        for (;; autoF5DF172D_u -= 1) {
            autoF5DF172D_var = UnitGroupUnitFromEnd(autoF5DF172D_g, autoF5DF172D_u);
            if (autoF5DF172D_var == null) { break; }
            if ((UnitOrder(autoF5DF172D_var, 0) == null)) {
                UnitIssueOrder(autoF5DF172D_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            }

        }
        if ((UnitGroupCount(gv_invasionGoodUnitGroup, c_unitCountAlive) > (30 + lv_reduceCount))) {
            lv_reduceCount += 8;
            auto89BAB664_g = gv_invasionGoodUnitGroup;
            auto89BAB664_u = UnitGroupCount(auto89BAB664_g, c_unitCountAll);
            for (;; auto89BAB664_u -= 1) {
                auto89BAB664_var = UnitGroupUnitFromEnd(auto89BAB664_g, auto89BAB664_u);
                if (auto89BAB664_var == null) { break; }
                UnitBehaviorAddPlayer(auto89BAB664_var, "InvasionConsolidate", 0, 1);
            }
        }

    }
    ActorSend(ActorFromDoodad(DoodadFromId(1259842858)), "SetScale 0.050000 1.000000");
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(26), "OZspShimmeringPortal");
    while (true) {
        if ((UnitGroupCount(gv_invasionGoodUnitGroup, c_unitCountAlive) >= 1) && (UnitIsAlive(UnitFromId(779392242)) == true)) {
            auto8AE69C48_g = gv_invasionGoodUnitGroup;
            auto8AE69C48_u = UnitGroupCount(auto8AE69C48_g, c_unitCountAll);
            for (;; auto8AE69C48_u -= 1) {
                auto8AE69C48_var = UnitGroupUnitFromEnd(auto8AE69C48_g, auto8AE69C48_u);
                if (auto8AE69C48_var == null) { break; }
                if ((UnitOrder(auto8AE69C48_var, 0) == null)) {
                    UnitIssueOrder(auto8AE69C48_var, OrderTargetingPoint(AbilityCommand("War3Attack", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
                }

            }
        }
        else {
            break;
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_InvasionEarlySpawn_Trigger = null;

void gf_InvasionEarlySpawn () {
    if (auto_gf_InvasionEarlySpawn_Trigger == null) {
        auto_gf_InvasionEarlySpawn_Trigger = TriggerCreate("auto_gf_InvasionEarlySpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionEarlySpawn_Trigger, false, false);
}

bool auto_gf_InvasionEarlySpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_creepType;
    int lv_tempLevel;
    fixed lv_tempMath;
    fixed lv_tempStat;
    fixed lv_tempRatio;
    int[4] lv_tempInt;
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    const int auto64704C40_ae = 300;
    const int auto64704C40_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index2 = 1;
    for ( ; ( (auto64704C40_ai >= 0 && lv_index2 <= auto64704C40_ae) || (auto64704C40_ai < 0 && lv_index2 >= auto64704C40_ae) ) ; lv_index2 += auto64704C40_ai ) {
        if ((RandomInt(1, 100) <= 10)) {
            lv_creepType = gv_invasionBadUnitTypes[4];
        }
        else {
            if ((RandomInt(1, 100) <= 18)) {
                lv_creepType = gv_invasionBadUnitTypes[3];
            }
            else {
                if ((RandomInt(1, 100) <= 27)) {
                    lv_creepType = gv_invasionBadUnitTypes[2];
                }
                else {
                    lv_creepType = gv_invasionBadUnitTypes[1];
                }
            }
        }
        lv_tempLevel = 2;
        UnitSetCustomValue(UnitLastCreated(), 0, (lv_tempLevel - 0));
        UnitCreate(1, lv_creepType, 0, 15, RegionRandomPoint(RegionFromId(24)), libNtve_gf_RandomAngle());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, lv_tempLevel);
        UnitSetCustomValue(UnitLastCreated(), 0, lv_tempLevel);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.500000");
        lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent);
        lv_tempMath = (((lv_tempStat * (0.5 + (lv_tempLevel * 0.085))) * (1.0 + (lv_tempLevel * 0.09))) + 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_tempMath);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, c_unitPropNormal);
        lv_tempMath = (((lv_tempStat * (0.7 + (lv_tempLevel * 0.05))) * (1.0 + (lv_tempLevel * 0.02))) + 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, lv_tempMath);
        lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, c_unitPropCurrent);
        lv_tempMath = (((lv_tempStat * (1.15 + (lv_tempStat * 0.05))) * (1.1 + (lv_tempLevel * 0.05))) + 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, lv_tempMath);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lv_tempMath);
        lv_tempStat = UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeArmor, c_unitPropCurrent);
        lv_tempMath = (((lv_tempLevel * (1.1 + (lv_tempStat * 0.15))) * (1.1 + (lv_tempLevel * 0.1))) / 5.0);
        lv_tempInt[1] = FixedToInt(lv_tempMath);
        lv_tempInt[2] = ModI(lv_tempInt[1], 4);
        lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
        UnitBehaviorAdd(UnitLastCreated(), "Armor3", UnitLastCreated(), lv_tempInt[2]);
        UnitBehaviorAdd(UnitLastCreated(), "Armor4", UnitLastCreated(), lv_tempInt[3]);
        lv_tempMath = (((lv_tempLevel * 0.25) * (0.0 + (lv_tempLevel * 0.3))) * 1.0);
        lv_tempInt[1] = FixedToInt(lv_tempMath);
        lv_tempInt[2] = ModI(lv_tempInt[1], 4);
        lv_tempInt[3] = FloorI((lv_tempInt[1] / 4.0));
        UnitBehaviorAdd(UnitLastCreated(), "Damage3", UnitLastCreated(), lv_tempInt[2]);
        UnitBehaviorAdd(UnitLastCreated(), "Damage4", UnitLastCreated(), lv_tempInt[3]);
        lv_tempStat = (1.0 + (1.15 * (lv_tempLevel * (1.0 + (lv_tempLevel * 0.03)))));
        lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostTerrazine);
        lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
        UnitSetCustomValue(UnitLastCreated(), 1, lv_tempStat);
        lv_tempStat = (((7.0 * (1.15 + (lv_tempLevel * 0.1))) * (1.1 + (lv_tempLevel * 0.05))) + RandomInt((lv_tempLevel * 1), (lv_tempLevel * 2)));
        lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostMinerals);
        lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
        UnitSetCustomValue(UnitLastCreated(), 2, lv_tempStat);
        lv_tempStat = (((2.0 * (1.09 + (lv_tempLevel * 0.08))) * (1.1 + (lv_tempLevel * 0.075))) + RandomInt((lv_tempLevel * 0), (lv_tempLevel * 1)));
        lv_tempRatio = UnitTypeGetCost(lv_creepType, c_unitCostVespene);
        lv_tempStat *= ((lv_tempRatio * 0.01) + 0.6);
        UnitSetCustomValue(UnitLastCreated(), 3, lv_tempStat);
        UnitSetCustomValue(UnitLastCreated(), 5, UnitTypeGetProperty(lv_creepType, c_unitPropBountyCustom));
        UnitSetCustomValue(UnitLastCreated(), 6, UnitTypeGetProperty(lv_creepType, c_unitPropBountyMinerals));
        UnitSetCustomValue(UnitLastCreated(), 7, UnitTypeGetProperty(lv_creepType, c_unitPropBountyVespene));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKillXP, 0.0);
        Wait(0.2, c_timeGame);
        libNtve_gf_PauseUnit(UnitLastCreated(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
    }
    return true;
}

void gf_DungeonLegendaryUpdate (int lp_index) {
    // Variable Declarations
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    const int auto5575AB61_ae = 3;
    const int auto5575AB61_ai = 1;
    const int autoCFC708FC_ae = 4;
    const int autoCFC708FC_ai = 1;
    const int autoFF573472_ae = 9;
    const int autoFF573472_ai = 1;

    // Variable Initialization
    lv_index = lp_index;

    // Implementation
    if ((TimerGetRemaining(gv_legendaryDungeonTimer[lv_index]) < 1) && (gv_generalEndGameMode == true)) {
        TimerStart(gv_legendaryDungeonTimer[lv_index], 900.0, false, c_timeGame);
    }

    while (true) {
        gv_legendaryDungeonMods[lv_index][0] = RandomInt(1, gv_regionsDungeonsIndex);
        if ((gv_legendaryDungeonMods[1][0] == gv_legendaryDungeonMods[2][0])) {
        }
        else {
            break;
        }
    }
    lv_index2 = 1;
    for ( ; ( (auto5575AB61_ai >= 0 && lv_index2 <= auto5575AB61_ae) || (auto5575AB61_ai < 0 && lv_index2 >= auto5575AB61_ae) ) ; lv_index2 += auto5575AB61_ai ) {
        gv_legendaryDungeonMods[lv_index][lv_index2] = RandomInt(1, (gv_legendaryModsIndex - 1));
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_legendaryDungeonMods[lv_index][4] = RandomInt(1, gv_legendaryModsIndex);
    }
    else {
        gv_legendaryDungeonMods[lv_index][4] = 0;
    }
    gv_legendaryDungeonMods[lv_index][5] = 0;
    lv_index2 = 1;
    for ( ; ( (autoCFC708FC_ai >= 0 && lv_index2 <= autoCFC708FC_ae) || (autoCFC708FC_ai < 0 && lv_index2 >= autoCFC708FC_ae) ) ; lv_index2 += autoCFC708FC_ai ) {
        gv_legendaryDungeonMods[lv_index][5] += gv_legendaryModsMF[gv_legendaryDungeonMods[lv_index][lv_index2]];
        libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[lv_index][lv_index2], gv_legendaryModsNames[gv_legendaryDungeonMods[lv_index][lv_index2]], PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[lv_index][5], (StringExternal("Param/Value/0FE239DA") + (IntToText(gv_legendaryDungeonMods[lv_index][5]) + StringExternal("Param/Value/1EA81A6E"))), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[lv_index][0], (StringExternal("Param/Value/A7924B6A") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_legendaryDungeonTimer[lv_index])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[lv_index][6], (StringExternal("Param/Value/0B3252A4") + gv_regionsDungeonsNameDescription[gv_legendaryDungeonMods[lv_index][0]][1]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[lv_index][7], (StringExternal("Param/Value/09DB7DDA") + gv_regionsDungeonsNameDescription[gv_legendaryDungeonMods[lv_index][0]][2]), PlayerGroupAll());
    lv_index2 = 6;
    for ( ; ( (autoFF573472_ai >= 0 && lv_index2 <= autoFF573472_ae) || (autoFF573472_ai < 0 && lv_index2 >= autoFF573472_ae) ) ; lv_index2 += autoFF573472_ai ) {
        libNtve_gf_SetDialogItemColor(gv_legendaryDialogStats[lv_index][lv_index2], gv_dungeonEnterDialogColors[gv_legendaryDungeonMods[lv_index][0]], PlayerGroupAll());
    }
}

void gf_BeastMasterUpdate (int lp_trigPlayer, int lp_type) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_tempInt;
    int lv_type;

    // Automatic Variable Declarations
    int autoD0909002_val;
    const int autoEF2AB6D8_ae = 2;
    const int autoEF2AB6D8_ai = 1;
    const int auto97C786E3_ae = 2;
    const int auto97C786E3_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_type = lp_type;

    // Implementation
    autoD0909002_val = lv_type;
    if (autoD0909002_val == 0) {
        libNtve_gf_SetDialogItemText(gv_beastMasterDialogButtons[0], (StringExternal("Param/Value/101744AD") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_beastMasterPlayerTimer[lv_trigPlayer])))), PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (autoEF2AB6D8_ai >= 0 && lv_index <= autoEF2AB6D8_ae) || (autoEF2AB6D8_ai < 0 && lv_index >= autoEF2AB6D8_ae) ) ; lv_index += autoEF2AB6D8_ai ) {
            DialogControlSetVisible(gv_beastMasterDialogItems[lv_index][3], PlayerGroupSingle(lv_trigPlayer), false);
            if ((gv_beastMasterQuestPlayerProgress[lv_trigPlayer][lv_index] == 1)) {
                DialogControlSetVisible(gv_beastMasterDialogItems[lv_index][3], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
        DialogSetVisible(gv_beastMasterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoD0909002_val == 1) {
        if ((gv_generalEndGameMode == true)) {
            TimerStart(gv_beastMasterPlayerTimer[lv_trigPlayer], 1800.0, false, c_timeGame);
        }

        while (true) {
            lv_tempInt = RandomInt(1, gv_beastMasterCreepIndex);
            if ((lv_tempInt != gv_beastMasterQuestPlayerIndex[lv_trigPlayer])) {
                gv_beastMasterQuestPlayerIndex[lv_trigPlayer] = lv_tempInt;
                break;
            }

        }
        lv_index = 1;
        for ( ; ( (auto97C786E3_ai >= 0 && lv_index <= auto97C786E3_ae) || (auto97C786E3_ai < 0 && lv_index >= auto97C786E3_ae) ) ; lv_index += auto97C786E3_ai ) {
            gv_beastMasterQuestPlayerProgress[lv_trigPlayer][lv_index] = 0;
            libNtve_gf_SetDialogItemText(gv_beastMasterDialogItems[lv_index][1], UnitTypeGetName(gv_beastMasterQuestUnits[lv_tempInt][lv_index]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_beastMasterDialogItems[lv_index][2], gv_beastMasterQuestIcons[lv_tempInt][lv_index], PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (autoD0909002_val == 2) {
        gf_GeneralQuestMessage(StringExternal("Param/Value/9081CD40"), PlayerGroupSingle(lv_trigPlayer));
        lv_tempInt = gv_beastMasterQuestPlayerIndex[lv_trigPlayer];
        if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] == 0)) {
            gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] = RandomInt(50, 55);
            gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][2] = 3;
            libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_tempInt][2], gv_beastMasterCreepIcon[lv_tempInt], PlayerGroupSingle(lv_trigPlayer));
        }
        else {
            gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][2] += 1;
            if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] < 95)) {
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] += 1;
            }

            if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] < 90)) {
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] += 1;
            }

            if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] < 81)) {
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempInt][1] += 2;
            }

        }
        TimerStart(gv_beastMasterPlayerTimer[lv_trigPlayer], 1.0, false, c_timeGame);
    }
    else {
    }
}

void gf_InitVariablesHeroesStatsAchievements () {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_index4;
    int lv_trigPlayer;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto2D2E6B54_ae = 130;
    const int auto2D2E6B54_ai = 1;
    const int auto101B389C_ae = 5;
    const int auto101B389C_ai = 1;
    const int autoFBD3AACD_ae = 30;
    const int autoFBD3AACD_ai = 1;
    const int autoD7A4EDA7_ae = 60;
    const int autoD7A4EDA7_ai = 1;

    // Variable Initialization

    // Implementation
    gv_achievementsTiersCountColors[1] = Color(100.00, 100.00, 100.00);
    gv_achievementsTiersCountColors[2] = Color(53.33, 76.86, 100.00);
    gv_achievementsTiersCountColors[3] = Color(100.00, 100.00, 60.78);
    gv_achievementsTiersCountColors[4] = Color(69.41, 39.22, 100.00);
    gv_achievementsTiersCountColors[5] = Color(100.00, 69.02, 38.43);
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/E3605F25");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/52B29BCA");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/68F0BA4A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/DFF34305");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A634208D");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/DEEDFB40");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 900;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/6B97D19E");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/458FDF55");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F7AFB1E8");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/1D304A15");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 350;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/14B0E466");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 450;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/5E46B428");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/2E6C4E62");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0FDB72FF");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/24E28855");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 30;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B5F97D72");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/7896C0AE");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/342EF63A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 900;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/5C932F6F");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/CFE50C47");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/6010908D");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/3DC77426");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D33120D2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 7500;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/55059DEF");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 25000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 900;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/0056E593");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/BA025BF7");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8B9B9138");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 350;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8247D9AA");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 700;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/1AB42EBF");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1750;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 850;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/3A72817D");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/7ECEF75E");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/ED41F6C7");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 40;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F812F93F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 350;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/5D02D929");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 650;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/BE655249");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 600;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/13D5ABDE");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1500;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/3D9A7973");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/525598B0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A0FFE2AE");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 30;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/2CDEA9C5");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 400;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/24F9B00B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/42E47250");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1100;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/94B6C0ED");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/4082B258");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E8631B16");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 15;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/2598ACAB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 40;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 450;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E6C7C397");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 800;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/5EDF4AA7");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1750;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/64F3BA50");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/20617639");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/215E74AA");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A52F74F1");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 600;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/C0A26690");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 60;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9160030F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/B9140C7A");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/4D0E8950");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/C0F0DC33");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/46C00C41");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 25;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B1735FEF");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D341314A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/D47BC266");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/FC3B4277");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/03E6B3BF");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D75E13B9");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 12;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E8ACB536");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 35;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1400;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/04379766");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2600;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/23EC4C99");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/44575D42");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/4029E79B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/044465E5");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 4;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F44F15AB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 9;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1600;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/CAA83548");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 16;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2600;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/F24E2EC1");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/07AA12F8");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/527D7FC1");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9BE6461F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 75;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E8BD94DB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 250;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 450;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D4BCC413");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 750;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 800;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/5900DC56");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/6F87F988");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B5A15587");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 125000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/88D70499");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 750000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 600;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8F2F9D3B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 4000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/3B8331EA");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/7667BE7A");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/20A11C5E");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 15000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F80A5DE9");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 200000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/822FD0E1");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/12A8AED0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/80994720");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20000000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/B5179426");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/DB2ED9A3");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0C532E0A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/33B92EB2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 350;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B4EAD80E");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 75;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 550;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/22F68DD1");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 200;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/D2EBAB0E");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/EA0CF4D2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/BC3E9B72");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/985C87B4");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 15;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 400;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/34697A9A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 45;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 650;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/17263C15");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1100;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/418D043C");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F9CD0A40");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/09D2E971");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/273A4C57");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 40;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 450;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0AD06747");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 900;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9E6D6440");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 147;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 8000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/25A6090C");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B50D2822");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/FADE2676");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0EC97CF2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8078DC73");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 900;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B763EBA2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/1A8257EA");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D9714578");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/FD4B4A6F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B5064151");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/313C3047");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3000;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D916B50B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 6000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/BCE3A648");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/C75A86B2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/62BE6434");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/60651C6F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0CEC4A51");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 6;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1400;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/38A8492C");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/B9F60EF1");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/FB9B8E11");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F1FDAA42");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/4EBC7226");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/CCF048A2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 6;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/C8F27FF7");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 5000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/4406B5D0");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D17C67A8");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D28625AB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/45650DD9");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/7EE52DF0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0EC9FCAB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/5E6B37B0");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E127CD2B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/10014B33");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8DC3E974");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0DAD0A79");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/899629E3");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/01C042C5");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/C75FBAC0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/57DE528F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/261C95CB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/42591C55");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/41EF27CB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 8;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 2000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/28BCEF5C");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/1F772AE2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/7B0F6944");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9415AB28");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 30;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E963697A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 70;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A40FE9F8");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/B361EDC6");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B09524F4");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/FAD51B2D");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/69D600BB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9DF22514");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/48DAE562");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 5000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/24CD31FB");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9166A59A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/680CC104");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B19B8C8B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/6E4A3CA4");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/8E3DAC24");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/3FB48621");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/E8825EC0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/3554FD20");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D3E9C678");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/7C18D47C");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 5;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/1EACB686");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 6;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 4000;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/67B960F8");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/EF7FADF0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 15;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/83CE566F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 22;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 200;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/751F2906");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 30;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B0F46FDE");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 39;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1000;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/138E2F8F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 3500;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/BEAED409");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/01F42B49");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0E9029FE");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 300;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/ADC7AC2D");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 600;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9762DBB7");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1200;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 600;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/94B70D0E");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 2500;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1200;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/7D44E85F");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/564D51C8");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/DA7A2EFB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 30;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/28F59D44");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 60;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 250;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/63254BDB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 80;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 500;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F50D6B5B");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 1200;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/B79CDE3E");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/80566A52");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/3B42BB7E");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 50;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9E68D027");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 50;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 150;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/50056586");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 200;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/D2381649");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1000;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/6554AF37");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/54C33FC2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/6A2A0AA1");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/BEAA9BB2");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B516163F");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 20;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 300;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/833F8CC3");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 100;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 600;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/F4CF0902");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/EE7D2EE6");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A2F95130");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/693F165C");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 3;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 100;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/A05EB2D0");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 10;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 350;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/B2B038F3");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 25;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 700;
    gv_achievementsTiersCountIndex += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][0] = StringExternal("Param/Value/3EBB6A9C");
    lv_index = 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/9D991B96");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/F21B0D5A");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0FE35A32");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/080A5FAB");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 0;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 0;
    lv_index += 1;
    gv_achievementsTiersCountText[gv_achievementsTiersCountIndex][lv_index] = StringExternal("Param/Value/0BE49581");
    gv_achievementsTiersCountRequired[gv_achievementsTiersCountIndex][lv_index] = 1;
    gv_achievementsTiersCountRewards[gv_achievementsTiersCountIndex][lv_index] = 4000;
    gv_achievementsDialogPlayerPage[0] = CeilingI((gv_achievementsTiersCountIndex / 9));
    gv_heroVendorStatTiers[1][1] = 0;
    gv_heroVendorStatTiers[1][2] = 2;
    gv_heroVendorStatTiers[2][1] = 50;
    gv_heroVendorStatTiers[2][2] = 3;
    gv_heroVendorStatTiers[3][1] = 80;
    gv_heroVendorStatTiers[3][2] = 4;
    gv_heroVendorStatTiers[4][1] = 110;
    gv_heroVendorStatTiers[4][2] = 5;
    gv_heroVendorStatTiers[5][1] = 200;
    gv_heroVendorStatTiers[5][2] = 6;
    gv_heroVendorStatCosts[0] = 500;
    lv_index = 1;
    for ( ; ( (auto2D2E6B54_ai >= 0 && lv_index <= auto2D2E6B54_ae) || (auto2D2E6B54_ai < 0 && lv_index >= auto2D2E6B54_ae) ) ; lv_index += auto2D2E6B54_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto101B389C_ai >= 0 && lv_index2 <= auto101B389C_ae) || (auto101B389C_ai < 0 && lv_index2 >= auto101B389C_ae) ) ; lv_index2 += auto101B389C_ai ) {
            if ((lv_index >= gv_heroVendorStatTiers[lv_index2][1])) {
                lv_tempInt = gv_heroVendorStatTiers[lv_index2][2];
            }

        }
        gv_heroVendorStatTotals[lv_index] = (gv_heroVendorStatTotals[(lv_index - 1)] + lv_tempInt);
        if ((lv_index < 100)) {
            gv_heroVendorStatCosts[lv_index] = FixedToInt(((gv_heroVendorStatCosts[(lv_index - 1)] + (210 + (5 * lv_index))) * (0.96 + ((0.12 - (Floor((lv_index / 13.7)) * 0.0106)) / 1.0))));
        }
        else {
            gv_heroVendorStatCosts[lv_index] = 500000;
        }
    }
    gv_heroVendorSkillCosts[0] = 450;
    lv_index = 1;
    for ( ; ( (autoFBD3AACD_ai >= 0 && lv_index <= autoFBD3AACD_ae) || (autoFBD3AACD_ai < 0 && lv_index >= autoFBD3AACD_ae) ) ; lv_index += autoFBD3AACD_ai ) {
        gv_heroVendorSkillCosts[lv_index] = FixedToInt(((gv_heroVendorSkillCosts[(lv_index - 1)] + (300 + (7 * lv_index))) * (1.0 + ((0.1 - (Floor((lv_index / 14.0)) * 0.003)) * 1.0))));
    }
    gv_heroesStatsExpRequired[0] = 10;
    lv_index = 1;
    for ( ; ( (autoD7A4EDA7_ai >= 0 && lv_index <= autoD7A4EDA7_ae) || (autoD7A4EDA7_ai < 0 && lv_index >= autoD7A4EDA7_ae) ) ; lv_index += autoD7A4EDA7_ai ) {
        gv_heroesStatsExpRequired[lv_index] = FixedToInt(((gv_heroesStatsExpRequired[(lv_index - 1)] + (14 + (5 * lv_index))) * (1.0 + ((0.087 - (Floor((lv_index / 10.0)) * 0.003)) * 1.0))));
    }
    gv_heroesStatsBankTest[0] = 50;
    gv_heroesStatsTierLevels[0] = 0;
    gv_heroesStatsBankTest[1] = 200;
    gv_heroesStatsTierLevels[1] = 3;
    gv_heroesStatsBankTest[2] = 260;
    gv_heroesStatsTierLevels[2] = 7;
    gv_heroesStatsBankTest[3] = 340;
    gv_heroesStatsTierLevels[3] = 11;
    gv_heroesStatsBankTest[4] = 500;
    gv_heroesStatsTierLevels[4] = 17;
    gv_heroesStatsBankTest[5] = 750;
    gv_heroesStatsTierLevels[5] = 27;
    gv_heroesStatsBankTest[6] = 1100;
    gv_heroesStatsTierLevels[6] = 40;
    gv_heroesStatsBankTest[7] = 1650;
    gv_heroesStatsTierLevels[7] = 55;
    gv_heroesStatsBankTest[8] = 2150;
    gv_heroesStatsTierLevels[8] = 80;
    lv_index = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 1;
    lv_index += 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 2;
    lv_index += 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][1] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][2] = 2;
    lv_index += 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][1] = 3;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][2] = 4;
    lv_index += 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][1] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][2] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][3][1] = 3;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][3][2] = 3;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][4][1] = 4;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][4][2] = 4;
    lv_index += 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][1] = 1;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][1][2] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][1] = 2;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][2][2] = 3;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][3][1] = 3;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][3][2] = 4;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][4][1] = 4;
    gv_heroesStatsUpgradeTierTypeRange[lv_index][4][2] = 5;
    lv_index = 0;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Range";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point represents .5 attack range.";
    lv_index += 1;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Damage";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point increases the hero's attack damage by 1.3, and spell damage by .45%.";
    gv_heroesStatsAdvancedStatValues[lv_index][1] = 1.3;
    gv_heroesStatsAdvancedStatValues[lv_index][2] = 0.0045;
    lv_index += 1;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Speed";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point increases the hero's attack speed by .3% and cooldown rate by .1%.";
    gv_heroesStatsAdvancedStatValues[lv_index][1] = 0.003;
    gv_heroesStatsAdvancedStatValues[lv_index][2] = 0.001;
    lv_index += 1;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Life";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point increases the hero's life by 30 and life regeneration by .15.";
    gv_heroesStatsAdvancedStatValues[lv_index][1] = 30.0;
    gv_heroesStatsAdvancedStatValues[lv_index][2] = 0.15;
    lv_index += 1;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Energy";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point increases the hero's energy by 8 and energy regeneration by .09.";
    gv_heroesStatsAdvancedStatValues[lv_index][1] = 8.0;
    gv_heroesStatsAdvancedStatValues[lv_index][2] = 0.09;
    lv_index += 1;
    gv_heroesStatsAdvancedNames[lv_index][1] = "Resist";
    gv_heroesStatsAdvancedNames[lv_index][2] = "Each point increases the hero's armor by .14, and spell damage reduction by .07%.";
    gv_heroesStatsAdvancedStatValues[lv_index][1] = 0.14;
    gv_heroesStatsAdvancedStatValues[lv_index][2] = 0.0007;
    lv_index = 0;
    lv_index += 1;
    lv_index2 = 0;
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Peasant", 1, 4, 2, 2, 2, 3, StringExternal("Param/Value/539A5DBE"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/BA27D2D7"), StringExternal("Param/Value/7CA9557A"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Militia", 1, 5, 2, 3, 2, 3, StringExternal("Param/Value/52C8D3F2"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/CE7B78C1"), StringExternal("Param/Value/19A87548"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/8999EA3B"), StringExternal("Param/Value/F1F9821A"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Bandit", 1, 6, 4, 3, 2, 3, StringExternal("Param/Value/507470C3"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/A66700A7"), StringExternal("Param/Value/D90146D9"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/5EF5E692"), StringExternal("Param/Value/A0FC4E59"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/5541A9CC"), StringExternal("Param/Value/921A6619"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncriticalstrike.dds", StringExternal("Param/Value/DEBA9282"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Footman", 1, 4, 3, 5, 2, 4, StringExternal("Param/Value/0048294A"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/D546777C"), StringExternal("Param/Value/34D632FA"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/BA0A47C8"), StringExternal("Param/Value/623DF7AE"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/7B51A042"), StringExternal("Param/Value/98220D73"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndefendstop.dds", StringExternal("Param/Value/66FDDDE5"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Nightelfrunner", 1, 7, 5, 4, 3, 3, StringExternal("Param/Value/F25347E9"), lv_index, lv_index2, lv_index3, "ShieldSlam2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/F43E8DEC"), StringExternal("Param/Value/64314695"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/63ED9A86"), StringExternal("Param/Value/50449D82"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/FB43F6C8"), StringExternal("Param/Value/379C8117"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwindwalkon.dds", StringExternal("Param/Value/DD0E53E3"), StringExternal("Param/Value/EBFC6536"), "Windwalk", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnslippersofagility.dds", StringExternal("Param/Value/E8FF424F"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncriticalstrike.dds", StringExternal("Param/Value/75FEBFA0"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Bloodelflieutenant", 1, 6, 2, 6, 3, 5, StringExternal("Param/Value/46411DAC"), lv_index, lv_index2, lv_index3, "ShieldSlam3", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/69AD752D"), StringExternal("Param/Value/8753387E"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/EE998AFC"), StringExternal("Param/Value/281B422F"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/089C0CA6"), StringExternal("Param/Value/14D239AE"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/7CDCD07B"), StringExternal("Param/Value/1988A39C"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnarcanitemelee.dds", StringExternal("Param/Value/54A5B1CF"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndefendstop.dds", StringExternal("Param/Value/41079D38"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Nightelfassassin", 1, 8, 6, 5, 4, 3, StringExternal("Param/Value/7D3F274F"), lv_index, lv_index2, lv_index3, "PowerfulStrike2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/42EA910B"), StringExternal("Param/Value/EA23B38B"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfanofknives.dds", StringExternal("Param/Value/909DE4BC"), StringExternal("Param/Value/C18C2646"), "StringofDaggers", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/2719DE4D"), StringExternal("Param/Value/289627A1"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwindwalkon.dds", StringExternal("Param/Value/C3B1DDED"), StringExternal("Param/Value/2FB9B53A"), "Windwalk", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvengeanceincarnate.dds", StringExternal("Param/Value/5855A68A"), StringExternal("Param/Value/31706F0B"), "ShadowStep", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnblink.dds", StringExternal("Param/Value/044749FC"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpoisonarrow.dds", StringExternal("Param/Value/235EFA03"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Admiralproudmoore", 1, 7, 6, 5, 5, 3, StringExternal("Param/Value/38CE7CAA"), lv_index, lv_index2, lv_index3, "PowerfulStrike3", "ShieldSlam2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/1F2C1117"), StringExternal("Param/Value/9228DAE2"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/04EB2F81"), StringExternal("Param/Value/71F6992C"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/6E27DC07"), StringExternal("Param/Value/F8CD2479"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshockwave.dds", StringExternal("Param/Value/A60472E5"), StringExternal("Param/Value/FECE9D74"), "Shockwave", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/6CEB8FF6"), StringExternal("Param/Value/A3A6B03E"), "DefensiveStance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsilence.dds", StringExternal("Param/Value/5B70C6AA"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriummelee.dds", StringExternal("Param/Value/EF1264C4"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Druidoftheclaw", 1, 8, 2, 9, 3, 4, StringExternal("Param/Value/E46B502F"), lv_index, lv_index2, lv_index3, "Taunt2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/EF1556CE"), StringExternal("Param/Value/0A044C29"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnriderlesshorse.dds", StringExternal("Param/Value/9C2988B7"), StringExternal("Param/Value/E2865D09"), "Charge2", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/89F15AD3"), StringExternal("Param/Value/4EB8A8EC"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/AD9D3FB6"), StringExternal("Param/Value/4555BB70"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreincarnation.dds", StringExternal("Param/Value/30A72AE2"), StringExternal("Param/Value/118EE167"), "BloodRage", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbattleroar.dds", StringExternal("Param/Value/A55F3A8B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhardenedskin.dds", StringExternal("Param/Value/2818D154"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Spellbreaker", 1, 6, 3, 6, 4, 7, StringExternal("Param/Value/643A7E07"), lv_index, lv_index2, lv_index3, "Taunt3", "ShieldSlam3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspellbreakermagicdefend.dds", StringExternal("Param/Value/CA0FA9B3"), StringExternal("Param/Value/B585E07A"), "ShieldingStrikes", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/E3EBDDB8"), StringExternal("Param/Value/9D4CD900"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/43D8794A"), StringExternal("Param/Value/5ECDE1AD"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/64A9C3B7"), StringExternal("Param/Value/72ECB8A4"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnavatar.dds", StringExternal("Param/Value/EED2A201"), StringExternal("Param/Value/855A6053"), "Avatar", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnantimagicshell.dds", StringExternal("Param/Value/28C08179"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndeathpact.dds", StringExternal("Param/Value/91B84D3B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Warden", 1, 9, 8, 5, 5, 3, StringExternal("Param/Value/2B75383A"), lv_index, lv_index2, lv_index3, "FrenzyCrit", "PowerfulStrike2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/AAB91B7D"), StringExternal("Param/Value/38C2CAA6"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfanofknives.dds", StringExternal("Param/Value/918D3CF1"), StringExternal("Param/Value/7E70C39C"), "StringofDaggers", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/9E12FF36"), StringExternal("Param/Value/45F7E480"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwindwalkon.dds", StringExternal("Param/Value/358AD950"), StringExternal("Param/Value/6DB9D7D8"), "Windwalk", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvengeanceincarnate.dds", StringExternal("Param/Value/C9431460"), StringExternal("Param/Value/1038DCE5"), "ShadowStep", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpossession.dds", StringExternal("Param/Value/741CFF76"), StringExternal("Param/Value/A3453CA5"), "FeignDeath", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndaggerofescape.dds", StringExternal("Param/Value/040CFFC5"), StringExternal("Param/Value/D851DFE9"), "Hamstring", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshadowmeld.dds", StringExternal("Param/Value/7811B17D"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpoisonarrow.dds", StringExternal("Param/Value/091B7B18"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Arthaswithfrostmourne", 1, 7, 6, 6, 6, 5, StringExternal("Param/Value/A898B64E"), lv_index, lv_index2, lv_index3, "PowerfulStrike3", "ShieldSlam2", "CritEnergy", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/A9C824E1"), StringExternal("Param/Value/DBFE0E53"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/77325552"), StringExternal("Param/Value/15CE7EE7"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/10CC73C3"), StringExternal("Param/Value/CDBD5386"), "Frenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshockwave.dds", StringExternal("Param/Value/F95C4F57"), StringExternal("Param/Value/F169D082"), "Shockwave", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/9E733297"), StringExternal("Param/Value/76B328DE"), "DefensiveStance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelmelee.dds", StringExternal("Param/Value/A5BBEC1A"), StringExternal("Param/Value/3CD255C8"), "ThrowSword", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnquillsprayoff.dds", StringExternal("Param/Value/1BA88800"), StringExternal("Param/Value/596633BA"), "SliceAndDice", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcrallypoint.dds", StringExternal("Param/Value/79E540B8"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriummelee.dds", StringExternal("Param/Value/B90DA845"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Beastmaster", 1, 8, 3, 11, 3, 5, StringExternal("Param/Value/CA4977AD"), lv_index, lv_index2, lv_index3, "Taunt2", "RallyCry2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/913951ED"), StringExternal("Param/Value/9859546A"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnriderlesshorse.dds", StringExternal("Param/Value/C881CF1D"), StringExternal("Param/Value/46AD50C5"), "Charge2", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/7F9F2DA3"), StringExternal("Param/Value/ACDA6B9A"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/4BE5632F"), StringExternal("Param/Value/1A596F36"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreincarnation.dds", StringExternal("Param/Value/37FA499E"), StringExternal("Param/Value/F199D514"), "BloodRage", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnberserkfortrolls.dds", StringExternal("Param/Value/5AA89A30"), StringExternal("Param/Value/765C1231"), "BloodDrinkerAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstampede.dds", StringExternal("Param/Value/FA400B0D"), StringExternal("Param/Value/A61A9953"), "ShoulderRam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnchemicalrage.dds", StringExternal("Param/Value/16AC3543"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhardenedskin.dds", StringExternal("Param/Value/83897859"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Uther", 1, 6, 4, 7, 5, 8, StringExternal("Param/Value/7172F4AF"), lv_index, lv_index2, lv_index3, "Taunt3", "ShieldSlam4", "RallyCry3", gv_heroesAbilitiesUpgrades[0][0][0][0], null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspellbreakermagicdefend.dds", StringExternal("Param/Value/D345389D"), StringExternal("Param/Value/17BA0C1B"), "ShieldingStrikes", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/A8529CED"), StringExternal("Param/Value/44A89F71"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/6A6EFA27"), StringExternal("Param/Value/2F68B2D9"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/E4EAE9C1"), StringExternal("Param/Value/C8537581"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnavatar.dds", StringExternal("Param/Value/81FE3EEA"), StringExternal("Param/Value/E1D7A360"), "Avatar", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnnagaweaponup2.dds", StringExternal("Param/Value/00CE7C53"), StringExternal("Param/Value/31F620A4"), "BlindingLance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndevotion.dds", StringExternal("Param/Value/A02EAFAC"), StringExternal("Param/Value/5FA20C99"), "LayofHands", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmagicimmunity.dds", StringExternal("Param/Value/DCBF5708"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndeathpact.dds", StringExternal("Param/Value/CA38C0AE"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Illidan", 1, 11, 9, 5, 6, 3, StringExternal("Param/Value/F0A40E7E"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsacrifice.dds", StringExternal("Param/Value/C5520CC8"), StringExternal("Param/Value/E6B7C6D1"), "Shiv", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfanofknives.dds", StringExternal("Param/Value/38E4CDAC"), StringExternal("Param/Value/537DB523"), "StringofDaggers", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshade.dds", StringExternal("Param/Value/E89A7F15"), StringExternal("Param/Value/4962DFE9"), "DuskWalk", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwindwalkon.dds", StringExternal("Param/Value/BC181FEB"), StringExternal("Param/Value/006CD7E7"), "Windwalk", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvengeanceincarnate.dds", StringExternal("Param/Value/2F8AB83A"), StringExternal("Param/Value/541530E3"), "ShadowStep", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpossession.dds", StringExternal("Param/Value/1B7C35D6"), StringExternal("Param/Value/2A9E1070"), "FeignDeath", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndaggerofescape.dds", StringExternal("Param/Value/2E7B36A9"), StringExternal("Param/Value/C6C1D453"), "Hamstring", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnherodemonhunter.dds", StringExternal("Param/Value/3CFC46C0"), StringExternal("Param/Value/BF15A080"), "ShadowForm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnupgraderegenerationaura.dds", StringExternal("Param/Value/F31D07F2"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpoisonarrow.dds", StringExternal("Param/Value/5CE07916"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Banditlord", 1, 9, 8, 7, 6, 4, StringExternal("Param/Value/41F306B5"), lv_index, lv_index2, lv_index3, "PowerfulStrike3", gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorcmeleeuptwo.dds", StringExternal("Param/Value/7AFC9CBA"), StringExternal("Param/Value/94D303B6"), "PowerfulStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwhirlwind.dds", StringExternal("Param/Value/DFCD3388"), StringExternal("Param/Value/882EBC29"), "Whirl", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/0BCA47E3"), StringExternal("Param/Value/C51D101C"), "Focus", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshockwave.dds", StringExternal("Param/Value/4B373874"), StringExternal("Param/Value/8B02BC6C"), "Shockwave", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/189C8859"), StringExternal("Param/Value/046EF43B"), "DefensiveStance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelmelee.dds", StringExternal("Param/Value/AB2FD7FC"), StringExternal("Param/Value/16755CAC"), "ThrowSword", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnboots.dds", StringExternal("Param/Value/B8DF6C53"), StringExternal("Param/Value/9B70BB00"), "Leap2", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnquillsprayoff.dds", StringExternal("Param/Value/C58597A8"), StringExternal("Param/Value/91DFA3BA"), "SliceAndDice", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnchaosblademaster.dds", StringExternal("Param/Value/4709AEFA"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfeedback.dds", StringExternal("Param/Value/9EC99B36"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Bloodfiend", 1, 7, 6, 9, 6, 6, StringExternal("Param/Value/07480BC8"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnarcanitemelee.dds", StringExternal("Param/Value/0325755E"), StringExternal("Param/Value/D2CEEB29"), "Slash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstasistrap.dds", StringExternal("Param/Value/DBCFE331"), StringExternal("Param/Value/0D93B809"), "ChargeThrough", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfelguard.dds", StringExternal("Param/Value/D8BA4EC7"), StringExternal("Param/Value/ED496283"), "Coagulate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmaskofdeath.dds", StringExternal("Param/Value/DE18C847"), StringExternal("Param/Value/0D67A53B"), "BloodFeast", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreincarnation.dds", StringExternal("Param/Value/4B907080"), StringExternal("Param/Value/7F56E87E"), "BloodRage", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnberserkfortrolls.dds", StringExternal("Param/Value/4EBFB479"), StringExternal("Param/Value/6878EA51"), "BloodDrinkerAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnupgrademoonglaive.dds", StringExternal("Param/Value/4568586D"), StringExternal("Param/Value/0D6D707E"), "HurlBlade", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnghoulfrenzy.dds", StringExternal("Param/Value/A1557547"), StringExternal("Param/Value/6A52B1E4"), "Thrash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndrunkendodge.dds", StringExternal("Param/Value/5CBB70CB"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvampiricaura.dds", StringExternal("Param/Value/43E231CA"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Battlegolem", 1, 8, 3, 10, 4, 9, StringExternal("Param/Value/CB8FB0BD"), lv_index, lv_index2, lv_index3, "Charge5", gv_heroesAbilitiesUpgrades[0][0][0][0], null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btngolemthunderclap.dds", StringExternal("Param/Value/1A1B5F86"), StringExternal("Param/Value/6779FB9C"), "Smash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnriderlesshorse.dds", StringExternal("Param/Value/136BE2EA"), StringExternal("Param/Value/34E23897"), "Charge2", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/86AA9A89"), StringExternal("Param/Value/7FE6F418"), "EmpoweringTaunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhowlofterror.dds", StringExternal("Param/Value/F82FF0EE"), StringExternal("Param/Value/FE14427C"), "EchoingRoar", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhardenedskin.dds", StringExternal("Param/Value/7DE5ACC8"), StringExternal("Param/Value/D9119C5E"), "HardenedSkin", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndefend.dds", StringExternal("Param/Value/78095A59"), StringExternal("Param/Value/76201D64"), "SharedSteelAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstampede.dds", StringExternal("Param/Value/AF578B80"), StringExternal("Param/Value/8F36448A"), "ShoulderRam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnarmorgolem.dds", StringExternal("Param/Value/A919EB99"), StringExternal("Param/Value/3595A482"), "Headbutt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbash.dds", StringExternal("Param/Value/5903ADA3"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnarcanitearchitecture.dds", StringExternal("Param/Value/5DA6E652"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Lordgarithos", 1, 6, 5, 8, 7, 8, StringExternal("Param/Value/B32C5C8E"), lv_index, lv_index2, lv_index3, "RallyCry3", "Taunt3", "ShieldSlam4", gv_heroesAbilitiesUpgrades[0][0][0][0], null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspellbreakermagicdefend.dds", StringExternal("Param/Value/A70D9512"), StringExternal("Param/Value/439B3DB9"), "ShieldingStrikes", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsteelarmor.dds", StringExternal("Param/Value/CC4A7BBB"), StringExternal("Param/Value/6A6EAEEC"), "ShieldSlam", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntaunt.dds", StringExternal("Param/Value/A0934BDA"), StringExternal("Param/Value/5B8EFDE6"), "Taunt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantpulverize.dds", StringExternal("Param/Value/FA70F882"), StringExternal("Param/Value/D79146FF"), "RallyCry", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnavatar.dds", StringExternal("Param/Value/4161D89E"), StringExternal("Param/Value/F9553F1D"), "Avatar", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnnagaweaponup2.dds", StringExternal("Param/Value/DAE44D77"), StringExternal("Param/Value/449C8FA2"), "BlindingLance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndevotion.dds", StringExternal("Param/Value/57CFA767"), StringExternal("Param/Value/242B438B"), "LayofHands", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthickfur.dds", StringExternal("Param/Value/5C22A459"), StringExternal("Param/Value/E64D8FAE"), "LeapofFaith", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnultravision.dds", StringExternal("Param/Value/4D4E81FA"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnheartofaszune.dds", StringExternal("Param/Value/BFF5EB1B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index += 1;
    lv_index2 = 0;
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Villagerman2", 1, 4, 3, 2, 2, 2, StringExternal("Param/Value/B42DAD48"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/8DC64DBE"), StringExternal("Param/Value/02D6ABFD"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btngolemstormbolt.dds", StringExternal("Param/Value/86B6E4A0"), null, "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Assassin", 5, 5, 3, 3, 2, 2, StringExternal("Param/Value/CBCB39F9"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/4ABE6B03"), StringExternal("Param/Value/2E4874D6"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/6C05743E"), StringExternal("Param/Value/9FCB0230"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Highelvenarcher", 7, 7, 4, 3, 2, 2, StringExternal("Param/Value/FB920D06"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/12A7E1DA"), StringExternal("Param/Value/6A23A269"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/B64F9422"), StringExternal("Param/Value/AEDED30D"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/0978C547"), StringExternal("Param/Value/1A7A9DD7"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbootsofspeed.dds", StringExternal("Param/Value/BA4E38BD"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Shaman", 5, 5, 4, 4, 3, 2, StringExternal("Param/Value/C4BFF7E8"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/91C75CEE"), StringExternal("Param/Value/35D1CE63"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/F9EFE23E"), StringExternal("Param/Value/C0D19D91"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/B51684A8"), StringExternal("Param/Value/54E1D167"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfarsight.dds", StringExternal("Param/Value/2BA3F8CB"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Archer", 7, 8, 5, 4, 3, 2, StringExternal("Param/Value/1D6ADB5B"), lv_index, lv_index2, lv_index3, "Impale2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/C00611B4"), StringExternal("Param/Value/99B58D45"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/E72D84B8"), StringExternal("Param/Value/F80983E0"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/1845A98B"), StringExternal("Param/Value/7E393917"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/1A42E8FA"), StringExternal("Param/Value/11D152FC"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshadowmeld.dds", StringExternal("Param/Value/D0794DC0"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbootsofspeed.dds", StringExternal("Param/Value/EEC48F4A"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Guldan", 5, 6, 4, 5, 4, 3, StringExternal("Param/Value/CE24F6D6"), lv_index, lv_index2, lv_index3, "Kick2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/21B8049D"), StringExternal("Param/Value/34BF7583"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/44370BD1"), StringExternal("Param/Value/9177F98E"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/9313D657"), StringExternal("Param/Value/3600287A"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseaturtlegreen.dds", StringExternal("Param/Value/19D17BB9"), StringExternal("Param/Value/7A7BEBA1"), "SummonPet", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreplenishmana.dds", StringExternal("Param/Value/6243B674"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfarsight.dds", StringExternal("Param/Value/B7693E03"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Rifleman", 7, 9, 7, 4, 4, 2, StringExternal("Param/Value/BFFE2EFD"), lv_index, lv_index2, lv_index3, "Impale2", "FireArrow2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/1DDFFDF9"), StringExternal("Param/Value/5C9951DF"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndustofappearance.dds", StringExternal("Param/Value/BD3D552B"), StringExternal("Param/Value/74C4E379"), "RapidReload", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/BD98C96A"), StringExternal("Param/Value/86344F57"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/ABB9FCCE"), StringExternal("Param/Value/84E4870B"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnflare.dds", StringExternal("Param/Value/1D2E8317"), StringExternal("Param/Value/765DEEE1"), "SpitFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndwarvenlongrifle.dds", StringExternal("Param/Value/8CAAB061"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtngyrocoptertruesight.dds", StringExternal("Param/Value/AEB8E48E"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Harpyqueen", 6, 7, 7, 5, 5, 2, StringExternal("Param/Value/910B6C19"), lv_index, lv_index2, lv_index3, "Impale2", "Mark2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/A8929A65"), StringExternal("Param/Value/493751B2"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntornado.dds", StringExternal("Param/Value/D7496DD9"), StringExternal("Param/Value/EC4D71A9"), "Cyclone", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/82068544"), StringExternal("Param/Value/B9F8D371"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/CB54EBDE"), StringExternal("Param/Value/D53B4656"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnghoulfrenzy.dds", StringExternal("Param/Value/2702DD56"), StringExternal("Param/Value/A00C654E"), "ClawFrenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhellscream.dds", StringExternal("Param/Value/82ECC018"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndranaihut.dds", StringExternal("Param/Value/8DFBA476"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Watcher", 4, 6, 6, 6, 4, 4, StringExternal("Param/Value/F7E96784"), lv_index, lv_index2, lv_index3, "Kick2", "Bloodlust2", "SummonPet2", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbearform.dds", StringExternal("Param/Value/1E0B372F"), StringExternal("Param/Value/C111664F"), "BearTrap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/278CBCE4"), StringExternal("Param/Value/336FD544"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/897A5E34"), StringExternal("Param/Value/03D16112"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/83B60269"), StringExternal("Param/Value/E4F403A8"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntimberwolf.dds", StringExternal("Param/Value/DD7B4E6F"), StringExternal("Param/Value/BDAC2DBB"), "SummonPet", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmagiclariet.dds", StringExternal("Param/Value/D678CBCC"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnchime.dds", StringExternal("Param/Value/44B1E3BE"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Shade", 6, 6, 6, 5, 7, 2, StringExternal("Param/Value/8B2AA4CF"), lv_index, lv_index2, lv_index3, "Kick2", "Bloodlust3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbanish.dds", StringExternal("Param/Value/ABD982A5"), StringExternal("Param/Value/507A8E50"), "SoulShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/341B8008"), StringExternal("Param/Value/40BA7C92"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/A0CDF349"), StringExternal("Param/Value/76E0D99D"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/0F87BCCA"), StringExternal("Param/Value/0C0B842C"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnguldanskull.dds", StringExternal("Param/Value/5BF7FBD5"), StringExternal("Param/Value/96F8F417"), "FearWard", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndispelmagic.dds", StringExternal("Param/Value/31B36EEA"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/0C405B91"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Mortarteam", 7, 12, 7, 4, 5, 2, StringExternal("Param/Value/1F8C3016"), lv_index, lv_index2, lv_index3, "Impale2", "FireArrow2", "Mark3", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/D3E77F1E"), StringExternal("Param/Value/F16BD24E"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndustofappearance.dds", StringExternal("Param/Value/3B039FBB"), StringExternal("Param/Value/FC870CD5"), "RapidReload", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/54792AAE"), StringExternal("Param/Value/C73D0B4B"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/56D0E79D"), StringExternal("Param/Value/847B9354"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnflare.dds", StringExternal("Param/Value/D5FAA2C5"), StringExternal("Param/Value/47D36F78"), "SpitFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfragmentationbombs.dds", StringExternal("Param/Value/4206F8CE"), StringExternal("Param/Value/E5FF456F"), "ConcussionShell", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndwarvenlongrifle.dds", StringExternal("Param/Value/0E4C9F8B"), StringToText(""), "Headshot", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreveal.dds", StringExternal("Param/Value/2C7F87DC"), StringExternal("Param/Value/7580F8F8"), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtngyrocoptertruesight.dds", StringExternal("Param/Value/9F550F5B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Dragonhawk", 6, 9, 7, 6, 6, 2, StringExternal("Param/Value/358873BD"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/6A690811"), StringExternal("Param/Value/FEF4BC0F"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndustofappearance.dds", StringExternal("Param/Value/909E5D8B"), StringExternal("Param/Value/E28C21B7"), "Cyclone", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsearingarrows.dds", StringExternal("Param/Value/EED0E07E"), StringExternal("Param/Value/6D52A62B"), "FireArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/E80718AC"), StringExternal("Param/Value/4146671D"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnghoulfrenzy.dds", StringExternal("Param/Value/EEC7CA79"), StringExternal("Param/Value/61B6FC86"), "ClawFrenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreplay-speedup.dds", StringExternal("Param/Value/701166BC"), StringExternal("Param/Value/E5290701"), "Fly", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstoneform.dds", StringExternal("Param/Value/8951C939"), StringExternal("Param/Value/046E1299"), "Gust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncritterchicken.dds", StringExternal("Param/Value/8B4A39A0"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndranaihut.dds", StringExternal("Param/Value/647C7B61"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Huntress", 4, 7, 6, 7, 5, 5, StringExternal("Param/Value/486A9748"), lv_index, lv_index2, lv_index3, "Kick2", "Bloodlust2", "SummonPet3", "BearTrap2", null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbearform.dds", StringExternal("Param/Value/276317B2"), StringExternal("Param/Value/1328D36C"), "BearTrap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnseagiantwarstomp.dds", StringExternal("Param/Value/CED53346"), StringExternal("Param/Value/A4A7ABB8"), "Kick", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/E76848D5"), StringExternal("Param/Value/2CE2E0AA"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/6B6D5713"), StringExternal("Param/Value/4892093A"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbear.dds", StringExternal("Param/Value/3B8CD94B"), StringExternal("Param/Value/1701E81F"), "SummonPet", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnslippersofagility.dds", StringExternal("Param/Value/B9F14BB2"), StringExternal("Param/Value/3077FC17"), "Leap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntimberwolf.dds", StringExternal("Param/Value/926AAD00"), StringExternal("Param/Value/DA4FBE6B"), "CompanionAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtnstatup.dds", StringExternal("Param/Value/4F041281"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnchime.dds", StringExternal("Param/Value/67DF452F"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("War3Ghost", 6, 5, 9, 5, 8, 3, StringExternal("Param/Value/93E8F682"), lv_index, lv_index2, lv_index3, "Mend2", "Bloodlust3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbanish.dds", StringExternal("Param/Value/C4E5334C"), StringExternal("Param/Value/4D1763EC"), "SoulShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndispelmagic.dds", StringExternal("Param/Value/D2D12E3C"), StringExternal("Param/Value/096053D7"), "ForcePush", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/B733DFBD"), StringExternal("Param/Value/904B403E"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/F6EA19D0"), StringExternal("Param/Value/F79DF37E"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnguldanskull.dds", StringExternal("Param/Value/3BB816A1"), StringExternal("Param/Value/0F3E6F9F"), "FearWard", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwisp.dds", StringExternal("Param/Value/6D428812"), StringExternal("Param/Value/CC87AF62"), "Sprites", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncurse.dds", StringExternal("Param/Value/9D0C777D"), StringExternal("Param/Value/BF4427D7"), "Jynx", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnplaguecloud.dds", StringExternal("Param/Value/9A96515E"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/08A946D9"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Sylvanuswindrunner", 7, 14, 8, 4, 6, 2, StringExternal("Param/Value/B6D9142B"), lv_index, lv_index2, lv_index3, "Impale2", "Mark3", gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnthoriumranged.dds", StringExternal("Param/Value/64D74779"), StringExternal("Param/Value/0321CCA9"), "Impale", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndustofappearance.dds", StringExternal("Param/Value/A1876C9A"), StringExternal("Param/Value/0B4C8FFB"), "RapidReload", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimprovedbows.dds", StringExternal("Param/Value/307EE651"), StringExternal("Param/Value/4DF1ED7A"), "GreatArrow", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnflamingarrows.dds", StringExternal("Param/Value/1CBF1CFC"), StringExternal("Param/Value/E18B7C22"), "SunlightArrows", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmarksmanship.dds", StringExternal("Param/Value/38451259"), StringExternal("Param/Value/ACC528F7"), "Mark", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnflare.dds", StringExternal("Param/Value/45349D50"), StringExternal("Param/Value/990B893C"), "SpitFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfragmentationbombs.dds", StringExternal("Param/Value/C4AD3A8C"), StringExternal("Param/Value/72593125"), "ConcussionShell", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndwarvenlongrifle.dds", StringExternal("Param/Value/C5C805DA"), StringToText(""), "Headshot", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshadowmeld.dds", StringExternal("Param/Value/72FF991A"), StringExternal("Param/Value/368DC5C7"), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnarcaniteranged.dds", StringExternal("Param/Value/04C6D354"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Riddenhippogryph", 6, 11, 8, 7, 6, 2, StringExternal("Param/Value/ADCFB743"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtntrueshot.dds", StringExternal("Param/Value/C431F607"), StringExternal("Param/Value/FC9DF305"), "RainofArrows", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntornado.dds", StringExternal("Param/Value/BF8316F6"), StringExternal("Param/Value/8BB65079"), "Cyclone", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntheblackarrow.dds", StringExternal("Param/Value/58D69433"), StringExternal("Param/Value/E6545E4A"), "DarkArrows", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimprovedunholyarmor.dds", StringExternal("Param/Value/CCB02FCE"), StringExternal("Param/Value/C210FF16"), "FaerieFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnghoulfrenzy.dds", StringExternal("Param/Value/60F47ADF"), StringExternal("Param/Value/233F5389"), "ClawFrenzy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreplay-speedup.dds", StringExternal("Param/Value/A06B2B93"), StringExternal("Param/Value/F993A853"), "Fly", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstoneform.dds", StringExternal("Param/Value/7A7DF640"), StringExternal("Param/Value/4A4BB143"), "Gust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnshamanmaster.dds", StringExternal("Param/Value/5FAF4880"), StringExternal("Param/Value/62B981BE"), "QuicknessAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncritterrabbit.dds", StringExternal("Param/Value/A587C775"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnforceofnature.dds", StringExternal("Param/Value/10C78AB8"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Gryphonrider", 4, 9, 7, 7, 7, 4, StringExternal("Param/Value/A6B46AEA"), lv_index, lv_index2, lv_index3, "SummonPet4", gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbonechimes.dds", StringExternal("Param/Value/F9597890"), StringExternal("Param/Value/F4C802C7"), "HamstringTrap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstormbolt.dds", StringExternal("Param/Value/9DFE8E2F"), StringExternal("Param/Value/1276C7D0"), "StormBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvorpalblades.dds", StringExternal("Param/Value/E8D0CC8A"), StringExternal("Param/Value/FEC1644F"), "BlindingBolts", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btngryphonrider.dds", StringExternal("Param/Value/0526399B"), StringExternal("Param/Value/0AE9A072"), "FlyOver", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscrollpurple.dds", StringExternal("Param/Value/8DD1416C"), StringExternal("Param/Value/C2DDD0C1"), "BattleHeal", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbear.dds", StringExternal("Param/Value/09EBBB34"), StringExternal("Param/Value/CC378D11"), "SummonPet", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnalbatross.dds", StringExternal("Param/Value/7E4AC520"), StringExternal("Param/Value/4966C851"), "DrillPeck", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnowlbear.dds", StringExternal("Param/Value/34363BA6"), StringExternal("Param/Value/CEEFC40E"), "CompanionAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtnstatup.dds", StringExternal("Param/Value/961C4888"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndisenchant.dds", StringExternal("Param/Value/6E7B0559"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Tyrande", 4, 7, 7, 7, 8, 5, StringExternal("Param/Value/AEA025BC"), lv_index, lv_index2, lv_index3, "SummonPet5", "Bloodlust2", "BearTrap2", gv_heroesAbilitiesUpgrades[0][0][0][0], null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbearform.dds", StringExternal("Param/Value/C320A691"), StringExternal("Param/Value/567620C2"), "BearTrap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndeathanddecay.dds", StringExternal("Param/Value/34308724"), StringExternal("Param/Value/1EC7F253"), "LifeBloom", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbloodlust.dds", StringExternal("Param/Value/69B5CB47"), StringExternal("Param/Value/4BC749DE"), "Bloodlust", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnsnazzyscroll.dds", StringExternal("Param/Value/2B625A1B"), StringExternal("Param/Value/172F4C33"), "Mend", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwendigo.dds", StringExternal("Param/Value/3FA021B0"), StringExternal("Param/Value/EF68DA5C"), "SummonPet", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnslippersofagility.dds", StringExternal("Param/Value/4C75D2C9"), StringExternal("Param/Value/6AE12C1F"), "Leap", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnreddragondevour.dds", StringExternal("Param/Value/A52FF097"), StringExternal("Param/Value/0963537D"), "TerrifyingRoar", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntimberwolf.dds", StringExternal("Param/Value/9ECC2547"), StringExternal("Param/Value/57615CF1"), "CompanionAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtnstatup.dds", StringExternal("Param/Value/55C287BC"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnanimalwartraining.dds", StringExternal("Param/Value/38FF53A7"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Kelthuzadlich", 6, 6, 11, 5, 9, 3, StringExternal("Param/Value/8A0BA1EF"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbanish.dds", StringExternal("Param/Value/B0ABE594"), StringExternal("Param/Value/BB433B58"), "SoulShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndispelmagic.dds", StringExternal("Param/Value/FB5FFFDC"), StringExternal("Param/Value/4B01908D"), "ForcePush", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlament.dds", StringExternal("Param/Value/2D1D33E7"), StringExternal("Param/Value/6B8F239A"), "TimeTrance", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnscrollofregeneration.dds", StringExternal("Param/Value/9E04FB9F"), StringExternal("Param/Value/FA65D4AC"), "Invigorate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnguldanskull.dds", StringExternal("Param/Value/09E339C2"), StringExternal("Param/Value/19546EC8"), "FearWard", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwisp.dds", StringExternal("Param/Value/5B11C411"), StringExternal("Param/Value/AB3581E6"), "Sprites", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncurse.dds", StringExternal("Param/Value/295FA092"), StringExternal("Param/Value/B5D34948"), "Jynx", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtncorrosivebreath.dds", StringExternal("Param/Value/B1649EF5"), StringToText(""), "PutridBreath", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncloudoffog.dds", StringExternal("Param/Value/6CD7351B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnregenerationaura.dds", StringExternal("Param/Value/5E8B7290"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index += 1;
    lv_index2 = 0;
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Bloodelfworker", 1, 3, 3, 2, 3, 2, StringExternal("Param/Value/8D936EC6"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/0117FF8F"), StringExternal("Param/Value/AA26FDFA"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Fallenpriest", 4, 3, 3, 3, 4, 2, StringExternal("Param/Value/432832EB"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/5F9A4D30"), StringExternal("Param/Value/62BD882D"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/64907886"), StringExternal("Param/Value/03480336"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Sorceress", 5, 4, 4, 3, 5, 2, StringExternal("Param/Value/0B86F9A1"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/250E424F"), StringExternal("Param/Value/AA5CB57F"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/0ED51620"), StringExternal("Param/Value/41652852"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/7713717E"), StringExternal("Param/Value/3314955F"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndispelmagic.dds", StringExternal("Param/Value/58126545"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Chaplain", 4, 4, 3, 3, 5, 3, StringExternal("Param/Value/A0E50E74"), lv_index, lv_index2, lv_index3, null, null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/D71F369C"), StringExternal("Param/Value/C88C805D"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/768451FF"), StringExternal("Param/Value/92D22614"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/2B47E1DC"), StringExternal("Param/Value/B54AEFF4"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmanarecharge.dds", StringExternal("Param/Value/55383FDF"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Chaoswarlock", 5, 6, 5, 3, 5, 3, StringExternal("Param/Value/E3F85888"), lv_index, lv_index2, lv_index3, "FrostBolt2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/6057465A"), StringExternal("Param/Value/D1EAE9B2"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/347F30BB"), StringExternal("Param/Value/E3C0CB74"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/F33F56F3"), StringExternal("Param/Value/7D6DB346"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/746E203E"), StringExternal("Param/Value/00C5DBFC"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfirebolt.dds", StringExternal("Param/Value/C1044E9B"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndispelmagic.dds", StringExternal("Param/Value/A77751F6"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Druidofthetalon", 4, 5, 4, 4, 6, 3, StringExternal("Param/Value/48191B2D"), lv_index, lv_index2, lv_index3, "DesecrateGround2", null, null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/24A94AE3"), StringExternal("Param/Value/9624D9CA"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/A627EF86"), StringExternal("Param/Value/63279827"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/9ED0F60F"), StringExternal("Param/Value/75815BE8"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/DDD2AEE9"), StringExternal("Param/Value/9DCD15A1"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfaeriefire.dds", StringExternal("Param/Value/0403E764"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmanarecharge.dds", StringExternal("Param/Value/18A7BC25"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Kelthuzadnecro", 5, 8, 4, 4, 7, 3, StringExternal("Param/Value/60263FD6"), lv_index, lv_index2, lv_index3, "FrostBolt2", "LightningBall2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/F63CFFF4"), StringExternal("Param/Value/7E1320AB"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncontrolmagic.dds", StringExternal("Param/Value/A4AF7401"), StringExternal("Param/Value/D6EF9BFC"), "Empower", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/37F5E0F5"), StringExternal("Param/Value/14D13663"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/1097951C"), StringExternal("Param/Value/B943B0D0"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnunholystrength.dds", StringExternal("Param/Value/61BABBAF"), StringExternal("Param/Value/7B4F2FF5"), "DeathTouch", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnunholyfrenzy.dds", StringExternal("Param/Value/D814EB3A"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncorpseexplode.dds", StringExternal("Param/Value/6246401E"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("SpiritofVengeance", 1, 6, 6, 5, 5, 4, StringExternal("Param/Value/DB8765A2"), lv_index, lv_index2, lv_index3, "FrostBolt2", "LightningBall3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/26B6DEC5"), StringExternal("Param/Value/300C5B11"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmassteleport.dds", StringExternal("Param/Value/86834EE6"), StringExternal("Param/Value/3B9E7B8E"), "BlinkSmash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/C37A7DC9"), StringExternal("Param/Value/16C68C6F"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/2C72BA4B"), StringExternal("Param/Value/71C0E915"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnphaseshift.dds", StringExternal("Param/Value/8747F182"), StringExternal("Param/Value/42FE9C02"), "PhaseShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnanimalwartraining.dds", StringExternal("Param/Value/A92E6CD6"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvampiricaura.dds", StringExternal("Param/Value/96846AD6"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Hydromancer", 5, 6, 5, 4, 8, 3, StringExternal("Param/Value/F405AC2E"), lv_index, lv_index2, lv_index3, "DesecrateGround2", "InnerFire2", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlifedrain.dds", StringExternal("Param/Value/9B2A2BA6"), StringExternal("Param/Value/ED50C28C"), "LifeDrain", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/E6BED1EB"), StringExternal("Param/Value/ABBE2EAA"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/56AEAD6A"), StringExternal("Param/Value/27AB4FA7"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/19306215"), StringExternal("Param/Value/415B15EB"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnblizzard.dds", StringExternal("Param/Value/305949DF"), StringExternal("Param/Value/F0D660C5"), "HailStorm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmanadrain.dds", StringExternal("Param/Value/95E70361"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnenchantedgemstone.dds", StringExternal("Param/Value/D50A6460"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Priest", 4, 4, 8, 5, 6, 3, StringExternal("Param/Value/9B502C23"), lv_index, lv_index2, lv_index3, "DesecrateGround2", "InnerFire3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnheal.dds", StringExternal("Param/Value/0291F3B0"), StringExternal("Param/Value/0D70FD9B"), "HolyAttacks", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/A851145E"), StringExternal("Param/Value/A643D4CB"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/1DDACC68"), StringExternal("Param/Value/1B4E0B58"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/C6D1B570"), StringExternal("Param/Value/990EBFE4"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntransmute.dds", StringExternal("Param/Value/0801F128"), StringExternal("Param/Value/BFF19B30"), "Smite", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnholybolt.dds", StringExternal("Param/Value/418AA762"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhealingward.dds", StringExternal("Param/Value/B9AFF782"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Jaina", 6, 10, 5, 4, 8, 3, StringExternal("Param/Value/95DAAE35"), lv_index, lv_index2, lv_index3, "FrostBolt2", "LightningBall2", "CloakofFlames", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/743CA20B"), StringExternal("Param/Value/4DF6FB29"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncontrolmagic.dds", StringExternal("Param/Value/96633898"), StringExternal("Param/Value/58BC345A"), "Empower", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/1EBE10F8"), StringExternal("Param/Value/CD592B27"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/018117E4"), StringExternal("Param/Value/78A459B6"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnunholystrength.dds", StringExternal("Param/Value/A097E73A"), StringExternal("Param/Value/77E93751"), "DeathTouch", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfire.dds", StringExternal("Param/Value/87507522"), StringExternal("Param/Value/CD992794"), "Conflagration", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstarfall.dds", StringExternal("Param/Value/657E10C7"), StringExternal("Param/Value/365B4E05"), "MeteorStorm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btninvisibility.dds", StringExternal("Param/Value/2C425A82"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncorpseexplode.dds", StringExternal("Param/Value/8D7EA4D2"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("AvatarofVengeance", 1, 7, 7, 6, 5, 5, StringExternal("Param/Value/1895CC1F"), lv_index, lv_index2, lv_index3, "FrostBolt2", "LightningBall3", "CloakofFlames2", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/23DF1E30"), StringExternal("Param/Value/E303EA4E"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmassteleport.dds", StringExternal("Param/Value/F318517E"), StringExternal("Param/Value/7F68F79A"), "BlinkSmash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/914420EF"), StringExternal("Param/Value/6C56EC7F"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/E13D95E3"), StringExternal("Param/Value/44AEEFDE"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnphaseshift.dds", StringExternal("Param/Value/0AEFC26B"), StringExternal("Param/Value/9F27D92D"), "PhaseShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmanaflare.dds", StringExternal("Param/Value/3EEEE1ED"), StringExternal("Param/Value/B4EBA0BF"), "GravityBomb", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspiritwalkermastertraining.dds", StringExternal("Param/Value/51F6E7F3"), StringExternal("Param/Value/B44B5FC3"), "MagicEnhancedAttacks", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbearblink.dds", StringExternal("Param/Value/EFB27BB0"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnvampiricaura.dds", StringExternal("Param/Value/8298D5BD"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Medivh", 5, 6, 7, 4, 10, 3, StringExternal("Param/Value/0E1F20A0"), lv_index, lv_index2, lv_index3, "DesecrateGround2", "InnerFire2", "Rejuvenate2", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlifedrain.dds", StringExternal("Param/Value/D73642C4"), StringExternal("Param/Value/6F9A760E"), "LifeDrain", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/15454531"), StringExternal("Param/Value/FE7610BD"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/2E0FB4AD"), StringExternal("Param/Value/A3260E3E"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/0C8EC1DD"), StringExternal("Param/Value/8067A87A"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnblizzard.dds", StringExternal("Param/Value/51DD26EA"), StringExternal("Param/Value/C9342582"), "HailStorm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnslow.dds", StringExternal("Param/Value/773088C7"), StringExternal("Param/Value/39EB99B0"), "SlowTime", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndotmastertraining.dds", StringExternal("Param/Value/91BFEE64"), StringExternal("Param/Value/0FD9F1DE"), "ConcentrationAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndevourmagic.dds", StringExternal("Param/Value/AD16C0AF"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnenchantedgemstone.dds", StringExternal("Param/Value/34328DCD"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Archmage", 4, 4, 10, 5, 7, 4, StringExternal("Param/Value/AB8D7004"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], "InnerFire3", null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnheal.dds", StringExternal("Param/Value/98D3AF6B"), StringExternal("Param/Value/49037ADA"), "HolyAttacks", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btninnerfire.dds", StringExternal("Param/Value/98905A44"), StringExternal("Param/Value/455D66D4"), "HolyFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/B1B24574"), StringExternal("Param/Value/B0BC80B3"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/86E6DE49"), StringExternal("Param/Value/FC6C7994"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntransmute.dds", StringExternal("Param/Value/F5F1CE24"), StringExternal("Param/Value/FD8B5F02"), "Smite", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrunedbracers.dds", StringExternal("Param/Value/BC114058"), StringExternal("Param/Value/480CA700"), "DivineShield", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnholybolt.dds", StringExternal("Param/Value/A140B9AF"), StringExternal("Param/Value/CB738607"), "HolyLight", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwispsplode.dds", StringExternal("Param/Value/92D54F81"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnhealingward.dds", StringExternal("Param/Value/41572284"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index2 += 1;
    lv_index3 = 0;
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Bloodmage", 6, 12, 5, 4, 10, 3, StringExternal("Param/Value/AE248971"), lv_index, lv_index2, lv_index3, "FrostBolt2", "LightningBall2", gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfrostbolt.dds", StringExternal("Param/Value/E8E5355B"), StringExternal("Param/Value/F25FF3E2"), "FrostBolt", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btncontrolmagic.dds", StringExternal("Param/Value/93BACC08"), StringExternal("Param/Value/E27E0306"), "Empower", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorboflightning.dds", StringExternal("Param/Value/83CCF8ED"), StringExternal("Param/Value/CB639BCE"), "LightningBall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbrilliance.dds", StringExternal("Param/Value/8ED08095"), StringExternal("Param/Value/FAF4D875"), "BrillianceAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnchainlightning.dds", StringExternal("Param/Value/BB05604E"), StringExternal("Param/Value/D71EF065"), "StormStrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwalloffire.dds", StringExternal("Param/Value/A8973DAE"), StringExternal("Param/Value/FA4F20A8"), "Flamestrike", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btninnerfire.dds", StringExternal("Param/Value/4195E2CE"), StringExternal("Param/Value/C0DF46BD"), "FireWall", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnstarfall.dds", StringExternal("Param/Value/D4650BC3"), StringExternal("Param/Value/51F39D2E"), "MeteorStorm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_pasbtnfrost.dds", StringExternal("Param/Value/6FC9B6BF"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnscatterrockets.dds", StringExternal("Param/Value/0F94884C"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Illidandemonform", 4, 10, 7, 6, 7, 4, StringExternal("Param/Value/26FDCC5C"), lv_index, lv_index2, lv_index3, "CloakofFlames2", gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntheblackarrow.dds", StringExternal("Param/Value/6A09BFBC"), StringExternal("Param/Value/B2D9D5BF"), "ShadowBlast", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnfire.dds", StringExternal("Param/Value/75EF08FF"), StringExternal("Param/Value/A577DDD8"), "Conflagration", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorbofslowness.dds", StringExternal("Param/Value/0F6FC1FD"), StringExternal("Param/Value/5550D011"), "VoidOrb", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnimmolationon.dds", StringExternal("Param/Value/9BFC5919"), StringExternal("Param/Value/FAEB22F3"), "CloakofFlames3", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnunholystrength.dds", StringExternal("Param/Value/8EA41738"), StringExternal("Param/Value/0A9E0224"), "DeathTouch", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlifedrain.dds", StringExternal("Param/Value/D1E3C6C3"), StringExternal("Param/Value/CBA05696"), "TimeWarp", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnwindwalkoff.dds", StringExternal("Param/Value/5BD928EB"), StringExternal("Param/Value/6E4F6819"), "Assassinate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspiritwalkermastertraining.dds", StringExternal("Param/Value/6FC5D460"), StringExternal("Param/Value/080C690A"), "MagicEnhancedAttacks", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnblink.dds", StringExternal("Param/Value/998DECD5"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnevasion.dds", StringExternal("Param/Value/B811E132"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Icerevenant", 1, 6, 7, 7, 8, 6, StringExternal("Param/Value/5362C1E1"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorb.dds", StringExternal("Param/Value/CB0256AC"), StringExternal("Param/Value/C2EFE46A"), "CrushingOrb", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmassteleport.dds", StringExternal("Param/Value/34257244"), StringExternal("Param/Value/65A3211C"), "BlinkSmash", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnorbofdarkness.dds", StringExternal("Param/Value/49DFB479"), StringExternal("Param/Value/C6DF1CFC"), "ShadowOrb", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlightningshield.dds", StringExternal("Param/Value/E0B32FBA"), StringExternal("Param/Value/88A77FFB"), "StaticBarrier", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnphaseshift.dds", StringExternal("Param/Value/EFA2E4C8"), StringExternal("Param/Value/6F5375A7"), "PhaseShift", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnslow.dds", StringExternal("Param/Value/5F9826B5"), StringExternal("Param/Value/9BAD7ECD"), "SlowTime", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnmanaflare.dds", StringExternal("Param/Value/29AF9A75"), StringExternal("Param/Value/0B82EDB4"), "GravityBomb", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnusedsoulgem.dds", StringExternal("Param/Value/61832C90"), StringExternal("Param/Value/58C95CAB"), "EnergyBlasts", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnneutralmanashield.dds", StringExternal("Param/Value/738EF2C1"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnunsummonbuilding.dds", StringExternal("Param/Value/2A659DE4"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Malfurion", 5, 7, 8, 5, 11, 3, StringExternal("Param/Value/ABCD491C"), lv_index, lv_index2, lv_index3, "Rejuvenate2", "DesecrateGround2", "DesecrateGround3", null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnlifedrain.dds", StringExternal("Param/Value/398D51E4"), StringExternal("Param/Value/8E06D50E"), "LifeDrain", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnacidbomb.dds", StringExternal("Param/Value/CA7F8BFD"), StringExternal("Param/Value/5AAEE4E6"), "DesecrateGround", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndryaddispelmagic.dds", StringExternal("Param/Value/6A7E6B57"), StringExternal("Param/Value/34F7D1DE"), "NaturesBlessing", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrejuvenation.dds", StringExternal("Param/Value/1C085269"), StringExternal("Param/Value/CA9AFE17"), "Rejuvenate", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnblizzard.dds", StringExternal("Param/Value/3A8DA6A0"), StringExternal("Param/Value/A6618308"), "HailStorm", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnentanglingroots.dds", StringExternal("Param/Value/E953F286"), StringExternal("Param/Value/BE01A7FA"), "DoomRoots", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndotmastertraining.dds", StringExternal("Param/Value/F7377A92"), StringExternal("Param/Value/03B45E28"), "ConcentrationAura", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntranquility.dds", StringExternal("Param/Value/DDE1A2AC"), StringExternal("Param/Value/592C85AD"), "Tranquility", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnregenerate.dds", StringExternal("Param/Value/C8E53314"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnenchantedcrows.dds", StringExternal("Param/Value/A7FD1CE9"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index3 += 1;
    lv_index4 = 0;
    gf_HeroStats("Ghostlyarchmage", 4, 4, 12, 6, 8, 4, StringExternal("Param/Value/7A54CDF8"), lv_index, lv_index2, lv_index3, gv_heroesAbilitiesUpgrades[0][0][0][0], gv_heroesAbilitiesUpgrades[0][0][0][0], null, null, null);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnheal.dds", StringExternal("Param/Value/0AE091EF"), StringExternal("Param/Value/DA776DD6"), "HolyAttacks", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btninnerfire.dds", StringExternal("Param/Value/D6EED5C3"), StringExternal("Param/Value/ECDC741C"), "HolyFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnbarkskin.dds", StringExternal("Param/Value/C0586A78"), StringExternal("Param/Value/37DB1073"), "InnerFire", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnpriestmaster.dds", StringExternal("Param/Value/F5A4265E"), StringExternal("Param/Value/ED6B9A1A"), "Blessing", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btntransmute.dds", StringExternal("Param/Value/E77816CE"), StringExternal("Param/Value/F9E1CE7C"), "Smite", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnrunedbracers.dds", StringExternal("Param/Value/2313DD28"), StringExternal("Param/Value/47428D0F"), "DivineShield", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnholybolt.dds", StringExternal("Param/Value/62659095"), StringExternal("Param/Value/2F30E982"), "HolyLight", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnspiritlink.dds", StringExternal("Param/Value/DD5D2B5B"), StringExternal("Param/Value/F9DFAFF4"), "Sunwell", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btndivineintervention.dds", StringExternal("Param/Value/92ED24DC"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
    lv_index4 += 1;
    gf_HeroAbilities("Assets\\Textures\\war3_btnghostmage.dds", StringExternal("Param/Value/781AE504"), StringToText(""), "PassiveDummy", lv_index, lv_index2, lv_index3, lv_index4);
}

void gf_DialogCreateHeroSelectionStatsStatisticsNewsAchievements () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_index4;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int lv_tempInt;
    text[11] lv_tempText;
    text[31] lv_tempText2;
    text[11] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;
    int[11][3] lv_tempXY;

    // Automatic Variable Declarations
    const int auto48035F05_ae = 20;
    const int auto48035F05_ai = 1;
    const int autoB54460CA_ae = 3;
    const int autoB54460CA_ai = 1;
    const int auto4D1465EE_ae = 3;
    const int auto4D1465EE_ai = 1;
    const int auto8C7F9204_ae = 5;
    const int auto8C7F9204_ai = 1;
    const int auto431B8C7E_ae = 15;
    const int auto431B8C7E_ai = 1;
    const int autoCF89CD49_ae = 2;
    const int autoCF89CD49_ai = 1;
    const int auto9241CCB7_ae = 5;
    const int auto9241CCB7_ai = 1;
    const int auto0A7B707F_ae = 20;
    const int auto0A7B707F_ai = 1;
    const int auto3EDF0BEA_ae = 4;
    const int auto3EDF0BEA_ai = 1;
    const int autoB9AAFA09_ae = 3;
    const int autoB9AAFA09_ai = 1;
    const int autoE4B8A8DA_ae = 6;
    const int autoE4B8A8DA_ai = 1;
    const int auto3471962E_ae = 10;
    const int auto3471962E_ai = 1;
    const int auto4849E0FB_ae = 2;
    const int auto4849E0FB_ai = 1;
    const int auto6B7926B4_ae = 25;
    const int auto6B7926B4_ai = 1;
    const int auto30C563AE_ae = 1;
    const int auto30C563AE_ai = 1;
    const int auto3D1F144E_ae = 20;
    const int auto3D1F144E_ai = 1;
    const int auto168B6157_ae = 1;
    const int auto168B6157_ai = 1;
    const int autoCEB673E9_ae = 20;
    const int autoCEB673E9_ai = 1;
    const int auto539223B3_ae = 4;
    const int auto539223B3_ai = 1;
    const int auto289F9641_ae = 5;
    const int auto289F9641_ai = 1;
    const int autoCBB01B6D_ae = 15;
    const int autoCBB01B6D_ai = 1;
    const int auto72F10805_ae = 2;
    const int auto72F10805_ai = 1;
    const int auto67A0933B_ae = 5;
    const int auto67A0933B_ai = 1;
    const int autoA562C174_ae = 3;
    const int autoA562C174_ai = 1;
    const int autoECD6F3BD_ae = 20;
    const int autoECD6F3BD_ai = 1;
    const int auto00270870_ae = 2;
    const int auto00270870_ai = 1;
    const int auto005570FD_ae = 4;
    const int auto005570FD_ai = 1;
    const int auto29A7A2CF_ae = 5;
    const int auto29A7A2CF_ai = 1;
    const int auto0BD1C176_ae = 10;
    const int auto0BD1C176_ai = 1;
    const int auto1A22B96C_ae = 2;
    const int auto1A22B96C_ai = 1;
    const int auto1A130956_ae = 1;
    const int auto1A130956_ai = 1;
    const int auto95195EF5_ae = 20;
    const int auto95195EF5_ai = 1;
    const int autoA2BCA150_ae = 2;
    const int autoA2BCA150_ai = 1;
    const int autoFAC60CE5_ae = 6;
    const int autoFAC60CE5_ai = 1;
    const int autoBEC25B59_ae = 0;
    const int autoBEC25B59_ai = 1;
    const int auto119EAB27_ae = 2;
    const int auto119EAB27_ai = 1;
    const int auto0E214E4E_ae = 11;
    const int auto0E214E4E_ai = 1;
    const int auto8F2AE657_ae = 9;
    const int auto8F2AE657_ai = 1;
    const int autoC5271336_ae = 10;
    const int autoC5271336_ai = 1;
    const int auto0E68B804_ae = 20;
    const int auto0E68B804_ai = 1;
    const int autoA8A2C993_ae = 4;
    const int autoA8A2C993_ai = 1;
    const int auto1F5EAB2F_ae = 3;
    const int auto1F5EAB2F_ai = 1;
    const int auto34DF5CF0_ae = 2;
    const int auto34DF5CF0_ai = 1;
    const int autoCFDEAD2D_ae = 2;
    const int autoCFDEAD2D_ai = 1;
    const int autoA2E8663C_ae = 2;
    const int autoA2E8663C_ai = 1;
    const int autoB918BDB6_ae = 2;
    const int autoB918BDB6_ai = 1;
    const int autoC4CB3180_ae = 2;
    const int autoC4CB3180_ai = 1;
    const int auto41F5E1E6_ae = 2;
    const int auto41F5E1E6_ai = 1;
    const int auto8492309C_ae = 5;
    const int auto8492309C_ai = 1;
    const int autoB3928312_ae = 5;
    const int autoB3928312_ai = 1;
    const int autoF679259C_ae = 15;
    const int autoF679259C_ai = 1;
    const int auto54ACD930_ae = 2;
    const int auto54ACD930_ai = 1;
    const int auto67DF0BD3_ae = 5;
    const int auto67DF0BD3_ai = 1;
    const int autoA6697D36_ae = 20;
    const int autoA6697D36_ai = 1;
    const int auto8CA60D73_ae = 2;
    const int auto8CA60D73_ai = 1;
    const int auto664EAA77_ae = 4;
    const int auto664EAA77_ai = 1;
    const int auto92442251_ae = 3;
    const int auto92442251_ai = 1;
    const int autoC337491A_ae = 3;
    const int autoC337491A_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(2400, 1700, c_anchorTopLeft, -150, -25, true);
    gv_heroSelectionDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ulnar_dirtnormal.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    lv_xPos = 200;
    lv_yPos = 50;
    lv_xSize = 1700;
    lv_ySize = 1050;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 400), 80, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 725, 70, c_anchorTopLeft, (lv_xPos + 475), (lv_yPos + 60), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto48035F05_ai >= 0 && lv_index <= auto48035F05_ae) || (auto48035F05_ai < 0 && lv_index >= auto48035F05_ae) ) ; lv_index += auto48035F05_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 100)), (50 + RandomInt(1, 100)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 1600)), ((lv_yPos + 25) + RandomInt(1, 900)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 660), (lv_yPos + 30), StringExternal("Param/Value/7886BC86"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 525;
    lv_yPos = 1040;
    lv_xSize = 270;
    lv_ySize = 85;
    lv_tempText[1] = StringExternal("Param/Value/62E1517B");
    lv_tempText[2] = StringExternal("Param/Value/24A0FD7C");
    lv_tempText[3] = StringExternal("Param/Value/04469FF8");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (autoB54460CA_ai >= 0 && lv_index <= autoB54460CA_ae) || (autoB54460CA_ai < 0 && lv_index >= autoB54460CA_ae) ) ; lv_index += autoB54460CA_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_heroSelectionDialogMainButtons[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroSelectionDialogMainButtons[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroSelectionDialogMainButtons[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 25), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 375;
    }
    lv_xPos = 300;
    lv_yPos = 180;
    lv_xSize = 450;
    lv_ySize = 850;
    lv_index = 1;
    for ( ; ( (auto4D1465EE_ai >= 0 && lv_index <= auto4D1465EE_ae) || (auto4D1465EE_ai < 0 && lv_index >= auto4D1465EE_ae) ) ; lv_index += auto4D1465EE_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 8), (lv_ySize + 8), c_anchorTopLeft, (lv_xPos - 4), (lv_yPos - 4), StringToText(""), "Assets\\Textures\\ui_battle_frame_summary_metal_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 330, 300, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 240), gv_heroesStatsHeroTooltip[0][0][0], ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_heroSelectionDialogHeroPortrait[lv_index][1] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 125), (lv_yPos - 20));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 250);
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "MineralCrystalGlow", PlayerGroupAll());
        PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.100000");
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        gv_heroSelectionDialogHeroPortrait[lv_index][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 125), (lv_yPos - 20));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 250);
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), ((gv_heroesStatsUnitType[0][0][0])), PlayerGroupAll());
        PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.100000");
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 220, 270, c_anchorTopLeft, (lv_xPos + 115), (lv_yPos - 30), StringToText(""), "Assets\\Textures\\ui_battlenet_glue_collection_standarditemframe_hover.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 765), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, (lv_xPos + 190), (lv_yPos + 755), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 140, 140, c_anchorTopLeft, (lv_xPos + 160), (lv_yPos + 720), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_heroSelectionDialogSelectionButtons[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        gv_heroSelectionDialogSelectionButtons[lv_index][1] = DialogControlLastCreated();
        lv_index2 = 0;
        for ( ; ( (auto8C7F9204_ai >= 0 && lv_index2 <= auto8C7F9204_ae) || (auto8C7F9204_ai < 0 && lv_index2 >= auto8C7F9204_ae) ) ; lv_index2 += auto8C7F9204_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 135, 40, c_anchorTopLeft, (lv_xPos + 10), ((lv_yPos + 385) + (lv_index2 * 30)), StringToText(gv_heroesStatsAdvancedNames[lv_index2][2]), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 35), ((lv_yPos + 393) + (lv_index2 * 30)), (StringExternal("Param/Value/513D14ED") + StringToText(gv_heroesStatsAdvancedNames[lv_index2][1])), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_index3 = 1;
            for ( ; ( (auto431B8C7E_ai >= 0 && lv_index3 <= auto431B8C7E_ae) || (auto431B8C7E_ai < 0 && lv_index3 >= auto431B8C7E_ae) ) ; lv_index3 += auto431B8C7E_ai ) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 23, 35, c_anchorTopLeft, ((lv_xPos + 105) + (lv_index3 * 19)), ((lv_yPos + 387) + (lv_index2 * 30)), StringToText(""), "Assets\\Textures\\decal_terran_0010_01.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3] = DialogControlLastCreated();
            }
        }
        lv_index4 = 0;
        lv_index2 = 1;
        for ( ; ( (autoCF89CD49_ai >= 0 && lv_index2 <= autoCF89CD49_ae) || (autoCF89CD49_ai < 0 && lv_index2 >= autoCF89CD49_ae) ) ; lv_index2 += autoCF89CD49_ai ) {
            lv_index3 = 1;
            for ( ; ( (auto9241CCB7_ai >= 0 && lv_index3 <= auto9241CCB7_ae) || (auto9241CCB7_ai < 0 && lv_index3 >= auto9241CCB7_ae) ) ; lv_index3 += auto9241CCB7_ai ) {
                lv_index4 += 1;
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 65, 65, c_anchorTopLeft, ((lv_xPos - 48) + (lv_index3 * 80)), ((lv_yPos + 505) + (lv_index2 * 80)), gv_heroesAbilitiesTooltips[0][0][0][0], gv_heroesAbilitiesIcons[0][0][0][0], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_heroSelectionDialogHeroSkills[lv_index][lv_index4] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, ((lv_xPos - 53) + (lv_index3 * 80)), ((lv_yPos + 500) + (lv_index2 * 80)), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            }
        }
        lv_xPos += 510;
    }
    DialogCreate(2400, 1600, c_anchorTopLeft, -50, -25, true);
    gv_heroLoadDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    lv_xPos = 50;
    lv_yPos = 15;
    lv_xSize = 1630;
    lv_ySize = 1175;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 400), 80, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, 70, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 60), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto0A7B707F_ai >= 0 && lv_index <= auto0A7B707F_ae) || (auto0A7B707F_ai < 0 && lv_index >= auto0A7B707F_ae) ) ; lv_index += auto0A7B707F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 100)), (50 + RandomInt(1, 100)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 1450)), ((lv_yPos + 25) + RandomInt(1, 860)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 680), (lv_yPos + 30), StringExternal("Param/Value/6FBBF350"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 230;
    lv_yPos = 1130;
    lv_xSize = 250;
    lv_ySize = 80;
    lv_tempText[1] = StringExternal("Param/Value/E851A788");
    lv_tempText[2] = StringExternal("Param/Value/A0E8C250");
    lv_tempText[3] = StringExternal("Param/Value/8B2B0F7A");
    lv_tempText[4] = StringExternal("Param/Value/DB1816BA");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_tempColor[3] = Color(0.00, 50.20, 100.00);
    lv_tempColor[4] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto3EDF0BEA_ai >= 0 && lv_index <= auto3EDF0BEA_ae) || (auto3EDF0BEA_ai < 0 && lv_index >= auto3EDF0BEA_ae) ) ; lv_index += auto3EDF0BEA_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        gv_heroLoadDialogMainButtons[lv_index][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroLoadDialogMainButtons[lv_index][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroLoadDialogMainButtons[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 25), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 330;
    }
    lv_yPos = 145;
    lv_xSize = 250;
    lv_ySize = 290;
    lv_index = 0;
    lv_index2 = 1;
    for ( ; ( (autoB9AAFA09_ai >= 0 && lv_index2 <= autoB9AAFA09_ae) || (autoB9AAFA09_ai < 0 && lv_index2 >= autoB9AAFA09_ae) ) ; lv_index2 += autoB9AAFA09_ai ) {
        lv_xPos = 88;
        lv_index3 = 1;
        for ( ; ( (autoE4B8A8DA_ai >= 0 && lv_index3 <= autoE4B8A8DA_ae) || (autoE4B8A8DA_ai < 0 && lv_index3 >= autoE4B8A8DA_ae) ) ; lv_index3 += autoE4B8A8DA_ai ) {
            lv_index += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 330, 60, c_anchorTopLeft, (lv_xPos + 32), (lv_yPos + 200), StringExternal("Param/Value/09DA1EF9"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_heroLoadDialogHeroPortrait[lv_index][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 330, 60, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos + 225), StringExternal("Param/Value/00E08D64"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 60, c_anchorTopLeft, (lv_xPos + 160), (lv_yPos + 225), StringExternal("Param/Value/DE048EA5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_heroLoadDialogHeroPortrait[lv_index][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 170, 200, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\portrait_darktemplar_background.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 20), (lv_ySize - 16), c_anchorTopLeft, (lv_xPos + 10), (lv_yPos + 8), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            gv_heroLoadDialogSelectionButtons[lv_index][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 8), (lv_ySize + 8), c_anchorTopLeft, (lv_xPos - 4), (lv_yPos - 4), StringToText(""), "Assets\\Textures\\ui_battle_frame_summary_metal_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 5));
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 170, 195);
            libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
            libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "MineralCrystalGlow", PlayerGroupAll());
            PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.010000");
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
            gv_heroLoadDialogHeroPortrait[lv_index][2] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 5));
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 170, 195);
            libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
            libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
            libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), ((gv_heroesStatsUnitType[0][0][0])), PlayerGroupAll());
            PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.010000");
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 220, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos - 20), StringToText(""), "Assets\\Textures\\ui_battlenet_glue_collection_standarditemframe_hover.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 92), (lv_yPos + 252), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 65, 65, c_anchorTopLeft, (lv_xPos + 85), (lv_yPos + 245), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 120, 120, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 215), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_heroLoadDialogSelectionButtons[lv_index][2] = DialogControlLastCreated();
            if ((lv_index > gv_generalLoadSlotCap)) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }

            lv_xPos += 260;
        }
        lv_yPos += 337;
    }
    DialogCreate(2400, 1400, c_anchorCenter, 0, 0, true);
    gv_heroDestroyDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1400, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    lv_xPos = 700;
    lv_yPos = 400;
    lv_xSize = 500;
    lv_ySize = 320;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto3471962E_ai >= 0 && lv_index <= auto3471962E_ae) || (auto3471962E_ai < 0 && lv_index >= auto3471962E_ae) ) ; lv_index += auto3471962E_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 20)), (35 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 350)), ((lv_yPos + 15) + RandomInt(1, 200)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 160), (lv_yPos + 26), StringExternal("Param/Value/17AFBB60"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 745;
    lv_yPos = 470;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    gv_heroDestroyDialogInfoText[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 25));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 170);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), ((gv_heroesStatsUnitType[0][0][0])), PlayerGroupAll());
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.010000");
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 170, 195, c_anchorTopLeft, (lv_xPos + 10), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_battlenet_glue_collection_standarditemframe_hover.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 200, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 22), StringExternal("Param/Value/0E493A6C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroDestroyDialogInfoText[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 200, c_anchorTopLeft, (lv_xPos + 190), (lv_yPos + 50), StringExternal("Param/Value/24B3F029"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 200, c_anchorTopLeft, (lv_xPos + 270), (lv_yPos + 50), StringExternal("Param/Value/105AAC9C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroDestroyDialogInfoText[0] = DialogControlLastCreated();
    lv_xPos = 725;
    lv_yPos = 675;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/D807D17D");
    lv_tempText[2] = StringExternal("Param/Value/BA211C64");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto4849E0FB_ai >= 0 && lv_index <= auto4849E0FB_ae) || (auto4849E0FB_ai < 0 && lv_index >= auto4849E0FB_ae) ) ; lv_index += auto4849E0FB_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroDestroyDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 17), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 250;
    }
    DialogCreate(700, 800, c_anchorTopLeft, 30, 30, true);
    gv_newsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 600;
    lv_ySize = 700;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto6B7926B4_ai >= 0 && lv_index <= auto6B7926B4_ae) || (auto6B7926B4_ai < 0 && lv_index >= auto6B7926B4_ae) ) ; lv_index += auto6B7926B4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 25)), (40 + RandomInt(1, 25)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 520)), ((lv_yPos + 25) + RandomInt(1, 620)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 255), (lv_yPos + 25), StringExternal("Param/Value/E2FBC2A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 475, 550, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 110), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_newsDialogItems[2] = DialogControlLastCreated();
    lv_xPos = 240;
    lv_yPos = 690;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/F68FF569");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto30C563AE_ai >= 0 && lv_index <= auto30C563AE_ae) || (auto30C563AE_ai < 0 && lv_index >= auto30C563AE_ae) ) ; lv_index += auto30C563AE_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_newsDialogItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    gv_modeDialogText[1] = StringExternal("Param/Value/5624EC0D");
    gv_modeDialogText[2] = StringExternal("Param/Value/6FE6508F");
    gv_modeDialogText[3] = StringExternal("Param/Value/6D465196");
    DialogCreate(700, 925, c_anchorTopRight, 525, 100, true);
    gv_modeDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 600;
    lv_ySize = 825;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 70, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto3D1F144E_ai >= 0 && lv_index <= auto3D1F144E_ae) || (auto3D1F144E_ai < 0 && lv_index >= auto3D1F144E_ae) ) ; lv_index += auto3D1F144E_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 25)), (40 + RandomInt(1, 25)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 520)), ((lv_yPos + 25) + RandomInt(1, 620)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 255), (lv_yPos + 25), StringExternal("Param/Value/8B9226EA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 475, 660, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 110), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_modeDialogItems[2] = DialogControlLastCreated();
    lv_xPos = 240;
    lv_yPos = 815;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/D095AC58");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto168B6157_ai >= 0 && lv_index <= auto168B6157_ae) || (auto168B6157_ai < 0 && lv_index >= auto168B6157_ae) ) ; lv_index += auto168B6157_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_modeDialogItems[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    DialogCreate(1200, 900, c_anchorTopLeft, 150, 80, true);
    gv_heroStatsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 1060;
    lv_ySize = 630;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 300), 60, c_anchorTopLeft, (lv_xPos + 150), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 70, c_anchorTopLeft, (lv_xPos + 250), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 70, c_anchorTopLeft, (lv_xPos + 150), (lv_yPos + 310), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoCEB673E9_ai >= 0 && lv_index <= autoCEB673E9_ae) || (autoCEB673E9_ai < 0 && lv_index >= autoCEB673E9_ae) ) ; lv_index += autoCEB673E9_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 50)), (30 + RandomInt(1, 50)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 1000)), ((lv_yPos + 25) + RandomInt(1, 590)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 405), (lv_yPos + 24), StringExternal("Param/Value/DE0C179E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 95;
    lv_yPos = 620;
    lv_xSize = 230;
    lv_ySize = 70;
    lv_tempText[1] = StringExternal("Param/Value/9FB4BD68");
    lv_tempText[2] = StringExternal("Param/Value/1F7251E1");
    lv_tempText[3] = StringExternal("Param/Value/438B5909");
    lv_tempText[4] = StringExternal("Param/Value/295CFB22");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 100.00, 100.00);
    lv_tempColor[4] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto539223B3_ai >= 0 && lv_index <= auto539223B3_ae) || (auto539223B3_ai < 0 && lv_index >= auto539223B3_ae) ) ; lv_index += auto539223B3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_heroStatsDialogMainButtons[lv_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 27), (lv_yPos + 22), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 245;
    }
    lv_xPos = 80;
    lv_yPos = 150;
    lv_xSize = 190;
    lv_ySize = 230;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnmilitia.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_heroStatsDialogHeroPortrait[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 100), 55, c_anchorTopLeft, (lv_xPos - 30), (lv_yPos - 35), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 10), (lv_yPos - 20), StringExternal("Param/Value/D7655F00"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroStatsDialogHeroPortrait[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 400, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 10), StringExternal("Param/Value/445126AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroStatsDialogHeroPortrait[3] = DialogControlLastCreated();
    lv_xPos = 560;
    lv_yPos = 180;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 50, c_anchorTopLeft, (lv_xPos + 95), (lv_yPos - 52), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 175), (lv_yPos - 40), StringExternal("Param/Value/A05D1EC0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, (lv_xPos + 135), ((lv_yPos - 15) + 0), (StringExternal("Param/Value/3A542FC2") + StringExternal("Param/Value/ACC8A5D7")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, (lv_xPos + 350), (lv_yPos - 13), StringExternal("Param/Value/5C5EDFE0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroStatsDialogHeroStats[0][0] = DialogControlLastCreated();
    lv_yPos += 15;
    lv_index2 = 0;
    for ( ; ( (auto289F9641_ai >= 0 && lv_index2 <= auto289F9641_ae) || (auto289F9641_ai < 0 && lv_index2 >= auto289F9641_ae) ) ; lv_index2 += auto289F9641_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 135, 40, c_anchorTopLeft, (lv_xPos + 10), ((lv_yPos - 5) + 0), StringToText(gv_heroesStatsAdvancedNames[lv_index2][2]), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 35), ((lv_yPos + 2) + 0), (StringExternal("Param/Value/6B0115FB") + StringToText(gv_heroesStatsAdvancedNames[lv_index2][1])), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_index3 = 1;
        for ( ; ( (autoCBB01B6D_ai >= 0 && lv_index3 <= autoCBB01B6D_ae) || (autoCBB01B6D_ai < 0 && lv_index3 >= autoCBB01B6D_ae) ) ; lv_index3 += autoCBB01B6D_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 23, 35, c_anchorTopLeft, ((lv_xPos + 105) + (lv_index3 * 19)), ((lv_yPos + 0) + 0), StringToText(""), "Assets\\Textures\\decal_terran_0010_01.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_heroStatsDialogHeroStats[lv_index2][lv_index3] = DialogControlLastCreated();
        }
        if ((lv_index2 >= 1)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, ((lv_xPos + 405) + 0), ((lv_yPos - 1) + 0), StringToText(""), "Assets\\Textures\\sc2_ui_collection_skins_icon_add_hover.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorTopLeft, (lv_xPos + 405), (lv_yPos - 1), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
            gv_heroStatsDialogHeroStats[lv_index2][17] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, ((lv_xPos + 400) + 0), ((lv_yPos - 3) + 0), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
        }

        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, (lv_xPos + 440), (lv_yPos + 3), StringExternal("Param/Value/543D7344"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_heroStatsDialogHeroStats[lv_index2][16] = DialogControlLastCreated();
        lv_yPos += 30;
    }
    lv_xSize = 85;
    lv_ySize = 85;
    lv_yPos = 440;
    lv_tempInt = 1;
    lv_xPos = 120;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos - 57), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos - 40), StringExternal("Param/Value/1B5973B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_index = 1;
    for ( ; ( (auto72F10805_ai >= 0 && lv_index <= auto72F10805_ae) || (auto72F10805_ai < 0 && lv_index >= auto72F10805_ae) ) ; lv_index += auto72F10805_ai ) {
        lv_xPos = 95;
        lv_index2 = 1;
        for ( ; ( (auto67A0933B_ai >= 0 && lv_index2 <= auto67A0933B_ae) || (auto67A0933B_ai < 0 && lv_index2 >= auto67A0933B_ae) ) ; lv_index2 += auto67A0933B_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_heroStatsDialogKeyItems[lv_tempInt][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            gv_heroStatsDialogKeyItems[lv_tempInt][1] = DialogControlLastCreated();
            lv_tempInt += 1;
            lv_xPos += 92;
        }
        lv_yPos += 92;
    }
    lv_xPos = 590;
    lv_yPos = 415;
    lv_xSize = 185;
    lv_ySize = 55;
    lv_tempText[1] = StringExternal("Param/Value/EB7A0FE1");
    lv_tempText[2] = StringExternal("Param/Value/C814216B");
    lv_tempText[3] = StringExternal("Param/Value/B3110BD0");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 55, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos - 35), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 225), (lv_yPos - 10), StringExternal("Param/Value/B93CC678"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yPos += 20;
    lv_index = 1;
    for ( ; ( (autoA562C174_ai >= 0 && lv_index <= autoA562C174_ae) || (autoA562C174_ai < 0 && lv_index >= autoA562C174_ae) ) ; lv_index += autoA562C174_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_heroStatsDialogOptions[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 18), (lv_yPos + 17), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, (lv_xPos + 210), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 120, 120, c_anchorTopLeft, (lv_xPos + 170), (lv_yPos - 40), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroStatsDialogOptions[lv_index][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_yPos += 65;
    }
    DialogCreate(900, 900, c_anchorTopLeft, 20, 50, true);
    gv_heroVendorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 50;
    lv_xSize = 700;
    lv_ySize = 650;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 250), 60, c_anchorTopLeft, (lv_xPos + 175), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 150), 70, c_anchorTopLeft, (lv_xPos + 105), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoECD6F3BD_ai >= 0 && lv_index <= autoECD6F3BD_ae) || (autoECD6F3BD_ai < 0 && lv_index >= autoECD6F3BD_ae) ) ; lv_index += autoECD6F3BD_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 50)), (30 + RandomInt(1, 50)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 620)), ((lv_yPos + 25) + RandomInt(1, 580)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 260), (lv_yPos + 24), StringExternal("Param/Value/17C34577"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnfemaleelfvillager.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xPos = 170;
    lv_yPos = 650;
    lv_xSize = 230;
    lv_ySize = 70;
    lv_tempText[1] = StringExternal("Param/Value/6DC8ED70");
    lv_tempText[2] = StringExternal("Param/Value/43763D6E");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto00270870_ai >= 0 && lv_index <= auto00270870_ae) || (auto00270870_ai < 0 && lv_index >= auto00270870_ae) ) ; lv_index += auto00270870_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_heroVendorDialogMainButtons[lv_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 22), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 325;
    }
    lv_xPos = 155;
    lv_yPos = 150;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 250, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 0), StringExternal("Param/Value/577DD5F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 310), (lv_yPos + 3), StringExternal("Param/Value/950268E9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroVendorDialogSkillItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 250, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 200), StringExternal("Param/Value/CF229C15"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 250, c_anchorTopLeft, (lv_xPos - 5), (lv_yPos + 198), StringExternal("Param/Value/2733CF65"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroVendorDialogSkillItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 280), (lv_yPos + 202), StringExternal("Param/Value/CFA4A4FE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroVendorDialogSkillItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 360, 250, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 355), StringExternal("Param/Value/280C19CB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 545;
    lv_yPos = 170;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/F2FA0C2E");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_index = 3;
    for ( ; ( (auto005570FD_ai >= 0 && lv_index <= auto005570FD_ae) || (auto005570FD_ai < 0 && lv_index >= auto005570FD_ae) ) ; lv_index += auto005570FD_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 5), StringToText(""), gv_currencyIcons[1][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 0), StringToText(""), gv_currencyIcons[1][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 45, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 13), StringExternal("Param/Value/C79D6852"), Color(100,100,100), false, 0.0);
        gv_heroVendorDialogSkillItems[lv_index] = DialogControlLastCreated();
        lv_yPos += 50;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_heroVendorDialogMainButtons[lv_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 37), (lv_yPos + 20), lv_tempText[1], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yPos += 130;
    }
    lv_yPos -= 0;
    lv_index = 5;
    for ( ; ( (auto29A7A2CF_ai >= 0 && lv_index <= auto29A7A2CF_ae) || (auto29A7A2CF_ai < 0 && lv_index >= auto29A7A2CF_ae) ) ; lv_index += auto29A7A2CF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[1], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_heroVendorDialogMainButtons[lv_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 37), (lv_yPos + 20), lv_tempText[1], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    DialogCreate(2400, 1400, c_anchorCenter, 0, 0, true);
    gv_heroVendorDestroyDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1400, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    lv_xPos = 700;
    lv_yPos = 400;
    lv_xSize = 510;
    lv_ySize = 330;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto0BD1C176_ai >= 0 && lv_index <= auto0BD1C176_ae) || (auto0BD1C176_ai < 0 && lv_index >= auto0BD1C176_ae) ) ; lv_index += auto0BD1C176_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 20)), (35 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 350)), ((lv_yPos + 15) + RandomInt(1, 250)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 155), (lv_yPos + 26), StringExternal("Param/Value/975E7C19"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 435, 180, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 75), StringExternal("Param/Value/1458C68C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 730;
    lv_yPos = 675;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/98BB29F4");
    lv_tempText[2] = StringExternal("Param/Value/D37D01FE");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto1A22B96C_ai >= 0 && lv_index <= auto1A22B96C_ae) || (auto1A22B96C_ai < 0 && lv_index >= auto1A22B96C_ae) ) ; lv_index += auto1A22B96C_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroVendorDestroyDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 17), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 250;
    }
    lv_xPos = 815;
    lv_yPos = 620;
    lv_xSize = 200;
    lv_ySize = 55;
    lv_tempText[1] = StringExternal("Param/Value/162DA6CE");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_index = 1;
    for ( ; ( (auto1A130956_ai >= 0 && lv_index <= auto1A130956_ae) || (auto1A130956_ai < 0 && lv_index >= auto1A130956_ae) ) ; lv_index += auto1A130956_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroVendorDestroyDialogMainButtons[3] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 21), (lv_yPos + 16), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 45, c_anchorTopLeft, (lv_xPos + 210), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 120, 120, c_anchorTopLeft, (lv_xPos + 170), (lv_yPos - 40), StringToText(""), "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroVendorDestroyDialogMainButtons[4] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogCreate(1200, 900, c_anchorTopLeft, 20, 50, true);
    gv_statisticsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 25;
    lv_yPos = 50;
    lv_xSize = 1085;
    lv_ySize = 535;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_statisticsDialogPlayerColors[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 65.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 250), 60, c_anchorTopLeft, (lv_xPos + 175), (lv_yPos + 32), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_statisticsDialogPlayerColors[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 150), 70, c_anchorTopLeft, (lv_xPos + 105), (lv_yPos + 55), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto95195EF5_ai >= 0 && lv_index <= auto95195EF5_ae) || (auto95195EF5_ai < 0 && lv_index >= auto95195EF5_ae) ) ; lv_index += auto95195EF5_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 50)), (30 + RandomInt(1, 50)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 1000)), ((lv_yPos + 25) + RandomInt(1, 450)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 450), (lv_yPos + 47), StringExternal("Param/Value/928AB388"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_statisticsDialogPlayerColors[1] = DialogControlLastCreated();
    lv_yPos = 40;
    lv_xSize = 185;
    lv_ySize = 60;
    lv_tempText[0] = StringExternal("Param/Value/042CBBF5");
    lv_tempColor[0] = Color(100.00, 0.00, 0.00);
    lv_index3 = 0;
    lv_index2 = 1;
    for ( ; ( (autoA2BCA150_ai >= 0 && lv_index2 <= autoA2BCA150_ae) || (autoA2BCA150_ai < 0 && lv_index2 >= autoA2BCA150_ae) ) ; lv_index2 += autoA2BCA150_ai ) {
        lv_xPos = 15;
        lv_index = 1;
        for ( ; ( (autoFAC60CE5_ai >= 0 && lv_index <= autoFAC60CE5_ae) || (autoFAC60CE5_ai < 0 && lv_index >= autoFAC60CE5_ae) ) ; lv_index += autoFAC60CE5_ai ) {
            lv_index3 += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            gv_statisticsDialogPlayerButtons[lv_index3][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_statisticsDialogPlayerButtons[lv_index3][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_statisticsDialogPlayerButtons[lv_index3][1] = DialogControlLastCreated();
            lv_xPos += 185;
        }
        lv_yPos += 500;
    }
    lv_xPos = 825;
    lv_yPos = 460;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[0] = StringExternal("Param/Value/F82C38BB");
    lv_tempColor[0] = Color(100.00, 0.00, 0.00);
    lv_index = 0;
    for ( ; ( (autoBEC25B59_ai >= 0 && lv_index <= autoBEC25B59_ae) || (autoBEC25B59_ai < 0 && lv_index >= autoBEC25B59_ae) ) ; lv_index += autoBEC25B59_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        gv_statisticsDialogPlayerButtons[0][0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTopLeft, (lv_xPos + 33), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_tempText2[1] = StringExternal("Param/Value/1F90B185");
    lv_tempText2[2] = StringExternal("Param/Value/78F3CDB9");
    lv_tempText2[3] = StringExternal("Param/Value/C25DE8A7");
    lv_tempText2[4] = StringExternal("Param/Value/0E917E50");
    lv_tempText2[5] = StringExternal("Param/Value/378D8E80");
    lv_tempText2[6] = StringExternal("Param/Value/884E6748");
    lv_tempText2[7] = StringExternal("Param/Value/7E9AAC3F");
    lv_tempText2[8] = StringExternal("Param/Value/C6A85FDC");
    lv_tempText2[9] = StringExternal("Param/Value/3A2220F3");
    lv_tempText2[10] = StringExternal("Param/Value/2AE9600C");
    lv_tempText2[11] = StringExternal("Param/Value/11BFC5AA");
    lv_tempText2[12] = StringExternal("Param/Value/E7D63094");
    lv_tempText2[13] = StringExternal("Param/Value/871234A0");
    lv_tempText2[14] = StringExternal("Param/Value/B5F7B815");
    lv_tempText2[15] = StringExternal("Param/Value/A17DAC67");
    lv_tempText2[16] = StringExternal("Param/Value/B1B68D66");
    lv_tempText2[17] = StringExternal("Param/Value/DB5A374D");
    lv_tempText2[18] = StringExternal("Param/Value/F616994E");
    lv_tempText2[19] = StringExternal("Param/Value/3166E812");
    lv_tempText2[20] = StringExternal("Param/Value/DED625CF");
    lv_tempText2[21] = StringExternal("Param/Value/47BF2FAC");
    lv_tempText2[22] = StringExternal("Param/Value/D3F841C8");
    lv_xPos = 80;
    lv_index3 = 0;
    lv_index2 = 1;
    for ( ; ( (auto119EAB27_ai >= 0 && lv_index2 <= auto119EAB27_ae) || (auto119EAB27_ai < 0 && lv_index2 >= auto119EAB27_ae) ) ; lv_index2 += auto119EAB27_ai ) {
        lv_yPos = 170;
        lv_index = 1;
        for ( ; ( (auto0E214E4E_ai >= 0 && lv_index <= auto0E214E4E_ae) || (auto0E214E4E_ai < 0 && lv_index >= auto0E214E4E_ae) ) ; lv_index += auto0E214E4E_ai ) {
            lv_index3 += 1;
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), lv_tempText2[lv_index3], ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 195), (lv_yPos + 1), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_statisticsDialogPlayerItems[lv_index3] = DialogControlLastCreated();
            lv_yPos += 33;
        }
        lv_xPos += 370;
    }
    lv_xPos = 820;
    lv_yPos = 150;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 60, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 10), StringExternal("Param/Value/1DF475F2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 210, 50, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 25), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 75;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 75;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 150;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 225;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 225;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 150;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 150;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 75;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 225;
    lv_index += 1;
    lv_tempXY[lv_index][1] = 20;
    lv_tempXY[lv_index][2] = 0;
    lv_xSize = 50;
    lv_ySize = 50;
    lv_index = 1;
    for ( ; ( (auto8F2AE657_ai >= 0 && lv_index <= auto8F2AE657_ae) || (auto8F2AE657_ai < 0 && lv_index >= auto8F2AE657_ae) ) ; lv_index += auto8F2AE657_ai ) {
        lv_xPos = lv_tempXY[lv_index][1];
        lv_xPos += 800;
        lv_yPos = lv_tempXY[lv_index][2];
        lv_yPos += 150;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_statisticsDialogPlayerEquipment[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_statisticsDialogPlayerEquipment[lv_index][2] = DialogControlLastCreated();
    }
    lv_xSize = 35;
    lv_ySize = 35;
    lv_index = 10;
    for ( ; ( (autoC5271336_ai >= 0 && lv_index <= autoC5271336_ae) || (autoC5271336_ai < 0 && lv_index >= autoC5271336_ae) ) ; lv_index += autoC5271336_ai ) {
        lv_xPos = lv_tempXY[lv_index][1];
        lv_xPos += 800;
        lv_yPos = lv_tempXY[lv_index][2];
        lv_yPos += 150;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_statisticsDialogPlayerEquipment[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_statisticsDialogPlayerEquipment[lv_index][2] = DialogControlLastCreated();
    }
    DialogCreate(1100, 850, c_anchorTopLeft, 420, 50, true);
    gv_heroTreeDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    lv_xPos = 40;
    lv_yPos = 50;
    lv_xSize = 900;
    lv_ySize = 745;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 60, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 520, 65, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 45), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto0E68B804_ai >= 0 && lv_index <= auto0E68B804_ae) || (auto0E68B804_ai < 0 && lv_index >= auto0E68B804_ae) ) ; lv_index += auto0E68B804_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 100)), (50 + RandomInt(1, 100)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 800)), ((lv_yPos + 25) + RandomInt(1, 670)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 220), (lv_yPos + 27), StringExternal("Param/Value/B97C5865"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 260;
    lv_yPos = 740;
    lv_xSize = 200;
    lv_ySize = 70;
    lv_tempText[4] = StringExternal("Param/Value/808921E3");
    lv_tempColor[4] = Color(100.00, 0.00, 0.00);
    lv_index = 4;
    for ( ; ( (autoA8A2C993_ai >= 0 && lv_index <= autoA8A2C993_ae) || (autoA8A2C993_ai < 0 && lv_index >= autoA8A2C993_ae) ) ; lv_index += autoA8A2C993_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 57), (lv_yPos + 21), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 100;
    lv_yPos = 155;
    lv_xSize = 170;
    lv_ySize = 60;
    lv_tempText[1] = StringExternal("Param/Value/35CFE992");
    lv_tempColor[1] = Color(100.00, 50.20, 50.20);
    lv_tempText[2] = StringExternal("Param/Value/F783C807");
    lv_tempColor[2] = Color(100.00, 100.00, 65.10);
    lv_tempText[3] = StringExternal("Param/Value/4E591C1C");
    lv_tempColor[3] = Color(100.00, 50.20, 25.10);
    lv_index = 1;
    for ( ; ( (auto1F5EAB2F_ai >= 0 && lv_index <= auto1F5EAB2F_ae) || (auto1F5EAB2F_ai < 0 && lv_index >= auto1F5EAB2F_ae) ) ; lv_index += auto1F5EAB2F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 180;
    }
    lv_xSize = 70;
    lv_ySize = 70;
    lv_index4 = 1;
    lv_yPos = 225;
    lv_xPos = 330;
    lv_index3 = 1;
    lv_index4 += 1;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_yPos += 85;
    lv_index4 += 1;
    lv_index3 = 1;
    lv_xPos = 240;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 90, c_anchorTopLeft, 285, (lv_yPos - 80), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 220, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 90, c_anchorTopLeft, 405, (lv_yPos - 80), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 140, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (auto34DF5CF0_ai >= 0 && lv_index <= auto34DF5CF0_ae) || (auto34DF5CF0_ai < 0 && lv_index >= auto34DF5CF0_ae) ) ; lv_index += auto34DF5CF0_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos = 420;
    }
    lv_yPos += 90;
    lv_index4 += 1;
    lv_index3 = 1;
    lv_xPos = 200;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 210, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 195, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 480, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 165, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (autoCFDEAD2D_ai >= 0 && lv_index <= autoCFDEAD2D_ae) || (autoCFDEAD2D_ai < 0 && lv_index >= autoCFDEAD2D_ae) ) ; lv_index += autoCFDEAD2D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos = 460;
    }
    lv_yPos += 90;
    lv_index4 += 1;
    lv_index3 = 1;
    lv_xPos = 135;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 170, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 205, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 260, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 155, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (autoA2E8663C_ai >= 0 && lv_index <= autoA2E8663C_ae) || (autoA2E8663C_ai < 0 && lv_index >= autoA2E8663C_ae) ) ; lv_index += autoA2E8663C_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos += 130;
    }
    lv_xPos = 395;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 430, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 205, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 520, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 155, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (autoB918BDB6_ai >= 0 && lv_index <= autoB918BDB6_ae) || (autoB918BDB6_ai < 0 && lv_index >= autoB918BDB6_ae) ) ; lv_index += autoB918BDB6_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos += 130;
    }
    lv_yPos += 90;
    lv_index4 += 1;
    lv_index3 = 1;
    lv_xPos = 135;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 215, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (autoC4CB3180_ai >= 0 && lv_index <= autoC4CB3180_ae) || (autoC4CB3180_ai < 0 && lv_index >= autoC4CB3180_ae) ) ; lv_index += autoC4CB3180_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos += 130;
    }
    lv_xPos = 395;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, 475, (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    lv_index = 1;
    for ( ; ( (auto41F5E1E6_ai >= 0 && lv_index <= auto41F5E1E6_ae) || (auto41F5E1E6_ai < 0 && lv_index >= auto41F5E1E6_ae) ) ; lv_index += auto41F5E1E6_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos += 130;
    }
    lv_yPos += 90;
    lv_index4 += 1;
    lv_index3 = 1;
    lv_xPos = 70;
    lv_index = 1;
    for ( ; ( (auto8492309C_ai >= 0 && lv_index <= auto8492309C_ae) || (auto8492309C_ai < 0 && lv_index >= auto8492309C_ae) ) ; lv_index += auto8492309C_ai ) {
        if ((lv_index < 5)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 205, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTopLeft, (lv_xPos + 125), (lv_yPos - 75), StringToText(""), "Assets\\Textures\\ui_arrow1.dds", c_triggerImageTypeNormal, false, Color(54.90, 77.65, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 155, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        }

        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\war3_btnambush.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_heroTreeDialogHeroButtons[lv_index4][lv_index3][1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_index3 += 1;
        lv_xPos += 130;
    }
    lv_xPos = 660;
    lv_yPos = 40;
    lv_xSize = 450;
    lv_ySize = 760;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 8), (lv_ySize + 8), c_anchorTopLeft, (lv_xPos - 4), (lv_yPos - 4), StringToText(""), "Assets\\Textures\\ui_battle_frame_summary_metal_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 330, 300, c_anchorTopLeft, (lv_xPos + 45), (lv_yPos + 240), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_heroTreeDialogHeroPortrait[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 125), (lv_yPos - 20));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 250);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "MineralCrystalGlow", PlayerGroupAll());
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.100000");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    gv_heroTreeDialogHeroPortrait[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_xPos + 125), (lv_yPos - 20));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 250);
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), ((gv_heroesStatsUnitType[0][0][0])), PlayerGroupAll());
    PortraitSetRenderType(PortraitGetTriggerControl(DialogControlLastCreated()), c_portraitRenderTypeLDR);
    ActorSend(ActorFromDialogControl(DialogControlLastCreated()), "SetScale 0.500000 0.100000");
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 220, 270, c_anchorTopLeft, (lv_xPos + 115), (lv_yPos - 30), StringToText(""), "Assets\\Textures\\ui_battlenet_glue_collection_standarditemframe_hover.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index2 = 0;
    for ( ; ( (autoB3928312_ai >= 0 && lv_index2 <= autoB3928312_ae) || (autoB3928312_ai < 0 && lv_index2 >= autoB3928312_ae) ) ; lv_index2 += autoB3928312_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 135, 40, c_anchorTopLeft, (lv_xPos + 10), ((lv_yPos + 385) + (lv_index2 * 30)), StringToText(gv_heroesStatsAdvancedNames[lv_index2][2]), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, (lv_xPos + 35), ((lv_yPos + 393) + (lv_index2 * 30)), (StringExternal("Param/Value/E74587A8") + StringToText(gv_heroesStatsAdvancedNames[lv_index2][1])), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_index3 = 1;
        for ( ; ( (autoF679259C_ai >= 0 && lv_index3 <= autoF679259C_ae) || (autoF679259C_ai < 0 && lv_index3 >= autoF679259C_ae) ) ; lv_index3 += autoF679259C_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 23, 35, c_anchorTopLeft, ((lv_xPos + 105) + (lv_index3 * 19)), ((lv_yPos + 387) + (lv_index2 * 30)), StringToText(""), "Assets\\Textures\\decal_terran_0010_01.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_heroTreeDialogHeroStats[lv_index2][lv_index3] = DialogControlLastCreated();
        }
    }
    lv_index4 = 0;
    lv_index2 = 1;
    for ( ; ( (auto54ACD930_ai >= 0 && lv_index2 <= auto54ACD930_ae) || (auto54ACD930_ai < 0 && lv_index2 >= auto54ACD930_ae) ) ; lv_index2 += auto54ACD930_ai ) {
        lv_index3 = 1;
        for ( ; ( (auto67DF0BD3_ai >= 0 && lv_index3 <= auto67DF0BD3_ae) || (auto67DF0BD3_ai < 0 && lv_index3 >= auto67DF0BD3_ae) ) ; lv_index3 += auto67DF0BD3_ai ) {
            lv_index4 += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 65, 65, c_anchorTopLeft, ((lv_xPos - 48) + (lv_index3 * 80)), ((lv_yPos + 505) + (lv_index2 * 80)), gv_heroesAbilitiesTooltips[0][0][0][0], gv_heroesAbilitiesIcons[0][0][0][0], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_heroTreeDialogHeroSkills[lv_index4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, ((lv_xPos - 53) + (lv_index3 * 80)), ((lv_yPos + 500) + (lv_index2 * 80)), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        }
    }
    DialogCreate(1200, 860, c_anchorBottomRight, 125, 250, true);
    gv_achievementsDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 1055;
    lv_ySize = 810;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 400), 70, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 17), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 70, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 45), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 70, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 637), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    lv_index = 1;
    for ( ; ( (autoA6697D36_ai >= 0 && lv_index <= autoA6697D36_ae) || (autoA6697D36_ai < 0 && lv_index >= autoA6697D36_ae) ) ; lv_index += autoA6697D36_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 100)), (50 + RandomInt(1, 100)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 990)), ((lv_yPos + 25) + RandomInt(1, 750)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 387), (lv_yPos + 25), StringExternal("Param/Value/A43F8391"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 290;
    lv_yPos = 800;
    lv_xSize = 210;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/21A68559");
    lv_tempText[2] = StringExternal("Param/Value/02941D81");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto8CA60D73_ai >= 0 && lv_index <= auto8CA60D73_ae) || (auto8CA60D73_ai < 0 && lv_index >= auto8CA60D73_ae) ) ; lv_index += auto8CA60D73_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_achievementsDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 42), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 350;
    }
    lv_xPos = 35;
    lv_yPos = 380;
    lv_xSize = 70;
    lv_ySize = 90;
    lv_index = 3;
    for ( ; ( (auto664EAA77_ai >= 0 && lv_index <= auto664EAA77_ae) || (auto664EAA77_ai < 0 && lv_index >= auto664EAA77_ae) ) ; lv_index += auto664EAA77_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 50.20), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 22), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 11), StringToText(""), "Assets\\Textures\\ui_arrowwhite.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), ((lv_index * 180) + 90), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_achievementsDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        lv_xPos += 1015;
    }
    lv_yPos = 155;
    lv_xSize = 305;
    lv_ySize = 175;
    lv_index = 0;
    lv_index2 = 1;
    for ( ; ( (auto92442251_ai >= 0 && lv_index2 <= auto92442251_ae) || (auto92442251_ai < 0 && lv_index2 >= auto92442251_ae) ) ; lv_index2 += auto92442251_ai ) {
        lv_xPos = 112;
        lv_index3 = 1;
        for ( ; ( (autoC337491A_ai >= 0 && lv_index3 <= autoC337491A_ae) || (autoC337491A_ai < 0 && lv_index3 >= autoC337491A_ae) ) ; lv_index3 += autoC337491A_ai ) {
            lv_index += 1;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\tyrador_concrete_cracked_low.dds", c_triggerImageTypeNormal, false, Color(50.20, 50.20, 50.20), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(38.43, 38.43, 38.43), c_triggerBlendModeNormal);
            gv_achievementsDialogItems[lv_index][5] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), 55, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 280, 90, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 22), StringExternal("Param/Value/A71FF44B"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_achievementsDialogItems[lv_index][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 80), StringExternal("Param/Value/9DE88852"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_achievementsDialogItems[lv_index][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 115), StringToText(""), gv_currencyIcons[4][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 110), StringToText(""), gv_currencyIcons[4][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 110), (lv_yPos + 122), StringExternal("Param/Value/52F64B59"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_achievementsDialogItems[lv_index][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            gv_achievementsDialogItems[lv_index][4] = DialogControlLastCreated();
            lv_xPos += 313;
        }
        lv_yPos += 185;
    }
    lv_xPos = 100;
    lv_yPos = 632;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 325, 50, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos + 110), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 115), StringToText(""), gv_currencyIcons[4][1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 110), StringToText(""), gv_currencyIcons[4][2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 120), (lv_yPos + 123), StringExternal("Param/Value/A0C242A6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_achievementsDialogItems[0][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 50, c_anchorTopLeft, (lv_xPos + 390), (lv_yPos + 110), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 500), (lv_yPos + 123), StringExternal("Param/Value/3E24E772"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 290, 90, c_anchorTopLeft, (lv_xPos + 675), (lv_yPos + 123), StringExternal("Param/Value/58546B1D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_achievementsDialogItems[0][2] = DialogControlLastCreated();
}

void gf_DialogUsedHeroStatistics (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[25] lv_tempInt;

    // Automatic Variable Declarations
    int autoD6C5C4CD_val;
    const int auto12A417E6_ae = gv_generalPlayerCap;
    const int auto12A417E6_ai = 1;
    const int autoD9D0B91E_ae = 3;
    const int autoD9D0B91E_ai = 1;
    const int auto3951F0A0_ae = 22;
    const int auto3951F0A0_ai = 1;
    const int autoB047C9C5_ae = 10;
    const int autoB047C9C5_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoD6C5C4CD_val = lv_dialogItemUsed;
    if (autoD6C5C4CD_val == gv_statisticsDialogPlayerButtons[0][0]) {
        DialogSetVisible(gv_statisticsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto12A417E6_ai >= 0 && lv_index <= auto12A417E6_ae) || (auto12A417E6_ai < 0 && lv_index >= auto12A417E6_ae) ) ; lv_index += auto12A417E6_ai ) {
        if ((lv_dialogItemUsed == gv_statisticsDialogPlayerButtons[lv_index][2]) && (PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index) == true)) {
            lv_tempInt[0] = 1;
            for ( ; ( (autoD9D0B91E_ai >= 0 && lv_tempInt[0] <= autoD9D0B91E_ae) || (autoD9D0B91E_ai < 0 && lv_tempInt[0] >= autoD9D0B91E_ae) ) ; lv_tempInt[0] += autoD9D0B91E_ai ) {
                libNtve_gf_SetDialogItemColor(gv_statisticsDialogPlayerColors[lv_tempInt[0]], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)), PlayerGroupSingle(lv_trigPlayer));
            }
            libNtve_gf_SetDialogItemText(gv_statisticsDialogPlayerColors[1], (StringExternal("Param/Value/E3CA856D") + PlayerName(lv_index)), PlayerGroupSingle(lv_trigPlayer));
            lv_trigPlayer = lv_index;
            lv_tempInt[1] = gv_playerStatisticsGeneral[lv_trigPlayer][2];
            lv_tempInt[2] = gv_playerStatisticsGeneral[lv_trigPlayer][7];
            lv_tempInt[3] = gv_playerStatisticsGeneral[lv_trigPlayer][3];
            lv_tempInt[4] = gv_playerStatisticsGeneral[lv_trigPlayer][4];
            lv_tempInt[5] = gv_playerStatisticsGeneral[lv_trigPlayer][5];
            lv_tempInt[6] = gv_playerStatisticsGeneral[lv_trigPlayer][6];
            lv_tempInt[7] = gv_playerStatisticsGeneral[lv_trigPlayer][27];
            lv_tempInt[8] = gv_playerStatisticsGeneral[lv_trigPlayer][8];
            lv_tempInt[9] = gv_playerStatisticsGeneral[lv_trigPlayer][16];
            lv_tempInt[10] = gv_playerStatisticsGeneral[lv_trigPlayer][24];
            lv_tempInt[11] = gv_playerStatisticsGeneral[lv_trigPlayer][19];
            lv_tempInt[12] = gv_playerStatisticsGeneral[lv_trigPlayer][25];
            lv_tempInt[13] = gv_playerStatisticsGeneral[lv_trigPlayer][9];
            lv_tempInt[14] = gv_playerStatisticsGeneral[lv_trigPlayer][10];
            lv_tempInt[15] = gv_playerStatisticsGeneral[lv_trigPlayer][22];
            lv_tempInt[16] = gv_playerStatisticsGeneral[lv_trigPlayer][23];
            lv_tempInt[17] = gv_playerStatisticsGeneral[lv_trigPlayer][15];
            lv_tempInt[18] = gv_playerStatisticsGeneral[lv_trigPlayer][11];
            lv_tempInt[19] = gv_playerStatisticsGeneral[lv_trigPlayer][12];
            lv_tempInt[20] = gv_playerStatisticsGeneral[lv_trigPlayer][13];
            lv_tempInt[21] = gv_playerStatisticsGeneral[lv_trigPlayer][21];
            lv_tempInt[22] = gv_playerStatisticsGeneral[lv_trigPlayer][30];
            lv_trigPlayer = lp_trigPlayer;
            lv_tempInt[0] = 1;
            for ( ; ( (auto3951F0A0_ai >= 0 && lv_tempInt[0] <= auto3951F0A0_ae) || (auto3951F0A0_ai < 0 && lv_tempInt[0] >= auto3951F0A0_ae) ) ; lv_tempInt[0] += auto3951F0A0_ai ) {
                libNtve_gf_SetDialogItemText(gv_statisticsDialogPlayerItems[lv_tempInt[0]], (StringExternal("Param/Value/D2033635") + IntToText(lv_tempInt[lv_tempInt[0]])), PlayerGroupSingle(lv_trigPlayer));
            }
            lv_tempInt[0] = 1;
            for ( ; ( (autoB047C9C5_ai >= 0 && lv_tempInt[0] <= autoB047C9C5_ae) || (autoB047C9C5_ai < 0 && lv_tempInt[0] >= autoB047C9C5_ae) ) ; lv_tempInt[0] += autoB047C9C5_ai ) {
                libNtve_gf_SetDialogItemImage(gv_statisticsDialogPlayerEquipment[lv_tempInt[0]][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_tempInt[0]][1], lv_index)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_statisticsDialogPlayerEquipment[lv_tempInt[0]][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_tempInt[0]][2], lv_index)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_statisticsDialogPlayerEquipment[lv_tempInt[0]][2], libNtve_gf_DialogItemTooltip(gv_inventoryDialogEquippedItems[lv_tempInt[0]][3], lv_index), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
}

void gf_DialogUsedHeroAchievements (int lp_trigPlayer, int lp_dialogItemUsed, int lp_type) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_type;
    int lv_index;
    int lv_tempPage;
    int[3] lv_tempAchiv;

    // Automatic Variable Declarations
    int auto55FB4765_val;
    int autoF7A86E83_val;
    const int autoEE8E0489_ae = 9;
    const int autoEE8E0489_ai = 1;
    int autoA7C4336E_ae;
    const int autoA7C4336E_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_type = lp_type;

    // Implementation
    auto55FB4765_val = lv_type;
    if (auto55FB4765_val == 1) {
        autoF7A86E83_val = lv_dialogItemUsed;
        if (autoF7A86E83_val == gv_achievementsDialogMainButtons[1]) {
            gv_helpPlayerSelected[lv_trigPlayer] = 24;
            gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
        }
        else if (autoF7A86E83_val == gv_achievementsDialogMainButtons[2]) {
            DialogSetVisible(gv_achievementsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }
        else if (autoF7A86E83_val == gv_achievementsDialogMainButtons[3]) {
            if ((gv_achievementsDialogPlayerPage[lv_trigPlayer] == 1)) {
                gv_achievementsDialogPlayerPage[lv_trigPlayer] = gv_achievementsDialogPlayerPage[0];
            }
            else {
                gv_achievementsDialogPlayerPage[lv_trigPlayer] -= 1;
            }
        }
        else if (autoF7A86E83_val == gv_achievementsDialogMainButtons[4]) {
            if ((gv_achievementsDialogPlayerPage[lv_trigPlayer] == gv_achievementsDialogPlayerPage[0])) {
                gv_achievementsDialogPlayerPage[lv_trigPlayer] = 1;
            }
            else {
                gv_achievementsDialogPlayerPage[lv_trigPlayer] += 1;
            }
        }
        else {
        }
        lv_tempPage = ((gv_achievementsDialogPlayerPage[lv_trigPlayer] - 1) * 9);
        lv_index = 1;
        for ( ; ( (autoEE8E0489_ai >= 0 && lv_index <= autoEE8E0489_ae) || (autoEE8E0489_ai < 0 && lv_index >= autoEE8E0489_ae) ) ; lv_index += autoEE8E0489_ai ) {
            lv_tempPage += 1;
            if ((gv_achievementsTiersCountIndex >= lv_tempPage)) {
                lv_tempAchiv[1] = gv_playerStatisticsAchievements[lv_trigPlayer][lv_tempPage][1];
                lv_tempAchiv[2] = gv_playerStatisticsAchievements[lv_trigPlayer][lv_tempPage][2];
                if ((lv_tempAchiv[1] <= 5)) {
                    libNtve_gf_SetDialogItemTooltip(gv_achievementsDialogItems[lv_index][4], gv_achievementsTiersCountText[lv_tempPage][0], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][1], (StringExternal("Param/Value/680C945F") + gv_achievementsTiersCountText[lv_tempPage][lv_tempAchiv[1]]), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][2], (StringExternal("Param/Value/EBE82D7C") + (IntToText(lv_tempAchiv[2]) + (StringExternal("Param/Value/57505E09") + IntToText(gv_achievementsTiersCountRequired[lv_tempPage][lv_tempAchiv[1]])))), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][3], (StringExternal("Param/Value/74BB418B") + (IntToText(gv_achievementsTiersCountRewards[lv_tempPage][lv_tempAchiv[1]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][4], gv_achievementsTiersCountColors[lv_tempAchiv[1]], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][5], gv_achievementsTiersCountColors[lv_tempAchiv[1]], PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(gv_achievementsDialogItems[lv_index][4], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][1], (StringExternal("Param/Value/C5045CE2") + gv_achievementsTiersCountText[lv_tempPage][5]), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][2], (StringExternal("Param/Value/2E63D78B") + (IntToText(lv_tempAchiv[2]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][4], Color(50.20, 100.00, 100.00), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][5], Color(50.20, 100.00, 100.00), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_achievementsDialogItems[lv_index][4], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[lv_index][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][4], Color(0.00, 0.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemColor(gv_achievementsDialogItems[lv_index][5], Color(0.00, 0.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[0][1], (StringExternal("Param/Value/8245CF5D") + IntToText(gv_playerCurrency[lv_trigPlayer][4])), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_achievementsDialogItems[0][2], (StringExternal("Param/Value/0D3C501E") + IntToText(gv_playerStatisticsAchievements[lv_trigPlayer][18][2])), PlayerGroupSingle(lv_trigPlayer));
    }
    else if (auto55FB4765_val == 2) {
        autoA7C4336E_ae = gv_achievementsTiersCountIndex;
        lv_index = 1;
        for ( ; ( (autoA7C4336E_ai >= 0 && lv_index <= autoA7C4336E_ae) || (autoA7C4336E_ai < 0 && lv_index >= autoA7C4336E_ae) ) ; lv_index += autoA7C4336E_ai ) {
            if ((gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][1] <= 5)) {
                if ((gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][2] >= gv_achievementsTiersCountRequired[lv_index][gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][1]])) {
                    if ((gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][2] != 0)) {
                        gv_playerCurrency[lv_trigPlayer][4] += gv_achievementsTiersCountRewards[lv_index][gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][1]];
                        gv_playerStatisticsGeneral[lv_trigPlayer][27] += gv_achievementsTiersCountRewards[lv_index][gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][1]];
                        gv_playerStatisticsAchievements[lv_trigPlayer][18][2] += 1;
                        gv_playerStatisticsGeneral[lv_trigPlayer][21] = gv_playerStatisticsAchievements[lv_trigPlayer][18][2];
                        SoundPlayForPlayer(SoundLink("UI_Victory_All", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.8);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/6821AB54"), PlayerGroupSingle(lv_trigPlayer));
                    }

                    gv_playerStatisticsAchievements[lv_trigPlayer][lv_index][1] += 1;
                }

            }

        }
    }
    else {
    }
}

void gf_DialogUsedHeroSelection (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_unitTierNext;
    int lv_index;
    int lv_index2;
    bool lv_heroPicked;

    // Automatic Variable Declarations
    int autoCD276C9D_val;
    const int auto296D8447_ae = gv_generalLoadSlotCap;
    const int auto296D8447_ai = 1;
    const int auto1DC69B73_ae = 3;
    const int auto1DC69B73_ai = 1;
    const int autoAEBBA769_ae = 4;
    const int autoAEBBA769_ai = 1;
    const int auto4C8507D8_ae = 3;
    const int auto4C8507D8_ai = 1;
    const int autoEA43FED3_ae = 3;
    const int autoEA43FED3_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    lv_unitTierNext = (lv_unitTier + 1);
    autoCD276C9D_val = lv_dialogItemUsed;
    if (autoCD276C9D_val == gv_heroSelectionDialogMainButtons[1][1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 3;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoCD276C9D_val == gv_heroSelectionDialogMainButtons[2][1]) {
        if ((lv_unitClass == 0)) {
            DialogSetVisible(gv_heroSelectionDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
            DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
            lv_index = 1;
            for ( ; ( (auto296D8447_ai >= 0 && lv_index <= auto296D8447_ae) || (auto296D8447_ai < 0 && lv_index >= auto296D8447_ae) ) ; lv_index += auto296D8447_ai ) {
                DialogControlSetVisible(gv_heroLoadDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
        else {
            if (((gv_tutorial2Progress > 1) || (gv_hatsPlayerUpgradeIndex[lv_trigPlayer] > 1))) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/646A49EA"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                DialogSetVisible(gv_heroSelectionDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
    }
    else if (autoCD276C9D_val == gv_heroSelectionDialogMainButtons[3][1]) {
        if ((gv_heroSelectionDialogHeroSelected[lv_trigPlayer] != 0)) {
            lv_index = 1;
            for ( ; ( (auto1DC69B73_ai >= 0 && lv_index <= auto1DC69B73_ae) || (auto1DC69B73_ai < 0 && lv_index >= auto1DC69B73_ae) ) ; lv_index += auto1DC69B73_ai ) {
                DialogControlSetEnabled(gv_heroSelectionDialogMainButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), false);
            }
            if ((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 0)) {
                gv_playerHeroHeroClassTierType[lv_trigPlayer][1] = gv_heroSelectionDialogHeroSelected[lv_trigPlayer];
                gv_playerHeroHeroClassTierType[lv_trigPlayer][3] = 1;
                gv_questsPlayerProgress[lv_trigPlayer][0] = 4;
                gv_questsPlayerProgress[lv_trigPlayer][1] = 1;
                TextTagShow(gv_questsQuestMarker[1][1], PlayerGroupSingle(lv_trigPlayer), true);
            }
            else {
                gv_playerHeroHeroClassTierType[lv_trigPlayer][3] = ((gv_heroSelectionDialogHeroSelected[lv_trigPlayer] - 1) + gv_heroesStatsUpgradeTierTypeRange[lv_unitTier][lv_unitType][1]);
                if ((gv_tutorial2Progress == 2)) {
                    gv_tutorial2Progress = 3;
                }

                if ((gv_tutorial2Progress == 5)) {
                    gv_tutorial2Progress = 6;
                }

                if ((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] >= 1)) {
                    gv_hatsPlayerUpgradeIndex[lv_trigPlayer] += 1;
                }

            }
            gv_playerHeroHeroClassTierType[lv_trigPlayer][2] = lv_unitTierNext;
            gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 0;
            DialogSetVisible(gv_heroSelectionDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroCreateLoad(lv_trigPlayer, false);
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            lv_index = 1;
            for ( ; ( (autoAEBBA769_ai >= 0 && lv_index <= autoAEBBA769_ae) || (autoAEBBA769_ai < 0 && lv_index >= autoAEBBA769_ae) ) ; lv_index += autoAEBBA769_ai ) {
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[1][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }

    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto4C8507D8_ai >= 0 && lv_index <= auto4C8507D8_ae) || (auto4C8507D8_ai < 0 && lv_index >= auto4C8507D8_ae) ) ; lv_index += auto4C8507D8_ai ) {
        if ((lv_dialogItemUsed == gv_heroSelectionDialogSelectionButtons[lv_index][1])) {
            lv_index2 = 1;
            for ( ; ( (autoEA43FED3_ai >= 0 && lv_index2 <= autoEA43FED3_ae) || (autoEA43FED3_ai < 0 && lv_index2 >= autoEA43FED3_ae) ) ; lv_index2 += autoEA43FED3_ai ) {
                DialogControlSetVisible(gv_heroSelectionDialogSelectionButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            DialogControlSetVisible(gv_heroSelectionDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
            gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = lv_index;
        }

    }
}

void gf_DialogUsedHeroCreateLoad (int lp_trigPlayer, bool lp_loading) {
    // Variable Declarations
    int lv_upgradeCount;
    int lv_trigPlayer;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_index;
    int lv_index2;
    int lv_index3;
    fixed[5] lv_tempMath;
    int lv_tempQuest;
    int lv_equipSlot;
    int lv_tempStats;
    int[4] lv_tempInt;
    int[4] lv_tempClassTierType;
    point lv_tempSpawn;
    int lv_tempStats2;
    bool lv_newHero;
    bool lv_skip;

    // Automatic Variable Declarations
    const int auto39A1BD60_ae = 12;
    const int auto39A1BD60_ai = 1;
    const int autoE1408B71_ae = gv_generalLoadSlotCap;
    const int autoE1408B71_ai = 1;
    const int auto7C2AC104_ae = gv_questsQuestSlots;
    const int auto7C2AC104_ai = 1;
    const int autoDC13BEB0_ae = 153;
    const int autoDC13BEB0_ai = 1;
    const int autoB7C5625C_ae = 3;
    const int autoB7C5625C_ai = 1;
    const int auto1DCF10C5_ae = 5;
    const int auto1DCF10C5_ai = 1;
    int autoC812B8A4_ae;
    const int autoC812B8A4_ai = 1;
    int auto8E7EDBB2_ae;
    const int auto8E7EDBB2_ai = 1;
    const int autoE75BC2B8_ae = 5;
    const int autoE75BC2B8_ai = 1;
    const int auto142026C5_ae = 5;
    const int auto142026C5_ai = 1;
    const int autoE6B312DD_ae = 5;
    const int autoE6B312DD_ai = 1;
    int auto233FFDB6_ae;
    const int auto233FFDB6_ai = 1;
    const int auto1AA14D46_ae = gv_questsQuestSlots;
    const int auto1AA14D46_ai = 1;
    const int auto749C9FEE_ae = 10;
    const int auto749C9FEE_ai = 1;
    int autoDB73D9CB_ae;
    const int autoDB73D9CB_ai = 1;
    int auto70B5B0B3_ae;
    const int auto70B5B0B3_ai = 1;
    int auto10E6C586_ae;
    const int auto10E6C586_ai = 1;
    int auto8B54CB1B_ae;
    const int auto8B54CB1B_ai = 1;
    const int auto9550FA9A_ae = 3;
    const int auto9550FA9A_ai = 1;
    int auto6B6C0337_ae;
    const int auto6B6C0337_ai = 1;
    const int autoEDD828A1_ae = 3;
    const int autoEDD828A1_ai = 1;
    const int autoDB8C762E_ae = 24;
    const int autoDB8C762E_ai = 1;
    const int auto51C78016_ae = 154;
    const int auto51C78016_ai = 1;
    const int auto752522B3_ae = 9;
    const int auto752522B3_ai = 1;
    int auto74063B40_ae;
    const int auto74063B40_ai = 1;
    const int auto09CA77B5_ae = gv_generalLoadSlotCap;
    const int auto09CA77B5_ai = 1;
    playergroup auto3CA40AAD_g;
    int auto3CA40AAD_var;
    const int auto9130B0FD_ae = gv_generalPlayerCap;
    const int auto9130B0FD_ai = 1;
    const int autoC26BE911_ae = gv_questsQuestSlots;
    const int autoC26BE911_ai = 1;
    const int auto61D9642E_ae = 4;
    const int auto61D9642E_ai = 1;
    const int autoE42E2097_ae = 3;
    const int autoE42E2097_ai = 1;
    const int autoED6493D4_ae = 10;
    const int autoED6493D4_ai = 1;
    int autoE347DA4D_ae;
    const int autoE347DA4D_ai = 1;
    const int autoF45E0D67_ae = 5;
    const int autoF45E0D67_ai = 1;
    const int auto07B3270A_ae = 5;
    const int auto07B3270A_ai = 1;
    int auto3B3C5B9A_ae;
    const int auto3B3C5B9A_ai = 1;
    int auto7FDEA831_ae;
    const int auto7FDEA831_ai = 1;
    const int autoA1A4596B_ae = 10;
    const int autoA1A4596B_ai = 1;
    const int auto7D758C74_ae = 9;
    const int auto7D758C74_ai = 1;
    const int auto8274E74D_ae = 6;
    const int auto8274E74D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    gv_banksLoadCheck[lv_trigPlayer] = true;
    if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] == 0)) {
        gv_playerHeroHeroLevelExp[lv_trigPlayer][1] = 1;
        gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 2;
        gf_BankLoadBank30(lv_trigPlayer, 0);
        gv_questsPlayerProgress[lv_trigPlayer][1] = 1;
        gv_questsPlayerProgress[lv_trigPlayer][0] = 4;
        gv_tutorialPlayer[lv_trigPlayer] = 1;
        lv_newHero = true;
        lv_index = 10;
        for ( ; ( (auto39A1BD60_ai >= 0 && lv_index <= auto39A1BD60_ae) || (auto39A1BD60_ai < 0 && lv_index >= auto39A1BD60_ae) ) ; lv_index += auto39A1BD60_ai ) {
            if ((gv_playerStatisticsHats[lv_trigPlayer][4][lv_index] == 2) && (gv_generalTutorialMode == false)) {
                lv_skip = true;
            }

        }
        lv_index = 1;
        for ( ; ( (autoE1408B71_ai >= 0 && lv_index <= autoE1408B71_ae) || (autoE1408B71_ai < 0 && lv_index >= autoE1408B71_ae) ) ; lv_index += autoE1408B71_ai ) {
            if ((gv_playerStatisticsAchievements[lv_trigPlayer][12][2] >= 1) && (gv_generalTutorialMode == false) && (lv_skip == false)) {
                gv_tutorialPlayerSkipEnabled[lv_trigPlayer] = true;
            }

        }
        if ((gv_banksTempStatistic[lv_trigPlayer][30] == 1)) {
            gv_banksTempStatistic[lv_trigPlayer][30] = 0;
            gf_BankTempStats(lv_trigPlayer);
        }

    }

    if ((gv_playerHeroHero[lv_trigPlayer] != null)) {
        lv_tempSpawn = UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]);
        UnitRemove(gv_playerHeroHero[lv_trigPlayer]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroesStatsUnitType[lv_unitClass][lv_unitTier][lv_unitType], 0, lv_trigPlayer, lv_tempSpawn);
        gv_playerHeroHero[lv_trigPlayer] = UnitLastCreated();
        TextTagAttachToUnit(gv_playerTextTag[lv_trigPlayer], gv_playerHeroHero[lv_trigPlayer], (1.0 + (lv_unitTier * 0.03)));
        UnitControlGroupAddUnit(lv_trigPlayer, 1, UnitLastCreated());
        CameraPan(lv_trigPlayer, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
        lv_index2 = 1;
        for ( ; ( (autoC26BE911_ai >= 0 && lv_index2 <= autoC26BE911_ae) || (autoC26BE911_ai < 0 && lv_index2 >= autoC26BE911_ae) ) ; lv_index2 += autoC26BE911_ai ) {
            lv_tempQuest = gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2];
            if ((gv_questsQuestBuff[lv_tempQuest] != gv_questsQuestBuff[0])) {
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[lv_tempQuest], gv_playerHeroHero[lv_trigPlayer], 1);
            }

        }
    }
    else {
        if ((gv_questsPlayerProgress[lv_trigPlayer][2] <= 2) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] <= 5)) {
            lv_tempSpawn = RegionRandomPoint(RegionFromId(1));
            gv_playerHeroHeroRespawn[lv_trigPlayer] = 0;
        }
        else {
            lv_tempSpawn = RegionRandomPoint(RegionFromId(30));
            gv_playerHeroHeroRespawn[lv_trigPlayer] = 1;
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroesStatsUnitType[lv_unitClass][lv_unitTier][lv_unitType], 0, lv_trigPlayer, lv_tempSpawn);
        gv_playerHeroHero[lv_trigPlayer] = UnitLastCreated();
        UnitControlGroupAddUnit(lv_trigPlayer, 1, UnitLastCreated());
        CameraPan(lv_trigPlayer, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
        lv_index2 = 1;
        for ( ; ( (auto7C2AC104_ai >= 0 && lv_index2 <= auto7C2AC104_ae) || (auto7C2AC104_ai < 0 && lv_index2 >= auto7C2AC104_ae) ) ; lv_index2 += auto7C2AC104_ai ) {
            lv_tempQuest = gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2];
            if ((gv_questsQuestBuff[lv_tempQuest] != gv_questsQuestBuff[0]) && (gv_questsQuestBuff[lv_tempQuest] != "Heroic2") && (gv_questsQuestBuff[lv_tempQuest] != "LegendaryMod")) {
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[lv_tempQuest], gv_playerHeroHero[lv_trigPlayer], 1);
            }

        }
        gv_playerStatisticsGeneral[lv_trigPlayer][1] += 1;
        TextTagCreate(TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 24, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 1.0, true, false, PlayerGroupAll());
        gv_playerTextTag[lv_trigPlayer] = TextTagLastCreated();
        TextTagAttachToUnit(gv_playerTextTag[lv_trigPlayer], gv_playerHeroHero[lv_trigPlayer], (1.0 + (lv_unitTier * 0.035)));
        libNtve_gf_SetDialogItemText(gv_inventoryDialogStashButtons[7], (StringExternal("Param/Value/4773DBB6") + IntToText(gv_inventoryStashTabPrice[(gv_playerStatisticsGeneral[lv_trigPlayer][17] + 1)])), PlayerGroupSingle(lv_trigPlayer));
        lv_index2 = 152;
        for ( ; ( (autoDC13BEB0_ai >= 0 && lv_index2 <= autoDC13BEB0_ae) || (autoDC13BEB0_ai < 0 && lv_index2 >= autoDC13BEB0_ae) ) ; lv_index2 += autoDC13BEB0_ai ) {
            if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] >= 2)) {
                lv_index += 1;
            }

        }
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[1], (StringExternal("Param/Value/90065DCB") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]) + (StringExternal("Param/Value/FF2DD6DD") + IntToText((25 + lv_index))))), PlayerGroupSingle(lv_trigPlayer));
        lv_index = 0;
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[2], (StringExternal("Param/Value/59DCF603") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]) + StringExternal("Param/Value/AA22F817"))), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[3], (StringExternal("Param/Value/675A3110") + (IntToText(gv_heroVendorSkillCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[4], (StringExternal("Param/Value/2A1A54E7") + (IntToText(gv_heroVendorStatCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (autoB7C5625C_ai >= 0 && lv_index <= autoB7C5625C_ae) || (autoB7C5625C_ai < 0 && lv_index >= autoB7C5625C_ae) ) ; lv_index += autoB7C5625C_ai ) {
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[lv_index], IntToText(gv_playerCurrency[lv_trigPlayer][lv_index]), PlayerGroupSingle(lv_trigPlayer));
        }
        lv_index = 1;
        for ( ; ( (auto1DCF10C5_ai >= 0 && lv_index <= auto1DCF10C5_ae) || (auto1DCF10C5_ai < 0 && lv_index >= auto1DCF10C5_ae) ) ; lv_index += auto1DCF10C5_ai ) {
            if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] >= gv_heroVendorStatTiers[lv_index][1])) {
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[0], (StringExternal("Param/Value/D77A6BCE") + IntToText(gv_heroVendorStatTiers[lv_index][2])), PlayerGroupSingle(lv_trigPlayer));
            }

        }
        if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] > 100)) {
            autoC812B8A4_ae = gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2];
            lv_index = 101;
            for ( ; ( (autoC812B8A4_ai >= 0 && lv_index <= autoC812B8A4_ae) || (autoC812B8A4_ai < 0 && lv_index >= autoC812B8A4_ae) ) ; lv_index += autoC812B8A4_ai ) {
                gv_playerCurrency[lv_trigPlayer][1] += gv_heroVendorStatCosts[lv_index];
            }
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
            lv_tempStats2 = (gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] - 100);
            gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] = 100;
            auto8E7EDBB2_ae = lv_tempStats2;
            lv_index = 1;
            for ( ; ( (auto8E7EDBB2_ai >= 0 && lv_index <= auto8E7EDBB2_ae) || (auto8E7EDBB2_ai < 0 && lv_index >= auto8E7EDBB2_ae) ) ; lv_index += auto8E7EDBB2_ai ) {
                lv_index2 = 1;
                for ( ; ( (autoE75BC2B8_ai >= 0 && lv_index2 <= autoE75BC2B8_ae) || (autoE75BC2B8_ai < 0 && lv_index2 >= autoE75BC2B8_ae) ) ; lv_index2 += autoE75BC2B8_ai ) {
                    gv_playerHeroHeroStats[lv_trigPlayer][lv_index2] -= 1;
                    gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index2] -= 1;
                    gv_playerHeroHeroStatsInvested[lv_trigPlayer][0] -= 1;
                }
                if ((lv_index < 10)) {
                    gv_playerHeroHeroStats[lv_trigPlayer][0] += 1;
                }

            }
            libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[2], (StringExternal("Param/Value/4143001D") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]) + StringExternal("Param/Value/3DDC8C3F"))), PlayerGroupSingle(lv_trigPlayer));
        }

        lv_tempStats2 = 0;
        lv_index2 = 1;
        for ( ; ( (auto142026C5_ai >= 0 && lv_index2 <= auto142026C5_ae) || (auto142026C5_ai < 0 && lv_index2 >= auto142026C5_ae) ) ; lv_index2 += auto142026C5_ai ) {
            lv_tempStats2 += gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index2];
        }
        if ((lv_tempStats2 > 420)) {
            gv_banksCoughtCheating[lv_trigPlayer] = true;
        }

        if ((lv_tempStats2 > 270)) {
            while ((lv_tempStats2 > 270)) {
                lv_index2 = 1;
                for ( ; ( (autoE6B312DD_ai >= 0 && lv_index2 <= autoE6B312DD_ae) || (autoE6B312DD_ai < 0 && lv_index2 >= autoE6B312DD_ae) ) ; lv_index2 += autoE6B312DD_ai ) {
                    gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index2] -= 1;
                    lv_tempStats2 -= 1;
                }
            }
        }

        auto233FFDB6_ae = gv_questsQuestIndex;
        lv_index2 = 1;
        for ( ; ( (auto233FFDB6_ai >= 0 && lv_index2 <= auto233FFDB6_ae) || (auto233FFDB6_ai < 0 && lv_index2 >= auto233FFDB6_ae) ) ; lv_index2 += auto233FFDB6_ai ) {
            if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][2]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 0)) {
                gv_questsPlayerProgress[lv_trigPlayer][lv_index2] = 1;
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
        lv_index2 = 1;
        for ( ; ( (auto1AA14D46_ai >= 0 && lv_index2 <= auto1AA14D46_ae) || (auto1AA14D46_ai < 0 && lv_index2 >= auto1AA14D46_ae) ) ; lv_index2 += auto1AA14D46_ai ) {
            lv_tempQuest = gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2];
            if ((lv_tempQuest != 0)) {
                if ((gv_questsQuestType[lv_tempQuest][1] == 4)) {
                    if ((gv_questsPlayerProgress[lv_trigPlayer][lv_tempQuest] < 3)) {
                        gv_questsPlayerProgress[lv_trigPlayer][lv_tempQuest] = 1;
                        gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index2] = 0;
                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][1] = 0;
                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index2][2] = 0;
                    }

                }

                libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index2][2], gv_questsUnitIcon[gv_questsQuestGiverTurnin[lv_tempQuest][1]], PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), true);
                if ((gv_questsQuestBuff[lv_tempQuest] != gv_questsQuestBuff[0]) && (gv_questsQuestBuff[lv_tempQuest] != "Heroic2") && (gv_questsQuestBuff[lv_tempQuest] != "LegendaryMod")) {
                    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_questsQuestBuff[lv_tempQuest], gv_playerHeroHero[lv_trigPlayer], 1);
                }

            }
            else {
                libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index2][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
        lv_index2 = 1;
        for ( ; ( (auto749C9FEE_ai >= 0 && lv_index2 <= auto749C9FEE_ae) || (auto749C9FEE_ai < 0 && lv_index2 >= auto749C9FEE_ae) ) ; lv_index2 += auto749C9FEE_ai ) {
            if ((gv_questsPlayerItemUnlocked[lv_trigPlayer][lv_index2] == 1)) {
                libNtve_gf_SetDialogItemImage(gv_heroStatsDialogKeyItems[lv_index2][1], gv_questsItemsIcon[lv_index2][1], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_heroStatsDialogKeyItems[lv_index2][2], gv_questsItemsIcon[lv_index2][2], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_heroStatsDialogKeyItems[lv_index2][1], gv_questsItemsNameTooltip[lv_index2][2], PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_heroStatsDialogKeyItems[lv_index2][1], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_heroStatsDialogKeyItems[lv_index2][2], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_heroStatsDialogKeyItems[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        autoDB73D9CB_ae = gv_questsQuestIndex;
        lv_index2 = 1;
        for ( ; ( (autoDB73D9CB_ai >= 0 && lv_index2 <= autoDB73D9CB_ae) || (autoDB73D9CB_ai < 0 && lv_index2 >= autoDB73D9CB_ae) ) ; lv_index2 += autoDB73D9CB_ai ) {
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), false);
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][2]][2], PlayerGroupSingle(lv_trigPlayer), false);
            if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 0)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][gv_questsQuestPrerequisite[lv_index2][2]] == 4)) {
                    gv_questsPlayerProgress[lv_trigPlayer][lv_index2] = 1;
                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
                }

            }

        }
        auto70B5B0B3_ae = gv_questsQuestIndex;
        lv_index2 = 1;
        for ( ; ( (auto70B5B0B3_ai >= 0 && lv_index2 <= auto70B5B0B3_ae) || (auto70B5B0B3_ai < 0 && lv_index2 >= auto70B5B0B3_ae) ) ; lv_index2 += auto70B5B0B3_ai ) {
            if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 1)) {
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
        auto10E6C586_ae = gv_questsQuestIndex;
        lv_index2 = 1;
        for ( ; ( (auto10E6C586_ai >= 0 && lv_index2 <= auto10E6C586_ae) || (auto10E6C586_ai < 0 && lv_index2 >= auto10E6C586_ae) ) ; lv_index2 += auto10E6C586_ai ) {
            if (((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 3) || ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 2) && (gv_questsQuestType[lv_index2][1] == 3)))) {
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
        auto8B54CB1B_ae = gv_regionsTeleporterIndex;
        lv_index2 = 1;
        for ( ; ( (auto8B54CB1B_ai >= 0 && lv_index2 <= auto8B54CB1B_ae) || (auto8B54CB1B_ai < 0 && lv_index2 >= auto8B54CB1B_ae) ) ; lv_index2 += auto8B54CB1B_ai ) {
            lv_index = 1;
            for ( ; ( (auto9550FA9A_ai >= 0 && lv_index <= auto9550FA9A_ae) || (auto9550FA9A_ai < 0 && lv_index >= auto9550FA9A_ae) ) ; lv_index += auto9550FA9A_ai ) {
                DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index2][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
        auto6B6C0337_ae = gv_playerHeroHeroLevelExp[lv_trigPlayer][0];
        lv_index2 = 2;
        for ( ; ( (auto6B6C0337_ai >= 0 && lv_index2 <= auto6B6C0337_ae) || (auto6B6C0337_ai < 0 && lv_index2 >= auto6B6C0337_ae) ) ; lv_index2 += auto6B6C0337_ai ) {
            lv_index = 1;
            for ( ; ( (autoEDD828A1_ai >= 0 && lv_index <= autoEDD828A1_ae) || (autoEDD828A1_ai < 0 && lv_index >= autoEDD828A1_ae) ) ; lv_index += autoEDD828A1_ai ) {
                DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
            gf_DialogUsedItemVendor(lv_trigPlayer, gv_itemVendorDialogButtons[3]);
        }

        gv_itemVendorDialogItemIndex[lv_trigPlayer] = 1;
        lv_index = 1;
        for ( ; ( (autoDB8C762E_ai >= 0 && lv_index <= autoDB8C762E_ae) || (autoDB8C762E_ai < 0 && lv_index >= autoDB8C762E_ae) ) ; lv_index += autoDB8C762E_ai ) {
            gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(0, 1));
            lv_index2 = 151;
            for ( ; ( (auto51C78016_ai >= 0 && lv_index2 <= auto51C78016_ae) || (auto51C78016_ai < 0 && lv_index2 >= auto51C78016_ae) ) ; lv_index2 += auto51C78016_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
                gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
            }

            gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 2, ((20 + FixedToInt((gv_invasionFactorUpgradeCost * 14.0))) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + (gv_invasionIndex * (4 + (gv_invasionIndex / 2))))));
        }
        lv_index = 1;
        for ( ; ( (auto752522B3_ai >= 0 && lv_index <= auto752522B3_ae) || (auto752522B3_ai < 0 && lv_index >= auto752522B3_ae) ) ; lv_index += auto752522B3_ai ) {
            gf_ItemsGeneratePotion(lv_trigPlayer, 1, lv_index);
        }
        gf_ItemsGeneratePotion(lv_trigPlayer, 2, 0);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], PlayerGroupAll(), 1.5, 100.0);
        Wait(0.5, c_timeGame);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_trigPlayer));
        Wait(0.5, c_timeGame);
        DialogSetVisible(gv_currencyDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        DialogSetVisible(gv_eXPDialogDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        DialogSetVisible(gv_mainDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][1], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], PlayerGroupSingle(lv_trigPlayer), false);
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][19] >= 4)) {
            if ((gv_playerStatisticsHats[lv_trigPlayer][4][7] == 2)) {
                lv_index3 += 1;
            }

            if ((gv_playerStatisticsHats[lv_trigPlayer][4][9] == 2)) {
                DialogControlSetEnabled(gv_itemHonorDialogDropdown[5], PlayerGroupSingle(lv_trigPlayer), true);
            }

        }
        else {
            if ((gv_playerStatisticsHats[lv_trigPlayer][4][7] == 2)) {
                gv_playerStatisticsHats[lv_trigPlayer][4][7] = 0;
                gv_playerCurrency[lv_trigPlayer][4] += gv_hatsCosts[4][7];
            }

            if ((gv_playerStatisticsHats[lv_trigPlayer][4][9] == 2)) {
                gv_playerStatisticsHats[lv_trigPlayer][4][9] = 0;
                gv_playerCurrency[lv_trigPlayer][4] += gv_hatsCosts[4][9];
            }

        }
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][25] >= 1)) {
            if ((gv_playerStatisticsHats[lv_trigPlayer][4][8] == 2)) {
                lv_index3 += 1;
            }

        }
        else {
            if ((gv_playerStatisticsHats[lv_trigPlayer][4][8] == 2)) {
                gv_playerStatisticsHats[lv_trigPlayer][4][8] = 0;
                gv_playerCurrency[lv_trigPlayer][4] += gv_hatsCosts[4][8];
            }

        }
        if (((gv_playerStatisticsHats[lv_trigPlayer][4][7] == 2) || (gv_playerStatisticsHats[lv_trigPlayer][4][8] == 2))) {
            auto74063B40_ae = (1 + lv_index3);
            lv_index2 = 2;
            for ( ; ( (auto74063B40_ai >= 0 && lv_index2 <= auto74063B40_ae) || (auto74063B40_ai < 0 && lv_index2 >= auto74063B40_ae) ) ; lv_index2 += auto74063B40_ai ) {
                DialogControlAddItem(gv_itemHonorDialogDropdown[3], PlayerGroupSingle(lv_trigPlayer), (StringExternal("Param/Value/5EDA0103") + IntToText(lv_index2)));
            }
        }

        gv_playerStatisticsHats[lv_trigPlayer][4][1] = 0;
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][28] < 20)) {
            gv_playerStatisticsGeneral[lv_trigPlayer][28] = 20;
            lv_index2 = 1;
            for ( ; ( (auto09CA77B5_ai >= 0 && lv_index2 <= auto09CA77B5_ae) || (auto09CA77B5_ai < 0 && lv_index2 >= auto09CA77B5_ae) ) ; lv_index2 += auto09CA77B5_ai ) {
                if ((StringToInt(StringWord(BankValueGetAsString(gv_banksPlayerBanks[lv_trigPlayer], IntToString(lv_index2), "Hero"), 20)) > 49)) {
                    gv_playerStatisticsGeneral[lv_trigPlayer][28] += 1;
                }

            }
        }

        gv_banksLoadedIn[lv_trigPlayer] = true;
        lv_tempInt[0] = 0;
        lv_tempInt[1] = 0;
        auto3CA40AAD_g = gv_generalTeamsAll;
        auto3CA40AAD_var = -1;
        while (true) {
            auto3CA40AAD_var = PlayerGroupNextPlayer(auto3CA40AAD_g, auto3CA40AAD_var);
            if (auto3CA40AAD_var < 0) { break; }
            if ((gv_playerHeroHero[auto3CA40AAD_var] != null)) {
                lv_tempInt[0] += 1;
                lv_tempInt[1] += gv_playerHeroHeroLevelExp[auto3CA40AAD_var][1];
            }

        }
        if ((lv_tempInt[0] == PlayerGroupCount(gv_generalTeamsAll)) && (gv_invasionCurrentUpgradeCost == 0)) {
            lv_tempInt[1] = (lv_tempInt[1] / lv_tempInt[0]);
            gv_invasionGoodUnitUpgradeCount += (lv_tempInt[1] + 0);
            gv_invasionBadUnitUpgradeCount += (lv_tempInt[1] + 0);
            gv_invasionCurrentUpgradeCost = FixedToInt((gv_invasionBaseUpgradeCost[gv_invasionGoodUnitUpgradeCount] * 1.0));
            gv_invasionCurrentUpgradeCost = FixedToInt(((gv_invasionCurrentUpgradeCost / 150) * gv_invasionFactorUpgradeCost));
            if ((gv_generalEndGameMode == true)) {
                gv_invasionCurrentUpgradeCost *= (115 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
            }
            else {
                gv_invasionCurrentUpgradeCost *= (100 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
            }
            libNtve_gf_SetBehaviorCount(UnitFromId(1384290393), "Upgrade", UnitFromId(1384290393), gv_invasionGoodUnitUpgradeCount);
            libNtve_gf_SetBehaviorCount(UnitFromId(70213988), "Upgrade", UnitFromId(70213988), gv_invasionGoodUnitUpgradeCount);
            libNtve_gf_SetBehaviorCount(UnitFromId(779392242), "Upgrade", UnitFromId(779392242), gv_invasionGoodUnitUpgradeCount);
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/A8B9C58D") + IntToText(gv_invasionCurrentUpgradeCost)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[2], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[3], gv_invasionRiskAssessment[gv_invasionRisk], PlayerGroupAll());
            lv_index = 1;
            for ( ; ( (auto9130B0FD_ai >= 0 && lv_index <= auto9130B0FD_ae) || (auto9130B0FD_ai < 0 && lv_index >= auto9130B0FD_ae) ) ; lv_index += auto9130B0FD_ai ) {
                if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index) == true)) {
                    libNtve_gf_SetDialogItemText(gv_statisticsDialogPlayerButtons[lv_index][1], (StringExternal("Param/Value/5AFC089B") + TextWithColor(PlayerName(lv_index), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)))), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_statisticsDialogPlayerButtons[lv_index][3], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)), PlayerGroupAll());
                    DialogControlSetEnabled(gv_statisticsDialogPlayerButtons[lv_index][2], PlayerGroupAll(), true);
                }

            }
        }

    }
    UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", false);
    UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", false);
    UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "HoverPad", false);
    UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "HoverPad", false);
    UnitClearSelection(lv_trigPlayer);
    UnitSelect(UnitLastCreated(), lv_trigPlayer, true);
    UnitControlGroupClear(lv_trigPlayer, 1);
    UnitControlGroupAddUnit(lv_trigPlayer, 1, UnitLastCreated());
    UnitSetInfoText2(gv_playerHeroHero[lv_trigPlayer], (StringExternal("Param/Value/B3809EB0") + IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][1])));
    UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
    UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
    if ((gv_questsPlayerProgress[lv_trigPlayer][65] == 4)) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
        if ((gv_inventoryPotionStats[lv_trigPlayer][3] == 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == true)) {
            UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", false);
        }
        else {
            if ((gv_inventoryPotionStats[lv_trigPlayer][3] > 0) && (UnitAbilityCheck(gv_playerHeroHero[lv_trigPlayer], "Potion", true) == false)) {
                UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
            }

        }
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][68] == 4)) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Hearthstone", true);
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][73] == 4)) {
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "HoverPad", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "HoverPad", true);
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][130] == 4) && (gv_playerStatisticsHats[lv_trigPlayer][4][4] == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad", 1);
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][131] == 4) && (gv_playerStatisticsHats[lv_trigPlayer][4][4] == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad2", 1);
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][133] == 4)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HearthStone", 1);
    }

    if ((gv_playerStatisticsHats[lv_trigPlayer][4][4] == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad3", 1);
    }

    if ((gv_playerStatisticsHats[lv_trigPlayer][4][5] == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HearthStone2", 1);
    }

    lv_index = 1;
    for ( ; ( (auto61D9642E_ai >= 0 && lv_index <= auto61D9642E_ae) || (auto61D9642E_ai < 0 && lv_index >= auto61D9642E_ae) ) ; lv_index += auto61D9642E_ai ) {
        if ((gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index] >= 1)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[lv_index][gv_playerHeroHeroHatsEquipped[lv_trigPlayer][lv_index]], gv_playerHeroHero[lv_trigPlayer], 1);
        }

    }
    if ((gv_playerStatisticsHats[lv_trigPlayer][4][2] == 2)) {
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[4][2], gv_playerHeroHero[lv_trigPlayer], 1);
    }

    if ((gv_playerStatisticsHats[lv_trigPlayer][4][3] == 2)) {
        TextTagDestroy(gv_playerTextTag[lv_trigPlayer]);
        TextTagCreate(TextWithColor((StringExternal("Param/Value/F4E0F677") + (TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))) + StringExternal("Param/Value/C9024D79"))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 24, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 1.0, true, false, PlayerGroupAll());
        gv_playerTextTag[lv_trigPlayer] = TextTagLastCreated();
        TextTagAttachToUnit(gv_playerTextTag[lv_trigPlayer], gv_playerHeroHero[lv_trigPlayer], (1.0 + (gv_playerHeroHeroClassTierType[lv_trigPlayer][2] * 0.035)));
    }

    if ((gv_generalTutorialMode == true)) {
        gv_playerHeroHeroLevelExp[lv_trigPlayer][2] += 15;
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Tutorial", gv_playerHeroHero[lv_trigPlayer], 1);
        UnitAbilityShow(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
        UnitAbilityEnable(gv_playerHeroHero[lv_trigPlayer], "Potion", true);
        if ((gv_tutorial2Progress >= 3)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Tutorial2", gv_playerHeroHero[lv_trigPlayer], 1);
        }

    }

    gf_PartyUpdateTooltips(lv_trigPlayer);
    gf_PartyStartUpdate(lv_trigPlayer);
    CameraPan(lv_trigPlayer, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
    libNtve_gf_SetDialogItemTooltip(gv_eXPDialogItems[0], (StringExternal("Param/Value/9B72DAFE") + (IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][2]) + (StringExternal("Param/Value/13D52493") + IntToText(gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]])))), PlayerGroupSingle(lv_trigPlayer));
    lv_tempMath[1] = (gv_eXPDialogWidth / 100.0);
    lv_tempMath[2] = ((100.0 / gv_heroesStatsExpRequired[gv_playerHeroHeroLevelExp[lv_trigPlayer][1]]) * gv_playerHeroHeroLevelExp[lv_trigPlayer][2]);
    lv_tempMath[1] = (lv_tempMath[1] * lv_tempMath[2]);
    DialogControlSetSize(gv_eXPDialogItems[2], PlayerGroupSingle(lv_trigPlayer), FixedToInt((lv_tempMath[1] + 1.0)), DialogControlGetHeight(gv_eXPDialogItems[2], lv_trigPlayer));
    libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "Wait", gv_playerHeroHeroLevelExp[lv_trigPlayer][1]);
    lv_index = 1;
    for ( ; ( (autoE42E2097_ai >= 0 && lv_index <= autoE42E2097_ae) || (autoE42E2097_ai < 0 && lv_index >= autoE42E2097_ae) ) ; lv_index += autoE42E2097_ai ) {
        lv_tempClassTierType[lv_index] = gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index];
    }
    lv_index = 1;
    for ( ; ( (autoED6493D4_ai >= 0 && lv_index <= autoED6493D4_ae) || (autoED6493D4_ai < 0 && lv_index >= autoED6493D4_ae) ) ; lv_index += autoED6493D4_ai ) {
        if ((gv_heroesAbilitiesUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index] != null) && (gv_banksLoadCheck[lv_trigPlayer] == true)) {
            if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] > 0)) {
                autoE347DA4D_ae = gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1];
                lv_index2 = 1;
                for ( ; ( (autoE347DA4D_ai >= 0 && lv_index2 <= autoE347DA4D_ae) || (autoE347DA4D_ai < 0 && lv_index2 >= autoE347DA4D_ae) ) ; lv_index2 += autoE347DA4D_ai ) {
                    if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] > TechTreeUpgradeCount(lv_trigPlayer, gv_heroesAbilitiesUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index], c_techCountCompleteOnly))) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, gv_heroesAbilitiesUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index], lv_index2);
                    }

                }
            }

        }

    }
    lv_index = 1;
    for ( ; ( (autoF45E0D67_ai >= 0 && lv_index <= autoF45E0D67_ae) || (autoF45E0D67_ai < 0 && lv_index >= autoF45E0D67_ae) ) ; lv_index += autoF45E0D67_ai ) {
        if ((gv_banksLoadCheck[lv_trigPlayer] == true) && (gv_heroesStatsUniqueUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index] != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, gv_heroesStatsUniqueUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index], 1);
        }

    }
    lv_index = 1;
    for ( ; ( (auto07B3270A_ai >= 0 && lv_index <= auto07B3270A_ae) || (auto07B3270A_ai < 0 && lv_index >= auto07B3270A_ae) ) ; lv_index += auto07B3270A_ai ) {
        if ((lp_loading == true) && (gv_banksLoadCheck[lv_trigPlayer] == true)) {
            lv_tempStats = 0;
            auto7FDEA831_ae = gv_playerHeroHeroStats[lv_trigPlayer][lv_index];
            lv_index2 = 1;
            for ( ; ( (auto7FDEA831_ai >= 0 && lv_index2 <= auto7FDEA831_ae) || (auto7FDEA831_ai < 0 && lv_index2 >= auto7FDEA831_ae) ) ; lv_index2 += auto7FDEA831_ai ) {
                lv_tempStats += 1;
                if ((gv_playerHeroHeroStats[lv_trigPlayer][lv_index] >= lv_tempStats)) {
                    gf_HeroStatsIncreased(lv_trigPlayer, lv_index, false);
                }

            }
        }
        else {
            auto3B3C5B9A_ae = gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTier][lv_unitType][lv_index];
            lv_index2 = 1;
            for ( ; ( (auto3B3C5B9A_ai >= 0 && lv_index2 <= auto3B3C5B9A_ae) || (auto3B3C5B9A_ai < 0 && lv_index2 >= auto3B3C5B9A_ae) ) ; lv_index2 += auto3B3C5B9A_ai ) {
                gf_HeroStatsIncreased(lv_trigPlayer, lv_index, true);
            }
        }
    }
    lv_index2 = 1;
    for ( ; ( (autoA1A4596B_ai >= 0 && lv_index2 <= autoA1A4596B_ae) || (autoA1A4596B_ai < 0 && lv_index2 >= autoA1A4596B_ae) ) ; lv_index2 += autoA1A4596B_ai ) {
        if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index2][1] >= 1) && (gv_banksLoadCheck[lv_trigPlayer] == true)) {
            lv_equipSlot = lv_index2;
            lv_index = 5;
            for ( ; ( (auto7D758C74_ai >= 0 && lv_index <= auto7D758C74_ae) || (auto7D758C74_ai < 0 && lv_index >= auto7D758C74_ae) ) ; lv_index += auto7D758C74_ai ) {
                if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] >= 1)) {
                    lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][(lv_index + 5)];
                    lv_tempInt[2] = ModI(lv_tempInt[1], 10);
                    lv_tempInt[3] = FloorI((lv_tempInt[1] / 10.0));
                    if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index2][lv_index] <= 50)) {
                        if ((lv_tempInt[2] > 0)) {
                            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][1], gv_playerHeroHero[lv_trigPlayer], lv_tempInt[2]);
                        }

                        if ((lv_tempInt[3] > 0)) {
                            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][2], gv_playerHeroHero[lv_trigPlayer], lv_tempInt[3]);
                        }

                    }
                    else {
                        if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] > 100) && (lv_equipSlot > 8)) {
                            lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index];
                            TechTreeUpgradeAddLevel(lv_trigPlayer, gv_itemsGlyphUpgrade[lv_tempInt[1]], 1);
                        }

                    }
                }

            }
        }

    }
    gv_playerDialogUsed[lv_trigPlayer] = false;
    gv_banksLoadCheck[lv_trigPlayer] = false;
    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
    if ((lv_newHero == true)) {
        gv_potionVendorSlotSelected[lv_trigPlayer] = 9;
        lv_index2 = 1;
        for ( ; ( (auto8274E74D_ai >= 0 && lv_index2 <= auto8274E74D_ae) || (auto8274E74D_ai < 0 && lv_index2 >= auto8274E74D_ae) ) ; lv_index2 += auto8274E74D_ai ) {
            gv_inventoryPotionStats[lv_trigPlayer][lv_index2] = gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][lv_index2];
            gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][lv_index2] = 0;
        }
        gf_ItemsGeneratePotion(lv_trigPlayer, 2, 0);
        if ((lv_skip == true)) {
            DialogSetVisible(gv_hatsDialogHeroBox, PlayerGroupSingle(lv_trigPlayer), true);
            UnitClearSelection(lv_trigPlayer);
        }

        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == true) && (lv_skip == false)) {
            Wait(2.0, c_timeGame);
            DialogSetVisible(gv_tutorialSkipDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
            UnitClearSelection(lv_trigPlayer);
        }

        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 1) && (lv_skip == false)) {
            Wait(1.0, c_timeGame);
            gf_TutorialUpdate(lv_trigPlayer, 1);
        }

    }

}

void gf_DialogUsedHeroLoading (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[4] lv_tempClassTierType;

    // Automatic Variable Declarations
    int autoB2DD82AF_val;
    const int autoA4820A0D_ae = 3;
    const int autoA4820A0D_ai = 1;
    const int autoC2304D99_ae = gv_generalLoadSlotCap;
    const int autoC2304D99_ai = 1;
    const int autoDE8C4159_ae = gv_generalLoadSlotCap;
    const int autoDE8C4159_ai = 1;
    const int auto8841D51D_ae = 4;
    const int auto8841D51D_ai = 1;
    const int auto0628EFAF_ae = gv_generalLoadSlotCap;
    const int auto0628EFAF_ai = 1;
    const int autoC6073166_ae = gv_generalLoadSlotCap;
    const int autoC6073166_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoB2DD82AF_val = lv_dialogItemUsed;
    if (autoB2DD82AF_val == gv_heroLoadDialogMainButtons[1][1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 2;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoB2DD82AF_val == gv_heroLoadDialogMainButtons[2][1]) {
        lv_index2 = 1;
        for ( ; ( (autoA4820A0D_ai >= 0 && lv_index2 <= autoA4820A0D_ae) || (autoA4820A0D_ai < 0 && lv_index2 >= autoA4820A0D_ae) ) ; lv_index2 += autoA4820A0D_ai ) {
            lv_tempClassTierType[lv_index2] = gv_banksHeroClassTierType[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]][lv_index2];
        }
        libNtve_gf_SetDialogItemText(gv_heroDestroyDialogInfoText[0], (StringExternal("Param/Value/E8DFCBC4") + IntToText(gv_banksHeroLevelExp[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]])), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroDestroyDialogInfoText[2], (StringExternal("Param/Value/9D77BEB8") + UnitTypeGetName(gv_heroesStatsUnitType[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]])), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemModel(gv_heroDestroyDialogInfoText[1], ((gv_heroesStatsUnitType[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]])), PlayerGroupSingle(lv_trigPlayer));
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroDestroyDialogInfoText[1]));
        PortraitSetRenderType(PortraitGetTriggerControl(gv_heroDestroyDialogMainButtons[1]), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(gv_heroDestroyDialogInfoText[1]), "SetScale 0.400000 0.100000");
        DialogSetVisible(gv_heroDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoB2DD82AF_val == gv_heroDestroyDialogMainButtons[2]) {
        DialogSetVisible(gv_heroDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoB2DD82AF_val == gv_heroDestroyDialogMainButtons[1]) {
        if ((gv_banksHeroLevelExp[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]] > 0)) {
            lv_index2 = 1;
            for ( ; ( (autoC2304D99_ai >= 0 && lv_index2 <= autoC2304D99_ae) || (autoC2304D99_ai < 0 && lv_index2 >= autoC2304D99_ae) ) ; lv_index2 += autoC2304D99_ai ) {
                DialogControlSetVisible(gv_heroLoadDialogSelectionButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            gv_banksHeroClassTierType[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]][1] = 0;
            gv_banksHeroClassTierType[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]][2] = 0;
            gv_banksHeroClassTierType[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]][3] = 0;
            gv_banksHeroLevelExp[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]] = 0;
            libNtve_gf_SetDialogItemText(gv_heroLoadDialogHeroPortrait[gv_heroLoadDialogSlotSelected[lv_trigPlayer]][3], (StringExternal("Param/Value/CF44E4DC") + IntToText(gv_banksHeroLevelExp[lv_trigPlayer][lv_index])), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemModel(gv_heroLoadDialogHeroPortrait[gv_heroLoadDialogSlotSelected[lv_trigPlayer]][2], "FireMedium", PlayerGroupSingle(lv_trigPlayer));
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroLoadDialogHeroPortrait[gv_heroLoadDialogSlotSelected[lv_trigPlayer]][2]));
            PortraitSetRenderType(PortraitGetTriggerControl(gv_heroLoadDialogHeroPortrait[gv_heroLoadDialogSlotSelected[lv_trigPlayer]][2]), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(gv_heroLoadDialogHeroPortrait[gv_heroLoadDialogSlotSelected[lv_trigPlayer]][2]), "SetScale 0.550000 0.100000");
            gv_banksLoadedIn[lv_trigPlayer] = true;
            gf_BankSaveBank(lv_trigPlayer, gv_heroLoadDialogSlotSelected[lv_trigPlayer], 1);
            gv_banksLoadedIn[lv_trigPlayer] = false;
            gv_banksSlotSelected[lv_trigPlayer] = 0;
            gv_heroLoadDialogSlotSelected[lv_trigPlayer] = 0;
            DialogSetVisible(gv_heroDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        }

    }
    else if (autoB2DD82AF_val == gv_heroLoadDialogMainButtons[3][1]) {
        lv_index = 1;
        for ( ; ( (autoDE8C4159_ai >= 0 && lv_index <= autoDE8C4159_ae) || (autoDE8C4159_ai < 0 && lv_index >= autoDE8C4159_ae) ) ; lv_index += autoDE8C4159_ai ) {
            if ((gv_banksHeroClassTierType[lv_trigPlayer][lv_index][1] == 0)) {
                gv_heroLoadDialogSlotSelected[lv_trigPlayer] = lv_index;
                gv_banksSlotSelected[lv_trigPlayer] = gv_heroLoadDialogSlotSelected[lv_trigPlayer];
                DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                gf_DialogShowHeroSelection(lv_trigPlayer);
                break;
            }

        }
    }
    else if (autoB2DD82AF_val == gv_heroLoadDialogMainButtons[4][1]) {
        if ((gv_banksHeroLevelExp[lv_trigPlayer][gv_heroLoadDialogSlotSelected[lv_trigPlayer]] > 0)) {
            gv_banksSlotSelected[lv_trigPlayer] = gv_heroLoadDialogSlotSelected[lv_trigPlayer];
            DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
            lv_index = 1;
            for ( ; ( (auto8841D51D_ai >= 0 && lv_index <= auto8841D51D_ae) || (auto8841D51D_ai < 0 && lv_index >= auto8841D51D_ae) ) ; lv_index += auto8841D51D_ai ) {
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[1][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                DialogControlSetEnabled(gv_partyStartDialogMainButtons[2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
            libNtve_gf_SetDialogItemText(gv_partyStartDialogMainButtons[2][3], (StringExternal("Param/Value/7E1FEA11") + StringToText("")), PlayerGroupSingle(lv_trigPlayer));
            gf_PartyStartUpdate(lv_trigPlayer);
        }

    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto0628EFAF_ai >= 0 && lv_index <= auto0628EFAF_ae) || (auto0628EFAF_ai < 0 && lv_index >= auto0628EFAF_ae) ) ; lv_index += auto0628EFAF_ai ) {
        if ((lv_index <= gv_generalLoadSlotCap) && (lv_dialogItemUsed == gv_heroLoadDialogSelectionButtons[lv_index][1]) && (gv_banksHeroLevelExp[lv_trigPlayer][lv_index] > 0)) {
            lv_index2 = 1;
            for ( ; ( (autoC6073166_ai >= 0 && lv_index2 <= autoC6073166_ae) || (autoC6073166_ai < 0 && lv_index2 >= autoC6073166_ae) ) ; lv_index2 += autoC6073166_ai ) {
                DialogControlSetVisible(gv_heroLoadDialogSelectionButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
            }
            DialogControlSetVisible(gv_heroLoadDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
            gv_heroLoadDialogSlotSelected[lv_trigPlayer] = lv_index;
        }

    }
}

void gf_DialogUsedHeroStats (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_index;
    int lv_index2;
    int lv_index3;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto9B00585F_val;
    const int auto511EB2A4_ae = 5;
    const int auto511EB2A4_ai = 1;
    const int autoF9157087_ae = 15;
    const int autoF9157087_ai = 1;
    playergroup autoF5CF4DF2_g;
    int autoF5CF4DF2_var;
    playergroup auto1244F3CC_g;
    int auto1244F3CC_var;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    auto9B00585F_val = lv_dialogItemUsed;
    if (auto9B00585F_val == gv_heroStatsDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 9;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (auto9B00585F_val == gv_heroStatsDialogMainButtons[2]) {
        DialogSetVisible(gv_statisticsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (auto9B00585F_val == gv_heroStatsDialogMainButtons[3]) {
        if ((gv_generalTutorialMode == false)) {
            gf_DialogUsedHeroAchievements(lv_trigPlayer, lv_dialogItemUsed, 1);
            DialogSetVisible(gv_achievementsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (auto9B00585F_val == gv_heroStatsDialogMainButtons[4]) {
        DialogSetVisible(gv_heroStatsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (auto9B00585F_val == gv_heroStatsDialogOptions[1][1]) {
        DialogSetVisible(gv_lootFilterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        DialogControlSetVisible(gv_heroStatsDialogOptions[1][2], PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (auto9B00585F_val == gv_heroStatsDialogOptions[2][1]) {
        if ((gv_playerOptions[2] == false)) {
            gv_playerOptions[2] = true;
            DialogControlSetVisible(gv_heroStatsDialogOptions[2][2], PlayerGroupSingle(lv_trigPlayer), true);
            PlayerGroupAdd(gv_playerTagGroup, lv_trigPlayer);
            auto1244F3CC_g = gv_generalTeamsAll;
            auto1244F3CC_var = -1;
            while (true) {
                auto1244F3CC_var = PlayerGroupNextPlayer(auto1244F3CC_g, auto1244F3CC_var);
                if (auto1244F3CC_var < 0) { break; }
                TextTagShow(gv_playerTextTag[auto1244F3CC_var], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
        else {
            gv_playerOptions[2] = false;
            DialogControlSetVisible(gv_heroStatsDialogOptions[2][2], PlayerGroupSingle(lv_trigPlayer), false);
            PlayerGroupRemove(gv_playerTagGroup, lv_trigPlayer);
            autoF5CF4DF2_g = gv_generalTeamsAll;
            autoF5CF4DF2_var = -1;
            while (true) {
                autoF5CF4DF2_var = PlayerGroupNextPlayer(autoF5CF4DF2_g, autoF5CF4DF2_var);
                if (autoF5CF4DF2_var < 0) { break; }
                TextTagShow(gv_playerTextTag[autoF5CF4DF2_var], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
    }
    else if (auto9B00585F_val == gv_heroStatsDialogOptions[3][1]) {
        if ((gv_playerOptions[3] == false)) {
            gv_playerOptions[3] = true;
            DialogControlSetVisible(gv_heroStatsDialogOptions[3][2], PlayerGroupSingle(lv_trigPlayer), true);
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "WeaponDisabled", gv_playerHeroHero[lv_trigPlayer], 1);
        }
        else {
            gv_playerOptions[3] = false;
            DialogControlSetVisible(gv_heroStatsDialogOptions[3][2], PlayerGroupSingle(lv_trigPlayer), false);
            if ((UnitBehaviorCount(gv_playerHeroHero[lv_trigPlayer], "WeaponDisabled") >= 1)) {
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "WeaponDisabled", 1);
            }

        }
    }
    else {
        lv_index = 1;
        for ( ; ( (auto511EB2A4_ai >= 0 && lv_index <= auto511EB2A4_ae) || (auto511EB2A4_ai < 0 && lv_index >= auto511EB2A4_ae) ) ; lv_index += auto511EB2A4_ai ) {
            if ((lv_dialogItemUsed == gv_heroStatsDialogHeroStats[lv_index][17])) {
                if ((gv_playerHeroHeroStats[lv_trigPlayer][0] > 0)) {
                    gf_HeroStatsIncreased(lv_trigPlayer, lv_index, true);
                    gv_playerHeroHeroStats[lv_trigPlayer][0] -= 1;
                    gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index] += 1;
                    lv_tempText = ((StringExternal("Param/Value/F71B07CC") + FixedToText(UnitWeaponDamage(gv_playerHeroHero[lv_trigPlayer], 2, c_unitAttributeHover, false), 2)) + (StringExternal("Param/Value/B22D5641") + FixedToText(UnitWeaponSpeedMultiplier(gv_playerHeroHero[lv_trigPlayer], 1), 2)) + (StringExternal("Param/Value/0B536E55") + FixedToText(UnitWeaponDamage(gv_playerHeroHero[lv_trigPlayer], 1, c_unitAttributeHover, false), 2)));
                    lv_tempText = (lv_tempText + (StringExternal("Param/Value/6FCDFC34") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeMax, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/E974B57C") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeRegen, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/0756DDBA") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropEnergyMax, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/9DA044F9") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropEnergyRegen, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/D8DF19E6") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifeArmor, c_unitPropCurrent), 2)) + (StringExternal("Param/Value/09601AF6") + FixedToText(UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropMovementSpeed, c_unitPropCurrent), 2)));
                    libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroPortrait[3], lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[0][0], (StringExternal("Param/Value/E1B50086") + (IntToText(gv_playerHeroHeroStats[lv_trigPlayer][0]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[lv_index][16], (StringExternal("Param/Value/BD59F758") + IntToText(gv_playerHeroHeroStats[lv_trigPlayer][lv_index])), PlayerGroupSingle(lv_trigPlayer));
                    lv_index2 = 1;
                    for ( ; ( (autoF9157087_ai >= 0 && lv_index2 <= autoF9157087_ae) || (autoF9157087_ai < 0 && lv_index2 >= autoF9157087_ae) ) ; lv_index2 += autoF9157087_ai ) {
                        DialogControlSetVisible(gv_heroStatsDialogHeroStats[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
                        if ((gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTier][lv_unitType][lv_index] >= lv_index2)) {
                            DialogControlSetVisible(gv_heroStatsDialogHeroStats[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                        }

                    }
                }

            }

        }
    }
}

void gf_DialogShowHeroSelection (int lp_trigPlayer) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_unitTierNext;
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_index4;

    // Automatic Variable Declarations
    const int auto36C2AD1C_ae = 3;
    const int auto36C2AD1C_ai = 1;
    const int autoCECB15F3_ae = 10;
    const int autoCECB15F3_ai = 1;
    const int auto099F3D6B_ae = 5;
    const int auto099F3D6B_ai = 1;
    const int autoF9B6E7B4_ae = 15;
    const int autoF9B6E7B4_ai = 1;
    int autoF104A4AE_ae;
    const int autoF104A4AE_ai = 1;
    const int auto6E1D3B60_ae = 10;
    const int auto6E1D3B60_ai = 1;
    const int autoFCE91574_ae = 5;
    const int autoFCE91574_ai = 1;
    const int auto64BA8101_ae = 15;
    const int auto64BA8101_ai = 1;
    const int auto60BE769A_ae = 3;
    const int auto60BE769A_ai = 1;
    const int auto9A4DC45A_ae = 10;
    const int auto9A4DC45A_ai = 1;
    const int auto2419126E_ae = 5;
    const int auto2419126E_ai = 1;
    const int auto2BCC9AB0_ae = 15;
    const int auto2BCC9AB0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    lv_unitTierNext = (lv_unitTier + 1);
    gv_heroSelectionDialogHeroSelected[lv_trigPlayer] = 0;
    lv_index = 1;
    for ( ; ( (auto36C2AD1C_ai >= 0 && lv_index <= auto36C2AD1C_ae) || (auto36C2AD1C_ai < 0 && lv_index >= auto36C2AD1C_ae) ) ; lv_index += auto36C2AD1C_ai ) {
        libNtve_gf_SetDialogItemText(gv_heroSelectionDialogHeroPortrait[lv_index][1], gv_heroesStatsHeroTooltip[0][0][0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemModel(gv_heroSelectionDialogHeroPortrait[lv_index][2], "VoidHeroGlow", PlayerGroupSingle(lv_trigPlayer));
        PortraitSetRenderType(PortraitGetTriggerControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), "SetScale 0.550000 0.100000");
        DialogControlSetVisible(gv_heroSelectionDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetEnabled(gv_heroSelectionDialogSelectionButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetEnabled(gv_heroSelectionDialogMainButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), true);
        lv_index2 = 1;
        for ( ; ( (autoCECB15F3_ai >= 0 && lv_index2 <= autoCECB15F3_ae) || (autoCECB15F3_ai < 0 && lv_index2 >= autoCECB15F3_ae) ) ; lv_index2 += autoCECB15F3_ai ) {
            DialogControlSetEnabled(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
            libNtve_gf_SetDialogItemImage(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesIcons[0][0][0][0], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        }
        lv_index2 = 0;
        for ( ; ( (auto099F3D6B_ai >= 0 && lv_index2 <= auto099F3D6B_ae) || (auto099F3D6B_ai < 0 && lv_index2 >= auto099F3D6B_ae) ) ; lv_index2 += auto099F3D6B_ai ) {
            lv_index3 = 1;
            for ( ; ( (autoF9B6E7B4_ai >= 0 && lv_index3 <= autoF9B6E7B4_ae) || (autoF9B6E7B4_ai < 0 && lv_index3 >= autoF9B6E7B4_ae) ) ; lv_index3 += autoF9B6E7B4_ai ) {
                DialogControlSetVisible(gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
    }
    if ((lv_unitClass == 0)) {
        lv_index = 1;
        for ( ; ( (auto60BE769A_ai >= 0 && lv_index <= auto60BE769A_ae) || (auto60BE769A_ai < 0 && lv_index >= auto60BE769A_ae) ) ; lv_index += auto60BE769A_ai ) {
            libNtve_gf_SetDialogItemText(gv_heroSelectionDialogHeroPortrait[lv_index][1], gv_heroesStatsHeroTooltip[lv_index][1][1], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemModel(gv_heroSelectionDialogHeroPortrait[lv_index][2], ((gv_heroesStatsUnitType[lv_index][1][1])), PlayerGroupSingle(lv_trigPlayer));
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]));
            PortraitSetRenderType(PortraitGetTriggerControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), "SetScale 0.550000 0.100000");
            DialogControlSetVisible(gv_heroSelectionDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), false);
            DialogControlSetEnabled(gv_heroSelectionDialogMainButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), true);
            DialogControlSetEnabled(gv_heroSelectionDialogSelectionButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), true);
            lv_index2 = 1;
            for ( ; ( (auto9A4DC45A_ai >= 0 && lv_index2 <= auto9A4DC45A_ae) || (auto9A4DC45A_ai < 0 && lv_index2 >= auto9A4DC45A_ae) ) ; lv_index2 += auto9A4DC45A_ai ) {
                if ((gv_heroesAbilitiesUpgrades[lv_index][1][1][lv_index2] != null)) {
                    DialogControlSetEnabled(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                    libNtve_gf_SetDialogItemImage(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesIcons[lv_index][1][1][lv_index2], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesTooltips[lv_index][1][1][lv_index2], PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    DialogControlSetEnabled(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
                    libNtve_gf_SetDialogItemImage(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesIcons[0][0][0][0], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            lv_index2 = 0;
            for ( ; ( (auto2419126E_ai >= 0 && lv_index2 <= auto2419126E_ae) || (auto2419126E_ai < 0 && lv_index2 >= auto2419126E_ae) ) ; lv_index2 += auto2419126E_ai ) {
                lv_index3 = 1;
                for ( ; ( (auto2BCC9AB0_ai >= 0 && lv_index3 <= auto2BCC9AB0_ae) || (auto2BCC9AB0_ai < 0 && lv_index3 >= auto2BCC9AB0_ae) ) ; lv_index3 += auto2BCC9AB0_ai ) {
                    if ((gv_heroesStatsLevelingStats[lv_index][1][1][lv_index2] >= lv_index3)) {
                        DialogControlSetVisible(gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                    else {
                        DialogControlSetVisible(gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
                    }
                }
            }
        }
    }
    else {
        lv_index = 0;
        autoF104A4AE_ae = gv_heroesStatsUpgradeTierTypeRange[lv_unitTier][lv_unitType][2];
        lv_index4 = gv_heroesStatsUpgradeTierTypeRange[lv_unitTier][lv_unitType][1];
        for ( ; ( (autoF104A4AE_ai >= 0 && lv_index4 <= autoF104A4AE_ae) || (autoF104A4AE_ai < 0 && lv_index4 >= autoF104A4AE_ae) ) ; lv_index4 += autoF104A4AE_ai ) {
            lv_index += 1;
            libNtve_gf_SetDialogItemText(gv_heroSelectionDialogHeroPortrait[lv_index][1], gv_heroesStatsHeroTooltip[lv_unitClass][lv_unitTierNext][lv_index4], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemModel(gv_heroSelectionDialogHeroPortrait[lv_index][2], ((gv_heroesStatsUnitType[lv_unitClass][lv_unitTierNext][lv_index4])), PlayerGroupSingle(lv_trigPlayer));
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]));
            PortraitSetRenderType(PortraitGetTriggerControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), c_portraitRenderTypeLDR);
            ActorSend(ActorFromDialogControl(gv_heroSelectionDialogHeroPortrait[lv_index][2]), "SetScale 0.550000 0.100000");
            DialogControlSetVisible(gv_heroSelectionDialogSelectionButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), false);
            DialogControlSetEnabled(gv_heroSelectionDialogSelectionButtons[lv_index][1], PlayerGroupSingle(lv_trigPlayer), true);
            lv_index2 = 1;
            for ( ; ( (auto6E1D3B60_ai >= 0 && lv_index2 <= auto6E1D3B60_ae) || (auto6E1D3B60_ai < 0 && lv_index2 >= auto6E1D3B60_ae) ) ; lv_index2 += auto6E1D3B60_ai ) {
                if ((gv_heroesAbilitiesUpgrades[lv_unitClass][lv_unitTierNext][lv_index4][lv_index2] != null)) {
                    DialogControlSetEnabled(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                    libNtve_gf_SetDialogItemImage(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesIcons[lv_unitClass][lv_unitTierNext][lv_index4][lv_index2], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesTooltips[lv_unitClass][lv_unitTierNext][lv_index4][lv_index2], PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    DialogControlSetEnabled(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
                    libNtve_gf_SetDialogItemImage(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], gv_heroesAbilitiesIcons[0][0][0][0], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_heroSelectionDialogHeroSkills[lv_index][lv_index2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            lv_index2 = 0;
            for ( ; ( (autoFCE91574_ai >= 0 && lv_index2 <= autoFCE91574_ae) || (autoFCE91574_ai < 0 && lv_index2 >= autoFCE91574_ae) ) ; lv_index2 += autoFCE91574_ai ) {
                lv_index3 = 1;
                for ( ; ( (auto64BA8101_ai >= 0 && lv_index3 <= auto64BA8101_ae) || (auto64BA8101_ai < 0 && lv_index3 >= auto64BA8101_ae) ) ; lv_index3 += auto64BA8101_ai ) {
                    if ((gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTierNext][lv_index4][lv_index2] >= lv_index3)) {
                        DialogControlSetVisible(gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                    else {
                        DialogControlSetVisible(gv_heroSelectionDialogHeroStats[lv_index][lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
                    }
                }
            }
        }
    }
    DialogSetVisible(gv_heroSelectionDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
}

void gf_DialogUsedHeroTree (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_usedDialogItem;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_unitTierNext;
    int lv_index;
    int lv_index2;
    int lv_index3;
    bool lv_continue;
    string lv_icon;

    // Automatic Variable Declarations
    const int auto3D6EE10D_ae = 3;
    const int auto3D6EE10D_ai = 1;
    const int auto8052775B_ae = 8;
    const int auto8052775B_ai = 1;
    const int auto0E2C6BD3_ae = 5;
    const int auto0E2C6BD3_ai = 1;
    const int auto9693D249_ae = 10;
    const int auto9693D249_ai = 1;
    const int auto1A9B25F6_ae = 5;
    const int auto1A9B25F6_ai = 1;
    const int auto756504E5_ae = 15;
    const int auto756504E5_ai = 1;
    const int autoD9A8411A_ae = 8;
    const int autoD9A8411A_ai = 1;
    const int autoD6CE6FEE_ae = 5;
    const int autoD6CE6FEE_ai = 1;
    const int auto92919948_ae = 8;
    const int auto92919948_ai = 1;
    const int autoBF638F03_ae = 5;
    const int autoBF638F03_ai = 1;
    const int autoE7BD229E_ae = 10;
    const int autoE7BD229E_ai = 1;
    const int autoA2A0597C_ae = 5;
    const int autoA2A0597C_ai = 1;
    const int auto00B6BFA2_ae = 15;
    const int auto00B6BFA2_ai = 1;

    // Variable Initialization
    lv_usedDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_usedDialogItem = lp_dialogItemUsed;
    lv_unitClass = gv_heroTreeDialogPlayerSelected[lv_trigPlayer];
    lv_index2 = 1;
    for ( ; ( (auto3D6EE10D_ai >= 0 && lv_index2 <= auto3D6EE10D_ae) || (auto3D6EE10D_ai < 0 && lv_index2 >= auto3D6EE10D_ae) ) ; lv_index2 += auto3D6EE10D_ai ) {
        if ((lv_usedDialogItem == gv_heroTreeDialogMainButtons[lv_index2])) {
            gv_heroTreeDialogPlayerSelected[lv_trigPlayer] = lv_index2;
            lv_index = 2;
            for ( ; ( (auto8052775B_ai >= 0 && lv_index <= auto8052775B_ae) || (auto8052775B_ai < 0 && lv_index >= auto8052775B_ae) ) ; lv_index += auto8052775B_ai ) {
                lv_index3 = 1;
                for ( ; ( (auto0E2C6BD3_ai >= 0 && lv_index3 <= auto0E2C6BD3_ae) || (auto0E2C6BD3_ai < 0 && lv_index3 >= auto0E2C6BD3_ae) ) ; lv_index3 += auto0E2C6BD3_ai ) {
                    if ((gv_heroesStatsUnitType[lv_index2][lv_index][lv_index3] != null)) {
                        lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, gv_heroesStatsUnitType[lv_index2][lv_index][lv_index3], "UnitIcon", c_playerAny));
                        libNtve_gf_SetDialogItemImage(gv_heroTreeDialogHeroButtons[lv_index][lv_index3][2], lv_icon, PlayerGroupSingle(lv_trigPlayer));
                    }

                }
            }
        }

    }
    if ((lv_usedDialogItem == gv_heroTreeDialogMainButtons[4])) {
        gv_heroTreeDialogPlayerSelected[lv_trigPlayer] = 0;
        DialogSetVisible(gv_heroTreeDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }

    if ((lv_usedDialogItem == gv_heroTreeDialogMainButtons[0])) {
        gv_heroTreeDialogPlayerSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemText(gv_heroTreeDialogHeroPortrait[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemModel(gv_heroTreeDialogHeroPortrait[2], "VoidHeroGlow", PlayerGroupSingle(lv_trigPlayer));
        ActorSend(ActorFromDialogControl(gv_heroTreeDialogHeroPortrait[2]), "SetScale 0.550000 0.100000");
        lv_index2 = 1;
        for ( ; ( (auto9693D249_ai >= 0 && lv_index2 <= auto9693D249_ae) || (auto9693D249_ai < 0 && lv_index2 >= auto9693D249_ae) ) ; lv_index2 += auto9693D249_ai ) {
            DialogControlSetEnabled(gv_heroTreeDialogHeroSkills[lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
            libNtve_gf_SetDialogItemImage(gv_heroTreeDialogHeroSkills[lv_index2], gv_heroesAbilitiesIcons[0][0][0][0], PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_heroTreeDialogHeroSkills[lv_index2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        }
        lv_index2 = 0;
        for ( ; ( (auto1A9B25F6_ai >= 0 && lv_index2 <= auto1A9B25F6_ae) || (auto1A9B25F6_ai < 0 && lv_index2 >= auto1A9B25F6_ae) ) ; lv_index2 += auto1A9B25F6_ai ) {
            lv_index3 = 1;
            for ( ; ( (auto756504E5_ai >= 0 && lv_index3 <= auto756504E5_ae) || (auto756504E5_ai < 0 && lv_index3 >= auto756504E5_ae) ) ; lv_index3 += auto756504E5_ai ) {
                DialogControlSetVisible(gv_heroTreeDialogHeroStats[lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
            }
        }
        lv_index = 2;
        for ( ; ( (autoD9A8411A_ai >= 0 && lv_index <= autoD9A8411A_ae) || (autoD9A8411A_ai < 0 && lv_index >= autoD9A8411A_ae) ) ; lv_index += autoD9A8411A_ai ) {
            lv_index3 = 1;
            for ( ; ( (autoD6CE6FEE_ai >= 0 && lv_index3 <= autoD6CE6FEE_ae) || (autoD6CE6FEE_ai < 0 && lv_index3 >= autoD6CE6FEE_ae) ) ; lv_index3 += autoD6CE6FEE_ai ) {
                if ((gv_heroTreeDialogHeroButtons[lv_index][lv_index3][1] != c_invalidDialogControlId)) {
                    libNtve_gf_SetDialogItemImage(gv_heroTreeDialogHeroButtons[lv_index][lv_index3][2], "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupSingle(lv_trigPlayer));
                }

            }
        }
    }

    if ((gv_heroTreeDialogPlayerSelected[lv_trigPlayer] != 0)) {
        lv_index = 2;
        for ( ; ( (auto92919948_ai >= 0 && lv_index <= auto92919948_ae) || (auto92919948_ai < 0 && lv_index >= auto92919948_ae) ) ; lv_index += auto92919948_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoBF638F03_ai >= 0 && lv_index2 <= autoBF638F03_ae) || (autoBF638F03_ai < 0 && lv_index2 >= autoBF638F03_ae) ) ; lv_index2 += autoBF638F03_ai ) {
                if ((lv_usedDialogItem == gv_heroTreeDialogHeroButtons[lv_index][lv_index2][1])) {
                    lv_unitTier = lv_index;
                    lv_unitType = lv_index2;
                    lv_continue = true;
                    break;
                }

            }
        }
    }

    if ((lv_continue == true)) {
        libNtve_gf_SetDialogItemText(gv_heroTreeDialogHeroPortrait[1], gv_heroesStatsHeroTooltip[lv_unitClass][lv_unitTier][lv_unitType], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemModel(gv_heroTreeDialogHeroPortrait[2], ((gv_heroesStatsUnitType[lv_unitClass][lv_unitTier][lv_unitType])), PlayerGroupSingle(lv_trigPlayer));
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_heroTreeDialogHeroPortrait[2]));
        ActorSend(ActorFromDialogControl(gv_heroTreeDialogHeroPortrait[2]), "SetScale 0.550000 0.100000");
        lv_index2 = 1;
        for ( ; ( (autoE7BD229E_ai >= 0 && lv_index2 <= autoE7BD229E_ae) || (autoE7BD229E_ai < 0 && lv_index2 >= autoE7BD229E_ae) ) ; lv_index2 += autoE7BD229E_ai ) {
            if ((gv_heroesAbilitiesUpgrades[lv_unitClass][lv_unitTier][lv_unitType][lv_index2] != null)) {
                DialogControlSetEnabled(gv_heroTreeDialogHeroSkills[lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                libNtve_gf_SetDialogItemImage(gv_heroTreeDialogHeroSkills[lv_index2], gv_heroesAbilitiesIcons[lv_unitClass][lv_unitTier][lv_unitType][lv_index2], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_heroTreeDialogHeroSkills[lv_index2], gv_heroesAbilitiesTooltips[lv_unitClass][lv_unitTier][lv_unitType][lv_index2], PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                DialogControlSetEnabled(gv_heroTreeDialogHeroSkills[lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
                libNtve_gf_SetDialogItemImage(gv_heroTreeDialogHeroSkills[lv_index2], gv_heroesAbilitiesIcons[0][0][0][0], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_heroTreeDialogHeroSkills[lv_index2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        lv_index2 = 0;
        for ( ; ( (autoA2A0597C_ai >= 0 && lv_index2 <= autoA2A0597C_ae) || (autoA2A0597C_ai < 0 && lv_index2 >= autoA2A0597C_ae) ) ; lv_index2 += autoA2A0597C_ai ) {
            lv_index3 = 1;
            for ( ; ( (auto00B6BFA2_ai >= 0 && lv_index3 <= auto00B6BFA2_ae) || (auto00B6BFA2_ai < 0 && lv_index3 >= auto00B6BFA2_ae) ) ; lv_index3 += auto00B6BFA2_ai ) {
                if ((gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTier][lv_unitType][lv_index2] >= lv_index3)) {
                    DialogControlSetVisible(gv_heroTreeDialogHeroStats[lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), true);
                }
                else {
                    DialogControlSetVisible(gv_heroTreeDialogHeroStats[lv_index2][lv_index3], PlayerGroupSingle(lv_trigPlayer), false);
                }
            }
        }
    }

}

void gf_HeroHeroLevels (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_trigUnit;
    int lv_trigPlayer;
    int lv_unitClass;
    int lv_unitTier;
    int lv_unitType;
    int lv_index;
    int lv_index2;
    int lv_tempint;

    // Automatic Variable Declarations
    const int auto03CCF32D_ae = 5;
    const int auto03CCF32D_ai = 1;
    int auto78C46107_ae;
    const int auto78C46107_ai = 1;
    const int auto7F5C2042_ae = 3;
    const int auto7F5C2042_ai = 1;
    const int autoD9A9A580_ae = 5;
    const int autoD9A9A580_ai = 1;
    const int autoA4D48B0F_ae = 9;
    const int autoA4D48B0F_ai = 1;
    const int auto77E79382_ae = 24;
    const int auto77E79382_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_trigUnit = gv_playerHeroHero[lv_trigPlayer];
    lv_unitClass = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
    lv_unitTier = gv_playerHeroHeroClassTierType[lv_trigPlayer][2];
    lv_unitType = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
    gv_playerCurrency[lv_trigPlayer][3] += gv_playerHeroHeroLevelExp[lv_trigPlayer][1];
    gv_playerStatisticsGeneral[lv_trigPlayer][6] += gv_playerHeroHeroLevelExp[lv_trigPlayer][1];
    gv_playerCurrency[lv_trigPlayer][4] += 5;
    gv_playerStatisticsGeneral[lv_trigPlayer][27] += 5;
    libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
    UnitSetInfoText2(gv_playerHeroHero[lv_trigPlayer], (StringExternal("Param/Value/3F11DB42") + IntToText(gv_playerHeroHeroLevelExp[lv_trigPlayer][1])));
    gf_PartyUpdateTooltips(lv_trigPlayer);
    lv_index = 1;
    for ( ; ( (auto03CCF32D_ai >= 0 && lv_index <= auto03CCF32D_ae) || (auto03CCF32D_ai < 0 && lv_index >= auto03CCF32D_ae) ) ; lv_index += auto03CCF32D_ai ) {
        auto78C46107_ae = gv_heroesStatsLevelingStats[lv_unitClass][lv_unitTier][lv_unitType][lv_index];
        lv_index2 = 1;
        for ( ; ( (auto78C46107_ai >= 0 && lv_index2 <= auto78C46107_ae) || (auto78C46107_ai < 0 && lv_index2 >= auto78C46107_ae) ) ; lv_index2 += auto78C46107_ai ) {
            gf_HeroStatsIncreased(lv_trigPlayer, lv_index, true);
        }
    }
    if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 5) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] == 3)) {
        gv_tutorialPlayer[lv_trigPlayer] = 5;
        gf_TutorialUpdate(lv_trigPlayer, 5);
    }

    if ((gv_generalTutorialMode == true) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] == 3)) {
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
    }

    if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] == gv_generalLevelCap)) {
        gv_playerStatisticsGeneral[lv_trigPlayer][26] += 1;
        gv_playerCurrency[lv_trigPlayer][4] += 250;
        gv_playerStatisticsGeneral[lv_trigPlayer][27] += 250;
        lv_index = 1;
        for ( ; ( (auto7F5C2042_ai >= 0 && lv_index <= auto7F5C2042_ae) || (auto7F5C2042_ai < 0 && lv_index >= auto7F5C2042_ae) ) ; lv_index += auto7F5C2042_ai ) {
            lv_index2 = 1;
            for ( ; ( (autoD9A9A580_ai >= 0 && lv_index2 <= autoD9A9A580_ae) || (autoD9A9A580_ai < 0 && lv_index2 >= autoD9A9A580_ae) ) ; lv_index2 += autoD9A9A580_ai ) {
                lv_tempint += 1;
                if ((gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_tempint] == 0) && (lv_unitType == lv_index2) && (lv_unitClass == lv_index)) {
                    gv_playerStatisticsMaxHeroes[lv_trigPlayer][lv_tempint] = 1;
                    gv_playerStatisticsMaxHeroes[lv_trigPlayer][0] += 1;
                }

            }
        }
    }

    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
    if ((gv_hatsPlayerUpgradeIndex[lv_trigPlayer] >= 1)) {
        return ;
    }

    if ((gv_generalTutorialMode == true) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] > 3)) {
        return ;
    }

    lv_index = 1;
    for ( ; ( (autoA4D48B0F_ai >= 0 && lv_index <= autoA4D48B0F_ae) || (autoA4D48B0F_ai < 0 && lv_index >= autoA4D48B0F_ae) ) ; lv_index += autoA4D48B0F_ai ) {
        gf_ItemsGeneratePotion(lv_trigPlayer, 1, lv_index);
    }
    if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
        gf_DialogUsedItemVendor(lv_trigPlayer, gv_itemVendorDialogButtons[3]);
    }

    gv_itemVendorDialogItemIndex[lv_trigPlayer] = 1;
    lv_index = 1;
    for ( ; ( (auto77E79382_ai >= 0 && lv_index <= auto77E79382_ae) || (auto77E79382_ai < 0 && lv_index >= auto77E79382_ae) ) ; lv_index += auto77E79382_ai ) {
        gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(0, 1));
        if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
            gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
        }

        gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 2, ((20 + FixedToInt((gv_invasionFactorUpgradeCost * 14.0))) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + (gv_invasionIndex * (4 + (gv_invasionIndex / 2))))));
    }
}

trigger auto_gf_HeroRevive_Trigger = null;
int auto_gf_HeroRevive_lp_trigPlayer;

void gf_HeroRevive (int lp_trigPlayer) {
    auto_gf_HeroRevive_lp_trigPlayer = lp_trigPlayer;

    if (auto_gf_HeroRevive_Trigger == null) {
        auto_gf_HeroRevive_Trigger = TriggerCreate("auto_gf_HeroRevive_TriggerFunc");
    }

    TriggerExecute(auto_gf_HeroRevive_Trigger, false, false);
}

bool auto_gf_HeroRevive_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_HeroRevive_lp_trigPlayer;

    // Variable Declarations
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int autoC1F28A0B_n = 5;
    int autoC1F28A0B_i;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_playerHeroHero[lv_trigPlayer]), c_animNameDefault, "Death", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    if ((gv_questsPlayerProgress[lv_trigPlayer][2] <= 2) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] <= 4)) {
        UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(RegionFromId(1)), false);
    }
    else {
        UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(gv_regionsTeleporterRegions[gv_playerHeroHeroRespawn[lv_trigPlayer]][3]), false);
        for (autoC1F28A0B_i = 1; autoC1F28A0B_i <= autoC1F28A0B_n; autoC1F28A0B_i += 1) {
            Wait(1.0, c_timeGame);
            if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], gv_regionsTeleporterRegions[gv_playerHeroHeroRespawn[lv_trigPlayer]][3]) == false)) {
                UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(gv_regionsTeleporterRegions[gv_playerHeroHeroRespawn[lv_trigPlayer]][3]), false);
            }

        }
    }
    Wait(1.0, c_timeGame);
    CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 1.0, -1, 10.0, false);
    Wait(0.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_playerHeroHero[lv_trigPlayer]), c_animNameDefault, "GLbirth", 0, c_animTimeDefault);
    return true;
}

void gf_HeroStatsIncreased (int lp_trigPlayer, int lp_index, bool lp_loaded) {
    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;
    fixed lv_tempCount;

    // Automatic Variable Declarations
    int autoAE5293AC_val;

    // Variable Initialization

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_index = lp_index;
    if ((lp_loaded == true)) {
        gv_playerHeroHeroStats[lv_trigPlayer][lv_index] += 1;
    }

    autoAE5293AC_val = lv_index;
    if (autoAE5293AC_val == 1) {
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][1]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][2]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else if (autoAE5293AC_val == 2) {
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.AttackSpeedMultiplier", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][1]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.AttackSpeedMultiplier", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.RateMultiplierArray[" + IntToString(1) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][2]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.RateMultiplierArray[" + IntToString(1) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else if (autoAE5293AC_val == 3) {
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][1]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(0) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][2]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else if (autoAE5293AC_val == 4) {
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(2) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][1]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(2) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(2) + "]", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][2]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(2) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else if (autoAE5293AC_val == 5) {
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.LifeArmorBonus", lv_trigPlayer));
        lv_tempCount += (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][1]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.LifeArmorBonus", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.EnergyArmorBonus", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageTakenFraction[" + IntToString(0) + "]", lv_trigPlayer));
        lv_tempCount -= (0.0 + gv_heroesStatsAdvancedStatValues[lv_index][2]);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageTakenFraction[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else if (autoAE5293AC_val == 0) {
        lv_tempCount = 1.0;
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.AttackSpeedMultiplier", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.RateMultiplierArray[" + IntToString(1) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        lv_tempCount = 0.0;
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalMaxArray[" + IntToString(2) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.VitalRegenArray[" + IntToString(2) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.LifeArmorBonus", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.EnergyArmorBonus", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "Respawn3", "Modification.DamageTakenFraction[" + IntToString(0) + "]", lv_trigPlayer, FixedToString(lv_tempCount, c_fixedPrecisionAny));
    }
    else {
    }
}

void gf_HeroStats (string lp_unitType, int lp_range, int lp_damage, int lp_speed, int lp_life, int lp_energy, int lp_resist, text lp_tooltip, int lp_classIndex, int lp_tierIndex, int lp_heroIndex, string lp_heroUpgrades1, string lp_heroUpgrades2, string lp_heroUpgrades3, string lp_heroUpgrades4, string lp_heroUpgrades5) {
    // Variable Declarations
    string lv_unitType;
    int lv_range;
    int lv_damage;
    int lv_speed;
    int lv_life;
    int lv_energy;
    int lv_resist;
    text lv_tooltip;
    int lv_classIndex;
    int lv_tierIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = lp_unitType;
    lv_range = lp_range;
    lv_damage = lp_damage;
    lv_speed = lp_speed;
    lv_life = lp_life;
    lv_energy = lp_energy;
    lv_resist = lp_resist;
    lv_tooltip = lp_tooltip;
    lv_classIndex = lp_classIndex;
    lv_tierIndex = lp_tierIndex;
    lv_heroIndex = lp_heroIndex;

    // Implementation
    gv_heroesStatsUnitType[lv_classIndex][lv_tierIndex][lv_heroIndex] = lv_unitType;
    gv_heroesStatsHeroTooltip[lv_classIndex][lv_tierIndex][lv_heroIndex] = lv_tooltip;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][0] = lv_range;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][1] = lv_damage;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][2] = lv_speed;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][3] = lv_life;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][4] = lv_energy;
    gv_heroesStatsLevelingStats[lv_classIndex][lv_tierIndex][lv_heroIndex][5] = lv_resist;
    gv_heroesStatsUniqueUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][1] = lp_heroUpgrades1;
    gv_heroesStatsUniqueUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][2] = lp_heroUpgrades2;
    gv_heroesStatsUniqueUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][3] = lp_heroUpgrades3;
    gv_heroesStatsUniqueUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][4] = lp_heroUpgrades4;
    gv_heroesStatsUniqueUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][5] = lp_heroUpgrades5;
}

void gf_HeroAbilities (string lp_icon, text lp_tooltip, text lp_leveling, string lp_skillUpgrade, int lp_classIndex, int lp_tierIndex, int lp_heroIndex, int lp_skillSlot) {
    // Variable Declarations
    string lv_icon;
    text lv_tooltip;
    text lv_leveling;
    string lv_skillUpgrade;
    int lv_classIndex;
    int lv_tierIndex;
    int lv_heroIndex;
    int lv_skillSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_icon = lp_icon;
    lv_tooltip = lp_tooltip;
    lv_leveling = lp_leveling;
    lv_skillUpgrade = lp_skillUpgrade;
    lv_classIndex = lp_classIndex;
    lv_tierIndex = lp_tierIndex;
    lv_heroIndex = lp_heroIndex;
    lv_skillSlot = lp_skillSlot;

    // Implementation
    gv_heroesAbilitiesIcons[lv_classIndex][lv_tierIndex][lv_heroIndex][lv_skillSlot] = lv_icon;
    gv_heroesAbilitiesTooltips[lv_classIndex][lv_tierIndex][lv_heroIndex][lv_skillSlot] = lv_tooltip;
    gv_heroesAbilitiesLevelUp[lv_classIndex][lv_tierIndex][lv_heroIndex][lv_skillSlot] = lv_leveling;
    gv_heroesAbilitiesUpgrades[lv_classIndex][lv_tierIndex][lv_heroIndex][lv_skillSlot] = lv_skillUpgrade;
}

void gf_DialogUsedHatsVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempItem;
    int lv_tempItem2;
    int lv_tempCost;
    bool lv_accountButton;

    // Automatic Variable Declarations
    int auto96E7E408_val;
    const int auto1D3767D4_ae = 4;
    const int auto1D3767D4_ai = 1;
    const int autoBF6269DE_ae = 4;
    const int autoBF6269DE_ai = 1;
    const int auto78BF7AC5_ae = 3;
    const int auto78BF7AC5_ai = 1;
    const int auto9FFE19DA_ae = 3;
    const int auto9FFE19DA_ai = 1;
    const int auto13E1F619_ae = 3;
    const int auto13E1F619_ai = 1;
    const int auto750EFFBE_ae = 12;
    const int auto750EFFBE_ai = 1;
    unitgroup autoEA2B4F9F_g;
    int autoEA2B4F9F_u;
    unit autoEA2B4F9F_var;
    const int auto4321FF6B_ae = 3;
    const int auto4321FF6B_ai = 1;
    const int auto7E0A0AB2_ae = 4;
    const int auto7E0A0AB2_ai = 1;
    const int autoE3F5D205_ae = 3;
    const int autoE3F5D205_ai = 1;
    const int auto11164C72_ae = 3;
    const int auto11164C72_ai = 1;
    int autoBC1E8029_val;
    const int autoD4DD1FE2_ae = 3;
    const int autoD4DD1FE2_ai = 1;
    const int autoA605BD68_ae = 3;
    const int autoA605BD68_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    auto96E7E408_val = lv_dialogItemUsed;
    if (auto96E7E408_val == gv_hatsDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 24;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[5]) {
        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] >= 1) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] >= 1) && (gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]] < 2) && (gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]] != null)) {
            if ((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]]) == false)) {
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]], gv_playerHeroHero[lv_trigPlayer], 1);
                Wait(2.5, c_timeGame);
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]], 1);
            }

        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/C104C26B"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[3]) {
        lv_tempItem = gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3];
        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] >= 1) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] >= 1) && (gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] == 2) && (gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]] != null)) {
            gv_playerHeroHeroHatsEquipped[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]] = lv_tempItem;
            lv_index = 1;
            for ( ; ( (auto750EFFBE_ai >= 0 && lv_index <= auto750EFFBE_ae) || (auto750EFFBE_ai < 0 && lv_index >= auto750EFFBE_ae) ) ; lv_index += auto750EFFBE_ai ) {
                if ((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_index]) == true) && (gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_index] != null)) {
                    UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_index], 1);
                    autoEA2B4F9F_g = UnitGroup(null, lv_trigPlayer, RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 4.0), UnitFilter((1 << c_targetFilterUser1), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoEA2B4F9F_u = UnitGroupCount(autoEA2B4F9F_g, c_unitCountAll);
                    for (;; autoEA2B4F9F_u -= 1) {
                        autoEA2B4F9F_var = UnitGroupUnitFromEnd(autoEA2B4F9F_g, autoEA2B4F9F_u);
                        if (autoEA2B4F9F_var == null) { break; }
                        UnitRemove(autoEA2B4F9F_var);
                    }
                    lv_tempItem2 = lv_index;
                }

            }
            if ((lv_tempItem2 != lv_tempItem)) {
                UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_hatsBehavior[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]], gv_playerHeroHero[lv_trigPlayer], 1);
            }
            else {
                gv_playerHeroHeroHatsEquipped[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]] = 0;
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/24FB1F16"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[2]) {
        gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0] = 0;
        lv_index2 = 1;
        for ( ; ( (auto4321FF6B_ai >= 0 && lv_index2 <= auto4321FF6B_ae) || (auto4321FF6B_ai < 0 && lv_index2 >= auto4321FF6B_ae) ) ; lv_index2 += auto4321FF6B_ai ) {
            gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][lv_index2] = 0;
            libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(38.43, 38.43, 38.43), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(75.29, 75.29, 75.29), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][2], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_hatsDialogItems[lv_index2][1], gv_hatsNameDescription[0][0][0], PlayerGroupSingle(lv_trigPlayer));
            DialogControlSetVisible(gv_hatsDialogItems[lv_index2][6], PlayerGroupSingle(lv_trigPlayer), false);
        }
        lv_index = 1;
        for ( ; ( (auto7E0A0AB2_ai >= 0 && lv_index <= auto7E0A0AB2_ae) || (auto7E0A0AB2_ai < 0 && lv_index >= auto7E0A0AB2_ae) ) ; lv_index += auto7E0A0AB2_ai ) {
            DialogControlSetVisible(gv_hatsDialogTypeButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), false);
        }
        DialogSetVisible(gv_hatsDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        return ;
    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[4]) {
        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] >= 1) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] >= 1) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] >= 1)) {
            lv_tempItem = gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3];
            if ((gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]] < 2)) {
                if ((gv_playerCurrency[lv_trigPlayer][4] >= gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem])) {
                    if (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] < 4) || ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] == 4) && (gv_playerStatisticsGeneral[lv_trigPlayer][19] >= 4) && ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 7) || (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 9) || (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 11))) || ((gv_playerStatisticsGeneral[lv_trigPlayer][25] >= 1) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] == 4) && ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 8) || (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 12))) || ((gv_questsPlayerProgress[lv_trigPlayer][124] == 4) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] == 4) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] == 10)) || ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] == 4) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] < 7)))) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        lv_index = gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0];
                        gv_playerCurrency[lv_trigPlayer][4] -= gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem];
                        gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] = 2;
                        gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] = 0;
                        libNtve_gf_SetDialogItemText(gv_hatsDialogMainButtons[0], (StringExternal("Param/Value/938BCA26") + IntToText(gv_playerCurrency[lv_trigPlayer][4])), PlayerGroupSingle(lv_trigPlayer));
                        DialogControlSetVisible(gv_hatsDialogItems[lv_index][6], PlayerGroupSingle(lv_trigPlayer), false);
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index][4], Color(100.00, 100.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index][5], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index][3], StringExternal("Param/Value/54021C6E"), PlayerGroupSingle(lv_trigPlayer));
                        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] == 4)) {
                            lv_accountButton = true;
                        }

                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    }
                    else {
                        gf_GeneralErrorMessage(StringExternal("Param/Value/CD531354"), PlayerGroupSingle(lv_trigPlayer));
                    }
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/30F52C33"), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/22A0C920"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[6]) {
        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] >= 1)) {
            if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] == 1)) {
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] = 4;
            }
            else {
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] -= 1;
            }
            gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] = 0;
            gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0] = 0;
            lv_index2 = 1;
            for ( ; ( (autoE3F5D205_ai >= 0 && lv_index2 <= autoE3F5D205_ae) || (autoE3F5D205_ai < 0 && lv_index2 >= autoE3F5D205_ae) ) ; lv_index2 += autoE3F5D205_ai ) {
                lv_tempItem = (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] - 1) * 3) + lv_index2);
                libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][2], (StringExternal("Param/Value/CDD80EC9") + gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][1]), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_hatsDialogItems[lv_index2][1], gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][2], PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetVisible(gv_hatsDialogItems[lv_index2][6], PlayerGroupSingle(lv_trigPlayer), false);
                if ((gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] == 2)) {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(100.00, 100.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], StringExternal("Param/Value/A322EB00"), PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(38.43, 38.43, 38.43), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(75.29, 75.29, 75.29), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], (StringExternal("Param/Value/1BFDD9F5") + IntToText(gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem])), PlayerGroupSingle(lv_trigPlayer));
                }
            }
        }

    }
    else if (auto96E7E408_val == gv_hatsDialogMainButtons[7]) {
        if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] >= 1)) {
            if ((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] == 4)) {
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] = 1;
            }
            else {
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] += 1;
            }
            gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] = 0;
            gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0] = 0;
            lv_index2 = 1;
            for ( ; ( (auto11164C72_ai >= 0 && lv_index2 <= auto11164C72_ae) || (auto11164C72_ai < 0 && lv_index2 >= auto11164C72_ae) ) ; lv_index2 += auto11164C72_ai ) {
                lv_tempItem = (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] - 1) * 3) + lv_index2);
                libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][2], (StringExternal("Param/Value/7995CFE9") + gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][1]), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_hatsDialogItems[lv_index2][1], gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][2], PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetVisible(gv_hatsDialogItems[lv_index2][6], PlayerGroupSingle(lv_trigPlayer), false);
                if ((gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] == 2)) {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(100.00, 100.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], StringExternal("Param/Value/CB1CB5E9"), PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(38.43, 38.43, 38.43), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(75.29, 75.29, 75.29), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], (StringExternal("Param/Value/2F99C8E4") + IntToText(gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem])), PlayerGroupSingle(lv_trigPlayer));
                }
            }
        }

    }
    else {
        lv_index = 1;
        for ( ; ( (auto1D3767D4_ai >= 0 && lv_index <= auto1D3767D4_ae) || (auto1D3767D4_ai < 0 && lv_index >= auto1D3767D4_ae) ) ; lv_index += auto1D3767D4_ai ) {
            if ((lv_dialogItemUsed == gv_hatsDialogTypeButtons[lv_index][1])) {
                lv_index2 = 1;
                for ( ; ( (autoBF6269DE_ai >= 0 && lv_index2 <= autoBF6269DE_ae) || (autoBF6269DE_ai < 0 && lv_index2 >= autoBF6269DE_ae) ) ; lv_index2 += autoBF6269DE_ai ) {
                    DialogControlSetVisible(gv_hatsDialogTypeButtons[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
                }
                DialogControlSetVisible(gv_hatsDialogTypeButtons[lv_index][2], PlayerGroupSingle(lv_trigPlayer), true);
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] = lv_index;
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] = 1;
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] = 0;
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0] = 0;
                lv_index2 = 1;
                for ( ; ( (auto78BF7AC5_ai >= 0 && lv_index2 <= auto78BF7AC5_ae) || (auto78BF7AC5_ai < 0 && lv_index2 >= auto78BF7AC5_ae) ) ; lv_index2 += auto78BF7AC5_ai ) {
                    lv_tempItem = (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] - 1) * 3) + lv_index2);
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][2], (StringExternal("Param/Value/A02D22D6") + gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][1]), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_hatsDialogItems[lv_index2][1], gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][2], PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetVisible(gv_hatsDialogItems[lv_index2][6], PlayerGroupSingle(lv_trigPlayer), false);
                    if ((gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] == 2)) {
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(100.00, 100.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], StringExternal("Param/Value/4FCDFEE4"), PlayerGroupSingle(lv_trigPlayer));
                    }
                    else {
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(38.43, 38.43, 38.43), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(75.29, 75.29, 75.29), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], (StringExternal("Param/Value/9D31E57B") + IntToText(gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem])), PlayerGroupSingle(lv_trigPlayer));
                    }
                }
            }

        }
        lv_index = 1;
        for ( ; ( (auto9FFE19DA_ai >= 0 && lv_index <= auto9FFE19DA_ae) || (auto9FFE19DA_ai < 0 && lv_index >= auto9FFE19DA_ae) ) ; lv_index += auto9FFE19DA_ai ) {
            if ((lv_dialogItemUsed == gv_hatsDialogItems[lv_index][1]) && (gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1] > 0)) {
                lv_index2 = 1;
                for ( ; ( (auto13E1F619_ai >= 0 && lv_index2 <= auto13E1F619_ae) || (auto13E1F619_ai < 0 && lv_index2 >= auto13E1F619_ae) ) ; lv_index2 += auto13E1F619_ai ) {
                    DialogControlSetVisible(gv_hatsDialogItems[lv_index2][6], PlayerGroupSingle(lv_trigPlayer), false);
                }
                DialogControlSetVisible(gv_hatsDialogItems[lv_index][6], PlayerGroupSingle(lv_trigPlayer), true);
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3] = (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] - 1) * 3) + lv_index);
                gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][0] = lv_index;
            }

        }
    }
    if ((lv_accountButton == true)) {
        autoBC1E8029_val = lv_tempItem;
        if (autoBC1E8029_val == 1) {
            gv_playerCurrency[lv_trigPlayer][1] += RandomInt(50000, 100000);
            gv_playerCurrency[lv_trigPlayer][2] += RandomInt(50000, 100000);
            gv_playerCurrency[lv_trigPlayer][3] += RandomInt(1000, 2000);
            lv_index = 1;
            for ( ; ( (autoD4DD1FE2_ai >= 0 && lv_index <= autoD4DD1FE2_ae) || (autoD4DD1FE2_ai < 0 && lv_index >= autoD4DD1FE2_ae) ) ; lv_index += autoD4DD1FE2_ai ) {
                libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[lv_index], IntToText(gv_playerCurrency[lv_trigPlayer][lv_index]), PlayerGroupSingle(lv_trigPlayer));
            }
            gv_playerStatisticsHats[lv_trigPlayer][4][1] = 0;
            Wait(0.5, c_timeGame);
            lv_index2 = 1;
            for ( ; ( (autoA605BD68_ai >= 0 && lv_index2 <= autoA605BD68_ae) || (autoA605BD68_ai < 0 && lv_index2 >= autoA605BD68_ae) ) ; lv_index2 += autoA605BD68_ai ) {
                lv_tempItem = (((gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][2] - 1) * 3) + lv_index2);
                libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][2], (StringExternal("Param/Value/BD03C0A1") + gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem][1]), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_hatsDialogItems[lv_index2][1], gv_hatsNameDescription[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][3]][2], PlayerGroupSingle(lv_trigPlayer));
                if ((gv_playerStatisticsHats[lv_trigPlayer][gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem] == 2)) {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(100.00, 100.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(100.00, 100.00, 50.20), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], StringExternal("Param/Value/A7A82246"), PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][4], Color(38.43, 38.43, 38.43), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemColor(gv_hatsDialogItems[lv_index2][5], Color(75.29, 75.29, 75.29), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_hatsDialogItems[lv_index2][3], (StringExternal("Param/Value/B5CFF191") + IntToText(gv_hatsCosts[gv_hatsDialogPlayerTabPageItem[lv_trigPlayer][1]][lv_tempItem])), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        }
        else if (autoBC1E8029_val == 3) {
            TextTagDestroy(gv_playerTextTag[lv_trigPlayer]);
            TextTagCreate(TextWithColor((StringExternal("Param/Value/C4B1B81D") + (TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))) + StringExternal("Param/Value/2487476F"))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 24, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 1.0, true, false, PlayerGroupAll());
            gv_playerTextTag[lv_trigPlayer] = TextTagLastCreated();
            TextTagAttachToUnit(gv_playerTextTag[lv_trigPlayer], gv_playerHeroHero[lv_trigPlayer], (1.0 + (gv_playerHeroHeroClassTierType[lv_trigPlayer][2] * 0.035)));
        }
        else if (autoBC1E8029_val == 4) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HoverPad3", 1);
        }
        else if (autoBC1E8029_val == 5) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "HearthStone2", 1);
        }
        else if (autoBC1E8029_val == 7) {
            gf_GeneralAnnouncementMessage(StringExternal("Param/Value/D51692B6"), PlayerGroupSingle(lv_trigPlayer));
        }
        else if (autoBC1E8029_val == 8) {
            gf_GeneralAnnouncementMessage(StringExternal("Param/Value/F9304CEF"), PlayerGroupSingle(lv_trigPlayer));
        }
        else if (autoBC1E8029_val == 9) {
            DialogControlSetEnabled(gv_itemHonorDialogDropdown[5], PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
        }
    }

}

trigger auto_gf_DialogUsedBankVendor_Trigger = null;
int auto_gf_DialogUsedBankVendor_lp_trigPlayer;
int auto_gf_DialogUsedBankVendor_lp_dialogItemUsed;

void gf_DialogUsedBankVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedBankVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedBankVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedBankVendor_Trigger == null) {
        auto_gf_DialogUsedBankVendor_Trigger = TriggerCreate("auto_gf_DialogUsedBankVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedBankVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedBankVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedBankVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedBankVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_stashSlot;
    int lv_inventorySlot;
    int lv_stashTab;
    int[21] lv_tempStats;

    // Automatic Variable Declarations
    int auto72CA51D5_val;
    const int auto65E7E98F_ae = 24;
    const int auto65E7E98F_ai = 1;
    const int autoF24D0D05_ae = 20;
    const int autoF24D0D05_ai = 1;
    const int autoF1A660C9_ae = 30;
    const int autoF1A660C9_ai = 1;
    const int auto6648153E_ae = 20;
    const int auto6648153E_ai = 1;
    const int autoAD378E2E_ae = 2;
    const int autoAD378E2E_ai = 1;
    const int auto0DEF7126_ae = 24;
    const int auto0DEF7126_ai = 1;
    const int auto13DD51FD_ae = 20;
    const int auto13DD51FD_ai = 1;
    const int auto58B71D74_ae = 2;
    const int auto58B71D74_ai = 1;
    const int autoB5C0D76D_ae = 24;
    const int autoB5C0D76D_ai = 1;
    const int auto22C53B30_ae = 20;
    const int auto22C53B30_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_trigPlayer = lp_trigPlayer;
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_stashTab = gv_inventoryStashTabSelected[lv_trigPlayer];
    auto72CA51D5_val = lv_dialogItemUsed;
    if (auto72CA51D5_val == gv_inventoryDialogStashButtons[2]) {
        if ((gv_inventoryStashSlotSelected[lv_trigPlayer][2] != 0)) {
            lv_index = 1;
            for ( ; ( (auto65E7E98F_ai >= 0 && lv_index <= auto65E7E98F_ae) || (auto65E7E98F_ai < 0 && lv_index >= auto65E7E98F_ae) ) ; lv_index += auto65E7E98F_ai ) {
                lv_stashSlot = (((lv_stashTab - 1) * 24) + lv_index);
                if ((gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][1] == 0)) {
                    lv_inventorySlot = gv_inventoryStashSlotSelected[lv_trigPlayer][2];
                    lv_index2 = 1;
                    for ( ; ( (autoF24D0D05_ai >= 0 && lv_index2 <= autoF24D0D05_ae) || (autoF24D0D05_ai < 0 && lv_index2 >= autoF24D0D05_ae) ) ; lv_index2 += autoF24D0D05_ai ) {
                        gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2] = gv_inventoryPackStats[lv_trigPlayer][lv_inventorySlot][lv_index2];
                        gv_inventoryPackStats[lv_trigPlayer][lv_inventorySlot][lv_index2] = 0;
                    }
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_inventoryStashSlotSelected[lv_trigPlayer][2]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryStashSlotSelected[lv_trigPlayer][2]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryStashSlotSelected[lv_trigPlayer][2]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryStashSlotSelected[lv_trigPlayer][2]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                    DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), false);
                    gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
                    gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                    gv_inventoryPackMove[lv_trigPlayer] = false;
                    gv_inventoryStashMove[lv_trigPlayer] = false;
                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    return true;
                }

            }
            gf_GeneralErrorMessage(StringExternal("Param/Value/8C176AC4"), PlayerGroupSingle(lv_trigPlayer));
        }

    }
    else if (auto72CA51D5_val == gv_inventoryDialogStashButtons[1]) {
        if ((gv_inventoryStashSlotSelected[lv_trigPlayer][1] != 0)) {
            lv_index = 1;
            for ( ; ( (autoF1A660C9_ai >= 0 && lv_index <= autoF1A660C9_ae) || (autoF1A660C9_ai < 0 && lv_index >= autoF1A660C9_ae) ) ; lv_index += autoF1A660C9_ai ) {
                if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                    lv_inventorySlot = lv_index;
                    lv_stashSlot = gv_inventoryStashRealSlot[lv_trigPlayer];
                    lv_index2 = 1;
                    for ( ; ( (auto6648153E_ai >= 0 && lv_index2 <= auto6648153E_ae) || (auto6648153E_ai < 0 && lv_index2 >= auto6648153E_ae) ) ; lv_index2 += auto6648153E_ai ) {
                        gv_inventoryPackStats[lv_trigPlayer][lv_inventorySlot][lv_index2] = gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2];
                        gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2] = 0;
                    }
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_inventorySlot][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogStashSelectedItem[1][1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_inventorySlot][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_inventorySlot][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_inventorySlot][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[1][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), false);
                    gv_inventoryStashSlotSelected[lv_trigPlayer][1] = 0;
                    gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                    gv_inventoryPackMove[lv_trigPlayer] = false;
                    gv_inventoryStashMove[lv_trigPlayer] = false;
                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    return true;
                }

            }
            gf_GeneralErrorMessage(StringExternal("Param/Value/3C9DBFC1"), PlayerGroupSingle(lv_trigPlayer));
        }

    }
    else if (auto72CA51D5_val == gv_inventoryDialogStashButtons[3]) {
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogStashBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        lv_index = 1;
        for ( ; ( (autoAD378E2E_ai >= 0 && lv_index <= autoAD378E2E_ae) || (autoAD378E2E_ai < 0 && lv_index >= autoAD378E2E_ae) ) ; lv_index += autoAD378E2E_ai ) {
            gv_inventoryStashSlotSelected[lv_trigPlayer][lv_index] = 0;
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[lv_index][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        }
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), false);
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        gv_inventoryPackMove[lv_trigPlayer] = false;
        gv_inventoryStashMove[lv_trigPlayer] = false;
        return true;
    }
    else if (auto72CA51D5_val == gv_inventoryDialogStashButtons[4]) {
        if ((gv_inventoryStashSlotSelected[lv_trigPlayer][1] != 0)) {
            DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), true);
            gv_inventoryStashMove[lv_trigPlayer] = true;
        }

        return true;
    }
    else if (auto72CA51D5_val == gv_inventoryDialogStashButtons[6]) {
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][17] < 9) && (gv_playerCurrency[lv_trigPlayer][1] >= gv_inventoryStashTabPrice[(gv_playerStatisticsGeneral[lv_trigPlayer][17] + 1)])) {
            SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
            gv_playerCurrency[lv_trigPlayer][1] -= gv_inventoryStashTabPrice[(gv_playerStatisticsGeneral[lv_trigPlayer][17] + 1)];
            if ((gv_playerStatisticsGeneral[lv_trigPlayer][17] == 0)) {
                gv_playerStatisticsGeneral[lv_trigPlayer][17] += 1;
            }

            gv_playerStatisticsGeneral[lv_trigPlayer][17] += 1;
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_inventoryDialogStashButtons[7], (StringExternal("Param/Value/279DCFD0") + IntToText(gv_inventoryStashTabPrice[(gv_playerStatisticsGeneral[lv_trigPlayer][17] + 1)])), PlayerGroupSingle(lv_trigPlayer));
        }

        return true;
    }
    else if (auto72CA51D5_val == gv_inventoryDialogStashTabs[1]) {
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][17] > 1)) {
            if ((gv_inventoryStashTabSelected[lv_trigPlayer] < gv_playerStatisticsGeneral[lv_trigPlayer][17])) {
                gv_inventoryStashTabSelected[lv_trigPlayer] += 1;
                lv_stashTab = gv_inventoryStashTabSelected[lv_trigPlayer];
            }
            else {
                gv_inventoryStashTabSelected[lv_trigPlayer] = 1;
                lv_stashTab = gv_inventoryStashTabSelected[lv_trigPlayer];
            }
            lv_index = 1;
            for ( ; ( (auto0DEF7126_ai >= 0 && lv_index <= auto0DEF7126_ae) || (auto0DEF7126_ai < 0 && lv_index >= auto0DEF7126_ae) ) ; lv_index += auto0DEF7126_ai ) {
                lv_stashSlot = (((lv_stashTab - 1) * 24) + lv_index);
                lv_index2 = 1;
                for ( ; ( (auto13DD51FD_ai >= 0 && lv_index2 <= auto13DD51FD_ae) || (auto13DD51FD_ai < 0 && lv_index2 >= auto13DD51FD_ae) ) ; lv_index2 += auto13DD51FD_ai ) {
                    lv_tempStats[lv_index2] = gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2];
                }
                if ((lv_tempStats[1] != 0)) {
                    gf_BankItemLoading(lv_trigPlayer, 3, lv_index);
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[lv_index][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                }
            }
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashTabs[2], gv_inventoryDialogStashTabIcons[gv_inventoryStashTabSelected[lv_trigPlayer]], PlayerGroupSingle(lv_trigPlayer));
            lv_index = 1;
            for ( ; ( (auto58B71D74_ai >= 0 && lv_index <= auto58B71D74_ae) || (auto58B71D74_ai < 0 && lv_index >= auto58B71D74_ae) ) ; lv_index += auto58B71D74_ai ) {
                gv_inventoryStashSlotSelected[lv_trigPlayer][lv_index] = 0;
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[lv_index][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[lv_index][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }
            DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), false);
            gv_inventoryStashMove[lv_trigPlayer] = false;
        }

        return true;
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (autoB5C0D76D_ai >= 0 && lv_index <= autoB5C0D76D_ae) || (autoB5C0D76D_ai < 0 && lv_index >= autoB5C0D76D_ae) ) ; lv_index += autoB5C0D76D_ai ) {
        if ((lv_dialogItemUsed == gv_inventoryDialogStashItems[lv_index][3])) {
            lv_stashSlot = (((lv_stashTab - 1) * 24) + lv_index);
            if ((gv_inventoryStashSlotSelected[lv_trigPlayer][1] != 0) && (gv_inventoryStashMove[lv_trigPlayer] == true)) {
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogStashItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[gv_inventoryStashSlotSelected[lv_trigPlayer][1]][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogStashSelectedItem[1][1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashSelectedItem[1][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[1][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetVisible(gv_inventoryDialogStashButtons[5], PlayerGroupSingle(lv_trigPlayer), false);
                lv_index2 = 1;
                for ( ; ( (auto22C53B30_ai >= 0 && lv_index2 <= auto22C53B30_ae) || (auto22C53B30_ai < 0 && lv_index2 >= auto22C53B30_ae) ) ; lv_index2 += auto22C53B30_ai ) {
                    lv_tempStats[lv_index2] = gv_inventoryStashStats[lv_trigPlayer][gv_inventoryStashRealSlot[lv_trigPlayer]][lv_index2];
                    gv_inventoryStashStats[lv_trigPlayer][gv_inventoryStashRealSlot[lv_trigPlayer]][lv_index2] = gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2];
                    gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][lv_index2] = lv_tempStats[lv_index2];
                }
                gv_inventoryStashRealSlot[lv_trigPlayer] = 0;
                gv_inventoryStashSlotSelected[lv_trigPlayer][1] = 0;
                gv_inventoryStashMove[lv_trigPlayer] = false;
                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            }
            else {
                if ((gv_inventoryStashStats[lv_trigPlayer][lv_stashSlot][1] != 0)) {
                    gv_inventoryStashSlotSelected[lv_trigPlayer][1] = lv_index;
                    gv_inventoryStashRealSlot[lv_trigPlayer] = (((lv_stashTab - 1) * 24) + lv_index);
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[1][1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogStashItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[1][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogStashItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    return true;
                }

            }
        }

    }
    return true;
}

trigger auto_gf_DialogUsedBeastMaster_Trigger = null;
int auto_gf_DialogUsedBeastMaster_lp_trigPlayer;
int auto_gf_DialogUsedBeastMaster_lp_dialogItemUsed;

void gf_DialogUsedBeastMaster (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedBeastMaster_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedBeastMaster_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedBeastMaster_Trigger == null) {
        auto_gf_DialogUsedBeastMaster_Trigger = TriggerCreate("auto_gf_DialogUsedBeastMaster_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedBeastMaster_Trigger, false, false);
}

bool auto_gf_DialogUsedBeastMaster_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedBeastMaster_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedBeastMaster_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_timer;
    int lv_tempMonster;

    // Automatic Variable Declarations
    int autoD2E936DD_val;
    const int auto49070CA3_ae = 12;
    const int auto49070CA3_ai = 1;
    const int auto1B49E2E6_ae = 6;
    const int auto1B49E2E6_ai = 1;
    int autoA444EE67_ae;
    const int autoA444EE67_ai = 1;
    const int auto427F8BD4_ae = 6;
    const int auto427F8BD4_ai = 1;
    const int auto1ED6E8AF_ae = 6;
    const int auto1ED6E8AF_ai = 1;
    int autoF738D8E0_ae;
    const int autoF738D8E0_ai = 1;
    playergroup auto426A3E59_g;
    int auto426A3E59_var;
    unitgroup auto7AC07FEC_g;
    int auto7AC07FEC_u;
    unit auto7AC07FEC_var;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_tempMonster = gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer];

    // Implementation
    autoD2E936DD_val = lv_dialogItemUsed;
    if (autoD2E936DD_val == gv_beastMasterDialogMonsterButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 20;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogButtons[2]) {
        gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] = 0;
        libNtve_gf_SetDialogItemModel(gv_beastMasterDialogMonsterStats[0], "MineralCrystalGlow", PlayerGroupSingle(lv_trigPlayer));
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_beastMasterDialogMonsterStats[0]));
        ActorSend(ActorFromDialogControl(gv_beastMasterDialogMonsterStats[0]), "SetScale 0.550000 0.100000");
        lv_index = 1;
        for ( ; ( (auto1B49E2E6_ai >= 0 && lv_index <= auto1B49E2E6_ae) || (auto1B49E2E6_ai < 0 && lv_index >= auto1B49E2E6_ae) ) ; lv_index += auto1B49E2E6_ai ) {
            libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[lv_index], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        }
        autoA444EE67_ae = gv_beastMasterCreepIndex;
        lv_index = 1;
        for ( ; ( (autoA444EE67_ai >= 0 && lv_index <= autoA444EE67_ae) || (autoA444EE67_ai < 0 && lv_index >= autoA444EE67_ae) ) ; lv_index += autoA444EE67_ai ) {
            if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][1] > 0) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][2] > 0)) {
                DialogControlSetEnabled(gv_beastMasterDialogMonsterItems[lv_index][1], PlayerGroupSingle(lv_trigPlayer), true);
                libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_index][2], gv_beastMasterCreepIcon[lv_index], PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                DialogControlSetEnabled(gv_beastMasterDialogMonsterItems[lv_index][1], PlayerGroupSingle(lv_trigPlayer), false);
                libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_index][2], gv_beastMasterCreepIcon[0], PlayerGroupSingle(lv_trigPlayer));
            }
        }
        DialogSetVisible(gv_beastMasterDialogMonsterBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 20;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogMonsterButtons[3]) {
        DialogSetVisible(gv_beastMasterDialogMonsterBox, PlayerGroupSingle(lv_trigPlayer), false);
        gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] = 0;
        libNtve_gf_SetDialogItemModel(gv_beastMasterDialogMonsterStats[0], "MineralCrystalGlow", PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (auto427F8BD4_ai >= 0 && lv_index <= auto427F8BD4_ae) || (auto427F8BD4_ai < 0 && lv_index >= auto427F8BD4_ae) ) ; lv_index += auto427F8BD4_ai ) {
            libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[lv_index], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        }
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_beastMasterDialogMonsterStats[0]));
        ActorSend(ActorFromDialogControl(gv_beastMasterDialogMonsterStats[0]), "SetScale 0.550000 0.100000");
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogButtons[3]) {
        gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] = 0;
        gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] = 0;
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        DialogSetVisible(gv_beastMasterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_beastMasterDialogMonsterBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_beastMasterDialogReleaseBox, PlayerGroupSingle(lv_trigPlayer), false);
        libNtve_gf_SetDialogItemModel(gv_beastMasterDialogMonsterStats[0], "MineralCrystalGlow", PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (auto1ED6E8AF_ai >= 0 && lv_index <= auto1ED6E8AF_ae) || (auto1ED6E8AF_ai < 0 && lv_index >= auto1ED6E8AF_ae) ) ; lv_index += auto1ED6E8AF_ai ) {
            libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[lv_index], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        }
        autoF738D8E0_ae = gv_beastMasterCreepIndex;
        lv_index = 1;
        for ( ; ( (autoF738D8E0_ai >= 0 && lv_index <= autoF738D8E0_ae) || (autoF738D8E0_ai < 0 && lv_index >= autoF738D8E0_ae) ) ; lv_index += autoF738D8E0_ai ) {
            DialogControlSetEnabled(gv_beastMasterDialogMonsterItems[lv_index][1], PlayerGroupSingle(lv_trigPlayer), false);
            libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_index][2], gv_beastMasterCreepIcon[0], PlayerGroupSingle(lv_trigPlayer));
        }
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_beastMasterDialogMonsterStats[0]));
        ActorSend(ActorFromDialogControl(gv_beastMasterDialogMonsterStats[0]), "SetScale 0.550000 0.100000");
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogExitButtons[2]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        DialogSetVisible(gv_beastMasterDialogExitBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogExitButtons[1]) {
        UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(gv_regionsTeleporterRegions[gv_playerHeroHeroRespawn[lv_trigPlayer]][3]), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        DialogSetVisible(gv_beastMasterDialogExitBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogReleaseButtons[2]) {
        DialogSetVisible(gv_beastMasterDialogReleaseBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogMonsterButtons[5]) {
        DialogSetVisible(gv_beastMasterDialogReleaseBox, PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogReleaseButtons[1]) {
        if ((gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] > 0) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] > 0) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] > 0) && (gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] <= gv_playerCurrency[lv_trigPlayer][1])) {
            gv_playerCurrency[lv_trigPlayer][1] -= gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1];
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
            gv_raidsBossesChance += 50;
            auto426A3E59_g = gv_generalTeamsAll;
            auto426A3E59_var = -1;
            while (true) {
                auto426A3E59_var = PlayerGroupNextPlayer(auto426A3E59_g, auto426A3E59_var);
                if (auto426A3E59_var < 0) { break; }
                if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap)) {
                    lv_index2 += 1;
                }

            }
            if ((lv_index2 < 6)) {
                lv_index2 = 6;
            }

            gf_BeastMasterCreepSpawn(gv_beastMasterCreepType[lv_tempMonster], lv_index2, gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]);
            gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] = 0;
            gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] = 0;
            gf_DialogUsedBeastMaster(lv_trigPlayer, gv_beastMasterDialogButtons[3]);
            DialogSetVisible(gv_beastMasterDialogReleaseBox, PlayerGroupSingle(lv_trigPlayer), false);
            DialogSetVisible(gv_beastMasterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
            SoundPlayForPlayer(SoundLink("Zurvan_SpellARoar", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
        }

    }
    else if (autoD2E936DD_val == gv_beastMasterDialogMonsterButtons[2]) {
        if ((gv_beastMasterCreepSpawned == false)) {
            if ((gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] > 0) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] > 0) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] > 0)) {
                SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("Zurvan_SpellARoar", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                gv_beastMasterCreepSpawned = true;
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] -= 1;
                UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(RegionFromId(148)), false);
                CameraPan(lv_trigPlayer, RegionGetCenter(RegionFromId(147)), 0.0, -1, 10.0, false);
                CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 2.0, -1, 10.0, false);
                DialogSetVisible(gv_beastMasterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                DialogSetVisible(gv_beastMasterDialogMonsterBox, PlayerGroupSingle(lv_trigPlayer), false);
                DialogSetVisible(gv_beastMasterDialogReleaseBox, PlayerGroupSingle(lv_trigPlayer), false);
                DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
                DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
                DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
                Wait(1.0, c_timeGame);
                UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringExternal("Param/Value/1BF678BD"));
                Wait(3.0, c_timeGame);
                UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringExternal("Param/Value/C0F7E226"));
                Wait(2.0, c_timeGame);
                UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringExternal("Param/Value/57DD5350"));
                Wait(2.0, c_timeGame);
                UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringToText(""));
                UIClearMessages(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective);
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
                UnitClearSelection(lv_trigPlayer);
                UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
                CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.5, -1, 10.0, false);
                gf_BeastMasterCreepSpawn(gv_beastMasterCreepType[lv_tempMonster], 1, gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]);
                if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] <= 0)) {
                    libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_tempMonster][1], gv_beastMasterCreepIcon[0], PlayerGroupSingle(lv_trigPlayer));
                    gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] = 0;
                    gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] = 0;
                }

                gf_DialogUsedBeastMaster(lv_trigPlayer, gv_beastMasterDialogMonsterButtons[3]);
                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                while (true) {
                    Wait(2.0, c_timeGame);
                    lv_timer += 2;
                    if ((lv_timer > 660) && (lv_timer <= 662)) {
                        UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringExternal("Param/Value/016DC963"));
                        Wait(4.0, c_timeGame);
                        UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringToText(""));
                        UIClearMessages(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective);
                    }

                    if ((lv_timer > 720) && (lv_timer <= 722)) {
                        UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionRandomPoint(RegionFromId(30)), false);
                        UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringExternal("Param/Value/D99C6A59"));
                        Wait(4.0, c_timeGame);
                        UIDisplayMessage(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective, StringToText(""));
                        UIClearMessages(PlayerGroupSingle(lv_trigPlayer), c_messageAreaDirective);
                    }

                    if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(145)) == false)) {
                        auto7AC07FEC_g = UnitGroup(null, c_playerAny, RegionFromId(145), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto7AC07FEC_u = UnitGroupCount(auto7AC07FEC_g, c_unitCountAll);
                        for (;; auto7AC07FEC_u -= 1) {
                            auto7AC07FEC_var = UnitGroupUnitFromEnd(auto7AC07FEC_g, auto7AC07FEC_u);
                            if (auto7AC07FEC_var == null) { break; }
                            UnitRemove(auto7AC07FEC_var);
                        }
                        gv_beastMasterCreepSpawned = false;
                        break;
                    }

                }
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/CD2D3527"), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/1DB93E71"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (autoD2E936DD_val == gv_beastMasterDialogMonsterButtons[4]) {
        if ((gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] <= gv_playerCurrency[lv_trigPlayer][3]) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] > 49) && (gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2] > 0)) {
            if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] < 79)) {
                SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("BeastiaryWhat", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                gv_playerCurrency[lv_trigPlayer][3] -= gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2];
                gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1] += RandomInt(1, 2);
                libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[2], (StringExternal("Param/Value/6B317B5E") + IntToText(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
                gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] = gv_beastMasterCreepCosts[1][gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]];
                gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] = gv_beastMasterCreepCosts[2][gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]];
                libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[2], (StringExternal("Param/Value/E3021D06") + IntToText(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[4], (StringExternal("Param/Value/C761F489") + IntToText(gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[5], (StringExternal("Param/Value/7EA0300B") + IntToText(gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/A1B5F765"), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/8D729037"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else {
        lv_index = 1;
        for ( ; ( (auto49070CA3_ai >= 0 && lv_index <= auto49070CA3_ae) || (auto49070CA3_ai < 0 && lv_index >= auto49070CA3_ae) ) ; lv_index += auto49070CA3_ai ) {
            if ((lv_dialogItemUsed == gv_beastMasterDialogMonsterItems[lv_index][1])) {
                if ((gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_index][1] > 0)) {
                    gv_beastMasterPlayerCreepSelectedIndex[lv_trigPlayer] = lv_index;
                    lv_tempMonster = lv_index;
                    gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1] = gv_beastMasterCreepCosts[1][gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]];
                    gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2] = gv_beastMasterCreepCosts[2][gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1]];
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[1], (StringExternal("Param/Value/4DF0E453") + UnitTypeGetName(gv_beastMasterCreepType[lv_tempMonster])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[2], (StringExternal("Param/Value/0DA45F23") + IntToText(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][1])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[3], gv_beastMasterCreepDescription[lv_tempMonster], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[4], (StringExternal("Param/Value/2ABD4F4C") + IntToText(gv_beastMasterPlayerCreepCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[5], (StringExternal("Param/Value/C56952DF") + IntToText(gv_beastMasterPlayerCreepCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_beastMasterDialogMonsterStats[6], (StringExternal("Param/Value/91EFACBB") + IntToText(gv_beastMasterPlayerCreepLevels[lv_trigPlayer][lv_tempMonster][2])), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemModel(gv_beastMasterDialogMonsterStats[0], ((gv_beastMasterCreepType[lv_tempMonster])), PlayerGroupSingle(lv_trigPlayer));
                    PortraitWaitForLoad(PortraitGetTriggerControl(gv_beastMasterDialogMonsterStats[0]));
                    ActorSend(ActorFromDialogControl(gv_beastMasterDialogMonsterStats[0]), "SetScale 0.250000 0.100000");
                    break;
                }

            }

        }
    }
    return true;
}

trigger auto_gf_DialogUsedInvasionVendor_Trigger = null;
int auto_gf_DialogUsedInvasionVendor_lp_trigPlayer;
int auto_gf_DialogUsedInvasionVendor_lp_dialogItemUsed;

void gf_DialogUsedInvasionVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedInvasionVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedInvasionVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedInvasionVendor_Trigger == null) {
        auto_gf_DialogUsedInvasionVendor_Trigger = TriggerCreate("auto_gf_DialogUsedInvasionVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedInvasionVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedInvasionVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedInvasionVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedInvasionVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempInt;
    bool lv_quest;

    // Automatic Variable Declarations
    int autoE78814A5_val;
    const int auto41885BDB_ae = gv_questsQuestSlots;
    const int auto41885BDB_ai = 1;
    const int autoF9C9C67C_ae = 5;
    const int autoF9C9C67C_ai = 1;
    const int autoAFF110DD_ae = 154;
    const int autoAFF110DD_ai = 1;
    const int auto36206DA9_ae = 24;
    const int auto36206DA9_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;
    lv_tempInt = 4;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoE78814A5_val = lv_dialogItemUsed;
    if (autoE78814A5_val == gv_invasionDialogButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 12;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoE78814A5_val == gv_invasionDialogButtons[2]) {
        if ((gv_questsPlayerProgress[lv_trigPlayer][9] == 2) && (gv_playerCurrency[lv_trigPlayer][2] >= 1200)) {
            lv_index = 1;
            for ( ; ( (auto41885BDB_ai >= 0 && lv_index <= auto41885BDB_ae) || (auto41885BDB_ai < 0 && lv_index >= auto41885BDB_ae) ) ; lv_index += auto41885BDB_ai ) {
                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 9) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < 1)) {
                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += 1;
                }

            }
            gv_questsPlayerProgress[lv_trigPlayer][9] = 3;
            lv_quest = true;
            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[9][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
        }

        if ((((gv_playerCurrency[lv_trigPlayer][2] >= gv_invasionCurrentUpgradeCost) && (gv_invasionCurrentUpgradeCost >= 0) && (lv_quest == false)) || (lv_quest == true))) {
            if ((lv_quest == true)) {
                gv_playerCurrency[lv_trigPlayer][2] -= 1200;
                gv_invasionGoodUnitUpgradeCount += 1;
            }
            else {
                gv_playerCurrency[lv_trigPlayer][2] -= gv_invasionCurrentUpgradeCost;
                gv_invasionGoodUnitUpgradeCount += 2;
                gv_invasionFactorUpgradeCost += (0.11 + (0.0012 * gv_invasionGoodUnitUpgradeCount));
                gv_playerCurrency[lv_trigPlayer][3] += (1 + (gv_invasionGoodUnitUpgradeCount / 2));
                gv_playerStatisticsGeneral[lv_trigPlayer][6] += (1 + (gv_invasionGoodUnitUpgradeCount / 2));
                gv_playerStatisticsAchievements[lv_trigPlayer][2][2] += 1;
            }
            gv_invasionCurrentUpgradeCost = FixedToInt(((gv_invasionCurrentUpgradeCost / 150) * gv_invasionFactorUpgradeCost));
            if ((gv_generalEndGameMode == true)) {
                gv_invasionCurrentUpgradeCost *= (115 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
            }
            else {
                gv_invasionCurrentUpgradeCost *= (100 + (PlayerGroupCount(gv_generalTeamsAll) * 7));
            }
            lv_tempInt += (gv_invasionBadUnitUpgradeCount - gv_invasionGoodUnitUpgradeCount);
            lv_tempInt += FloorI((gv_invasionIndex / 4));
            DialogControlSetEnabled(gv_invasionDialogButtons[2], PlayerGroupSingle(lv_trigPlayer), false);
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[2], IntToText(gv_playerCurrency[lv_trigPlayer][2]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
            lv_index = 1;
            for ( ; ( (autoF9C9C67C_ai >= 0 && lv_index <= autoF9C9C67C_ae) || (autoF9C9C67C_ai < 0 && lv_index >= autoF9C9C67C_ae) ) ; lv_index += autoF9C9C67C_ai ) {
                if (((gv_invasionIndex * 1) >= (lv_index * 6))) {
                    lv_tempInt += 1;
                }

            }
            if ((gv_generalEndGameMode == true)) {
                lv_tempInt += 2;
            }

            gv_invasionRisk = lv_tempInt;
            if ((lv_tempInt < 1)) {
                gv_invasionRisk = 1;
            }
            else {
                if ((lv_tempInt > 6)) {
                    gv_invasionRisk = 6;
                }

            }
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/96F72C26") + IntToText(gv_invasionCurrentUpgradeCost)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[2], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_invasionDialogItems[3], gv_invasionRiskAssessment[gv_invasionRisk], PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][5], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
            libNtve_gf_SetBehaviorCount(UnitFromId(1384290393), "Upgrade", UnitFromId(1384290393), gv_invasionGoodUnitUpgradeCount);
            libNtve_gf_SetBehaviorCount(UnitFromId(70213988), "Upgrade", UnitFromId(70213988), gv_invasionGoodUnitUpgradeCount);
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(0, 2));
            lv_index = 151;
            for ( ; ( (autoAFF110DD_ai >= 0 && lv_index <= autoAFF110DD_ae) || (autoAFF110DD_ai < 0 && lv_index >= autoAFF110DD_ae) ) ; lv_index += autoAFF110DD_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
                gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
            }

            gv_itemVendorDialogItemIndex[lv_trigPlayer] = 1;
            lv_index = 1;
            for ( ; ( (auto36206DA9_ai >= 0 && lv_index <= auto36206DA9_ae) || (auto36206DA9_ai < 0 && lv_index >= auto36206DA9_ae) ) ; lv_index += auto36206DA9_ai ) {
                gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 2, ((20 + FixedToInt((gv_invasionFactorUpgradeCost * 14.0))) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + (gv_invasionIndex * (4 + (gv_invasionIndex / 2))))));
            }
            Wait(0.3, c_timeGame);
            DialogControlSetEnabled(gv_invasionDialogButtons[2], PlayerGroupSingle(lv_trigPlayer), true);
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/78C310D9"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (autoE78814A5_val == gv_invasionDialogButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        DialogSetVisible(gv_invasionDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    return true;
}

trigger auto_gf_DialogUsedItemVendor_Trigger = null;
int auto_gf_DialogUsedItemVendor_lp_trigPlayer;
int auto_gf_DialogUsedItemVendor_lp_dialogItemUsed;

void gf_DialogUsedItemVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedItemVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedItemVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedItemVendor_Trigger == null) {
        auto_gf_DialogUsedItemVendor_Trigger = TriggerCreate("auto_gf_DialogUsedItemVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedItemVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedItemVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedItemVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedItemVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[21] lv_tempStats;

    // Automatic Variable Declarations
    int auto5AFB10EA_val;
    const int auto6D1BEBAC_ae = 30;
    const int auto6D1BEBAC_ai = 1;
    const int autoD33771E6_ae = 20;
    const int autoD33771E6_ai = 1;
    const int autoB8BB8DDC_ae = 2;
    const int autoB8BB8DDC_ai = 1;
    const int auto4CC64409_ae = 20;
    const int auto4CC64409_ai = 1;
    const int auto50CE6842_ae = 2;
    const int auto50CE6842_ai = 1;
    const int auto1709D2DB_ae = 2;
    const int auto1709D2DB_ai = 1;
    const int autoFEC05C88_ae = 24;
    const int autoFEC05C88_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto5AFB10EA_val = lv_dialogItemUsed;
    if (auto5AFB10EA_val == gv_itemVendorDialogButtons[1]) {
        if ((gv_itemVendorSlotSelected[lv_trigPlayer][1] != 0)) {
            if ((gv_itemVendorCosts[lv_trigPlayer][1] <= gv_playerCurrency[lv_trigPlayer][1])) {
                lv_index = 1;
                for ( ; ( (auto6D1BEBAC_ai >= 0 && lv_index <= auto6D1BEBAC_ae) || (auto6D1BEBAC_ai < 0 && lv_index >= auto6D1BEBAC_ae) ) ; lv_index += auto6D1BEBAC_ai ) {
                    if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        gv_playerCurrency[lv_trigPlayer][1] -= gv_itemVendorCosts[lv_trigPlayer][1];
                        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_itemVendorDialogSelectedItem[1][1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_itemVendorDialogSelectedItem[1][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_itemVendorDialogSelectedItem[1][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_itemVendorDialogSelectedItem[1][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogItems[gv_itemVendorSlotSelected[lv_trigPlayer][1]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorSlotSelected[lv_trigPlayer][1]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorSlotSelected[lv_trigPlayer][1]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorSlotSelected[lv_trigPlayer][1]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        lv_index2 = 1;
                        for ( ; ( (autoD33771E6_ai >= 0 && lv_index2 <= autoD33771E6_ae) || (autoD33771E6_ai < 0 && lv_index2 >= autoD33771E6_ae) ) ; lv_index2 += autoD33771E6_ai ) {
                            gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = gv_itemVendorStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][1]][lv_index2];
                            gv_itemVendorStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][1]][lv_index2] = 0;
                        }
                        lv_index2 = 1;
                        for ( ; ( (autoB8BB8DDC_ai >= 0 && lv_index2 <= autoB8BB8DDC_ae) || (autoB8BB8DDC_ai < 0 && lv_index2 >= autoB8BB8DDC_ae) ) ; lv_index2 += autoB8BB8DDC_ai ) {
                            gv_itemVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
                            libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                            gv_itemVendorCosts[lv_trigPlayer][lv_index2] = 0;
                            libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/FB907EAD") + IntToText(gv_itemVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                        }
                        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                        gv_inventoryPackMove[lv_trigPlayer] = false;
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        return true;
                    }

                }
                gf_GeneralErrorMessage(StringExternal("Param/Value/8D38891F"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/315ADB55"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (auto5AFB10EA_val == gv_itemVendorDialogButtons[2]) {
        if ((gv_itemVendorSlotSelected[lv_trigPlayer][2] != 0)) {
            SoundPlayForPlayer(SoundLink("UI_LeaguePromotion_Gold_Impact", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
            gv_playerCurrency[lv_trigPlayer][2] += gv_itemVendorCosts[lv_trigPlayer][2];
            gv_playerStatisticsGeneral[lv_trigPlayer][5] += gv_itemVendorCosts[lv_trigPlayer][2];
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[2], IntToText(gv_playerCurrency[lv_trigPlayer][2]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_itemVendorSlotSelected[lv_trigPlayer][2]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_itemVendorSlotSelected[lv_trigPlayer][2]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_itemVendorSlotSelected[lv_trigPlayer][2]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_itemVendorSlotSelected[lv_trigPlayer][2]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            lv_index2 = 1;
            for ( ; ( (auto4CC64409_ai >= 0 && lv_index2 <= auto4CC64409_ae) || (auto4CC64409_ai < 0 && lv_index2 >= auto4CC64409_ae) ) ; lv_index2 += auto4CC64409_ai ) {
                gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2] = 0;
            }
            lv_index2 = 1;
            for ( ; ( (auto50CE6842_ai >= 0 && lv_index2 <= auto50CE6842_ae) || (auto50CE6842_ai < 0 && lv_index2 >= auto50CE6842_ae) ) ; lv_index2 += auto50CE6842_ai ) {
                gv_itemVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
                libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                gv_itemVendorCosts[lv_trigPlayer][lv_index2] = 0;
                libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/41BC696F") + IntToText(gv_itemVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
            }
            DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
            gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryPackMove[lv_trigPlayer] = false;
            gv_itemVendorCosts[lv_trigPlayer][1] = 0;
            gv_itemVendorCosts[lv_trigPlayer][2] = 0;
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        }

    }
    else if (auto5AFB10EA_val == gv_itemVendorDialogButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        lv_index2 = 1;
        for ( ; ( (auto1709D2DB_ai >= 0 && lv_index2 <= auto1709D2DB_ae) || (auto1709D2DB_ai < 0 && lv_index2 >= auto1709D2DB_ae) ) ; lv_index2 += auto1709D2DB_ai ) {
            gv_itemVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
            libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            gv_itemVendorCosts[lv_trigPlayer][lv_index2] = 0;
            libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/4A34991D") + IntToText(gv_itemVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
        }
        gv_inventoryPackMove[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_itemVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (autoFEC05C88_ai >= 0 && lv_index <= autoFEC05C88_ae) || (autoFEC05C88_ai < 0 && lv_index >= autoFEC05C88_ae) ) ; lv_index += autoFEC05C88_ai ) {
        if ((lv_dialogItemUsed == gv_itemVendorDialogItems[lv_index][3])) {
            if ((gv_itemVendorStats[lv_trigPlayer][lv_index][1] != 0)) {
                gv_itemVendorSlotSelected[lv_trigPlayer][1] = lv_index;
                gv_itemVendorCosts[lv_trigPlayer][1] = FixedToInt((gv_itemsCost[gv_itemVendorStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][1]][3]][gv_itemVendorStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][1]][4]] * 1.0));
                if ((gv_itemVendorCosts[lv_trigPlayer][1] < 0)) {
                    gv_itemVendorCosts[lv_trigPlayer][1] = 500000;
                }

                libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[1][5], (StringExternal("Param/Value/CF026D34") + IntToText(gv_itemVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[1][1], libNtve_gf_DialogItemTooltip(gv_itemVendorDialogItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[1][2], (libNtve_gf_DialogItemImage(gv_itemVendorDialogItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[1][1], (libNtve_gf_DialogItemImage(gv_itemVendorDialogItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[1][4], (libNtve_gf_DialogItemImage(gv_itemVendorDialogItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                return true;
            }

        }

    }
    return true;
}

trigger auto_gf_DialogUsedHeroVendor_Trigger = null;
int auto_gf_DialogUsedHeroVendor_lp_trigPlayer;
int auto_gf_DialogUsedHeroVendor_lp_dialogItemUsed;

void gf_DialogUsedHeroVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedHeroVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedHeroVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedHeroVendor_Trigger == null) {
        auto_gf_DialogUsedHeroVendor_Trigger = TriggerCreate("auto_gf_DialogUsedHeroVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedHeroVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedHeroVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedHeroVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedHeroVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempPoints;
    int[4] lv_tempClassTierType;
    int[6] lv_tempStatBasis;

    // Automatic Variable Declarations
    int autoC4D5E5A1_val;
    const int auto9352658E_ae = 154;
    const int auto9352658E_ai = 1;
    const int autoB573E677_ae = 3;
    const int autoB573E677_ai = 1;
    const int auto491F04BD_ae = 10;
    const int auto491F04BD_ai = 1;
    const int auto0880D91B_ae = 154;
    const int auto0880D91B_ai = 1;
    const int auto17E637D5_ae = 5;
    const int auto17E637D5_ai = 1;
    int auto7BB4E6B1_ae;
    const int auto7BB4E6B1_ai = 1;
    const int auto148D579F_ae = 5;
    const int auto148D579F_ai = 1;
    int autoBBB941E6_ae;
    const int autoBBB941E6_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoC4D5E5A1_val = lv_dialogItemUsed;
    if (autoC4D5E5A1_val == gv_heroVendorDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 11;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDialogMainButtons[2]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        DialogSetVisible(gv_heroVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDialogMainButtons[3]) {
        if ((gv_heroVendorSkillCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]] <= gv_playerCurrency[lv_trigPlayer][1])) {
            lv_index2 = 0;
            lv_index = 152;
            for ( ; ( (auto9352658E_ai >= 0 && lv_index <= auto9352658E_ae) || (auto9352658E_ai < 0 && lv_index >= auto9352658E_ae) ) ; lv_index += auto9352658E_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] >= 2)) {
                    lv_index2 += 1;
                }

            }
            if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] < 30) && (gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] < CeilingI(((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 2) + lv_index2)))) {
                SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                DialogControlSetEnabled(gv_heroVendorDialogMainButtons[3], PlayerGroupSingle(lv_trigPlayer), false);
                gv_playerCurrency[lv_trigPlayer][1] -= gv_heroVendorSkillCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]];
                gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] += 1;
                lv_index = 1;
                for ( ; ( (autoB573E677_ai >= 0 && lv_index <= autoB573E677_ae) || (autoB573E677_ai < 0 && lv_index >= autoB573E677_ae) ) ; lv_index += autoB573E677_ai ) {
                    lv_tempClassTierType[lv_index] = gv_playerHeroHeroClassTierType[lv_trigPlayer][lv_index];
                }
                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                lv_index = 1;
                for ( ; ( (auto491F04BD_ai >= 0 && lv_index <= auto491F04BD_ae) || (auto491F04BD_ai < 0 && lv_index >= auto491F04BD_ae) ) ; lv_index += auto491F04BD_ai ) {
                    if ((gv_heroesAbilitiesUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index] != null)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, gv_heroesAbilitiesUpgrades[lv_tempClassTierType[1]][lv_tempClassTierType[2]][lv_tempClassTierType[3]][lv_index], gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]);
                    }

                }
                libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[1], (StringExternal("Param/Value/C9D731D2") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]) + (StringExternal("Param/Value/0DEC81D6") + IntToText((25 + lv_index2))))), PlayerGroupSingle(lv_trigPlayer));
                lv_index2 = 0;
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[3], (StringExternal("Param/Value/3D7ADA73") + (IntToText(gv_heroVendorSkillCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                Wait(0.05, c_timeGame);
                DialogControlSetEnabled(gv_heroVendorDialogMainButtons[3], PlayerGroupSingle(lv_trigPlayer), true);
                lv_index = 152;
                for ( ; ( (auto0880D91B_ai >= 0 && lv_index <= auto0880D91B_ae) || (auto0880D91B_ai < 0 && lv_index >= auto0880D91B_ae) ) ; lv_index += auto0880D91B_ai ) {
                    if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 2) && (gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] < 30) && (gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][1] > (25 + (lv_index - 151)))) {
                        gv_questsPlayerProgress[lv_trigPlayer][lv_index] = 3;
                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/3C4AD9CC"), PlayerGroupSingle(lv_trigPlayer));
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    }

                }
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/BE712F6C"), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/16BB2827"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDialogMainButtons[4]) {
        if ((gv_heroVendorStatCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]] <= gv_playerCurrency[lv_trigPlayer][1])) {
            if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] < 100)) {
                SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                DialogControlSetEnabled(gv_heroVendorDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
                lv_index = 1;
                for ( ; ( (auto17E637D5_ai >= 0 && lv_index <= auto17E637D5_ae) || (auto17E637D5_ai < 0 && lv_index >= auto17E637D5_ae) ) ; lv_index += auto17E637D5_ai ) {
                    if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] >= gv_heroVendorStatTiers[lv_index][1])) {
                        lv_tempPoints = gv_heroVendorStatTiers[lv_index][2];
                    }

                }
                gv_playerCurrency[lv_trigPlayer][1] -= gv_heroVendorStatCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]];
                gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] += 1;
                if ((gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] > gv_playerStatisticsAchievements[lv_trigPlayer][32][2])) {
                    gv_playerStatisticsAchievements[lv_trigPlayer][32][2] = gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2];
                }

                gv_playerHeroHeroStats[lv_trigPlayer][0] += lv_tempPoints;
                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[2], (StringExternal("Param/Value/3C194A6B") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]) + StringExternal("Param/Value/E5C1FEE8"))), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[4], (StringExternal("Param/Value/23D8E55B") + (IntToText(gv_heroVendorStatCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[0], (StringExternal("Param/Value/BF087B65") + IntToText(lv_tempPoints)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[0][0], (StringExternal("Param/Value/D69A56A8") + (IntToText(gv_playerHeroHeroStats[lv_trigPlayer][0]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
                Wait(0.0, c_timeGame);
                DialogControlSetEnabled(gv_heroVendorDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), true);
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/5C531509"), PlayerGroupSingle(lv_trigPlayer));
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/6043D1C4"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDestroyDialogMainButtons[1]) {
        DialogControlSetEnabled(gv_heroVendorDestroyDialogMainButtons[1], PlayerGroupSingle(lv_trigPlayer), false);
        SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
        if ((gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] == true) && (gv_playerStatisticsGeneral[lv_trigPlayer][28] > 20)) {
            gv_playerStatisticsGeneral[lv_trigPlayer][28] -= 1;
            gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = false;
            DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
            auto7BB4E6B1_ae = gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2];
            lv_index = 1;
            for ( ; ( (auto7BB4E6B1_ai >= 0 && lv_index <= auto7BB4E6B1_ae) || (auto7BB4E6B1_ai < 0 && lv_index >= auto7BB4E6B1_ae) ) ; lv_index += auto7BB4E6B1_ai ) {
                gv_playerCurrency[lv_trigPlayer][1] += gv_heroVendorStatCosts[lv_index];
            }
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
        }

        gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2] = 0;
        gv_playerHeroHeroStats[lv_trigPlayer][0] = 0;
        gf_HeroStatsIncreased(lv_trigPlayer, 0, false);
        lv_index = 1;
        for ( ; ( (auto148D579F_ai >= 0 && lv_index <= auto148D579F_ae) || (auto148D579F_ai < 0 && lv_index >= auto148D579F_ae) ) ; lv_index += auto148D579F_ai ) {
            lv_tempStatBasis[lv_index] = (gv_playerHeroHeroStats[lv_trigPlayer][lv_index] - gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index]);
            gv_playerHeroHeroStats[lv_trigPlayer][lv_index] = lv_tempStatBasis[lv_index];
            gv_playerHeroHeroStatsInvested[lv_trigPlayer][lv_index] = 0;
            autoBBB941E6_ae = lv_tempStatBasis[lv_index];
            lv_index2 = 1;
            for ( ; ( (autoBBB941E6_ai >= 0 && lv_index2 <= autoBBB941E6_ae) || (autoBBB941E6_ai < 0 && lv_index2 >= autoBBB941E6_ae) ) ; lv_index2 += autoBBB941E6_ai ) {
                gf_HeroStatsIncreased(lv_trigPlayer, lv_index, false);
            }
        }
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[2], (StringExternal("Param/Value/2FBCD8A2") + (IntToText(gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]) + StringExternal("Param/Value/F88A6C1C"))), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[4], (StringExternal("Param/Value/7C099F06") + (IntToText(gv_heroVendorStatCosts[gv_playerHeroHeroSkillLvlStatCost[lv_trigPlayer][2]]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroVendorDialogSkillItems[0], (StringExternal("Param/Value/7ECE9979") + IntToText(2)), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemText(gv_heroStatsDialogHeroStats[0][0], (StringExternal("Param/Value/39B833D2") + (IntToText(gv_playerHeroHeroStats[lv_trigPlayer][0]) + StringToText(""))), PlayerGroupSingle(lv_trigPlayer));
        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        Wait(0.0, c_timeGame);
        DialogControlSetEnabled(gv_heroVendorDestroyDialogMainButtons[1], PlayerGroupSingle(lv_trigPlayer), true);
        DialogSetVisible(gv_heroVendorDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDialogMainButtons[5]) {
        DialogSetVisible(gv_heroVendorDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDestroyDialogMainButtons[2]) {
        DialogSetVisible(gv_heroVendorDestroyDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoC4D5E5A1_val == gv_heroVendorDestroyDialogMainButtons[3]) {
        if ((gv_playerStatisticsGeneral[lv_trigPlayer][28] > 20)) {
            if ((gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] == true)) {
                gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = false;
                DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), false);
            }
            else {
                gv_heroVendorDestroyDialogFreeRespec[lv_trigPlayer] = true;
                DialogControlSetVisible(gv_heroVendorDestroyDialogMainButtons[4], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/EC4C9963"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_DialogUsedHonorVendor_Trigger = null;
int auto_gf_DialogUsedHonorVendor_lp_trigPlayer;
int auto_gf_DialogUsedHonorVendor_lp_dialogItemUsed;

void gf_DialogUsedHonorVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedHonorVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedHonorVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedHonorVendor_Trigger == null) {
        auto_gf_DialogUsedHonorVendor_Trigger = TriggerCreate("auto_gf_DialogUsedHonorVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedHonorVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedHonorVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedHonorVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedHonorVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[21] lv_tempStats;
    fixed lv_tempCost;

    // Automatic Variable Declarations
    int autoC7667D36_val;
    const int autoA3BAAF9D_ae = 35;
    const int autoA3BAAF9D_ai = 1;
    int auto6B10CA73_ae;
    const int auto6B10CA73_ai = 1;
    const int auto606AFF72_ae = 5;
    const int auto606AFF72_ai = 1;
    const int auto4B39DB8F_ae = 20;
    const int auto4B39DB8F_ai = 1;
    const int auto2DD0AE82_ae = 5;
    const int auto2DD0AE82_ai = 1;
    const int auto97CA30CE_ae = 20;
    const int auto97CA30CE_ai = 1;
    const int autoAF560412_ae = 20;
    const int autoAF560412_ai = 1;
    const int auto7D802AE9_ae = 5;
    const int auto7D802AE9_ai = 1;
    const int auto2A911C14_ae = 5;
    const int auto2A911C14_ai = 1;
    int autoE08C664B_ae;
    const int autoE08C664B_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoC7667D36_val = lv_dialogItemUsed;
    if (autoC7667D36_val == gv_itemHonorDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 16;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoC7667D36_val == gv_itemHonorDialogMainButtons[2]) {
        if ((gv_itemHonorDialogGeneratedValues[lv_trigPlayer][1] != 0)) {
            if ((gv_itemHonorDialogCosts[lv_trigPlayer] <= gv_playerCurrency[lv_trigPlayer][3])) {
                lv_index = 1;
                for ( ; ( (autoA3BAAF9D_ai >= 0 && lv_index <= autoA3BAAF9D_ae) || (autoA3BAAF9D_ai < 0 && lv_index >= autoA3BAAF9D_ae) ) ; lv_index += autoA3BAAF9D_ai ) {
                    if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        gv_playerCurrency[lv_trigPlayer][3] -= gv_itemHonorDialogCosts[lv_trigPlayer];
                        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
                        auto6B10CA73_ae = gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4];
                        lv_index2 = (gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4] - 1);
                        for ( ; ( (auto6B10CA73_ai >= 0 && lv_index2 <= auto6B10CA73_ae) || (auto6B10CA73_ai < 0 && lv_index2 >= auto6B10CA73_ae) ) ; lv_index2 += auto6B10CA73_ai ) {
                            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][(lv_index2 + 4)] = RandomInt(1, 16);
                        }
                        gf_BankItemLoading(lv_trigPlayer, 5, lv_index);
                        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        lv_index = 1;
                        for ( ; ( (auto606AFF72_ai >= 0 && lv_index <= auto606AFF72_ae) || (auto606AFF72_ai < 0 && lv_index >= auto606AFF72_ae) ) ; lv_index += auto606AFF72_ai ) {
                            gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] = 0;
                            DialogControlClearSelectedItem(gv_itemHonorDialogDropdown[lv_index], PlayerGroupSingle(lv_trigPlayer));
                        }
                        lv_index = 1;
                        for ( ; ( (auto4B39DB8F_ai >= 0 && lv_index <= auto4B39DB8F_ae) || (auto4B39DB8F_ai < 0 && lv_index >= auto4B39DB8F_ae) ) ; lv_index += auto4B39DB8F_ai ) {
                            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_index] = 0;
                        }
                        libNtve_gf_SetDialogItemTooltip(gv_itemHonorDialogItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        gv_itemHonorDialogCosts[lv_trigPlayer] = 0;
                        libNtve_gf_SetDialogItemText(gv_itemHonorDialogItem[3], (StringExternal("Param/Value/1CCFEF25") + IntToText(gv_itemHonorDialogCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                        gv_inventoryPackMove[lv_trigPlayer] = false;
                        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        return true;
                    }

                }
                gf_GeneralErrorMessage(StringExternal("Param/Value/E37D9E7A"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/3F677E54"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (autoC7667D36_val == gv_itemHonorDialogMainButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        lv_index = 1;
        for ( ; ( (auto2DD0AE82_ai >= 0 && lv_index <= auto2DD0AE82_ae) || (auto2DD0AE82_ai < 0 && lv_index >= auto2DD0AE82_ae) ) ; lv_index += auto2DD0AE82_ai ) {
            gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] = 0;
            DialogControlClearSelectedItem(gv_itemHonorDialogDropdown[lv_index], PlayerGroupSingle(lv_trigPlayer));
        }
        lv_index = 1;
        for ( ; ( (auto97CA30CE_ai >= 0 && lv_index <= auto97CA30CE_ae) || (auto97CA30CE_ai < 0 && lv_index >= auto97CA30CE_ae) ) ; lv_index += auto97CA30CE_ai ) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_index] = 0;
        }
        libNtve_gf_SetDialogItemTooltip(gv_itemHonorDialogItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemHonorDialogItem[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        gv_itemHonorDialogCosts[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemText(gv_itemHonorDialogItem[3], (StringExternal("Param/Value/3E4BAEBC") + IntToText(gv_itemHonorDialogCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
        gv_inventoryPackMove[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_itemHonorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else if (autoC7667D36_val == gv_itemHonorDialogMainButtons[4]) {
        lv_index = 1;
        for ( ; ( (autoAF560412_ai >= 0 && lv_index <= autoAF560412_ae) || (autoAF560412_ai < 0 && lv_index >= autoAF560412_ae) ) ; lv_index += autoAF560412_ai ) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][lv_index] = 0;
        }
        lv_index = 1;
        for ( ; ( (auto7D802AE9_ai >= 0 && lv_index <= auto7D802AE9_ae) || (auto7D802AE9_ai < 0 && lv_index >= auto7D802AE9_ae) ) ; lv_index += auto7D802AE9_ai ) {
            gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] = (DialogControlGetSelectedItem(gv_itemHonorDialogDropdown[lv_index], lv_trigPlayer) + 0);
            if ((lv_index >= 4) && (gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] > 0)) {
                gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] = (DialogControlGetSelectedItem(gv_itemHonorDialogDropdown[lv_index], lv_trigPlayer) - 1);
            }

        }
        if (((gv_itemHonorDialogSelectedValues[lv_trigPlayer][1] == 0) || (gv_itemHonorDialogSelectedValues[lv_trigPlayer][2] == 0) || (gv_itemHonorDialogSelectedValues[lv_trigPlayer][3] == 0))) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/EFF6DC3C"), PlayerGroupSingle(lv_trigPlayer));
            return true;
        }

        gv_itemHonorDialogGeneratedValues[lv_trigPlayer][1] = gv_itemHonorDialogSelectedValues[lv_trigPlayer][1];
        if ((gv_itemHonorDialogSelectedValues[lv_trigPlayer][1] == 1) && (gv_itemHonorDialogSelectedValues[lv_trigPlayer][2] == 3)) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2] = 2;
        }
        else {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2] = gv_itemHonorDialogSelectedValues[lv_trigPlayer][2];
        }
        if ((gv_itemHonorDialogSelectedValues[lv_trigPlayer][1] == 1)) {
            if ((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 1)) {
                gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2] += 2;
            }

            if ((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 3)) {
                gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2] += 4;
            }

        }

        if ((gv_itemHonorDialogSelectedValues[lv_trigPlayer][1] >= 7)) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2] = 1;
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][5] = RandomInt(1, 16);
        }
        else {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][5] = gv_itemsBaseSlotStat[gv_itemHonorDialogGeneratedValues[lv_trigPlayer][1]][gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2]];
        }
        gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4] = 3;
        lv_index = 4;
        for ( ; ( (auto2A911C14_ai >= 0 && lv_index <= auto2A911C14_ae) || (auto2A911C14_ai < 0 && lv_index >= auto2A911C14_ae) ) ; lv_index += auto2A911C14_ai ) {
            if ((gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index] > 0)) {
                gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4] += 1;
                gv_itemHonorDialogGeneratedValues[lv_trigPlayer][(lv_index + 2)] = gv_itemHonorDialogSelectedValues[lv_trigPlayer][lv_index];
            }

        }
        autoE08C664B_ae = gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4];
        lv_index = (gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4] - 1);
        for ( ; ( (autoE08C664B_ai >= 0 && lv_index <= autoE08C664B_ae) || (autoE08C664B_ai < 0 && lv_index >= autoE08C664B_ae) ) ; lv_index += autoE08C664B_ai ) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][(lv_index + 4)] = 20;
        }
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < 4)) {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][3] = 1;
        }
        else {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][3] = FloorI((((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + 0) / 4) + (gv_itemHonorDialogSelectedValues[lv_trigPlayer][3] - 1)));
        }
        lv_tempCost = FixedToInt(gv_itemsHonorCost[gv_itemHonorDialogGeneratedValues[lv_trigPlayer][3]][(gv_itemHonorDialogGeneratedValues[lv_trigPlayer][4] - 2)]);
        lv_tempCost *= (1.0 + (gv_itemHonorDialogSelectedValues[lv_trigPlayer][3] * (0.12 + (gv_itemHonorDialogSelectedValues[lv_trigPlayer][3] * 0.12))));
        if ((gv_itemHonorDialogSelectedValues[lv_trigPlayer][1] >= 7)) {
            lv_tempCost *= 1.2;
        }
        else {
            gv_itemHonorDialogGeneratedValues[lv_trigPlayer][5] = gv_itemsBaseSlotStat[gv_itemHonorDialogGeneratedValues[lv_trigPlayer][1]][gv_itemHonorDialogGeneratedValues[lv_trigPlayer][2]];
        }
        gv_itemHonorDialogCosts[lv_trigPlayer] = FixedToInt(lv_tempCost);
        libNtve_gf_SetDialogItemText(gv_itemHonorDialogItem[3], (StringExternal("Param/Value/CAD96B7F") + IntToText(gv_itemHonorDialogCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
        gf_BankItemLoading(lv_trigPlayer, 4, 0);
    }
    else {
    }
    return true;
}

trigger auto_gf_DialogUsedPotionVendor_Trigger = null;
int auto_gf_DialogUsedPotionVendor_lp_trigPlayer;
int auto_gf_DialogUsedPotionVendor_lp_dialogItemUsed;

void gf_DialogUsedPotionVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedPotionVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedPotionVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedPotionVendor_Trigger == null) {
        auto_gf_DialogUsedPotionVendor_Trigger = TriggerCreate("auto_gf_DialogUsedPotionVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedPotionVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedPotionVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedPotionVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedPotionVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    text lv_tempText;

    // Automatic Variable Declarations
    int autoBA2489DF_val;
    const int autoFD7A4F9C_ae = 6;
    const int autoFD7A4F9C_ai = 1;
    const int auto14829ECC_ae = gv_questsQuestSlots;
    const int auto14829ECC_ai = 1;
    const int autoA4BCCFD0_ae = 9;
    const int autoA4BCCFD0_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoBA2489DF_val = lv_dialogItemUsed;
    if (autoBA2489DF_val == gv_potionVendorDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 19;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
        return true;
    }
    else if (autoBA2489DF_val == gv_potionVendorDialogMainButtons[2]) {
        if ((gv_potionVendorSlotSelected[lv_trigPlayer] >= 1)) {
            if ((gv_potionVendorCosts[lv_trigPlayer] <= gv_playerCurrency[lv_trigPlayer][1])) {
                SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                gv_playerCurrency[lv_trigPlayer][1] -= gv_potionVendorCosts[lv_trigPlayer];
                libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                lv_index2 = 1;
                for ( ; ( (autoFD7A4F9C_ai >= 0 && lv_index2 <= autoFD7A4F9C_ae) || (autoFD7A4F9C_ai < 0 && lv_index2 >= autoFD7A4F9C_ae) ) ; lv_index2 += autoFD7A4F9C_ai ) {
                    gv_inventoryPotionStats[lv_trigPlayer][lv_index2] = gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][lv_index2];
                    gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][lv_index2] = 0;
                }
                gf_ItemsGeneratePotion(lv_trigPlayer, 2, 0);
                gv_potionVendorCosts[lv_trigPlayer] = 0;
                libNtve_gf_SetDialogItemText(gv_potionVendorDialogSelectedItem[0], (StringExternal("Param/Value/4870CA26") + IntToText(gv_potionVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_potionVendorDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_potionVendorDialogItems[gv_potionVendorSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogItems[gv_potionVendorSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogItems[gv_potionVendorSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                gv_potionVendorSlotSelected[lv_trigPlayer] = 0;
                if ((gv_questsPlayerProgress[lv_trigPlayer][129] == 2)) {
                    lv_index = 1;
                    for ( ; ( (auto14829ECC_ai >= 0 && lv_index <= auto14829ECC_ae) || (auto14829ECC_ai < 0 && lv_index >= auto14829ECC_ae) ) ; lv_index += auto14829ECC_ai ) {
                        if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 129)) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += 1;
                            lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]) + StringExternal("Param/Value/0A778BDA") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1]) + StringExternal("Param/Value/CFAE349C") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]));
                            gf_GeneralQuestMessage(lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                            if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 129)) {
                                    gv_questsPlayerProgress[lv_trigPlayer][129] = 3;
                                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[129][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                }

                                SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                gf_GeneralQuestMessage(StringExternal("Param/Value/1EFEAC79"), PlayerGroupSingle(lv_trigPlayer));
                            }

                        }

                    }
                }

                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                return true;
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/839B14BF"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (autoBA2489DF_val == gv_potionVendorDialogMainButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_potionVendorCosts[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemText(gv_potionVendorDialogSelectedItem[0], (StringExternal("Param/Value/D2D4A763") + IntToText(gv_potionVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
        gv_potionVendorSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_potionVendorDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        DialogSetVisible(gv_potionVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        return true;
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (autoA4BCCFD0_ai >= 0 && lv_index <= autoA4BCCFD0_ae) || (autoA4BCCFD0_ai < 0 && lv_index >= autoA4BCCFD0_ae) ) ; lv_index += autoA4BCCFD0_ai ) {
        if ((lv_dialogItemUsed == gv_potionVendorDialogItems[lv_index][3])) {
            if ((gv_potionVendorStats[lv_trigPlayer][lv_index][1] != 0)) {
                gv_potionVendorSlotSelected[lv_trigPlayer] = lv_index;
                gv_potionVendorCosts[lv_trigPlayer] = FixedToInt((gv_potionCost[gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][6]][gv_potionVendorStats[lv_trigPlayer][gv_potionVendorSlotSelected[lv_trigPlayer]][2]] * 1.0));
                libNtve_gf_SetDialogItemText(gv_potionVendorDialogSelectedItem[0], (StringExternal("Param/Value/DFB42B40") + IntToText(gv_potionVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_potionVendorDialogSelectedItem[1], libNtve_gf_DialogItemTooltip(gv_potionVendorDialogItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[2], (libNtve_gf_DialogItemImage(gv_potionVendorDialogItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_potionVendorDialogSelectedItem[1], (libNtve_gf_DialogItemImage(gv_potionVendorDialogItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                return true;
            }

        }

    }
    return true;
}

trigger auto_gf_DialogUsedGlyphVendor_Trigger = null;
int auto_gf_DialogUsedGlyphVendor_lp_trigPlayer;
int auto_gf_DialogUsedGlyphVendor_lp_dialogItemUsed;

void gf_DialogUsedGlyphVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedGlyphVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedGlyphVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedGlyphVendor_Trigger == null) {
        auto_gf_DialogUsedGlyphVendor_Trigger = TriggerCreate("auto_gf_DialogUsedGlyphVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedGlyphVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedGlyphVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedGlyphVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedGlyphVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto02D0558A_val;
    const int auto45B8A971_ae = 30;
    const int auto45B8A971_ai = 1;
    const int autoCD234928_ae = 20;
    const int autoCD234928_ai = 1;
    const int auto1BBE3273_ae = 8;
    const int auto1BBE3273_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto02D0558A_val = lv_dialogItemUsed;
    if (auto02D0558A_val == gv_glyphVendorDialogButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 21;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
        return true;
    }
    else if (auto02D0558A_val == gv_glyphVendorDialogButtons[2]) {
        if ((gv_glyphVendorSlotSelected[lv_trigPlayer] >= 1)) {
            if ((gv_glyphVendorCosts[lv_trigPlayer] <= gv_playerCurrency[lv_trigPlayer][1])) {
                lv_index = 1;
                for ( ; ( (auto45B8A971_ai >= 0 && lv_index <= auto45B8A971_ae) || (auto45B8A971_ai < 0 && lv_index >= auto45B8A971_ae) ) ; lv_index += auto45B8A971_ai ) {
                    if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        gv_playerCurrency[lv_trigPlayer][1] -= gv_glyphVendorCosts[lv_trigPlayer];
                        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                        lv_index2 = 1;
                        for ( ; ( (autoCD234928_ai >= 0 && lv_index2 <= autoCD234928_ae) || (autoCD234928_ai < 0 && lv_index2 >= autoCD234928_ae) ) ; lv_index2 += autoCD234928_ai ) {
                            gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = gv_glyphVendorStats[lv_trigPlayer][gv_glyphVendorSlotSelected[lv_trigPlayer]][lv_index2];
                            gv_glyphVendorStats[lv_trigPlayer][gv_glyphVendorSlotSelected[lv_trigPlayer]][lv_index2] = 0;
                        }
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_glyphVendorDialogSelectedItem[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogSelectedItem[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogSelectedItem[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogSelectedItem[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        gv_glyphVendorCosts[lv_trigPlayer] = 0;
                        libNtve_gf_SetDialogItemText(gv_glyphVendorDialogSelectedItem[0], (StringExternal("Param/Value/D0BA656F") + IntToText(gv_glyphVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_glyphVendorDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_glyphVendorDialogItems[gv_glyphVendorSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorSlotSelected[lv_trigPlayer]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        gv_glyphVendorSlotSelected[lv_trigPlayer] = 0;
                        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                        gv_inventoryPackMove[lv_trigPlayer] = false;
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        return true;
                    }

                }
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/610EAAA7"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (auto02D0558A_val == gv_glyphVendorDialogButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_glyphVendorCosts[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemText(gv_glyphVendorDialogSelectedItem[0], (StringExternal("Param/Value/4CFEA12A") + IntToText(gv_glyphVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
        gv_glyphVendorSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_glyphVendorDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        gv_inventoryPackMove[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_glyphVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
        return true;
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto1BBE3273_ai >= 0 && lv_index <= auto1BBE3273_ae) || (auto1BBE3273_ai < 0 && lv_index >= auto1BBE3273_ae) ) ; lv_index += auto1BBE3273_ai ) {
        if ((lv_dialogItemUsed == gv_glyphVendorDialogItems[lv_index][3])) {
            if ((gv_glyphVendorStats[lv_trigPlayer][lv_index][1] != 0)) {
                gv_glyphVendorSlotSelected[lv_trigPlayer] = lv_index;
                gv_glyphVendorCosts[lv_trigPlayer] = FixedToInt((gv_itemsCost[gv_glyphVendorStats[lv_trigPlayer][gv_glyphVendorSlotSelected[lv_trigPlayer]][3]][gv_glyphVendorStats[lv_trigPlayer][gv_glyphVendorSlotSelected[lv_trigPlayer]][4]] * 1.0));
                gv_glyphVendorCosts[lv_trigPlayer] *= 3;
                libNtve_gf_SetDialogItemText(gv_glyphVendorDialogSelectedItem[0], (StringExternal("Param/Value/AB64BD0F") + IntToText(gv_glyphVendorCosts[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_glyphVendorDialogSelectedItem[1], libNtve_gf_DialogItemTooltip(gv_glyphVendorDialogItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[2], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[1], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogSelectedItem[4], (libNtve_gf_DialogItemImage(gv_glyphVendorDialogItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                return true;
            }

        }

    }
    return true;
}

trigger auto_gf_DialogUsedLegendaryVendor_Trigger = null;
int auto_gf_DialogUsedLegendaryVendor_lp_trigPlayer;
int auto_gf_DialogUsedLegendaryVendor_lp_dialogItemUsed;

void gf_DialogUsedLegendaryVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedLegendaryVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedLegendaryVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedLegendaryVendor_Trigger == null) {
        auto_gf_DialogUsedLegendaryVendor_Trigger = TriggerCreate("auto_gf_DialogUsedLegendaryVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedLegendaryVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedLegendaryVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedLegendaryVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedLegendaryVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto5222FEC3_val;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto5222FEC3_val = lv_dialogItemUsed;
    if (auto5222FEC3_val == gv_legendaryDialogButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 22;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
        return true;
    }
    else if (auto5222FEC3_val == gv_legendaryDialogButtons[2]) {
        DialogSetVisible(gv_legendaryDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else if (auto5222FEC3_val == gv_legendaryDialogButtons[3]) {
        if ((gv_playerCurrency[lv_trigPlayer][3] >= gv_legendaryCost)) {
            gv_playerCurrency[lv_trigPlayer][3] -= gv_legendaryCost;
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[lv_trigPlayer][3]), PlayerGroupSingle(lv_trigPlayer));
            gv_legendaryCost += FixedToInt((500.0 + (gv_legendaryCost * 0.1)));
            libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[0][0], (StringExternal("Param/Value/E984CCB8") + IntToText(gv_legendaryCost)), PlayerGroupAll());
            gf_DungeonLegendaryUpdate(1);
            gf_DungeonLegendaryUpdate(2);
        }

    }
    else {
    }
    return true;
}

trigger auto_gf_DialogUsedRaritiesVendor_Trigger = null;
int auto_gf_DialogUsedRaritiesVendor_lp_trigPlayer;
int auto_gf_DialogUsedRaritiesVendor_lp_dialogItemUsed;

void gf_DialogUsedRaritiesVendor (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedRaritiesVendor_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedRaritiesVendor_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedRaritiesVendor_Trigger == null) {
        auto_gf_DialogUsedRaritiesVendor_Trigger = TriggerCreate("auto_gf_DialogUsedRaritiesVendor_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedRaritiesVendor_Trigger, false, false);
}

bool auto_gf_DialogUsedRaritiesVendor_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedRaritiesVendor_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedRaritiesVendor_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[21] lv_tempStats;

    // Automatic Variable Declarations
    int auto0FE5A4EA_val;
    const int auto03E51CD1_ae = 30;
    const int auto03E51CD1_ai = 1;
    const int auto38F50228_ae = 20;
    const int auto38F50228_ai = 1;
    const int auto8DFAF625_ae = 2;
    const int auto8DFAF625_ai = 1;
    const int autoF7E03C6D_ae = 20;
    const int autoF7E03C6D_ai = 1;
    const int auto43A65BF8_ae = 2;
    const int auto43A65BF8_ai = 1;
    const int autoD08DC77D_ae = 2;
    const int autoD08DC77D_ai = 1;
    const int auto7F49A266_ae = 9;
    const int auto7F49A266_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto0FE5A4EA_val = lv_dialogItemUsed;
    if (auto0FE5A4EA_val == gv_raritiesVendorDialogButtons[1]) {
        if ((gv_raritiesVendorSlotSelected[lv_trigPlayer][1] != 0)) {
            if ((gv_raritiesVendorCosts[lv_trigPlayer][1] <= gv_playerCurrency[lv_trigPlayer][1])) {
                lv_index = 1;
                for ( ; ( (auto03E51CD1_ai >= 0 && lv_index <= auto03E51CD1_ae) || (auto03E51CD1_ai < 0 && lv_index >= auto03E51CD1_ae) ) ; lv_index += auto03E51CD1_ai ) {
                    if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        gv_playerCurrency[lv_trigPlayer][1] -= gv_raritiesVendorCosts[lv_trigPlayer][1];
                        libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[1], IntToText(gv_playerCurrency[lv_trigPlayer][1]), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_raritiesVendorDialogSelectedItem[1][1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogSelectedItem[1][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogSelectedItem[1][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogSelectedItem[1][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        lv_index2 = 1;
                        for ( ; ( (auto38F50228_ai >= 0 && lv_index2 <= auto38F50228_ae) || (auto38F50228_ai < 0 && lv_index2 >= auto38F50228_ae) ) ; lv_index2 += auto38F50228_ai ) {
                            gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = gv_raritiesVendorStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][lv_index2];
                            gv_raritiesVendorStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][lv_index2] = 0;
                        }
                        lv_index2 = 1;
                        for ( ; ( (auto8DFAF625_ai >= 0 && lv_index2 <= auto8DFAF625_ae) || (auto8DFAF625_ai < 0 && lv_index2 >= auto8DFAF625_ae) ) ; lv_index2 += auto8DFAF625_ai ) {
                            gv_raritiesVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
                            libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                            gv_raritiesVendorCosts[lv_trigPlayer][lv_index2] = 0;
                            libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/4CCD4793") + IntToText(gv_raritiesVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                        }
                        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                        gv_inventoryPackMove[lv_trigPlayer] = false;
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        return true;
                    }

                }
                gf_GeneralErrorMessage(StringExternal("Param/Value/2F63EE7D"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/C47FA05F"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (auto0FE5A4EA_val == gv_raritiesVendorDialogButtons[2]) {
        if ((gv_raritiesVendorSlotSelected[lv_trigPlayer][2] != 0)) {
            SoundPlayForPlayer(SoundLink("UI_LeaguePromotion_Gold_Impact", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
            gv_playerCurrency[lv_trigPlayer][2] += gv_raritiesVendorCosts[lv_trigPlayer][2];
            gv_playerStatisticsGeneral[lv_trigPlayer][5] += gv_raritiesVendorCosts[lv_trigPlayer][2];
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[2], IntToText(gv_playerCurrency[lv_trigPlayer][2]), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            lv_index2 = 1;
            for ( ; ( (autoF7E03C6D_ai >= 0 && lv_index2 <= autoF7E03C6D_ae) || (autoF7E03C6D_ai < 0 && lv_index2 >= autoF7E03C6D_ae) ) ; lv_index2 += autoF7E03C6D_ai ) {
                gv_inventoryPackStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][lv_index2] = 0;
            }
            lv_index2 = 1;
            for ( ; ( (auto43A65BF8_ai >= 0 && lv_index2 <= auto43A65BF8_ae) || (auto43A65BF8_ai < 0 && lv_index2 >= auto43A65BF8_ae) ) ; lv_index2 += auto43A65BF8_ai ) {
                gv_raritiesVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
                libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                gv_raritiesVendorCosts[lv_trigPlayer][lv_index2] = 0;
                libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/281BA515") + IntToText(gv_raritiesVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
            }
            DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
            gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryPackMove[lv_trigPlayer] = false;
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        }

    }
    else if (auto0FE5A4EA_val == gv_raritiesVendorDialogButtons[3]) {
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        lv_index2 = 1;
        for ( ; ( (autoD08DC77D_ai >= 0 && lv_index2 <= autoD08DC77D_ae) || (autoD08DC77D_ai < 0 && lv_index2 >= autoD08DC77D_ae) ) ; lv_index2 += autoD08DC77D_ai ) {
            gv_raritiesVendorSlotSelected[lv_trigPlayer][lv_index2] = 0;
            libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[lv_index2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[lv_index2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            gv_raritiesVendorCosts[lv_trigPlayer][lv_index2] = 0;
            libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[lv_index2][5], (StringExternal("Param/Value/4A1188F4") + IntToText(gv_itemVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
        }
        gv_inventoryPackMove[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_raritiesVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto7F49A266_ai >= 0 && lv_index <= auto7F49A266_ae) || (auto7F49A266_ai < 0 && lv_index >= auto7F49A266_ae) ) ; lv_index += auto7F49A266_ai ) {
        if ((lv_dialogItemUsed == gv_raritiesVendorDialogItems[lv_index][3])) {
            if ((gv_raritiesVendorStats[lv_trigPlayer][lv_index][1] != 0)) {
                gv_raritiesVendorSlotSelected[lv_trigPlayer][1] = lv_index;
                gv_raritiesVendorCosts[lv_trigPlayer][1] = FixedToInt((gv_itemsCost[gv_raritiesVendorStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][3]][gv_raritiesVendorStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][1]][4]] * 1.5));
                if ((gv_raritiesVendorCosts[lv_trigPlayer][1] < 0)) {
                    gv_raritiesVendorCosts[lv_trigPlayer][1] = 500000;
                }

                libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[1][5], (StringExternal("Param/Value/C859A52F") + IntToText(gv_raritiesVendorCosts[lv_trigPlayer][1])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[1][1], libNtve_gf_DialogItemTooltip(gv_raritiesVendorDialogItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[1][2], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[1][1], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[1][4], (libNtve_gf_DialogItemImage(gv_raritiesVendorDialogItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                return true;
            }

        }

    }
    return true;
}

void gf_InitVariablesItemStats () {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    text[5] lv_tempTooltip1;
    text lv_tempColor;
    fixed lv_tempCost;
    fixed[4] lv_tempIncreases;

    // Automatic Variable Declarations
    const int auto8E0A9F22_ae = 30;
    const int auto8E0A9F22_ai = 1;
    const int auto86491038_ae = 30;
    const int auto86491038_ai = 1;
    const int auto81DFF9C3_ae = 6;
    const int auto81DFF9C3_ai = 1;
    const int autoBB7F30D3_ae = 3;
    const int autoBB7F30D3_ai = 1;
    const int auto08AB350E_ae = 3;
    const int auto08AB350E_ai = 1;

    // Variable Initialization

    // Implementation
    gv_currencyIcons[0][1] = "Assets\\Textures\\war3_btnpickupitem.dds";
    gv_currencyIcons[1][1] = "Assets\\Textures\\war3_btnmgexchange.dds";
    gv_currencyIcons[2][1] = "Assets\\Textures\\war3_btnbox.dds";
    gv_currencyIcons[3][1] = "Assets\\Textures\\war3_btn3m3.dds";
    gv_currencyIcons[4][1] = "Assets\\Textures\\war3_btngem.dds";
    gv_currencyIcons[0][2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds";
    gv_currencyIcons[1][2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds";
    gv_currencyIcons[2][2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_bronze.dds";
    gv_currencyIcons[3][2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_diamond.dds";
    gv_currencyIcons[4][2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds";
    gv_currencyNames[0] = StringExternal("Param/Value/ECA55844");
    gv_currencyNames[1] = StringExternal("Param/Value/FC5D0F71");
    gv_currencyNames[2] = StringExternal("Param/Value/BD11EE0C");
    gv_currencyNames[3] = StringExternal("Param/Value/132AC543");
    gv_inventoryDialogStashTabIcons[1] = "Assets\\Textures\\battlestation_number_decals_diff_01.dds";
    gv_inventoryDialogStashTabIcons[2] = "Assets\\Textures\\battlestation_number_decals_diff_02.dds";
    gv_inventoryDialogStashTabIcons[3] = "Assets\\Textures\\battlestation_number_decals_diff_03.dds";
    gv_inventoryDialogStashTabIcons[4] = "Assets\\Textures\\battlestation_number_decals_diff_04.dds";
    gv_inventoryDialogStashTabIcons[5] = "Assets\\Textures\\battlestation_number_decals_diff_05.dds";
    gv_inventoryDialogStashTabIcons[6] = "Assets\\Textures\\battlestation_number_decals_diff_06.dds";
    gv_inventoryDialogStashTabIcons[7] = "Assets\\Textures\\battlestation_number_decals_diff_07.dds";
    gv_inventoryDialogStashTabIcons[8] = "Assets\\Textures\\battlestation_number_decals_diff_08.dds";
    gv_inventoryDialogStashTabIcons[9] = "Assets\\Textures\\battlestation_number_decals_diff_09.dds";
    lv_index = 0;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 0;
    gv_itemsBaseRarityColor[lv_index] = Color(75.29, 75.29, 75.29);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds";
    gv_itemDropsTimerLimits[lv_index] = 32;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 70;
    gv_itemsBaseRarityColor[lv_index] = Color(0.00, 50.20, 100.00);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds";
    gv_itemDropsTimerLimits[lv_index] = 38;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 225;
    gv_itemsBaseRarityColor[lv_index] = Color(100.00, 100.00, 0.00);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds";
    gv_itemDropsTimerLimits[lv_index] = 44;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 800;
    gv_itemsBaseRarityColor[lv_index] = Color(50.20, 0.00, 100.00);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_diamond.dds";
    gv_itemDropsTimerLimits[lv_index] = 48;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 3000;
    gv_itemsBaseRarityColor[lv_index] = Color(100.00, 50.20, 0.00);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds";
    gv_itemDropsTimerLimits[lv_index] = 65;
    lv_index += 1;
    gv_itemsBaseRarityScale[lv_index] = 9000;
    gv_itemsBaseRarityColor[lv_index] = Color(50.20, 100.00, 100.00);
    gv_itemsBaseBorder[lv_index] = "Assets\\Textures\\ui_multiplayerload_avatarborder_master.dds";
    gv_itemDropsTimerLimits[lv_index] = 85;
    lv_tempTooltip1[1] = StringExternal("Param/Value/5DCDF2CA");
    lv_tempTooltip1[3] = StringExternal("Param/Value/F25ED53F");
    gv_potionHealValue[1][0] = 120;
    gv_potionHealValue[2][0] = 30;
    lv_index = 1;
    for ( ; ( (auto8E0A9F22_ai >= 0 && lv_index <= auto8E0A9F22_ae) || (auto8E0A9F22_ai < 0 && lv_index >= auto8E0A9F22_ae) ) ; lv_index += auto8E0A9F22_ai ) {
        lv_tempCost = gv_potionHealValue[1][(lv_index - 1)];
        lv_tempCost += (90.0 + ((7.3 * ((1.06 - (lv_index * 0.045)) * lv_index)) * lv_index));
        gv_potionHealValue[1][lv_index] = FixedToInt(lv_tempCost);
        lv_tempCost = gv_potionHealValue[2][(lv_index - 1)];
        lv_tempCost += (25.0 + ((2.25 * ((1.06 - (lv_index * 0.05)) * lv_index)) * lv_index));
        gv_potionHealValue[2][lv_index] = FixedToInt(lv_tempCost);
        gv_itemsStatTierValues[1][lv_index] = ((lv_index * lv_index) / 2);
        if ((lv_index > 10)) {
            gv_itemsStatTierValues[1][lv_index] = FixedToInt((gv_itemsStatTierValues[1][lv_index] * (1.0 - (lv_index * 0.006))));
        }

        gv_itemsStatTierValues[2][lv_index] = ((lv_index * 1) + 6);
    }
    gv_itemsStatTierValues[1][1] = 1;
    gv_inventoryStashTabPrice[1] = 20000;
    gv_inventoryStashTabPrice[2] = 40000;
    gv_inventoryStashTabPrice[3] = 100000;
    gv_inventoryStashTabPrice[4] = 220000;
    gv_inventoryStashTabPrice[5] = 500000;
    gv_inventoryStashTabPrice[6] = 1000000;
    gv_inventoryStashTabPrice[7] = 2000000;
    gv_inventoryStashTabPrice[8] = 3500000;
    gv_inventoryStashTabPrice[9] = 5000000;
    gv_itemsCost[0][1] = 150.0;
    gv_itemsHonorCost[0][1] = 13.0;
    gv_potionCost[1][0] = 150.0;
    lv_tempIncreases[1] = 70.0;
    lv_tempIncreases[2] = 40.0;
    lv_tempIncreases[3] = 1.05;
    lv_index = 1;
    for ( ; ( (auto86491038_ai >= 0 && lv_index <= auto86491038_ae) || (auto86491038_ai < 0 && lv_index >= auto86491038_ae) ) ; lv_index += auto86491038_ai ) {
        lv_tempCost = gv_itemsCost[(lv_index - 1)][1];
        lv_tempCost += (lv_tempIncreases[1] + ((lv_tempIncreases[2] * ((lv_tempIncreases[3] - (lv_index * 0.001)) * lv_index)) * lv_index));
        gv_itemsCost[lv_index][1] = lv_tempCost;
        lv_index2 = 2;
        for ( ; ( (auto81DFF9C3_ai >= 0 && lv_index2 <= auto81DFF9C3_ae) || (auto81DFF9C3_ai < 0 && lv_index2 >= auto81DFF9C3_ae) ) ; lv_index2 += auto81DFF9C3_ai ) {
            gv_itemsCost[lv_index][lv_index2] = (gv_itemsCost[lv_index][(lv_index2 - 1)] * (1.0 + (0.1 + (0.05 * lv_index2))));
        }
        lv_tempCost = gv_itemsHonorCost[(lv_index - 1)][1];
        lv_tempCost += (2.6 + ((0.58 * ((1.05 - (lv_index * 0.0009)) * lv_index)) * lv_index));
        gv_itemsHonorCost[lv_index][1] = lv_tempCost;
        lv_index2 = 2;
        for ( ; ( (autoBB7F30D3_ai >= 0 && lv_index2 <= autoBB7F30D3_ae) || (autoBB7F30D3_ai < 0 && lv_index2 >= autoBB7F30D3_ae) ) ; lv_index2 += autoBB7F30D3_ai ) {
            gv_itemsHonorCost[lv_index][lv_index2] = (gv_itemsHonorCost[lv_index][(lv_index2 - 1)] * (1.0 + (0.2 + (0.35 * lv_index2))));
        }
        lv_tempCost = gv_potionCost[1][(lv_index - 1)];
        lv_tempCost += (80.0 + ((45.0 * ((1.05 - (lv_index * 0.0009)) * lv_index)) * lv_index));
        gv_potionCost[1][lv_index] = lv_tempCost;
        lv_index2 = 2;
        for ( ; ( (auto08AB350E_ai >= 0 && lv_index2 <= auto08AB350E_ae) || (auto08AB350E_ai < 0 && lv_index2 >= auto08AB350E_ae) ) ; lv_index2 += auto08AB350E_ai ) {
            gv_potionCost[lv_index2][lv_index] = (gv_potionCost[(lv_index2 - 1)][lv_index] * (1.0 + (0.05 + (0.1 * lv_index2))));
        }
    }
    lv_index = 0;
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/0B04AE6F");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "AttackDamage", "Modification.DamageDealtScaled[" + IntToString(1) + "]", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "AttackDamageBuff";
    gv_itemsStatBehavior[lv_index][2] = "AttackDamageBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/EA13B6DF");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Life", "Modification.VitalMaxArray[" + IntToString(0) + "]", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "LifeBuff";
    gv_itemsStatBehavior[lv_index][2] = "LifeBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/D3FC3809");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "LifeRegeneration", "Modification.VitalRegenArray[" + IntToString(0) + "]", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "LifeRegenerationBuff";
    gv_itemsStatBehavior[lv_index][2] = "LifeRegenerationBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/86FE5900");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Energy", "Modification.VitalMaxArray[" + IntToString(2) + "]", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "EnergyBuff";
    gv_itemsStatBehavior[lv_index][2] = "EnergyBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/FDC5F6BC");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "EnergyRegeneration", "Modification.VitalRegenArray[" + IntToString(2) + "]", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "EnergyRegenerationBuff";
    gv_itemsStatBehavior[lv_index][2] = "EnergyRegenerationBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/25E67D03");
    gv_itemsStatTooltipType[lv_index] = StringExternal("Param/Value/2C0E9A17");
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "DamageReduction", "Modification.DamageTakenUnscaled[" + IntToString(1) + "]", c_playerAny)) * -100.0));
    gv_itemsStatBehavior[lv_index][1] = "DamageReductionBuff2";
    gv_itemsStatBehavior[lv_index][2] = "DamageReductionBuff42";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/E1EE86C4");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "AttackDamage2", "Modification.DamageDealtFraction[" + IntToString(1) + "]", c_playerAny)) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "AttackDamageBuff2";
    gv_itemsStatBehavior[lv_index][2] = "AttackDamageBuff3";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/E4C54FC1");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt(((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "AttackSpeed", "Modification.AttackSpeedMultiplier", c_playerAny)) - 1.0) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "AttackSpeedBuff";
    gv_itemsStatBehavior[lv_index][2] = "AttackSpeedBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/65CA2F81");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpellDamage", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "SpellDamageBuff";
    gv_itemsStatBehavior[lv_index][2] = "SpellDamageBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/BF5765B6");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt(((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Cooldown", "Modification.RateMultiplierArray[" + IntToString(1) + "]", c_playerAny)) - 1.0) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "CooldownBuff";
    gv_itemsStatBehavior[lv_index][2] = "CooldownBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/3B721916");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Life2", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(0) + "]", c_playerAny)) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "LifeBuff2";
    gv_itemsStatBehavior[lv_index][2] = "LifeBuff3";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/167A665B");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Energy2", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(2) + "]", c_playerAny)) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "EnergyBuff2";
    gv_itemsStatBehavior[lv_index][2] = "EnergyBuff3";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/16E00F75");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Armor", "Modification.LifeArmorBonus", c_playerAny)) * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "ArmorBuff";
    gv_itemsStatBehavior[lv_index][2] = "ArmorBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/BF9A0DBF");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt(((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Speed", "Modification.AdditiveMoveSpeedFactor", c_playerAny)) - 0.0) * 10000.0));
    gv_itemsStatBehavior[lv_index][1] = "SpeedBuff";
    gv_itemsStatBehavior[lv_index][2] = "SpeedBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/7475BD26");
    gv_itemsStatTooltipType[lv_index] = StringExternal("Param/Value/36C55CBE");
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = 110;
    gv_itemsStatBehavior[lv_index][1] = "SpellReductionBuff";
    gv_itemsStatBehavior[lv_index][2] = "SpellReductionBuff4";
    lv_index += 1;
    lv_tempTooltip1[4] = StringExternal("Param/Value/CB81F80B");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = FixedToInt((1.0 * 100.0));
    gv_itemsStatBehavior[lv_index][1] = "ItemFindBuff";
    gv_itemsStatBehavior[lv_index][2] = "ItemFindBuff4";
    lv_index = 20;
    lv_tempTooltip1[4] = StringExternal("Param/Value/FBF3A8DA");
    gv_itemsStatTooltipType[lv_index] = lv_tempTooltip1[4];
    gv_itemsStatTooltip[lv_index] = (lv_tempTooltip1[1] + lv_tempTooltip1[4] + lv_tempTooltip1[3]);
    gv_itemsStatValue[lv_index] = 0;
    lv_index += 1;
    gv_itemsTwilightRanges[1] = lv_index;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/E4B71344");
    gv_itemsStatBehavior[lv_index][1] = "BossDamage";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/A63F1D21");
    gv_itemsStatBehavior[lv_index][1] = "Culling";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/497CD8C8");
    gv_itemsStatBehavior[lv_index][1] = "HealingDone";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/1A3C04C5");
    gv_itemsStatBehavior[lv_index][1] = "PhysBash";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/FE948B5F");
    gv_itemsStatBehavior[lv_index][1] = "PhysCrit";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/9F380B4D");
    gv_itemsStatBehavior[lv_index][1] = "PhysEnergyLeech";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/B1CDC59E");
    gv_itemsStatBehavior[lv_index][1] = "PhysLifeLeech";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/44196C09");
    gv_itemsStatBehavior[lv_index][1] = "SpellCrit";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/AD8E1440");
    gv_itemsStatBehavior[lv_index][1] = "SpellEnergyLeech";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/E8086A08");
    gv_itemsStatBehavior[lv_index][1] = "SpellLifeLeech";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/D4342396");
    gv_itemsStatBehavior[lv_index][1] = "SpellPurge";
    lv_index += 1;
    gv_itemsTwilightRanges[2] = lv_index;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/B63E4339");
    gv_itemsStatBehavior[lv_index][1] = "ArmorAura2";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/122F3EF8");
    gv_itemsStatBehavior[lv_index][1] = "DamageAura";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/72D2D03E");
    gv_itemsStatBehavior[lv_index][1] = "SpeedAura";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/1C4C1DDC");
    gv_itemsStatBehavior[lv_index][1] = "Dodge";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/26696DD2");
    gv_itemsStatBehavior[lv_index][1] = "EnergyRegen";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/B70F7AAA");
    gv_itemsStatBehavior[lv_index][1] = "LifeRegen";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/6E3C1492");
    gv_itemsStatBehavior[lv_index][1] = "HealingTaken";
    gv_itemsTwilightRanges[3] = lv_index;
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/484A181A");
    gv_itemsStatBehavior[lv_index][1] = "Sight";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/0F77A36E");
    gv_itemsStatBehavior[lv_index][1] = "SlowReduction";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/72B49F76");
    gv_itemsStatBehavior[lv_index][1] = "BuffDuration";
    lv_index += 1;
    gv_itemsStatTooltip[lv_index] = StringExternal("Param/Value/37238360");
    gv_itemsStatBehavior[lv_index][1] = "GoldFind";
    gv_itemsTwilightRanges[4] = lv_index;
    lv_index = 101;
    lv_index2 = 0;
    lv_index3 = 0;
    lv_index2 += 1;
    lv_tempColor = StringExternal("Param/Value/58B3A73B");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Shiv3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EB808ABB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Shiv2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2837E82F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Hamstring3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/416FF4DC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Hamstring2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/49264590"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DuskWalk2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/033719D7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DuskWalk3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/03F91856"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowStep2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E0D87DBE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowStep3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/00B18BA0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Windwalk2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E168255E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Windwalk3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7816999B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StringofDaggers2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8F88D708"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StringofDaggers3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B2962B3F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CriticalWeakness";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/201C90E5"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CriticalWeakness2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/809B072A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FeignDeath2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5CBAC31F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FeignDeath3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/139182E4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowForm2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/075FD47E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowForm3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0B507499"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingSlash";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3EF55518"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingSlash2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8B5F37E3"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/1568EE1B");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PowerfulStrike4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A815A54C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PowerfulStrike5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D346B22E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Leap3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/627DDBBE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Leap4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F7DC304D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Shockwave2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/329F153E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Shockwave3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8B4CFE27"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DefensiveStance2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/04E7600A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DefensiveStance3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B70754CD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Focus2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C53BE154"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Focus3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E56887D3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyStrikesMastery";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/60929A01"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyStrikesMastery2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9EC9D26B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ThrowSword2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/CE862FF7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ThrowSword3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1C6BBCA9"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SliceAndDice2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/AA168F9F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SliceAndDice3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3378E615"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Whirl2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/162B0C2D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Whirl3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F08B86ED"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CalmBeforeTheStorm";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E53ED6E0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CalmBeforeTheStorm2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/460A9CFD"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/81B49195");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Thrash2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4DF95399"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Thrash3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5AAF0CD4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodRage2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/29FE34A0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodRage3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/828B146E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodDrinkerAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/513B0AAC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodDrinkerAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/94862F0D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Slash2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E6C68D7C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Slash3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/92B1FC9C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ChargeThrough2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3476AA2F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ChargeThrough3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/AA2A6512"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodCry";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A07C35FE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodCry2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/97984593"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodFeast2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5A76A670"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BloodFeast3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0B48A471"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HurlBlade2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/CFB954EC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HurlBlade3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3FBF1DDA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Coagulate2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/296D56B6"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Coagulate3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2758BE56"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "VampiricMastery";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B8080DF4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "VampiricMastery2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A636DC95"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/FB6F113E");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Smash2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/DB22B098"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Smash3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/48EE3E0D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShoulderRam2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9B2A2B3F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShoulderRam3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1DBAF21F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EchoingRoar2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9F5FE0FF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EchoingRoar3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/06D47EA6"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SharedSteelAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/ED2C992E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SharedSteelAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5580C528"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Charge3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/FC21C2CF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Charge4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BE9587BE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EmpoweringTaunt2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3E2B8A6F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EmpoweringTaunt3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F4B51FA3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MagnetonPull";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B35F8EAD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MagnetonPull2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3499CAA3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HardenedSkin2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D4747795"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HardenedSkin3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B5D46473"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Headbutt2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/64BB0044"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Headbutt3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0462FDFD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Reverberate";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9865DDC7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Reverberate2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D0BCE553"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/DCE14382");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RallyCry4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F7C06744"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RallyCry5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/403C99E7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShieldingStrikes2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/469E60BB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShieldingStrikes3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/919CEFAA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Taunt4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/415B502D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Taunt5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A0EAF165"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LayofHands2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C5D413A4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LayofHands3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/75ACDD39"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Avatar2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/741C4A29"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Avatar3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/285B3B61"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingLance2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A42283A8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingLance3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/30204C60"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShieldSlam5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D4A77D1F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShieldSlam6";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BD06532C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LeapofFaith2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1A56CBB3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LeapofFaith3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EECC3C67"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConsecrateGround";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2F0585BA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConsecrateGround2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3C2C38A1"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Invigorate2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/51847A32"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Invigorate3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4FCCBC22"));
    lv_index += 1;
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 = 0;
    lv_index2 += 1;
    lv_tempColor = StringExternal("Param/Value/D79DCD42");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "GreatArrow2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EFFD5394"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "GreatArrow3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9D8C8F89"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Impale3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E55F108D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Impale4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8C0F5985"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpitFire2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F96B3DA8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpitFire3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/01358307"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SunlightArrows2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/877115E0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SunlightArrows3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C4E83797"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RapidReload2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/867B33C2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RapidReload3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4FC1AB8C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Mark4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A8070F8E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Mark5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/025728A3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Headshot2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2D2B0B32"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Headshot3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/57D0CADD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConcussionShell2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F876AA48"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConcussionShell3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/46DF3680"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HeartPiercer";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D3650244"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HeartPiercer2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A99BB87B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Slink";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/CC312611"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Slink2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/72094550"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/60A96C48");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DarkArrows2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/75492E76"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DarkArrows3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F0A591BA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Cyclone2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7DFF62D8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Fly2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3E4E3635"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Fly3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E494A806"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Gust2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/866BC8F4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Gust3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/96017C45"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FaerieFire2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8921845B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FaerieFire3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9E9AF933"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ClawFrenzy2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/24D0865B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ClawFrenzy3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D541D751"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RainofArrows2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1722D49A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "RainofArrows3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/999F7BE0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "QuicknessAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1FF81664"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "QuicknessAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1089E3B2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ExplodingDecoy";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/78478A04"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ExplodingDecoy2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E4D550F5"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Quickening";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/6A8E552A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Quickening2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EB81CD1C"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/088BDDDF");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingBolts2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A200DCF7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingBolts3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/47EC1ACE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StormBolt2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C6B878D3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StormBolt3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B9F8B68E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FlyOver2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C1D75FAE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FlyOver3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9149DE20"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DrillPeck2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A002CAAB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DrillPeck3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1EC50E0C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HamstringTrap2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1C8DF645"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HamstringTrap3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/CF4B87E8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BattleHeal2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D7EDE813"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BattleHeal3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/977F2067"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Enrage";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/965F024F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Enrage2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/901D4742"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/06AC679A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E7B2B0B9"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5B9B0BED"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8FF0C500"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet6";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0C981E24"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet7";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/287576A3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet8";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/05C2AF2E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet9";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9ADCA86A"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/B857B370");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9BD87731"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7632F8DF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BBB805A2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CompanionAura5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7B5DB4DC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet6";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/331C237A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet7";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/143A4B0A"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet8";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3BBDA908"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SummonPet9";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A8A3FD02"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BearTrap3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8171AF6F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BearTrap4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/028B5614"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TerrifyingRoar2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5C4CCFE6"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TerrifyingRoar3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/61F286E5"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Bloodlust4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/647BCDF0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Bloodlust5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/92C37642"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Mend3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BE8C3222"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Mend4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/81401778"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Leap5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/857812BE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Leap6";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/66B6C8E4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Steadfast";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E3F7AC8B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Steadfast3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/821068B7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LifeBloom2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5381B0D2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LifeBloom3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A7344CFA"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/6C204500");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ForcePush2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E30A96AC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ForcePush3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2FED8254"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Jynx2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/05860030"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Jynx3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B59F6E95"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Sprites2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BC6FA9CE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Sprites3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/157CD8C4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SoulShift2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C921DF78"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SoulShift3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A22F8815"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FearWard2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/38CC1E4E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FearWard22";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/618AE4DB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TimeTrance2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/798ECD6F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TimeTrance3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EF092E5D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PutridBreath2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/FF6C5659"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PutridBreath3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/913D7473"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingMist";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E1C2F5B1"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlindingMist2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3E4E0C23"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Invigorate5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2D326859"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Invigorate4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E4C4652C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Instability";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/86BFA09D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Instability2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/87C37147"));
    lv_index += 1;
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 = 0;
    lv_index2 += 1;
    lv_tempColor = StringExternal("Param/Value/DEE02451");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FrostBolt3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/AA253B9C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FrostBolt4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C0AB480C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FireWall2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7CDB0ABE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "FireWall3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5FFFF681"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Flamestrike2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D1955053"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Flamestrike3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/56411B16"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Empower2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7DAA90C0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Empower3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/67FFF09F"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MeteorStorm2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4F602843"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MeteorStorm3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/C71E8417"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StormStrike2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3E8352E3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StormStrike3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/6F0402C5"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LightningBall4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B5A37105"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LightningBall5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8873B982"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BrillianceAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5378A54C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BrillianceAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/67DCCA88"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Freeze2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/996A1888"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Freeze";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/38FCF4A2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpellFrenzy";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/AAD14993"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpellFrenzy2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0F78D7ED"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/60F2C0DD");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowBlast2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B637FB82"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowBlast3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/77AD87CC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DeathTouch2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/133AB574"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DeathTouch3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F3139FA4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Conflagration2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/31F697E2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Conflagration3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/36303A03"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "VoidOrb2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1725E07D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "VoidOrb3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3280D5A9"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CloakofFlames4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/14D659B1"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CloakofFlames5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A5ADB9FC"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MagicEnhancedAttacks2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3AB60D34"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "MagicEnhancedAttacks3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4855E0C3"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Assassinate2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A5D58BF6"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Assassinate3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BCDCA849"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Phasing";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/34DD5955"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Phasing2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A8CC56D8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Blink";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/374456BA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Blink2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/438E38AE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TimeWarp2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/20D171D2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "TimeWarp3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2FD3F49B"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/638521E8");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlinkSmash2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E1E356BB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "BlinkSmash4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BFCC1790"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CrushingOrb2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F9D49817"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "CrushingOrb3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/106C3FC4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "GravityBomb2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D4B4436C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "GravityBomb3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F4A0D65B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyBlasts2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9E13F125"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyBlasts3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/63C326EF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyShield";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/663B4FF7"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyShield2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B2FD96BE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PhaseShift2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/00088593"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "PhaseShift22";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B460D482"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowOrb2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/9E052043"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ShadowOrb3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/78434201"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpellSap";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/EF7EC989"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SpellSap2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/AF632DFD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SlowTime2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/0FB6EE2D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "SlowTime3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/69D1DABE"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StaticBarrier2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/DAD69800"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "StaticBarrier3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D6B4BB8E"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/8A788E53");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConcentrationAura2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/3CD2E4BB"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "ConcentrationAura3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7C8FD551"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DesecrateGround4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/53DEF171"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DesecrateGround5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A057CE86"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyFlare2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/59EFB50D"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "EnergyFlare";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/D80E0361"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HailStorm2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/7A0B42E0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HailStorm3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/1DDF0C94"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LifeDrain2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/6844D339"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "LifeDrain3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F0276A66"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "NaturesBlessing2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/391B7BF8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "NaturesBlessing3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/F29E38A0"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Opportunist";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/94360E49"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Opportunist2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/A9A72CF8"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Rejuvenate3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/4CB19254"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Rejuvenate4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/70B1E088"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Tranquility2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/779F6DF6"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Tranquility3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E96EF14B"));
    lv_index += 1;
    lv_tempColor = StringExternal("Param/Value/1E6685CC");
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index3 += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Blessing2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/408458C4"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Blessing3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/93772806"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DivineShield2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/07127697"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "DivineShield3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E6D63C3C"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Sunwell2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/21810808"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Sunwell3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/164E0757"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyAttacks2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/33FB6606"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyAttacks3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/E3EC9735"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyFire2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8010EACF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyFire3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/31505D30"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyLight2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/B9DD38F5"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HolyLight3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/40B5901B"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "InnerFire4";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/8A3707CD"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "InnerFire5";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/40A75E23"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Prayer";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/41C77F2E"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Prayer2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/5BEF3919"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Smite2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/BE5922D2"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "Smite3";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/82281EDF"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HeavensGlow";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/2C7134AA"));
    lv_index += 1;
    gv_itemsGlyphUpgrade[lv_index] = "HeavensGlow2";
    gv_itemsGlyphTooltip[lv_index] = (lv_tempColor + StringExternal("Param/Value/ECFA73C5"));
    lv_index += 1;
    gv_itemsGlyphUpgradeIndex[lv_index2][lv_index3] = lv_index;
    lv_index = 0;
    gv_potionBehavior[lv_index] = "Empty";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Restores <d ref=\"Effect,RestoreLife,RechargeVitalFraction*100\" precision=\"1\"/>% of life per second.</s>";
    gv_potionBehavior[lv_index] = "RestoreLife";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Restores <d ref=\"Effect,RestoreEnergy,RechargeVitalFraction*100\" precision=\"1\"/>% of energy per second.</s>";
    gv_potionBehavior[lv_index] = "RestoreEnergy";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Reduces all damage taken by <d ref=\"-Behavior,DamageResist,Modification.UnifiedDamageTakenFraction[Melee]*100\" precision=\"1\"/>%.</s>";
    gv_potionBehavior[lv_index] = "DamageResist";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Increases the duration of friendly buffs by <d ref=\"Behavior,BuffDuration2,Modification.BehaviorCategoryDurationFactor[User13]*100\" precision=\"1\"/>%.</s>";
    gv_potionBehavior[lv_index] = "BuffDuration2";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Increases all damage types by <d ref=\"Behavior,Damage5,Modification.DamageTotalMultiplier[Melee]*100\" precision=\"1\"/>%.</s>";
    gv_potionBehavior[lv_index] = "Damage5";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Increases movement speed by <d ref=\"Behavior,MovementSpeed,Modification.AdditiveMoveSpeedFactor*100\" precision=\"1\"/>%.</s>";
    gv_potionBehavior[lv_index] = "MovementSpeed";
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Reduces the duration of debuffs by <d ref=\"Behavior,StunDuration,Modification.BehaviorCategoryDurationFactor[Slow]*(-100)\" precision=\"1\"/>%.</s>";
    gv_potionBehavior[lv_index] = "StunDuration";
    gv_potionStatsIndex = lv_index;
    lv_index += 1;
    gv_potionStatTooltip[lv_index] = "<s val=\"ModCenterSize16Bold\">Puts you into a deep sleep, restoring most of your life and energy over time.  Taking damage will cancel the effect, and the damage will be amplified.";
    gv_potionBehavior[lv_index] = "Rest";
    lv_index = 1;
    lv_index2 = 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"FF8080\">Health Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnpotionred.dds";
    lv_index2 += 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"FF8080\">Glowing Health Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnpotionofomniscience.dds";
    lv_index2 += 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"FF8080\">Runic Health Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnsnazzypotion.dds";
    lv_index = 2;
    lv_index2 = 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"80BFFF\">Energy Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnpotionbluesmall.dds";
    lv_index2 += 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"80BFFF\">Frothing Energy Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnpotionblue.dds";
    lv_index2 += 1;
    gv_potionName[lv_index][lv_index2] = "<c val=\"80BFFF\">Enchanted Energy Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnpotionofrestoration.dds";
    lv_index = 3;
    lv_index2 = 2;
    gv_potionName[lv_index][lv_index2] = "<c val=\"80BFFF\">Sleep Potion</c>";
    gv_potionIcon[lv_index][lv_index2] = "Assets\\Textures\\war3_btnelunesblessing.dds";
    lv_index = 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/F1AF427F");
    gv_itemsAssistIcon[lv_index] = "WeaponGlorn64.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/75C2E2AD");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnsteelranged.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/C0B700B9");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnthoriumranged.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/9882AE04");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnarcaniteranged.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/52E62866");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnimprovedbows.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/1BE1DF68");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnflamingarrows.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/2A87C4FE");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btntheblackarrow.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 8;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/78D386E7");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btndwarvenlongrifle.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/4665E33D");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnhumanmissileupone.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/F7EE09B3");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnhumanmissileuptwo.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/A038C210");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnhumanmissileupthree.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/C5215DCF");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnhumanartilleryupone.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/5716B496");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnclusterrockets.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/434B2D71");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnimprovedmining.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/D2FDB73A");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnorcmeleeupone.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/17E0DF63");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnorcmeleeuptwo.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/CA7E8C65");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnorcmeleeupthree.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/D2659E0F");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnspiritwalkermastertraining.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/00FEE43B");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnspiritwalkeradepttraining.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 7;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/E73A2E51");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnsteelmelee.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/F3450859");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnthoriummelee.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/BF623B85");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnarcanitemelee.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/51666EEB");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btncleavingattack.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/C8B716AF");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btntransmute.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/9382278E");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnsacrifice.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 8;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/7CFC4F18");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnalleriaflute.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/CD7FAA79");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnwandofcyclone.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/8771786E");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnstarwand.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/61E838E6");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnwandofneutralization.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/B11C4EC8");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnwand.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/3F229551");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnstaffofpurification.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 10;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/8F0B5C77");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnduneworm.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/A2C4BB6E");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnstaffofnegation.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/1722B246");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnstaffofsanctuary.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/87416A28");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnstaffofteleportation.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/897650D1");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnstaffofsilence.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/4A342E33");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnwandofmanasteal.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 9;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/9D9640E7");
    gv_itemsAssistIcon[lv_index] = "HelmGlorn64.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/E7755D45");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnhelmutpurple.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/5FA1FFF4");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnarmorgolem.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/ABFEBA6B");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnmaskofdeath.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/588A2900");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnadvancedunholyarmor.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/D829561D");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnunholyaura.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/C04D4119");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnrevenant.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 13;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/3F444E66");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnhoodofcunning.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/ED4EE249");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnhelmofvalor.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/3A51338D");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnbloodlust.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/7DCD582E");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnpossession.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/280B5ED8");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnambush.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/B9B08179");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnlament.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 3;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/6F35DD9F");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btncirclet.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/A22B02A9");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnsobimask.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/22218A5E");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnbelt.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/8EEA142A");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btniceshard.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/11D4B94E");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnhealingward.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/DDF3F75D");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnabsorbmagic.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 5;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/3A5A49B7");
    gv_itemsAssistIcon[lv_index] = "ChestGlorn64.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/0ED4AE2E");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnreinforcedhides.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/4E22712B");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnadvancedreinforcedhides.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/379A0F21");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnnagaarmorup1.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/0F9C8484");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnnagaarmorup2.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/9157A7F6");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnnagaarmorup3.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/B7D2D78B");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnundeadtransport.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 6;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/EBCB48EA");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnleatherupgradeone.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/6AAEC015");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnleatherupgradetwo.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/C3FD4C52");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnleatherupgradethree.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/3FEE4423");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnthickfur.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/96914FFF");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnbarkskin.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/8A56D482");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnthornyshieldoff.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 2;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/49BF6F2B");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnmantle.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/C6A1D045");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnmoonarmor.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/E2D0C1CC");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btncloakofflames.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/5798031B");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnimprovedmoonarmor.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/8082595F");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btncloak.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/B512F90E");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnadvancedmoonarmor.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 4;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/97873FBA");
    gv_itemsAssistIcon[lv_index] = "pants.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/9188BEAD");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btncreaturecarapace.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/A9B6817E");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnimprovedcreaturecarapace.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/119AF175");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnimprovedspikedbarricades.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/39CB366A");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnadvancedspikedbarricades.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/F6573B8E");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnpriestmaster.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/9A58E106");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnadvancedcreaturecarapace.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 13;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/9628424E");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnwirtsotherleg.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/0E785837");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnthorns.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/91690849");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnwarstomp.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/340BFC8A");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnregeneration.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/128E7FAF");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnsmash.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/7D7F9250");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnskeletallongevity.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 14;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/62AA1239");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnweb.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/B4DFC53B");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnsirenmaster.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/B97637FD");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnspiritofvengeance.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/46DE881C");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnantimagicshell.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/B0D7081B");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnsirenadept.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/9EE7483C");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnrune.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 15;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/F68DC80B");
    gv_itemsAssistIcon[lv_index] = "boot.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/31E52E19");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnboots.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/8CED7FF8");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnnagaweaponup1.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/7DE96B68");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnnagaweaponup3.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/B02B60B8");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnnagaweaponup2.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/49D0A6E7");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnbattleship.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/DFCE2F4E");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnadvancedunholyarmor.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 11;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/6CC73321");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnbootsofspeed.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/C92F9B2A");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btncreatureattack.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/79D34802");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnimprovedcreatureattack.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/C248A1F4");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnadvancedcreatureattack.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/032ACD40");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnbigbadvoodoospell.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/87E01B6B");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnbonechimes.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 13;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/F73A9D28");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnslippersofagility.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/9E3D074F");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnanimalwartraining.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/5E07D296");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnsilence.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/DF366950");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnthunderlizardegg.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/D13B57A8");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnphoenixegg.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/E02DBAA2");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnmoonstone.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 10;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/0C773EE3");
    gv_itemsAssistIcon[lv_index] = "GloveGlorn64.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/B6545B79");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btngauntletsofogrepower.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/B71DE16A");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btndeathpact.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/7DC31BEC");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btngolemthunderclap.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/289563E1");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnimprovedunholystrength.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/57AC28AA");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnadvancedunholystrength.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/0788C7FB");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnspellsteal.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/DC16A2BF");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnglove.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/C6D65A20");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnentanglingroots.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/7EAE04F7");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btncommand.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/9C99AE0D");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btndevotion.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/68FDAF7E");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btngnollcommandaura.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/199D7A7E");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btncontrolmagic.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 8;
    lv_index2 += 1;
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/C36A8BBA");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnheal.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/CC901BF2");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnanimatedead.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/E9103A30");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnbearblink.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/38C538CA");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btndoom.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/C9EAD011");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnfaeriefire.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/48D2F6A9");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnchainlightning.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 9;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/D976CC39");
    gv_itemsAssistIcon[lv_index] = "ring.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/55CA24DA");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnringskull.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/D0E96069");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btnringpurple.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/989FEDAC");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btngoldring.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/A06B2935");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnringvioletspider.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/85FC44D8");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnringlionhead.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/6C78AE55");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnwellspring.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/2625D3AE");
    gv_itemsAssistIcon[lv_index] = "amulet.dds";
    gv_itemsBaseName[lv_index][lv_index2][1] = StringExternal("Param/Value/F2069522");
    gv_itemsBaseIcon[lv_index][lv_index2][1] = "Assets\\Textures\\war3_btnstone.dds";
    gv_itemsBaseName[lv_index][lv_index2][2] = StringExternal("Param/Value/D159904C");
    gv_itemsBaseIcon[lv_index][lv_index2][2] = "Assets\\Textures\\war3_btndotadepttraining.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/3B967D97");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btnamulet.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/F1B34231");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnspellshieldamulet.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/64E42565");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnorbofslowness.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/750E9333");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnurnofkelthuzad.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/EEB57074");
    gv_itemsAssistIcon[lv_index] = "Assets\\Textures\\ui_minimap_icon_diamond.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/DFD4806F");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btngmexchange.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/44E5F87F");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btnheartofaszune.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/251B3319");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnpowergenerator.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/0C6A3856");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnpurge.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
    lv_index += 1;
    lv_index2 = 1;
    gv_itemsBaseName[lv_index][0][0] = StringExternal("Param/Value/064C0F13");
    gv_itemsAssistIcon[lv_index] = "Assets\\Textures\\ui_minimap_icon_aicommunication_claim.dds";
    gv_itemsBaseName[lv_index][lv_index2][3] = StringExternal("Param/Value/D87B16E3");
    gv_itemsBaseIcon[lv_index][lv_index2][3] = "Assets\\Textures\\war3_btncritterrabbit.dds";
    gv_itemsBaseName[lv_index][lv_index2][4] = StringExternal("Param/Value/CE370185");
    gv_itemsBaseIcon[lv_index][lv_index2][4] = "Assets\\Textures\\war3_btngrimward.dds";
    gv_itemsBaseName[lv_index][lv_index2][5] = StringExternal("Param/Value/050C8B0E");
    gv_itemsBaseIcon[lv_index][lv_index2][5] = "Assets\\Textures\\war3_btnphilosophersstone.dds";
    gv_itemsBaseName[lv_index][lv_index2][6] = StringExternal("Param/Value/0C5D6C86");
    gv_itemsBaseIcon[lv_index][lv_index2][6] = "Assets\\Textures\\war3_btnfarsight.dds";
    gv_itemsBaseSlotStat[lv_index][lv_index2] = 1;
}

void gf_DialogCreateItemsInventoriesPotions () {
    int init_i;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    int lv_yPos;
    int lv_ySize;
    int lv_xSize;
    int lv_xPos;
    int lv_itemSlot;
    text[11] lv_tempText;
    text[11] lv_tempTooltip;
    color[9] lv_tempColor;
    string[5] lv_tempSplat;
    int[11][3] lv_tempXY;

    // Automatic Variable Declarations
    const int autoC2DDFCD8_ae = 15;
    const int autoC2DDFCD8_ai = 1;
    const int auto146B7BF4_ae = 4;
    const int auto146B7BF4_ai = 1;
    const int auto75150206_ae = 6;
    const int auto75150206_ai = 1;
    const int auto36690931_ae = 2;
    const int auto36690931_ai = 1;
    const int auto36AFA2B0_ae = 2;
    const int auto36AFA2B0_ai = 1;
    const int autoE1754B4E_ae = 10;
    const int autoE1754B4E_ai = 1;
    const int auto0BEF81C9_ae = 10;
    const int auto0BEF81C9_ai = 1;
    const int auto8376676B_ae = 6;
    const int auto8376676B_ai = 1;
    const int autoCF0BB917_ae = 4;
    const int autoCF0BB917_ai = 1;
    const int auto1F8AFB5F_ae = 15;
    const int auto1F8AFB5F_ai = 1;
    const int auto1BF53D1F_ae = 3;
    const int auto1BF53D1F_ai = 1;
    const int auto61BBD2CB_ae = 2;
    const int auto61BBD2CB_ai = 1;
    const int autoC2E081E0_ae = 4;
    const int autoC2E081E0_ai = 1;
    const int auto993B2D8F_ae = 10;
    const int auto993B2D8F_ai = 1;
    const int autoD065C7EB_ae = 1;
    const int autoD065C7EB_ai = 1;
    const int auto0ADD2AD4_ae = 3;
    const int auto0ADD2AD4_ai = 1;
    const int auto5B4D8E5D_ae = 4;
    const int auto5B4D8E5D_ai = 1;
    const int autoF24E2011_ae = 10;
    const int autoF24E2011_ai = 1;
    const int autoC39ED24F_ae = 6;
    const int autoC39ED24F_ai = 1;
    const int auto7D5C2B0C_ae = 5;
    const int auto7D5C2B0C_ai = 1;
    const int autoA42BEDD4_ae = 10;
    const int autoA42BEDD4_ai = 1;
    const int auto31E88547_ae = 9;
    const int auto31E88547_ai = 1;
    const int auto115EA37C_ae = 10;
    const int auto115EA37C_ai = 1;
    const int auto06FCB48E_ae = 2;
    const int auto06FCB48E_ai = 1;
    const int autoF2FA27B1_ae = 6;
    const int autoF2FA27B1_ai = 1;
    const int auto74AF4275_ae = 5;
    const int auto74AF4275_ai = 1;
    const int autoD42190B8_ae = 1;
    const int autoD42190B8_ai = 1;
    const int autoEB8DB056_ae = 3;
    const int autoEB8DB056_ai = 1;
    const int autoED4DA46A_ae = 15;
    const int autoED4DA46A_ai = 1;
    const int auto96A326C8_ae = 3;
    const int auto96A326C8_ai = 1;
    const int auto08D1386B_ae = 4;
    const int auto08D1386B_ai = 1;
    const int autoA6ACBA94_ae = 8;
    const int autoA6ACBA94_ai = 1;
    const int autoBB139E5E_ae = 3;
    const int autoBB139E5E_ai = 1;
    const int auto66CB5A52_ae = 2;
    const int auto66CB5A52_ai = 1;
    const int autoF4D1E44F_ae = 16;
    const int autoF4D1E44F_ai = 1;
    const int autoF72E6272_ae = 16;
    const int autoF72E6272_ai = 1;
    const int autoED918FF5_ae = 15;
    const int autoED918FF5_ai = 1;
    const int auto554B2FB3_ae = 3;
    const int auto554B2FB3_ai = 1;
    const int auto8CA70DDE_ae = 5;
    const int auto8CA70DDE_ai = 1;
    const int auto977DA14B_ae = 6;
    const int auto977DA14B_ai = 1;
    const int auto1D52CB56_ae = 2;
    const int auto1D52CB56_ai = 1;
    const int auto0C901D3C_ae = 10;
    const int auto0C901D3C_ai = 1;
    const int auto143F5F30_ae = 10;
    const int auto143F5F30_ai = 1;
    const int autoA1081EE8_ae = 3;
    const int autoA1081EE8_ai = 1;
    const int auto7C1D9A24_ae = 3;
    const int auto7C1D9A24_ai = 1;
    const int auto5A223863_ae = 15;
    const int auto5A223863_ai = 1;
    const int auto2624BB8B_ae = 1;
    const int auto2624BB8B_ai = 1;
    const int autoE2A33A90_ae = 6;
    const int autoE2A33A90_ai = 1;
    const int auto0F1B4835_ae = 20;
    const int auto0F1B4835_ai = 1;
    const int autoDF3C7CAC_ae = 15;
    const int autoDF3C7CAC_ai = 1;
    const int autoB5E5C170_ae = 3;
    const int autoB5E5C170_ai = 1;
    const int autoC0B77E95_ae = 2;
    const int autoC0B77E95_ai = 1;
    const int auto1E2F8BF6_ae = 4;
    const int auto1E2F8BF6_ai = 1;
    const int auto6E9FE610_ae = 10;
    const int auto6E9FE610_ai = 1;
    const int autoA24209A4_ae = 1;
    const int autoA24209A4_ai = 1;
    const int auto7B1DAFC1_ae = 2;
    const int auto7B1DAFC1_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_tempColor[init_i] = Color(0,0,0);
    }

    // Implementation
    lv_tempSplat[1] = "Assets\\Textures\\bloodsplat_4.dds";
    lv_tempSplat[2] = "Assets\\Textures\\bloodsplat_3.dds";
    lv_tempSplat[3] = "Assets\\Textures\\bloodspillalpha2.dds";
    lv_tempSplat[4] = "Assets\\Textures\\blood_tendril3.dds";
    DialogCreate(1200, 1000, c_anchorCenter, -230, -50, true);
    gv_inventoryDialogStashBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 75;
    lv_xSize = 715;
    lv_ySize = 850;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 90, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 450), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoC2DDFCD8_ai >= 0 && lv_index <= autoC2DDFCD8_ae) || (autoC2DDFCD8_ai < 0 && lv_index >= autoC2DDFCD8_ae) ) ; lv_index += autoC2DDFCD8_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 650)), ((lv_yPos + 30) + RandomInt(1, 700)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 310), (lv_yPos + 25), StringExternal("Param/Value/F424C191"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 710;
    lv_yPos = 80;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnbloodelfpeasant.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xSize = 90;
    lv_ySize = 90;
    lv_yPos = 150;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (auto146B7BF4_ai >= 0 && lv_index <= auto146B7BF4_ae) || (auto146B7BF4_ai < 0 && lv_index >= auto146B7BF4_ae) ) ; lv_index += auto146B7BF4_ai ) {
        lv_xPos = 100;
        lv_index2 = 1;
        for ( ; ( (auto75150206_ai >= 0 && lv_index2 <= auto75150206_ae) || (auto75150206_ai < 0 && lv_index2 >= auto75150206_ae) ) ; lv_index2 += auto75150206_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogStashItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 27, 27, c_anchorTopLeft, (lv_xPos + 9), (lv_yPos + 9), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogStashItems[lv_itemSlot][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_inventoryDialogStashItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 12), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 12), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogStashItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 105;
        }
        lv_yPos += 100;
    }
    lv_tempText[1] = StringExternal("Param/Value/1300C71E");
    lv_tempText[2] = StringExternal("Param/Value/041F0FE1");
    lv_tempText[3] = StringExternal("Param/Value/A8049281");
    lv_tempText[4] = StringExternal("Param/Value/05B2E08A");
    lv_tempText[5] = StringExternal("Param/Value/E20D57F5");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(100.00, 100.00, 100.00);
    lv_tempColor[5] = Color(0.00, 50.20, 100.00);
    lv_index2 = 1;
    for ( ; ( (auto36690931_ai >= 0 && lv_index2 <= auto36690931_ae) || (auto36690931_ai < 0 && lv_index2 >= auto36690931_ae) ) ; lv_index2 += auto36690931_ai ) {
        lv_xSize = 120;
        lv_ySize = 120;
        lv_xPos = (-255 + (lv_index2 * 400));
        lv_yPos = 685;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogStashSelectedItem[lv_index2][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 12), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogStashSelectedItem[lv_index2][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogStashSelectedItem[lv_index2][2] = DialogControlLastCreated();
        lv_xSize = 200;
        lv_ySize = 70;
        lv_xPos = (-295 + (lv_index2 * 400));
        lv_yPos = 810;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_inventoryDialogStashButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 27), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xSize = 200;
    lv_ySize = 70;
    lv_xPos = 305;
    lv_yPos = 865;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[3], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_inventoryDialogStashButtons[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 37), (lv_yPos + 18), lv_tempText[3], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 180;
    lv_ySize = 60;
    lv_xPos = 115;
    lv_yPos = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[4], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_inventoryDialogStashButtons[4] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 50.20, 25.10), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_inventoryDialogStashButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 16), lv_tempText[4], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 180;
    lv_ySize = 60;
    lv_xPos = 315;
    lv_yPos = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[5], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_inventoryDialogStashButtons[6] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 16), lv_tempText[5], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos += 195;
    lv_yPos = 600;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos + 2), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 14), StringToText(""), gv_currencyIcons[1][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 10), StringToText(""), gv_currencyIcons[1][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 16), StringExternal("Param/Value/9FD3B960"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_inventoryDialogStashButtons[7] = DialogControlLastCreated();
    lv_xSize = 120;
    lv_ySize = 120;
    lv_xPos = 345;
    lv_yPos = 720;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 0), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_inventoryDialogStashTabs[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 0), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 0), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\battlestation_number_decals_diff_01.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
    gv_inventoryDialogStashTabs[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 30), (lv_ySize + 32), c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 16), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    DialogCreate(1100, 1000, c_anchorCenter, -130, -100, true);
    gv_itemVendorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_tempText[1] = StringExternal("Param/Value/109C96F1");
    lv_tempText[2] = StringExternal("Param/Value/83A62801");
    lv_tempText[3] = StringExternal("Param/Value/F599CD7A");
    lv_tempText[4] = StringExternal("Param/Value/E5023872");
    lv_tempText[5] = StringExternal("Param/Value/66FA0F41");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index2 = 1;
    for ( ; ( (auto36AFA2B0_ai >= 0 && lv_index2 <= auto36AFA2B0_ae) || (auto36AFA2B0_ai < 0 && lv_index2 >= auto36AFA2B0_ae) ) ; lv_index2 += auto36AFA2B0_ai ) {
        lv_xPos = (-650 + (lv_index2 * 700));
        lv_yPos = 300;
        lv_xSize = 300;
        lv_ySize = 375;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        lv_index = 1;
        for ( ; ( (autoE1754B4E_ai >= 0 && lv_index <= autoE1754B4E_ae) || (autoE1754B4E_ai < 0 && lv_index >= autoE1754B4E_ae) ) ; lv_index += autoE1754B4E_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 30)), (50 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 240)), ((lv_yPos + 15) + RandomInt(1, 380)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 40, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 100), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 109), StringExternal("Param/Value/B07FFB52"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_itemVendorDialogSelectedItem[lv_index2][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 54), (lv_yPos + 104), StringToText(""), gv_currencyIcons[lv_index2][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 100), StringToText(""), gv_currencyIcons[lv_index2][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 90), (lv_yPos + 24), lv_tempText[(3 + lv_index2)], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xSize = 120;
        lv_ySize = 120;
        lv_xPos = 130;
        lv_xPos = (-560 + (lv_index2 * 700));
        lv_yPos = 490;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_itemVendorDialogSelectedItem[lv_index2][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 14), (lv_yPos + 14), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_itemVendorDialogSelectedItem[lv_index2][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_itemVendorDialogSelectedItem[lv_index2][2] = DialogControlLastCreated();
        lv_xSize = 200;
        lv_ySize = 70;
        lv_xPos = (-600 + (lv_index2 * 700));
        lv_yPos = 620;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_itemVendorDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 18), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 300;
    lv_yPos = 150;
    lv_xSize = 500;
    lv_ySize = 660;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto0BEF81C9_ai >= 0 && lv_index <= auto0BEF81C9_ae) || (auto0BEF81C9_ai < 0 && lv_index >= auto0BEF81C9_ae) ) ; lv_index += auto0BEF81C9_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 420)), ((lv_yPos + 30) + RandomInt(1, 550)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 170), (lv_yPos + 25), StringExternal("Param/Value/C5F0BD05"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 200;
    lv_ySize = 70;
    lv_xPos = 450;
    lv_yPos = 750;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[3], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_itemVendorDialogButtons[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 18), lv_tempText[3], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 75;
    lv_ySize = 75;
    lv_yPos = 240;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (auto8376676B_ai >= 0 && lv_index <= auto8376676B_ae) || (auto8376676B_ai < 0 && lv_index >= auto8376676B_ae) ) ; lv_index += auto8376676B_ai ) {
        lv_xPos = 365;
        lv_index2 = 1;
        for ( ; ( (autoCF0BB917_ai >= 0 && lv_index2 <= autoCF0BB917_ae) || (autoCF0BB917_ai < 0 && lv_index2 >= autoCF0BB917_ae) ) ; lv_index2 += autoCF0BB917_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemVendorDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemVendorDialogItems[lv_itemSlot][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_itemVendorDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemVendorDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 97;
        }
        lv_yPos += 86;
    }
    lv_xPos = 150;
    lv_yPos = 90;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnmilitia.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogCreate(800, 800, c_anchorCenter, -450, -150, true);
    gv_potionVendorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 125;
    lv_xSize = 650;
    lv_ySize = 525;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto1F8AFB5F_ai >= 0 && lv_index <= auto1F8AFB5F_ae) || (auto1F8AFB5F_ai < 0 && lv_index >= auto1F8AFB5F_ae) ) ; lv_index += auto1F8AFB5F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 600)), ((lv_yPos + 30) + RandomInt(1, 460)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 235), (lv_yPos + 25), StringExternal("Param/Value/86D6E00B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_tempText[1] = StringExternal("Param/Value/CAE8028A");
    lv_tempText[2] = StringExternal("Param/Value/B6F976BD");
    lv_tempText[3] = StringExternal("Param/Value/D8A1EB85");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_xSize = 210;
    lv_ySize = 68;
    lv_xPos = 85;
    lv_yPos = 600;
    lv_index = 1;
    for ( ; ( (auto1BF53D1F_ai >= 0 && lv_index <= auto1BF53D1F_ae) || (auto1BF53D1F_ai < 0 && lv_index >= auto1BF53D1F_ae) ) ; lv_index += auto1BF53D1F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_potionVendorDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 235;
    }
    lv_xSize = 130;
    lv_ySize = 130;
    lv_xPos = 360;
    lv_yPos = 470;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 260, 60, c_anchorTopLeft, (lv_xPos - 65), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos - 3), (lv_yPos - 30), StringExternal("Param/Value/D287BEA2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_potionVendorDialogSelectedItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_potionVendorDialogSelectedItem[2] = DialogControlLastCreated();
    lv_xPos = 330;
    lv_yPos = 290;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 40, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 100), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos - 20), (lv_yPos + 109), StringExternal("Param/Value/42795E4E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 109), StringExternal("Param/Value/08F9123E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_potionVendorDialogSelectedItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 54), (lv_yPos + 106), StringToText(""), gv_currencyIcons[1][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 102), StringToText(""), gv_currencyIcons[1][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xSize = 80;
    lv_ySize = 80;
    lv_yPos = 220;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (auto61BBD2CB_ai >= 0 && lv_index <= auto61BBD2CB_ae) || (auto61BBD2CB_ai < 0 && lv_index >= auto61BBD2CB_ae) ) ; lv_index += auto61BBD2CB_ai ) {
        lv_xPos = 260;
        lv_index2 = 1;
        for ( ; ( (autoC2E081E0_ai >= 0 && lv_index2 <= autoC2E081E0_ae) || (autoC2E081E0_ai < 0 && lv_index2 >= autoC2E081E0_ae) ) ; lv_index2 += autoC2E081E0_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_potionVendorDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 8), (lv_ySize - 8), c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_potionVendorDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_potionVendorDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 115;
        }
        lv_yPos += 85;
    }
    lv_yPos = 305;
    lv_xPos = 145;
    lv_itemSlot = 9;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\war3_btnelunesblessing.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_potionVendorDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 8), (lv_ySize - 8), c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringExternal("Param/Value/BC50724A"), StringToText(""), gv_dialogHighlighted);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
    gv_potionVendorDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_potionVendorDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
    lv_xPos = 10;
    lv_yPos = 60;
    lv_xSize = 195;
    lv_ySize = 230;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnorcwarlock.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogCreate(700, 600, c_anchorBottomRight, -45, 130, true);
    gv_inventoryDialogPackBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 20;
    lv_yPos = 325;
    lv_xSize = 380;
    lv_ySize = 185;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto993B2D8F_ai >= 0 && lv_index <= auto993B2D8F_ae) || (auto993B2D8F_ai < 0 && lv_index >= auto993B2D8F_ae) ) ; lv_index += auto993B2D8F_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 20)), (35 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 220)), ((lv_yPos + 15) + RandomInt(1, 100)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 165), (lv_yPos + 28), StringExternal("Param/Value/05DD2295"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 100;
    lv_ySize = 100;
    lv_xPos = 190;
    lv_yPos = 380;
    lv_index = 1;
    for ( ; ( (autoD065C7EB_ai >= 0 && lv_index <= autoD065C7EB_ae) || (autoD065C7EB_ai < 0 && lv_index >= autoD065C7EB_ae) ) ; lv_index += autoD065C7EB_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogPackSelected[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, (lv_xPos + 9), (lv_yPos + 9), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogPackSelected[4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogPackSelected[2] = DialogControlLastCreated();
    }
    lv_xPos = 0;
    lv_yPos = 318;
    lv_xSize = 170;
    lv_ySize = 60;
    lv_tempText[1] = StringExternal("Param/Value/8FB43862");
    lv_tempText[2] = StringExternal("Param/Value/1B4CB61A");
    lv_tempText[3] = StringExternal("Param/Value/5F662B7F");
    lv_tempText[4] = StringExternal("Param/Value/49B4502E");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto0ADD2AD4_ai >= 0 && lv_index <= auto0ADD2AD4_ae) || (auto0ADD2AD4_ai < 0 && lv_index >= auto0ADD2AD4_ae) ) ; lv_index += auto0ADD2AD4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_inventoryDialogPackButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 21), (lv_yPos + 12), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yPos += 65;
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 135), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 50.20, 0.00), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_inventoryDialogPackButtons[0] = DialogControlLastCreated();
    lv_xPos = 170;
    lv_yPos = 305;
    lv_xSize = 137;
    lv_ySize = 50;
    lv_index = 4;
    for ( ; ( (auto5B4D8E5D_ai >= 0 && lv_index <= auto5B4D8E5D_ae) || (auto5B4D8E5D_ai < 0 && lv_index >= auto5B4D8E5D_ae) ) ; lv_index += auto5B4D8E5D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_inventoryDialogPackButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 21), (lv_yPos + 11), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 300;
    lv_yPos = 0;
    lv_xSize = 367;
    lv_ySize = 485;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoF24E2011_ai >= 0 && lv_index <= autoF24E2011_ae) || (autoF24E2011_ai < 0 && lv_index >= autoF24E2011_ae) ) ; lv_index += autoF24E2011_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (30 + RandomInt(1, 30)), (30 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 20) + RandomInt(1, 300)), ((lv_yPos + 20) + RandomInt(1, 500)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 105), (lv_yPos + 25), StringExternal("Param/Value/111D510D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), 100, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 355), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 135), (lv_yPos + 375), StringExternal("Param/Value/70C37FEF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 610;
    lv_yPos = 5;
    lv_xSize = 45;
    lv_ySize = 45;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 4), (lv_ySize + 4), c_anchorTopLeft, (lv_xPos - 2), (lv_yPos - 2), StringToText(""), "Assets\\Textures\\btn-command-stop.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 8), (lv_ySize - 8), c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_inventoryDialogPackItems[0][0] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    lv_xSize = 55;
    lv_ySize = 55;
    lv_yPos = 75;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (autoC39ED24F_ai >= 0 && lv_index <= autoC39ED24F_ae) || (autoC39ED24F_ai < 0 && lv_index >= autoC39ED24F_ae) ) ; lv_index += autoC39ED24F_ai ) {
        lv_xPos = 336;
        lv_index2 = 1;
        for ( ; ( (auto7D5C2B0C_ai >= 0 && lv_index2 <= auto7D5C2B0C_ae) || (auto7D5C2B0C_ai < 0 && lv_index2 >= auto7D5C2B0C_ae) ) ; lv_index2 += auto7D5C2B0C_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogPackItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 22, 22, c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogPackItems[lv_itemSlot][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_inventoryDialogPackItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            if ((lv_itemSlot > 25)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogPackItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 60;
        }
        lv_yPos += 60;
        if ((lv_itemSlot == 26)) {
            lv_yPos += 25;
        }

    }
    DialogCreate(300, 400, c_anchorBottomLeft, -12, 225, true);
    gv_inventoryDialogEquippedBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 0;
    lv_yPos = 0;
    lv_xSize = 250;
    lv_ySize = 310;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\wireframe-terran-civilianprisoner.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 65), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoA42BEDD4_ai >= 0 && lv_index <= autoA42BEDD4_ae) || (autoA42BEDD4_ai < 0 && lv_index >= autoA42BEDD4_ae) ) ; lv_index += autoA42BEDD4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 20)), (20 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 15) + RandomInt(1, 200)), ((lv_yPos + 15) + RandomInt(1, 260)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 70), (lv_yPos + 25), StringExternal("Param/Value/F419DEBF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_index = 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 75;
    lv_tempText[lv_index] = StringExternal("Param/Value/28C1B580");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 75;
    lv_tempText[lv_index] = StringExternal("Param/Value/C93AC2AF");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 150;
    lv_tempText[lv_index] = StringExternal("Param/Value/AE6C67C2");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 100;
    lv_tempXY[lv_index][2] = 225;
    lv_tempText[lv_index] = StringExternal("Param/Value/2A8D1462");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 225;
    lv_tempText[lv_index] = StringExternal("Param/Value/2C1B2DF2");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 35;
    lv_tempXY[lv_index][2] = 150;
    lv_tempText[lv_index] = StringExternal("Param/Value/D4850EBB");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 150;
    lv_tempText[lv_index] = StringExternal("Param/Value/7456ECE6");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 75;
    lv_tempText[lv_index] = StringExternal("Param/Value/3674A9E8");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 165;
    lv_tempXY[lv_index][2] = 225;
    lv_tempText[lv_index] = StringExternal("Param/Value/A8E78CF3");
    lv_index += 1;
    lv_tempXY[lv_index][1] = 22;
    lv_tempXY[lv_index][2] = 20;
    lv_tempText[lv_index] = StringExternal("Param/Value/CED8053B");
    lv_xSize = 50;
    lv_ySize = 50;
    lv_index = 1;
    for ( ; ( (auto31E88547_ai >= 0 && lv_index <= auto31E88547_ae) || (auto31E88547_ai < 0 && lv_index >= auto31E88547_ae) ) ; lv_index += auto31E88547_ai ) {
        lv_xPos = lv_tempXY[lv_index][1];
        lv_yPos = lv_tempXY[lv_index][2];
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), lv_tempText[lv_index], "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 22, 22, c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), gv_itemsBaseName[lv_index][0][0], StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
        gv_inventoryDialogEquippedItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][2] = DialogControlLastCreated();
    }
    lv_xSize = 40;
    lv_ySize = 40;
    lv_index = 10;
    for ( ; ( (auto115EA37C_ai >= 0 && lv_index <= auto115EA37C_ae) || (auto115EA37C_ai < 0 && lv_index >= auto115EA37C_ae) ) ; lv_index += auto115EA37C_ai ) {
        lv_xPos = lv_tempXY[lv_index][1];
        lv_yPos = lv_tempXY[lv_index][2];
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), lv_tempText[lv_index], "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 22, 22, c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), gv_itemsBaseName[lv_index][0][0], StringToText(""), gv_dialogHighlighted);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
        gv_inventoryDialogEquippedItems[lv_index][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogEquippedItems[lv_index][2] = DialogControlLastCreated();
    }
    lv_itemSlot = 0;
    lv_index3 = 1;
    for ( ; ( (auto06FCB48E_ai >= 0 && lv_index3 <= auto06FCB48E_ae) || (auto06FCB48E_ai < 0 && lv_index3 >= auto06FCB48E_ae) ) ; lv_index3 += auto06FCB48E_ai ) {
        lv_index2 = 1;
        for ( ; ( (autoF2FA27B1_ai >= 0 && lv_index2 <= autoF2FA27B1_ae) || (autoF2FA27B1_ai < 0 && lv_index2 >= autoF2FA27B1_ae) ) ; lv_index2 += autoF2FA27B1_ai ) {
            lv_itemSlot += 1;
            DialogCreate(300, 200, c_anchorTopLeft, (-275 + (265 * lv_index3)), ((lv_index2 * 130) - 130), true);
            gv_inventoryDialogDropBox[lv_itemSlot] = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            lv_xPos = 0;
            lv_yPos = 0;
            lv_xSize = 140;
            lv_ySize = 140;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
            lv_index = 1;
            for ( ; ( (auto74AF4275_ai >= 0 && lv_index <= auto74AF4275_ae) || (auto74AF4275_ai < 0 && lv_index >= auto74AF4275_ae) ) ; lv_index += auto74AF4275_ai ) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (20 + RandomInt(1, 20)), (20 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 200)), ((lv_yPos + 15) + RandomInt(1, 100)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
            }
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            lv_xSize = 100;
            lv_ySize = 10;
            lv_xPos = 20;
            lv_yPos = 115;
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_void_shared_progressbarfill.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), "Assets\\Textures\\ui_void_shared_progressbarfill.dds", c_triggerImageTypeNormal, false, Color(58.82, 78.43, 100.00), c_triggerBlendModeNormal);
            gv_inventoryDialogDropTimer[lv_itemSlot][2] = DialogControlLastCreated();
            lv_xSize = 90;
            lv_ySize = 90;
            lv_xPos = 25;
            lv_yPos = 27;
            lv_index = 1;
            for ( ; ( (autoD42190B8_ai >= 0 && lv_index <= autoD42190B8_ae) || (autoD42190B8_ai < 0 && lv_index >= autoD42190B8_ae) ) ; lv_index += autoD42190B8_ai ) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 6), (lv_ySize - 6), c_anchorTopLeft, (lv_xPos + 3), (lv_yPos + 3), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_inventoryDialogDropItems[lv_itemSlot][1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 27, 27, c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_inventoryDialogDropItems[lv_itemSlot][4] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                gv_inventoryDialogDropItems[lv_itemSlot][2] = DialogControlLastCreated();
            }
            lv_xPos = 120;
            lv_yPos = 3;
            lv_xSize = 50;
            lv_ySize = 130;
            lv_tempText[1] = StringExternal("Param/Value/767B1DED");
            lv_tempText[2] = StringExternal("Param/Value/06BD4F7C");
            lv_tempText[3] = StringExternal("Param/Value/F6E454C4");
            lv_tempColor[1] = Color(100.00, 100.00, 100.00);
            lv_tempColor[2] = Color(0.00, 50.20, 100.00);
            lv_tempColor[3] = Color(100.00, 0.00, 0.00);
            lv_index = 1;
            for ( ; ( (autoEB8DB056_ai >= 0 && lv_index <= autoEB8DB056_ae) || (autoEB8DB056_ai < 0 && lv_index >= autoEB8DB056_ae) ) ; lv_index += autoEB8DB056_ai ) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
                gv_inventoryDialogDropButtons[lv_itemSlot][lv_index] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 200, c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_xPos += 50;
            }
        }
    }
    DialogCreate(1050, 900, c_anchorTopLeft, 120, 0, true);
    gv_itemHonorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 100;
    lv_xSize = 775;
    lv_ySize = 700;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoED4DA46A_ai >= 0 && lv_index <= autoED4DA46A_ae) || (autoED4DA46A_ai < 0 && lv_index >= autoED4DA46A_ae) ) ; lv_index += autoED4DA46A_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 40)), (35 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 50) + RandomInt(1, 675)), ((lv_yPos + 50) + RandomInt(1, 600)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 265), (lv_yPos + 30), StringExternal("Param/Value/91F1098D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 700;
    lv_yPos = 75;
    lv_xSize = 210;
    lv_ySize = 250;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnpandarenbrewmaster.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xSize = 110;
    lv_ySize = 110;
    lv_xPos = 170;
    lv_yPos = 560;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemHonorDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 10), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemHonorDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemHonorDialogItem[2] = DialogControlLastCreated();
    lv_yPos = 730;
    lv_xPos = 180;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 180, 55, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 50), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 64), (lv_ySize - 64), c_anchorTopLeft, (lv_xPos - 20), (lv_yPos - 45), StringToText(""), gv_currencyIcons[3][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), (lv_ySize - 50), c_anchorTopLeft, (lv_xPos - 27), (lv_yPos - 52), StringToText(""), gv_currencyIcons[3][2], c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos - 35), StringExternal("Param/Value/E49F951A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_itemHonorDialogItem[3] = DialogControlLastCreated();
    lv_xPos = 150;
    lv_yPos = 740;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/33597F36");
    lv_tempText[2] = StringExternal("Param/Value/4816C0D5");
    lv_tempText[3] = StringExternal("Param/Value/F3EECDB5");
    lv_tempText[4] = StringExternal("Param/Value/65BA1EB2");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_tempColor[4] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto96A326C8_ai >= 0 && lv_index <= auto96A326C8_ae) || (auto96A326C8_ai < 0 && lv_index >= auto96A326C8_ae) ) ; lv_index += auto96A326C8_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_itemHonorDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 233;
    }
    lv_xPos = 140;
    lv_yPos = 490;
    lv_xSize = 170;
    lv_ySize = 55;
    lv_index = 4;
    for ( ; ( (auto08D1386B_ai >= 0 && lv_index <= auto08D1386B_ae) || (auto08D1386B_ai < 0 && lv_index >= auto08D1386B_ae) ) ; lv_index += auto08D1386B_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_itemHonorDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos + 16), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 160;
    lv_yPos = 220;
    lv_xSize = 115;
    lv_ySize = 255;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_itemHonorDialogDropdown[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    lv_index = 1;
    for ( ; ( (autoA6ACBA94_ai >= 0 && lv_index <= autoA6ACBA94_ae) || (autoA6ACBA94_ai < 0 && lv_index >= autoA6ACBA94_ae) ) ; lv_index += autoA6ACBA94_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/C8BD10D7") + gv_itemsBaseName[lv_index][0][0]));
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), 45, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos - 35), StringExternal("Param/Value/2F7E4153"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 310;
    lv_yPos = 230;
    lv_xSize = 115;
    lv_ySize = 110;
    lv_tempText[1] = StringExternal("Param/Value/3E3DB623");
    lv_tempText[2] = StringExternal("Param/Value/864B183E");
    lv_tempText[3] = StringExternal("Param/Value/6E8F4287");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_itemHonorDialogDropdown[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    lv_index = 1;
    for ( ; ( (autoBB139E5E_ai >= 0 && lv_index <= autoBB139E5E_ae) || (autoBB139E5E_ai < 0 && lv_index >= autoBB139E5E_ae) ) ; lv_index += autoBB139E5E_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/2CD132A0") + lv_tempText[lv_index]));
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), 45, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 22), (lv_yPos - 35), StringExternal("Param/Value/A23FACB1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 460;
    lv_yPos = 230;
    lv_xSize = 135;
    lv_ySize = 110;
    lv_tempText[1] = StringExternal("Param/Value/DC74C06B");
    lv_tempText[2] = StringExternal("Param/Value/F5DBA76B");
    lv_tempText[3] = StringExternal("Param/Value/B6796528");
    lv_tempText[4] = StringExternal("Param/Value/CC2A960D");
    lv_tempText[5] = StringExternal("Param/Value/09B4267A");
    lv_tempText[6] = StringExternal("Param/Value/A88A8353");
    lv_tempText[7] = StringExternal("Param/Value/10387051");
    lv_tempText[8] = StringExternal("Param/Value/D38507B9");
    lv_tempText[9] = StringExternal("Param/Value/71310CEB");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_itemHonorDialogDropdown[3] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    lv_index = 1;
    for ( ; ( (auto66CB5A52_ai >= 0 && lv_index <= auto66CB5A52_ae) || (auto66CB5A52_ai < 0 && lv_index >= auto66CB5A52_ae) ) ; lv_index += auto66CB5A52_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/EE6AAD71") + lv_tempText[lv_index]));
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), 45, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 22), (lv_yPos - 35), StringExternal("Param/Value/6DFD03A0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 340;
    lv_yPos = 400;
    lv_xSize = 220;
    lv_ySize = 290;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_itemHonorDialogDropdown[4] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/C045D2AF") + StringExternal("Param/Value/A4353D01")));
    lv_index = 1;
    for ( ; ( (autoF4D1E44F_ai >= 0 && lv_index <= autoF4D1E44F_ae) || (autoF4D1E44F_ai < 0 && lv_index >= autoF4D1E44F_ae) ) ; lv_index += autoF4D1E44F_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/12B70C08") + gv_itemsStatTooltipType[lv_index]));
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), 45, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 35), StringExternal("Param/Value/1D68FB47"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 590;
    lv_yPos = 400;
    lv_xSize = 220;
    lv_ySize = 290;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_itemHonorDialogDropdown[5] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/59CC0510") + StringExternal("Param/Value/493FC8A5")));
    lv_index = 1;
    for ( ; ( (autoF72E6272_ai >= 0 && lv_index <= autoF72E6272_ae) || (autoF72E6272_ai < 0 && lv_index >= autoF72E6272_ae) ) ; lv_index += autoF72E6272_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/E3672D1E") + gv_itemsStatTooltipType[lv_index]));
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 50), 45, c_anchorTopLeft, (lv_xPos - 25), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 20), (lv_yPos - 35), StringExternal("Param/Value/529AF23A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(700, 975, c_anchorTopLeft, 425, 75, true);
    gv_itemSurvivalDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 50;
    lv_yPos = 50;
    lv_xSize = 600;
    lv_ySize = 875;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 200), 50, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 165), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoED918FF5_ai >= 0 && lv_index <= autoED918FF5_ae) || (autoED918FF5_ai < 0 && lv_index >= autoED918FF5_ae) ) ; lv_index += autoED918FF5_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 525)), ((lv_yPos + 30) + RandomInt(1, 800)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 245), (lv_yPos + 25), StringExternal("Param/Value/72D5D49B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 310, 45, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 82), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 90), StringExternal("Param/Value/FE8D7806"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 290), (lv_yPos + 90), StringExternal("Param/Value/7D85F61B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_itemSurvivalDialogTextItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 270, 45, c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 122), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 130), StringExternal("Param/Value/AB3CEAC2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 242), (lv_yPos + 128), StringToText(""), gv_currencyIcons[3][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 48, 48, c_anchorTopLeft, (lv_xPos + 235), (lv_yPos + 121), StringToText(""), gv_currencyIcons[3][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 290), (lv_yPos + 130), StringExternal("Param/Value/B7672342"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_itemSurvivalDialogTextItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 170, 45, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 192), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 80), (lv_yPos + 202), StringExternal("Param/Value/D5A3096A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 200), (lv_yPos + 200), StringExternal("Param/Value/F652BF6D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_itemSurvivalDialogTextItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 45, c_anchorTopLeft, (lv_xPos + 325), (lv_yPos + 82), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 370), (lv_yPos + 90), StringExternal("Param/Value/EF9D3B5C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 485), (lv_yPos + 90), StringExternal("Param/Value/FB1CD0BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_itemSurvivalDialogTextItems[4] = DialogControlLastCreated();
    lv_xSize = 120;
    lv_ySize = 120;
    lv_xPos = 130;
    lv_xPos = 290;
    lv_yPos = 735;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 45, c_anchorTopLeft, (lv_xPos - 30), (lv_yPos - 43), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 0), (lv_yPos - 35), StringExternal("Param/Value/75291D7F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemSurvivalDialogSelectedItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 12), (lv_yPos + 12), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemSurvivalDialogSelectedItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_itemSurvivalDialogSelectedItem[2] = DialogControlLastCreated();
    lv_xPos = 45;
    lv_yPos = 865;
    lv_xSize = 190;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/5974097A");
    lv_tempText[2] = StringExternal("Param/Value/EDE9A23C");
    lv_tempText[3] = StringExternal("Param/Value/135B8CF0");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto554B2FB3_ai >= 0 && lv_index <= auto554B2FB3_ae) || (auto554B2FB3_ai < 0 && lv_index >= auto554B2FB3_ae) ) ; lv_index += auto554B2FB3_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_itemSurvivalDialogMainButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 18), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 210;
    }
    lv_xSize = 75;
    lv_ySize = 75;
    lv_yPos = 290;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (auto8CA70DDE_ai >= 0 && lv_index <= auto8CA70DDE_ae) || (auto8CA70DDE_ai < 0 && lv_index >= auto8CA70DDE_ae) ) ; lv_index += auto8CA70DDE_ai ) {
        lv_xPos = 100;
        lv_index2 = 1;
        for ( ; ( (auto977DA14B_ai >= 0 && lv_index2 <= auto977DA14B_ae) || (auto977DA14B_ai < 0 && lv_index2 >= auto977DA14B_ae) ) ; lv_index2 += auto977DA14B_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemSurvivalDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 27, 27, c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemSurvivalDialogItems[lv_itemSlot][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_itemSurvivalDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_itemSurvivalDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 85;
        }
        lv_yPos += 80;
    }
    DialogCreate(1000, 900, c_anchorCenter, -130, -100, true);
    gv_raritiesVendorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_tempText[1] = StringExternal("Param/Value/A6F22F40");
    lv_tempText[2] = StringExternal("Param/Value/55500868");
    lv_tempText[3] = StringExternal("Param/Value/3AD1982E");
    lv_tempText[4] = StringExternal("Param/Value/80379161");
    lv_tempText[5] = StringExternal("Param/Value/180EAD20");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_index2 = 1;
    for ( ; ( (auto1D52CB56_ai >= 0 && lv_index2 <= auto1D52CB56_ae) || (auto1D52CB56_ai < 0 && lv_index2 >= auto1D52CB56_ae) ) ; lv_index2 += auto1D52CB56_ai ) {
        lv_xPos = (-635 + (lv_index2 * 650));
        lv_yPos = 365;
        lv_xSize = 280;
        lv_ySize = 330;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        lv_index = 1;
        for ( ; ( (auto0C901D3C_ai >= 0 && lv_index <= auto0C901D3C_ae) || (auto0C901D3C_ai < 0 && lv_index >= auto0C901D3C_ae) ) ; lv_index += auto0C901D3C_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 + RandomInt(1, 30)), (50 + RandomInt(1, 30)), c_anchorTopLeft, ((lv_xPos + 0) + RandomInt(1, 240)), ((lv_yPos + 15) + RandomInt(1, 380)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 40, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 100), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 109), StringExternal("Param/Value/9532B5F2"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_raritiesVendorDialogSelectedItem[lv_index2][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 54), (lv_yPos + 104), StringToText(""), gv_currencyIcons[lv_index2][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 100), StringToText(""), gv_currencyIcons[lv_index2][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 90), (lv_yPos + 24), lv_tempText[(3 + lv_index2)], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xSize = 120;
        lv_ySize = 120;
        lv_xPos = (-555 + (lv_index2 * 650));
        lv_yPos = 525;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_raritiesVendorDialogSelectedItem[lv_index2][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 14), (lv_yPos + 14), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_raritiesVendorDialogSelectedItem[lv_index2][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_raritiesVendorDialogSelectedItem[lv_index2][2] = DialogControlLastCreated();
        lv_xSize = 190;
        lv_ySize = 65;
        lv_xPos = (-590 + (lv_index2 * 650));
        lv_yPos = 650;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index2], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_raritiesVendorDialogButtons[lv_index2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 60), (lv_yPos + 16), lv_tempText[lv_index2], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 250;
    lv_yPos = 150;
    lv_xSize = 465;
    lv_ySize = 510;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 35), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto143F5F30_ai >= 0 && lv_index <= auto143F5F30_ae) || (auto143F5F30_ai < 0 && lv_index >= auto143F5F30_ae) ) ; lv_index += auto143F5F30_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 420)), ((lv_yPos + 30) + RandomInt(1, 550)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 170), (lv_yPos + 25), StringExternal("Param/Value/B0AA43A6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 190;
    lv_ySize = 65;
    lv_xPos = 380;
    lv_yPos = 610;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[3], c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
    gv_raritiesVendorDialogButtons[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 18), lv_tempText[3], ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 80;
    lv_ySize = 80;
    lv_yPos = 250;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (autoA1081EE8_ai >= 0 && lv_index <= autoA1081EE8_ae) || (autoA1081EE8_ai < 0 && lv_index >= autoA1081EE8_ae) ) ; lv_index += autoA1081EE8_ai ) {
        lv_xPos = 340;
        lv_index2 = 1;
        for ( ; ( (auto7C1D9A24_ai >= 0 && lv_index2 <= auto7C1D9A24_ae) || (auto7C1D9A24_ai < 0 && lv_index2 >= auto7C1D9A24_ae) ) ; lv_index2 += auto7C1D9A24_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_raritiesVendorDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_raritiesVendorDialogItems[lv_itemSlot][4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 0), (lv_ySize - 0), c_anchorTopLeft, (lv_xPos + 0), (lv_yPos + 0), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_raritiesVendorDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 10), (lv_ySize + 10), c_anchorTopLeft, (lv_xPos - 5), (lv_yPos - 5), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_raritiesVendorDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 103;
        }
        lv_yPos += 92;
    }
    lv_xPos = 150;
    lv_yPos = 90;
    lv_xSize = 190;
    lv_ySize = 220;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnzombie.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogCreate(500, 600, c_anchorRight, 300, -30, true);
    gv_lootFilterDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 25;
    lv_yPos = 25;
    lv_xSize = 450;
    lv_ySize = 465;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto5A223863_ai >= 0 && lv_index <= auto5A223863_ae) || (auto5A223863_ai < 0 && lv_index >= auto5A223863_ae) ) ; lv_index += auto5A223863_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 40)), (35 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 50) + RandomInt(1, 335)), ((lv_yPos + 50) + RandomInt(1, 360)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTopLeft, (lv_xPos + 150), (lv_yPos + 30), StringExternal("Param/Value/606376C0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 155;
    lv_yPos = 435;
    lv_xSize = 190;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/03ACAD8C");
    lv_tempText[2] = StringExternal("Param/Value/4E6B21FD");
    lv_tempColor[1] = Color(0.00, 50.20, 100.00);
    lv_tempColor[2] = Color(100.00, 0.00, 0.00);
    lv_index = 1;
    for ( ; ( (auto2624BB8B_ai >= 0 && lv_index <= auto2624BB8B_ae) || (auto2624BB8B_ai < 0 && lv_index >= auto2624BB8B_ae) ) ; lv_index += auto2624BB8B_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_lootFilterDialogButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 42), (lv_yPos + 19), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xPos = 75;
    lv_yPos = 135;
    lv_xSize = 150;
    lv_ySize = 200;
    lv_tempText[1] = StringExternal("Param/Value/DD70E2C8");
    lv_tempText[2] = StringExternal("Param/Value/18F20031");
    lv_tempText[3] = StringExternal("Param/Value/69B0C72A");
    lv_tempText[4] = StringExternal("Param/Value/5B72C088");
    lv_tempText[5] = StringExternal("Param/Value/130CAE47");
    lv_tempText[6] = StringExternal("Param/Value/D6A7080E");
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_lootFilterDialogSelections[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    lv_index = 1;
    for ( ; ( (autoE2A33A90_ai >= 0 && lv_index <= autoE2A33A90_ae) || (autoE2A33A90_ai < 0 && lv_index >= autoE2A33A90_ae) ) ; lv_index += autoE2A33A90_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/5F02B48F") + lv_tempText[lv_index]));
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 25), 45, c_anchorTopLeft, (lv_xPos - 15), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 30), (lv_yPos - 35), StringExternal("Param/Value/667F875C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xPos = 280;
    lv_yPos = 135;
    lv_xSize = 140;
    lv_ySize = 280;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_lootFilterDialogSelections[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_xSize, lv_ySize);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xPos, lv_yPos);
    lv_index = 1;
    for ( ; ( (auto0F1B4835_ai >= 0 && lv_index <= auto0F1B4835_ae) || (auto0F1B4835_ai < 0 && lv_index >= auto0F1B4835_ae) ) ; lv_index += auto0F1B4835_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), (StringExternal("Param/Value/86B415DA") + (IntToText(lv_index) + StringExternal("Param/Value/C162BE1A"))));
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(65.88, 82.75, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 15), 45, c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, (lv_xPos + 35), (lv_yPos - 35), StringExternal("Param/Value/F0A14B9E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(800, 800, c_anchorCenter, -450, -150, true);
    gv_glyphVendorDialogBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_xPos = 100;
    lv_yPos = 125;
    lv_xSize = 650;
    lv_ySize = 525;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (autoDF3C7CAC_ai >= 0 && lv_index <= autoDF3C7CAC_ae) || (autoDF3C7CAC_ai < 0 && lv_index >= autoDF3C7CAC_ae) ) ; lv_index += autoDF3C7CAC_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (40 + RandomInt(1, 40)), (40 + RandomInt(1, 40)), c_anchorTopLeft, ((lv_xPos + 30) + RandomInt(1, 600)), ((lv_yPos + 30) + RandomInt(1, 460)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos + 235), (lv_yPos + 25), StringExternal("Param/Value/C4A17EB3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_tempText[1] = StringExternal("Param/Value/8298D05E");
    lv_tempText[2] = StringExternal("Param/Value/0A018C1B");
    lv_tempText[3] = StringExternal("Param/Value/3136F554");
    lv_tempColor[1] = Color(100.00, 100.00, 100.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_tempColor[3] = Color(100.00, 0.00, 0.00);
    lv_xSize = 210;
    lv_ySize = 68;
    lv_xPos = 85;
    lv_yPos = 600;
    lv_index = 1;
    for ( ; ( (autoB5E5C170_ai >= 0 && lv_index <= autoB5E5C170_ae) || (autoB5E5C170_ai < 0 && lv_index >= autoB5E5C170_ae) ) ; lv_index += autoB5E5C170_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_glyphVendorDialogButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 20), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 235;
    }
    lv_xSize = 130;
    lv_ySize = 130;
    lv_xPos = 360;
    lv_yPos = 470;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 260, 60, c_anchorTopLeft, (lv_xPos - 65), (lv_yPos - 45), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 60, c_anchorTopLeft, (lv_xPos - 3), (lv_yPos - 30), StringExternal("Param/Value/3755402A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 4), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_glyphVendorDialogSelectedItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 20), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 10), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_glyphVendorDialogSelectedItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 34, 34, c_anchorTopLeft, (lv_xPos + 14), (lv_yPos + 14), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_glyphVendorDialogSelectedItem[4] = DialogControlLastCreated();
    lv_xPos = 330;
    lv_yPos = 290;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 40, c_anchorTopLeft, (lv_xPos + 75), (lv_yPos + 100), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos - 20), (lv_yPos + 109), StringExternal("Param/Value/8C070915"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 60, c_anchorTopLeft, (lv_xPos + 100), (lv_yPos + 109), StringExternal("Param/Value/00DC9FC4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_glyphVendorDialogSelectedItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 54), (lv_yPos + 106), StringToText(""), gv_currencyIcons[1][1], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 102), StringToText(""), gv_currencyIcons[1][2], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_xSize = 80;
    lv_ySize = 80;
    lv_yPos = 220;
    lv_itemSlot = 1;
    lv_index = 1;
    for ( ; ( (autoC0B77E95_ai >= 0 && lv_index <= autoC0B77E95_ae) || (autoC0B77E95_ai < 0 && lv_index >= autoC0B77E95_ae) ) ; lv_index += autoC0B77E95_ai ) {
        lv_xPos = 260;
        lv_index2 = 1;
        for ( ; ( (auto1E2F8BF6_ai >= 0 && lv_index2 <= auto1E2F8BF6_ae) || (auto1E2F8BF6_ai < 0 && lv_index2 >= auto1E2F8BF6_ae) ) ; lv_index2 += auto1E2F8BF6_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 10), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 5), (lv_yPos + 5), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_glyphVendorDialogItems[lv_itemSlot][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 8), (lv_ySize - 8), c_anchorTopLeft, (lv_xPos + 4), (lv_yPos + 4), StringToText(""), StringToText(""), gv_dialogHighlighted);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
            gv_glyphVendorDialogItems[lv_itemSlot][3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 16), (lv_ySize + 16), c_anchorTopLeft, (lv_xPos - 8), (lv_yPos - 8), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_glyphVendorDialogItems[lv_itemSlot][2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_glyphVendorDialogItems[lv_itemSlot][4] = DialogControlLastCreated();
            lv_itemSlot += 1;
            lv_xPos += 115;
        }
        lv_yPos += 85;
    }
    lv_xPos = 10;
    lv_yPos = 75;
    lv_xSize = 195;
    lv_ySize = 230;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\war3_btnfemaleelfvillager.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogCreate(2400, 1400, c_anchorCenter, 0, 0, true);
    gv_inventoryDialogDestroyBox = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1400, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    lv_xPos = 700;
    lv_yPos = 400;
    lv_xSize = 500;
    lv_ySize = 300;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\kerriganupgradesetbackground.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 40), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 20), StringToText(""), "Assets\\Textures\\smx3_ui_screen_collectionsbg_moon_spec.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 30), (lv_ySize - 30), c_anchorTopLeft, (lv_xPos + 15), (lv_yPos + 15), StringToText(""), "Assets\\Textures\\mist2.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 50), 60, c_anchorTopLeft, (lv_xPos + 25), (lv_yPos + 10), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 100), 60, c_anchorTopLeft, (lv_xPos + 50), (lv_yPos + 40), StringToText(""), "Assets\\Textures\\ui_armoryconsole_frame_middle_center.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    lv_index = 1;
    for ( ; ( (auto6E9FE610_ai >= 0 && lv_index <= auto6E9FE610_ae) || (auto6E9FE610_ai < 0 && lv_index >= auto6E9FE610_ae) ) ; lv_index += auto6E9FE610_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (35 + RandomInt(1, 20)), (35 + RandomInt(1, 20)), c_anchorTopLeft, ((lv_xPos + 25) + RandomInt(1, 350)), ((lv_yPos + 15) + RandomInt(1, 200)), StringToText(""), lv_tempSplat[RandomInt(1, 4)], c_triggerImageTypeNormal, false, Color(76.86, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), RandomInt(0, 360), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_battle_smallmetalframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTopLeft, (lv_xPos + 180), (lv_yPos + 26), StringExternal("Param/Value/1AEB7683"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 60, c_anchorTopLeft, (lv_xPos + 140), (lv_yPos + 100), StringExternal("Param/Value/31362870"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xSize = 100;
    lv_ySize = 100;
    lv_xPos = 900;
    lv_yPos = 535;
    lv_index = 1;
    for ( ; ( (autoA24209A4_ai >= 0 && lv_index <= autoA24209A4_ae) || (autoA24209A4_ai < 0 && lv_index >= autoA24209A4_ae) ) ; lv_index += autoA24209A4_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 12), (lv_ySize - 12), c_anchorTopLeft, (lv_xPos + 6), (lv_yPos + 6), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogDestroySelected[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, (lv_xPos + 9), (lv_yPos + 9), StringToText(""), "Assets\\Textures\\btn-border-transportslot-empty.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogDestroySelected[4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(75.29, 75.29, 75.29), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 14), (lv_ySize + 14), c_anchorTopLeft, (lv_xPos - 7), (lv_yPos - 7), StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        gv_inventoryDialogDestroySelected[2] = DialogControlLastCreated();
    }
    lv_xPos = 725;
    lv_yPos = 640;
    lv_xSize = 200;
    lv_ySize = 65;
    lv_tempText[1] = StringExternal("Param/Value/07AE0965");
    lv_tempText[2] = StringExternal("Param/Value/13767285");
    lv_tempColor[1] = Color(100.00, 0.00, 0.00);
    lv_tempColor[2] = Color(0.00, 50.20, 100.00);
    lv_index = 1;
    for ( ; ( (auto7B1DAFC1_ai >= 0 && lv_index <= auto7B1DAFC1_ae) || (auto7B1DAFC1_ai < 0 && lv_index >= auto7B1DAFC1_ae) ) ; lv_index += auto7B1DAFC1_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize - 14), (lv_ySize - 14), c_anchorTopLeft, (lv_xPos + 7), (lv_yPos + 7), StringToText(""), "Assets\\Textures\\aberrationportrait_static.dds", c_triggerImageTypeNormal, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xSize + 20), (lv_ySize + 0), c_anchorTopLeft, (lv_xPos - 10), (lv_yPos - 0), StringToText(""), "Assets\\Textures\\ui_gamemenu_difficulty_glow.dds", c_triggerImageTypeNormal, false, lv_tempColor[lv_index], c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_xSize - 16), (lv_ySize - 10), c_anchorTopLeft, (lv_xPos + 8), (lv_yPos + 5), StringToText(""), StringToText(""), gv_dialogHighlighted);
        gv_inventoryDialogDestroyButtons[lv_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xSize, lv_ySize, c_anchorTopLeft, lv_xPos, lv_yPos, StringToText(""), "Assets\\Textures\\ui_mercenary_mercbuttonframe.dds", c_triggerImageTypeBorder, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_xPos + 40), (lv_yPos + 15), lv_tempText[lv_index], ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_xPos += 250;
    }
}

void gf_DialogUsedItemDrops (int lp_trigPlayer, int lp_dialogBoxNumber, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_dialogBoxNumber;
    int lv_itemDropIndex;
    int[4] lv_winner;
    int lv_winnerEmptySlot;
    text lv_tempText;
    int[4] lv_tempStats;

    // Automatic Variable Declarations
    int auto8E6F0920_val;
    const int autoC00B688D_ae = 3;
    const int autoC00B688D_ai = 1;
    const int auto525BD2B1_ae = 3;
    const int auto525BD2B1_ai = 1;
    const int autoC9589978_ae = 3;
    const int autoC9589978_ai = 1;
    playergroup auto0D75E695_g;
    int auto0D75E695_var;
    const int autoB8C0AB6B_ae = 12;
    const int autoB8C0AB6B_ai = 1;
    const int auto1A110BA6_ae = 3;
    const int auto1A110BA6_ai = 1;
    playergroup auto365BE681_g;
    int auto365BE681_var;
    const int autoF5CFEB05_ae = 30;
    const int autoF5CFEB05_ai = 1;
    const int autoA253321B_ae = 30;
    const int autoA253321B_ai = 1;
    int auto9555BE0B_val;
    const int auto0D8DA216_ae = 20;
    const int auto0D8DA216_ai = 1;
    const int auto1A15442E_ae = 20;
    const int auto1A15442E_ai = 1;
    const int auto4914ABBA_ae = 12;
    const int auto4914ABBA_ai = 1;
    playergroup auto421F5481_g;
    int auto421F5481_var;
    const int auto56F7F79E_ae = 12;
    const int auto56F7F79E_ai = 1;
    const int auto958DC793_ae = 20;
    const int auto958DC793_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    lv_dialogBoxNumber = lp_dialogBoxNumber;

    // Implementation
    if ((lv_trigPlayer == 0)) {
        lv_itemDropIndex = lv_dialogBoxNumber;
        lv_tempStats[1] = gv_itemDropsStats[lv_itemDropIndex][1];
        lv_tempStats[2] = gv_itemDropsStats[lv_itemDropIndex][2];
        lv_tempStats[3] = gv_itemDropsStats[lv_itemDropIndex][4];
    }
    else {
        lv_itemDropIndex = gv_itemDropsPlayerSlotValue[lv_trigPlayer][lv_dialogBoxNumber];
        lv_tempStats[1] = gv_itemDropsStats[lv_itemDropIndex][1];
        lv_tempStats[2] = gv_itemDropsStats[lv_itemDropIndex][2];
        lv_tempStats[3] = gv_itemDropsStats[lv_itemDropIndex][4];
        auto8E6F0920_val = lv_dialogItemUsed;
        if (auto8E6F0920_val == gv_inventoryDialogDropButtons[lv_dialogBoxNumber][1]) {
            if ((gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex] == 0)) {
                DialogSetVisible(gv_inventoryDialogDropBox[lv_dialogBoxNumber], PlayerGroupSingle(lv_trigPlayer), false);
                gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex] = RandomInt(51, 100);
                gv_itemDropsPlayerRolledCount[lv_itemDropIndex] += 1;
                PlayerGroupAdd(gv_itemDropsPlayerRollGroup[lv_itemDropIndex], lv_trigPlayer);
                lv_index = 1;
                for ( ; ( (autoC00B688D_ai >= 0 && lv_index <= autoC00B688D_ae) || (autoC00B688D_ai < 0 && lv_index >= autoC00B688D_ae) ) ; lv_index += autoC00B688D_ai ) {
                    DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_dialogBoxNumber][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                }
                lv_tempText = (((StringExternal("Param/Value/CA79E127") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))) + StringExternal("Param/Value/6115C485")) + (IntToText(gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex]) + (StringExternal("Param/Value/4765DA54") + gv_itemsBaseName[lv_tempStats[1]][lv_tempStats[2]][lv_tempStats[3]])));
                gf_GeneralItemsMessage(lv_tempText, gv_itemDropsPlayerGroup[lv_itemDropIndex]);
            }

        }
        else if (auto8E6F0920_val == gv_inventoryDialogDropButtons[lv_dialogBoxNumber][2]) {
            if ((gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex] == 0)) {
                DialogSetVisible(gv_inventoryDialogDropBox[lv_dialogBoxNumber], PlayerGroupSingle(lv_trigPlayer), false);
                gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex] = RandomInt(1, 50);
                gv_itemDropsPlayerRolledCount[lv_itemDropIndex] += 1;
                PlayerGroupAdd(gv_itemDropsPlayerRollGroup[lv_itemDropIndex], lv_trigPlayer);
                lv_index = 1;
                for ( ; ( (auto525BD2B1_ai >= 0 && lv_index <= auto525BD2B1_ae) || (auto525BD2B1_ai < 0 && lv_index >= auto525BD2B1_ae) ) ; lv_index += auto525BD2B1_ai ) {
                    DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_dialogBoxNumber][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                }
                lv_tempText = (((StringExternal("Param/Value/9BF60C32") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))) + StringExternal("Param/Value/1E238533")) + (IntToText(gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex]) + (StringExternal("Param/Value/F0E3344B") + gv_itemsBaseName[lv_tempStats[1]][lv_tempStats[2]][lv_tempStats[3]])));
                gf_GeneralItemsMessage(lv_tempText, gv_itemDropsPlayerGroup[lv_itemDropIndex]);
            }

        }
        else if (auto8E6F0920_val == gv_inventoryDialogDropButtons[lv_dialogBoxNumber][3]) {
            DialogSetVisible(gv_inventoryDialogDropBox[lv_dialogBoxNumber], PlayerGroupSingle(lv_trigPlayer), false);
            gv_itemDropsPlayerRoll[lv_trigPlayer][lv_itemDropIndex] = 0;
            gv_itemDropsPlayerSlotValue[lv_trigPlayer][lv_dialogBoxNumber] = 0;
            lv_tempText = (((StringExternal("Param/Value/41A47340") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))) + StringExternal("Param/Value/D2DB82FE")) + (StringToText("") + (StringExternal("Param/Value/0EEC7D08") + gv_itemsBaseName[lv_tempStats[1]][lv_tempStats[2]][lv_tempStats[3]])));
            gf_GeneralItemsMessage(lv_tempText, gv_itemDropsPlayerGroup[lv_itemDropIndex]);
            PlayerGroupRemove(gv_itemDropsPlayerGroup[lv_itemDropIndex], lv_trigPlayer);
            lv_index = 1;
            for ( ; ( (autoC9589978_ai >= 0 && lv_index <= autoC9589978_ae) || (autoC9589978_ai < 0 && lv_index >= autoC9589978_ae) ) ; lv_index += autoC9589978_ai ) {
                DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_dialogBoxNumber][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        else {
        }
    }
    if ((PlayerGroupCount(gv_itemDropsPlayerRollGroup[lv_itemDropIndex]) == PlayerGroupCount(gv_itemDropsPlayerGroup[lv_itemDropIndex])) && (PlayerGroupCount(gv_itemDropsPlayerGroup[lv_itemDropIndex]) > 0)) {
        gv_itemDropsPlayerRolledCount[lv_itemDropIndex] = 0;
        PlayerGroupClear(gv_itemDropsPlayerRollGroup[lv_itemDropIndex]);
        auto0D75E695_g = gv_itemDropsPlayerGroup[lv_itemDropIndex];
        auto0D75E695_var = -1;
        while (true) {
            auto0D75E695_var = PlayerGroupNextPlayer(auto0D75E695_g, auto0D75E695_var);
            if (auto0D75E695_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (autoB8C0AB6B_ai >= 0 && lv_index <= autoB8C0AB6B_ae) || (autoB8C0AB6B_ai < 0 && lv_index >= autoB8C0AB6B_ae) ) ; lv_index += autoB8C0AB6B_ai ) {
                if ((gv_itemDropsPlayerSlotValue[auto0D75E695_var][lv_index] == lv_itemDropIndex)) {
                    DialogSetVisible(gv_inventoryDialogDropBox[lv_index], PlayerGroupSingle(auto0D75E695_var), false);
                    lv_index2 = 1;
                    for ( ; ( (auto1A110BA6_ai >= 0 && lv_index2 <= auto1A110BA6_ae) || (auto1A110BA6_ai < 0 && lv_index2 >= auto1A110BA6_ae) ) ; lv_index2 += auto1A110BA6_ai ) {
                        DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_index][lv_index2], PlayerGroupSingle(auto0D75E695_var), true);
                    }
                }

            }
        }
        auto365BE681_g = gv_itemDropsPlayerGroup[lv_itemDropIndex];
        auto365BE681_var = -1;
        while (true) {
            auto365BE681_var = PlayerGroupNextPlayer(auto365BE681_g, auto365BE681_var);
            if (auto365BE681_var < 0) { break; }
            if ((gv_itemDropsPlayerRoll[auto365BE681_var][lv_itemDropIndex] > lv_winner[1])) {
                lv_winner[1] = gv_itemDropsPlayerRoll[auto365BE681_var][lv_itemDropIndex];
                lv_winner[3] = lv_winner[2];
                lv_winner[2] = auto365BE681_var;
                lv_trigPlayer = lv_winner[2];
            }

        }
        lv_index = 1;
        for ( ; ( (autoF5CFEB05_ai >= 0 && lv_index <= autoF5CFEB05_ae) || (autoF5CFEB05_ai < 0 && lv_index >= autoF5CFEB05_ae) ) ; lv_index += autoF5CFEB05_ai ) {
            if ((gv_inventoryPackStats[lv_winner[2]][lv_index][1] == 0)) {
                lv_winnerEmptySlot = lv_index;
                break;
            }

        }
        if ((lv_winnerEmptySlot == 0) && (lv_winner[3] != 0) && (lv_winner[3] != lv_winner[2])) {
            lv_winner[2] = lv_winner[3];
            lv_trigPlayer = lv_winner[2];
            lv_index = 1;
            for ( ; ( (autoA253321B_ai >= 0 && lv_index <= autoA253321B_ae) || (autoA253321B_ai < 0 && lv_index >= autoA253321B_ae) ) ; lv_index += autoA253321B_ai ) {
                if ((gv_inventoryPackStats[lv_winner[2]][lv_index][1] == 0)) {
                    lv_winnerEmptySlot = lv_index;
                    break;
                }

            }
        }

        if ((lv_winnerEmptySlot != 0)) {
            auto9555BE0B_val = gv_itemDropsStats[lv_itemDropIndex][4];
            if (auto9555BE0B_val == 4) {
                gv_playerStatisticsGeneral[lv_trigPlayer][11] += 1;
            }
            else if (auto9555BE0B_val == 5) {
                gv_playerStatisticsGeneral[lv_trigPlayer][12] += 1;
            }
            else if (auto9555BE0B_val == 6) {
                gv_playerStatisticsGeneral[lv_trigPlayer][13] += 1;
            }
            else {
            }
            lv_index = 1;
            for ( ; ( (auto1A15442E_ai >= 0 && lv_index <= auto1A15442E_ae) || (auto1A15442E_ai < 0 && lv_index >= auto1A15442E_ae) ) ; lv_index += auto1A15442E_ai ) {
                gv_inventoryPackStats[lv_trigPlayer][lv_winnerEmptySlot][lv_index] = gv_itemDropsStats[lv_itemDropIndex][lv_index];
                gv_itemDropsStats[lv_itemDropIndex][lv_index] = 0;
            }
            lv_index = 1;
            for ( ; ( (auto4914ABBA_ai >= 0 && lv_index <= auto4914ABBA_ae) || (auto4914ABBA_ai < 0 && lv_index >= auto4914ABBA_ae) ) ; lv_index += auto4914ABBA_ai ) {
                if ((gv_itemDropsPlayerSlotValue[lv_trigPlayer][lv_index] == lv_itemDropIndex)) {
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_winnerEmptySlot][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogDropItems[lv_index][1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_winnerEmptySlot][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogDropItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_winnerEmptySlot][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogDropItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_winnerEmptySlot][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogDropItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    break;
                }

            }
            lv_tempText = (((StringExternal("Param/Value/4CC074CC") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))) + StringExternal("Param/Value/5F43171A")) + (StringToText("") + (StringToText("") + gv_itemsBaseName[lv_tempStats[1]][lv_tempStats[2]][lv_tempStats[3]])));
            gf_GeneralItemsMessage(lv_tempText, gv_itemDropsPlayerGroup[lv_itemDropIndex]);
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        }
        else {
            lv_index = 1;
            for ( ; ( (auto0D8DA216_ai >= 0 && lv_index <= auto0D8DA216_ae) || (auto0D8DA216_ai < 0 && lv_index >= auto0D8DA216_ae) ) ; lv_index += auto0D8DA216_ai ) {
                gv_itemDropsStats[lv_itemDropIndex][lv_index] = 0;
            }
            lv_tempText = (((StringExternal("Param/Value/FF753A51") + StringExternal("Param/Value/2BC3E031")) + StringToText("")) + (StringToText("") + (StringToText("") + gv_itemsBaseName[lv_tempStats[1]][lv_tempStats[2]][lv_tempStats[3]])));
            gf_GeneralItemsMessage(lv_tempText, gv_itemDropsPlayerGroup[lv_itemDropIndex]);
        }
        auto421F5481_g = gv_itemDropsPlayerGroup[lv_itemDropIndex];
        auto421F5481_var = -1;
        while (true) {
            auto421F5481_var = PlayerGroupNextPlayer(auto421F5481_g, auto421F5481_var);
            if (auto421F5481_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (auto56F7F79E_ai >= 0 && lv_index <= auto56F7F79E_ae) || (auto56F7F79E_ai < 0 && lv_index >= auto56F7F79E_ae) ) ; lv_index += auto56F7F79E_ai ) {
                if ((gv_itemDropsPlayerSlotValue[auto421F5481_var][lv_index] == lv_itemDropIndex)) {
                    gv_itemDropsPlayerSlotValue[auto421F5481_var][lv_index] = 0;
                    gv_itemDropsPlayerRoll[auto421F5481_var][lv_itemDropIndex] = 0;
                }

            }
        }
        PlayerGroupClear(gv_itemDropsPlayerGroup[lv_itemDropIndex]);
        return ;
    }

    if ((PlayerGroupCount(gv_itemDropsPlayerGroup[lv_itemDropIndex]) == 0)) {
        gv_itemDropsPlayerRolledCount[lv_itemDropIndex] = 0;
        lv_index = 1;
        for ( ; ( (auto958DC793_ai >= 0 && lv_index <= auto958DC793_ae) || (auto958DC793_ai < 0 && lv_index >= auto958DC793_ae) ) ; lv_index += auto958DC793_ai ) {
            gv_itemDropsStats[lv_itemDropIndex][lv_index] = 0;
        }
    }

}

void gf_DialogUsedItemPack (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_equipSlot;
    int lv_unequipSlot;
    int[21] lv_tempStats;
    int[4] lv_tempInt;

    // Automatic Variable Declarations
    int autoBC3F4D75_val;
    const int autoC5ED07B6_ae = 9;
    const int autoC5ED07B6_ai = 1;
    const int auto156580FE_ae = 20;
    const int auto156580FE_ai = 1;
    const int auto98C233C6_ae = 8;
    const int auto98C233C6_ai = 1;
    const int auto9BAC7A9D_ae = 8;
    const int auto9BAC7A9D_ai = 1;
    const int autoC13ABD03_ae = 20;
    const int autoC13ABD03_ai = 1;
    const int auto06EC17F7_ae = 9;
    const int auto06EC17F7_ai = 1;
    const int auto048045FE_ae = 30;
    const int auto048045FE_ai = 1;
    const int auto9D50692D_ae = 9;
    const int auto9D50692D_ai = 1;
    const int auto57217E3D_ae = 20;
    const int auto57217E3D_ai = 1;
    const int auto51A006A5_ae = 30;
    const int auto51A006A5_ai = 1;
    const int auto0E01E62D_ae = 20;
    const int auto0E01E62D_ai = 1;
    const int auto40B65E54_ae = 10;
    const int auto40B65E54_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    autoBC3F4D75_val = lv_dialogItemUsed;
    if (autoBC3F4D75_val == gv_inventoryDialogPackItems[0][0]) {
        gf_DialogUsedMainButtons(lv_trigPlayer, gv_mainDialogItems[4]);
    }
    else if (autoBC3F4D75_val == gv_inventoryDialogPackButtons[4]) {
        DialogSetVisible(gv_lootFilterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        DialogControlSetVisible(gv_heroStatsDialogOptions[1][2], PlayerGroupSingle(lv_trigPlayer), true);
    }
    else if (autoBC3F4D75_val == gv_inventoryDialogPackButtons[1]) {
        if ((gv_inventoryPackSlotSelected[lv_trigPlayer] != 0) && (TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 0.1)) {
            if ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/80C5FBD7"), PlayerGroupSingle(lv_trigPlayer));
                return ;
            }

            lv_equipSlot = gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][1];
            if ((((gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][3] < FloorI(((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4) + 3))) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] < gv_generalLevelCap)) || ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][3] <= 30)) || ((gv_questsPlayerProgress[lv_trigPlayer][100] == 4) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][1] >= 9) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][3] <= 30) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap)))) {
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/6DAFC28E"), PlayerGroupSingle(lv_trigPlayer));
                return ;
            }
            if ((gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][1] == 1)) {
                if ((((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 1) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] >= 3) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] <= 4)) || ((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 2) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] >= 1) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] <= 2)) || ((gv_playerHeroHeroClassTierType[lv_trigPlayer][1] == 3) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] >= 5) && (gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][2] <= 6)))) {
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/5E81BD67"), PlayerGroupSingle(lv_trigPlayer));
                    return ;
                }
            }

            if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][1] != 0)) {
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogEquippedItems[lv_equipSlot][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogEquippedItems[lv_equipSlot][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                lv_index = 5;
                for ( ; ( (autoC5ED07B6_ai >= 0 && lv_index <= autoC5ED07B6_ae) || (autoC5ED07B6_ai < 0 && lv_index >= autoC5ED07B6_ae) ) ; lv_index += autoC5ED07B6_ai ) {
                    if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] >= 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] < 100)) {
                        lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][(lv_index + 5)];
                        lv_tempInt[2] = ModI(lv_tempInt[1], 10);
                        lv_tempInt[3] = FloorI((lv_tempInt[1] / 10.0));
                        if ((lv_tempInt[2] > 0)) {
                            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][1], lv_tempInt[2]);
                        }

                        if ((lv_tempInt[3] > 0)) {
                            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][2], lv_tempInt[3]);
                        }

                    }
                    else {
                        if ((lv_equipSlot > 8) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] > 100)) {
                            lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index];
                            TechTreeUpgradeAddLevel(lv_trigPlayer, gv_itemsGlyphUpgrade[lv_tempInt[1]], -1);
                        }

                    }
                }
                lv_index2 = 1;
                for ( ; ( (auto156580FE_ai >= 0 && lv_index2 <= auto156580FE_ae) || (auto156580FE_ai < 0 && lv_index2 >= auto156580FE_ae) ) ; lv_index2 += auto156580FE_ai ) {
                    lv_tempStats[lv_index2] = gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2];
                    gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index2];
                    gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index2] = lv_tempStats[lv_index2];
                }
                if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][4] >= 4) && (((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][4] == 4)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][4] == 5)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 2) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][4] == 6)))) {
                    lv_tempInt[0] = 0;
                    lv_index = 1;
                    for ( ; ( (auto98C233C6_ai >= 0 && lv_index <= auto98C233C6_ae) || (auto98C233C6_ai < 0 && lv_index >= auto98C233C6_ae) ) ; lv_index += auto98C233C6_ai ) {
                        if ((((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][4] == 4)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][4] == 5)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][24][2] == 2) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][4] == 6)))) {
                            lv_tempInt[0] += 1;
                        }

                    }
                    if ((lv_tempInt[0] == 8)) {
                        gv_playerStatisticsAchievements[lv_trigPlayer][24][2] += 1;
                    }

                }

                if ((((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][3] >= 17)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][3] >= 19)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 2) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][3] >= 21)))) {
                    lv_tempInt[0] = 0;
                    lv_index = 1;
                    for ( ; ( (auto9BAC7A9D_ai >= 0 && lv_index <= auto9BAC7A9D_ae) || (auto9BAC7A9D_ai < 0 && lv_index >= auto9BAC7A9D_ae) ) ; lv_index += auto9BAC7A9D_ai ) {
                        if ((((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 0) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] >= 17)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] >= 19)) || ((gv_playerStatisticsAchievements[lv_trigPlayer][27][2] == 2) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_index][3] >= 21)))) {
                            lv_tempInt[0] += 1;
                        }

                    }
                    if ((lv_tempInt[0] == 8)) {
                        gv_playerStatisticsAchievements[lv_trigPlayer][27][2] += 1;
                    }

                }

            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogEquippedItems[lv_equipSlot][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[lv_equipSlot][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                lv_index2 = 1;
                for ( ; ( (autoC13ABD03_ai >= 0 && lv_index2 <= autoC13ABD03_ae) || (autoC13ABD03_ai < 0 && lv_index2 >= autoC13ABD03_ae) ) ; lv_index2 += autoC13ABD03_ai ) {
                    gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index2] = gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2];
                    gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2] = 0;
                }
            }
            lv_index = 5;
            for ( ; ( (auto06EC17F7_ai >= 0 && lv_index <= auto06EC17F7_ae) || (auto06EC17F7_ai < 0 && lv_index >= auto06EC17F7_ae) ) ; lv_index += auto06EC17F7_ai ) {
                if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] >= 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] < 100)) {
                    lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][(lv_index + 5)];
                    lv_tempInt[2] = ModI(lv_tempInt[1], 10);
                    lv_tempInt[3] = FloorI((lv_tempInt[1] / 10.0));
                    if ((lv_tempInt[2] > 0)) {
                        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][1], gv_playerHeroHero[lv_trigPlayer], lv_tempInt[2]);
                    }

                    if ((lv_tempInt[3] > 0)) {
                        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][2], gv_playerHeroHero[lv_trigPlayer], lv_tempInt[3]);
                    }

                }
                else {
                    if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] > 100) && (lv_equipSlot > 8)) {
                        lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index];
                        TechTreeUpgradeAddLevel(lv_trigPlayer, gv_itemsGlyphUpgrade[lv_tempInt[1]], 1);
                    }

                }
            }
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
            if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
                gv_inventoryEquipSlotSelected[lv_trigPlayer] = 0;
            }

            if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
                gv_itemVendorSlotSelected[lv_trigPlayer][2] = 0;
                gv_inventoryEquipSlotSelected[lv_trigPlayer] = 0;
                gv_itemVendorCosts[lv_trigPlayer][2] = 0;
                libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/6FC04801") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }

            if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
                gv_raritiesVendorCosts[lv_trigPlayer][2] = 0;
                gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = 0;
                libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/89F79FEE") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }

            gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryEquipSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryPackMove[lv_trigPlayer] = false;
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            return ;
        }
        else {
            if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) > 0.1)) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/49A064ED"), PlayerGroupSingle(lv_trigPlayer));
                return ;
            }

        }
        if ((gv_inventoryEquipSlotSelected[lv_trigPlayer] != 0) && (gv_inventoryEquippedStats[lv_trigPlayer][gv_inventoryEquipSlotSelected[lv_trigPlayer]][1] != 0)) {
            lv_index = 1;
            for ( ; ( (auto048045FE_ai >= 0 && lv_index <= auto048045FE_ae) || (auto048045FE_ai < 0 && lv_index >= auto048045FE_ae) ) ; lv_index += auto048045FE_ai ) {
                if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0) && (lv_unequipSlot == 0)) {
                    lv_unequipSlot = lv_index;
                    break;
                }

            }
            if ((lv_unequipSlot != 0)) {
                lv_equipSlot = gv_inventoryEquipSlotSelected[lv_trigPlayer];
                lv_index = 5;
                for ( ; ( (auto9D50692D_ai >= 0 && lv_index <= auto9D50692D_ae) || (auto9D50692D_ai < 0 && lv_index >= auto9D50692D_ae) ) ; lv_index += auto9D50692D_ai ) {
                    if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] >= 1) && (gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] < 100)) {
                        lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][(lv_index + 5)];
                        lv_tempInt[2] = ModI(lv_tempInt[1], 10);
                        lv_tempInt[3] = FloorI((lv_tempInt[1] / 10.0));
                        if ((lv_tempInt[2] > 0)) {
                            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][1], lv_tempInt[2]);
                        }

                        if ((lv_tempInt[3] > 0)) {
                            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_itemsStatBehavior[gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index]][2], lv_tempInt[3]);
                        }

                    }
                    else {
                        if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index] > 100) && (lv_equipSlot > 8)) {
                            lv_tempInt[1] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index];
                            TechTreeUpgradeAddLevel(lv_trigPlayer, gv_itemsGlyphUpgrade[lv_tempInt[1]], -1);
                        }

                    }
                }
                lv_index2 = 1;
                for ( ; ( (auto57217E3D_ai >= 0 && lv_index2 <= auto57217E3D_ae) || (auto57217E3D_ai < 0 && lv_index2 >= auto57217E3D_ae) ) ; lv_index2 += auto57217E3D_ai ) {
                    gv_inventoryPackStats[lv_trigPlayer][lv_unequipSlot][lv_index2] = gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index2];
                    gv_inventoryEquippedStats[lv_trigPlayer][lv_equipSlot][lv_index2] = 0;
                }
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_unequipSlot][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_unequipSlot][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_unequipSlot][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_unequipSlot][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogEquippedItems[gv_inventoryEquipSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[gv_inventoryEquipSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[gv_inventoryEquipSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogEquippedItems[gv_inventoryEquipSlotSelected[lv_trigPlayer]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
            }

            if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
                gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }

            if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
                gv_itemVendorCosts[lv_trigPlayer][2] = 0;
                gv_itemVendorSlotSelected[lv_trigPlayer][2] = 0;
                libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/B5EA5632") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }

            if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
                gv_raritiesVendorCosts[lv_trigPlayer][2] = 0;
                gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = 0;
                libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/4241AA0B") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            }

            gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryEquipSlotSelected[lv_trigPlayer] = 0;
            gv_inventoryPackMove[lv_trigPlayer] = false;
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
            return ;
        }

    }
    else if (autoBC3F4D75_val == gv_inventoryDialogPackButtons[2]) {
        if ((gv_inventoryPackSlotSelected[lv_trigPlayer] != 0)) {
            DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), true);
            gv_inventoryPackMove[lv_trigPlayer] = true;
            return ;
        }
        else {
            if ((gv_inventoryEquipSlotSelected[lv_trigPlayer] != 0)) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/6DFE98B1"), PlayerGroupSingle(lv_trigPlayer));
            }

        }
    }
    else if (autoBC3F4D75_val == gv_inventoryDialogPackButtons[3]) {
        if ((gv_inventoryPackSlotSelected[lv_trigPlayer] != 0)) {
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogDestroySelected[1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogDestroySelected[2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogDestroySelected[1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogDestroySelected[4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
            DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
            gv_inventoryPackMove[lv_trigPlayer] = false;
            DialogSetVisible(gv_inventoryDialogDestroyBox, PlayerGroupSingle(lv_trigPlayer), true);
            return ;
        }
        else {
            if ((gv_inventoryEquipSlotSelected[lv_trigPlayer] != 0)) {
                gf_GeneralErrorMessage(StringExternal("Param/Value/EE29982C"), PlayerGroupSingle(lv_trigPlayer));
            }

        }
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (auto51A006A5_ai >= 0 && lv_index <= auto51A006A5_ae) || (auto51A006A5_ai < 0 && lv_index >= auto51A006A5_ae) ) ; lv_index += auto51A006A5_ai ) {
        if ((lv_dialogItemUsed == gv_inventoryDialogPackItems[lv_index][3])) {
            if ((gv_inventoryPackMove[lv_trigPlayer] == false)) {
                if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] != 0)) {
                    gv_inventoryPackSlotSelected[lv_trigPlayer] = lv_index;
                    gv_inventoryEquipSlotSelected[lv_trigPlayer] = 0;
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_itemVendorSlotSelected[lv_trigPlayer][2] = lv_index;
                        gv_itemVendorCosts[lv_trigPlayer][2] = FixedToInt((gv_itemsCost[gv_inventoryPackStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][2]][3]][gv_inventoryPackStats[lv_trigPlayer][gv_itemVendorSlotSelected[lv_trigPlayer][2]][4]] * 0.15));
                        if ((gv_itemVendorCosts[lv_trigPlayer][2] < 0)) {
                            gv_itemVendorCosts[lv_trigPlayer][2] = 75000;
                        }

                        libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/185F02D6") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    }

                    if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = lv_index;
                        gv_raritiesVendorCosts[lv_trigPlayer][2] = FixedToInt((gv_itemsCost[gv_inventoryPackStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][3]][gv_inventoryPackStats[lv_trigPlayer][gv_raritiesVendorSlotSelected[lv_trigPlayer][2]][4]] * 0.15));
                        if ((gv_raritiesVendorCosts[lv_trigPlayer][2] < 0)) {
                            gv_raritiesVendorCosts[lv_trigPlayer][2] = 75000;
                        }

                        libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/5C5BCF82") + IntToText(gv_raritiesVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    }

                    if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
                        gv_inventoryStashSlotSelected[lv_trigPlayer][2] = lv_index;
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    }

                    return ;
                }

            }
            else {
                if ((gv_inventoryPackSlotSelected[lv_trigPlayer] != 0)) {
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_inventoryDialogPackSelected[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_inventoryDialogPackSelected[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
                    if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
                    }

                    if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_itemVendorSlotSelected[lv_trigPlayer][2] = 0;
                        gv_itemVendorCosts[lv_trigPlayer][2] = 0;
                        libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/D30D6F7B") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    }

                    if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_raritiesVendorCosts[lv_trigPlayer][2] = 0;
                        gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = 0;
                        libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/16FE7A5D") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    }

                    lv_index2 = 1;
                    for ( ; ( (auto0E01E62D_ai >= 0 && lv_index2 <= auto0E01E62D_ae) || (auto0E01E62D_ai < 0 && lv_index2 >= auto0E01E62D_ae) ) ; lv_index2 += auto0E01E62D_ai ) {
                        lv_tempStats[lv_index2] = gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2];
                        gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2] = gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2];
                        gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = lv_tempStats[lv_index2];
                    }
                    gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                    gv_inventoryPackMove[lv_trigPlayer] = false;
                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                }

            }
        }

    }
    lv_index = 1;
    for ( ; ( (auto40B65E54_ai >= 0 && lv_index <= auto40B65E54_ae) || (auto40B65E54_ai < 0 && lv_index >= auto40B65E54_ae) ) ; lv_index += auto40B65E54_ai ) {
        if ((lv_dialogItemUsed == gv_inventoryDialogEquippedItems[lv_index][3])) {
            if ((gv_inventoryPackMove[lv_trigPlayer] == false)) {
                if ((gv_inventoryEquippedStats[lv_trigPlayer][lv_index][1] != 0)) {
                    gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                    gv_inventoryEquipSlotSelected[lv_trigPlayer] = lv_index;
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], libNtve_gf_DialogItemTooltip(gv_inventoryDialogEquippedItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], (libNtve_gf_DialogItemImage(gv_inventoryDialogEquippedItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                    if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_itemVendorSlotSelected[lv_trigPlayer][2] = 0;
                        gv_itemVendorCosts[lv_trigPlayer][2] = 0;
                        libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/15485EFE") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    }

                    if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
                        gv_raritiesVendorCosts[lv_trigPlayer][2] = 0;
                        gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = 0;
                        libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/65615934") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    }

                    if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
                        gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                    }

                    return ;
                }

            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/D191FC3B"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
}

void gf_DialogUsedItemDestroy (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempQuest;
    int[21] lv_tempStats;
    text lv_tempText;

    // Automatic Variable Declarations
    int auto68A7D438_val;
    const int autoF7E02CEE_ae = 20;
    const int autoF7E02CEE_ai = 1;
    const int auto3AFEDF0B_ae = gv_questsQuestSlots;
    const int auto3AFEDF0B_ai = 1;
    int autoAEFE77B5_val;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    auto68A7D438_val = lv_dialogItemUsed;
    if (auto68A7D438_val == gv_inventoryDialogDestroyButtons[1]) {
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[gv_inventoryPackSlotSelected[lv_trigPlayer]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        if ((DialogIsVisible(gv_inventoryDialogStashBox, lv_trigPlayer) == true)) {
            libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogStashSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_inventoryDialogStashSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            gv_inventoryStashSlotSelected[lv_trigPlayer][2] = 0;
        }

        if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
            gv_itemVendorSlotSelected[lv_trigPlayer][2] = 0;
            gv_itemVendorCosts[lv_trigPlayer][2] = 0;
            libNtve_gf_SetDialogItemText(gv_itemVendorDialogSelectedItem[2][4], (StringExternal("Param/Value/D887A15A") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_itemVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        }

        if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
            gv_raritiesVendorCosts[lv_trigPlayer][2] = 0;
            gv_raritiesVendorSlotSelected[lv_trigPlayer][2] = 0;
            libNtve_gf_SetDialogItemText(gv_raritiesVendorDialogSelectedItem[2][5], (StringExternal("Param/Value/AB967954") + IntToText(gv_itemVendorCosts[lv_trigPlayer][2])), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogSelectedItem[2][1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
            libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogSelectedItem[2][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        }

        lv_index2 = 1;
        for ( ; ( (autoF7E02CEE_ai >= 0 && lv_index2 <= autoF7E02CEE_ae) || (autoF7E02CEE_ai < 0 && lv_index2 >= autoF7E02CEE_ae) ) ; lv_index2 += autoF7E02CEE_ai ) {
            lv_tempStats[lv_index2] = gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2];
            gv_inventoryPackStats[lv_trigPlayer][gv_inventoryPackSlotSelected[lv_trigPlayer]][lv_index2] = 0;
        }
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        DialogSetVisible(gv_inventoryDialogDestroyBox, PlayerGroupSingle(lv_trigPlayer), false);
        if ((((DistanceBetweenPoints(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), UnitGetPosition(UnitFromId(1820888318))) <= 3.0) && (((gv_questsPlayerProgress[lv_trigPlayer][74] == 2) && (lv_tempStats[4] >= 4)) || ((gv_questsPlayerProgress[lv_trigPlayer][75] == 2) && (lv_tempStats[4] >= 5)) || ((gv_questsPlayerProgress[lv_trigPlayer][76] == 2) && (lv_tempStats[4] >= 6)))) || ((DistanceBetweenPoints(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), UnitGetPosition(UnitFromId(771969852))) <= 3.0) && (lv_tempStats[1] == 9) && (((gv_questsPlayerProgress[lv_trigPlayer][126] == 2) && (lv_tempStats[4] >= 3)) || ((gv_questsPlayerProgress[lv_trigPlayer][127] == 2) && (lv_tempStats[4] >= 4)) || ((gv_questsPlayerProgress[lv_trigPlayer][128] == 2) && (lv_tempStats[4] >= 5)))))) {
            lv_index = 1;
            for ( ; ( (auto3AFEDF0B_ai >= 0 && lv_index <= auto3AFEDF0B_ae) || (auto3AFEDF0B_ai < 0 && lv_index >= auto3AFEDF0B_ae) ) ; lv_index += auto3AFEDF0B_ai ) {
                if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && (((DistanceBetweenPoints(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), UnitGetPosition(UnitFromId(1820888318))) <= 3.0) && ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 74) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 75) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 76))) || ((DistanceBetweenPoints(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), UnitGetPosition(UnitFromId(771969852))) <= 3.0) && ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 126) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 127) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 128))))) {
                    if (true) {
                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += 1;
                        lv_tempText = (StringExternal("Param/Value/B288D4CD") + StringToText("") + StringExternal("Param/Value/C0899DBD") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1]) + StringExternal("Param/Value/C4EE6C6D") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]));
                        gf_GeneralQuestMessage(lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                        SoundPlayForPlayer(SoundLink("QuestUpdate", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                        if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                            autoAEFE77B5_val = gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index];
                            if (autoAEFE77B5_val == 74) {
                                lv_tempQuest = 74;
                            }
                            else if (autoAEFE77B5_val == 75) {
                                lv_tempQuest = 75;
                            }
                            else if (autoAEFE77B5_val == 76) {
                                lv_tempQuest = 76;
                            }
                            else if (autoAEFE77B5_val == 126) {
                                lv_tempQuest = 126;
                            }
                            else if (autoAEFE77B5_val == 127) {
                                lv_tempQuest = 127;
                            }
                            else if (autoAEFE77B5_val == 128) {
                                lv_tempQuest = 128;
                            }
                            else {
                            }
                            gv_questsPlayerProgress[lv_trigPlayer][lv_tempQuest] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_tempQuest][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/9AE1FF60"), PlayerGroupSingle(lv_trigPlayer));
                        }

                    }

                }

            }
        }

        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
    }
    else if (auto68A7D438_val == gv_inventoryDialogDestroyButtons[2]) {
        DialogSetVisible(gv_inventoryDialogDestroyBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
}

void gf_DialogUsedItemFilter (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int auto988A737D_val;

    // Variable Initialization
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;

    // Implementation
    auto988A737D_val = lv_dialogItemUsed;
    if (auto988A737D_val == gv_lootFilterDialogButtons[1]) {
        gv_lootFilterPlayerSelections[lv_trigPlayer][1] = DialogControlGetSelectedItem(gv_lootFilterDialogSelections[1], lv_trigPlayer);
        gv_lootFilterPlayerSelections[lv_trigPlayer][2] = DialogControlGetSelectedItem(gv_lootFilterDialogSelections[2], lv_trigPlayer);
        DialogSetVisible(gv_lootFilterDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
}

trigger auto_gf_DialogUsedItemsReward_Trigger = null;
int auto_gf_DialogUsedItemsReward_lp_trigPlayer;
int auto_gf_DialogUsedItemsReward_lp_dialogItemUsed;

void gf_DialogUsedItemsReward (int lp_trigPlayer, int lp_dialogItemUsed) {
    auto_gf_DialogUsedItemsReward_lp_trigPlayer = lp_trigPlayer;
    auto_gf_DialogUsedItemsReward_lp_dialogItemUsed = lp_dialogItemUsed;

    if (auto_gf_DialogUsedItemsReward_Trigger == null) {
        auto_gf_DialogUsedItemsReward_Trigger = TriggerCreate("auto_gf_DialogUsedItemsReward_TriggerFunc");
    }

    TriggerExecute(auto_gf_DialogUsedItemsReward_Trigger, false, false);
}

bool auto_gf_DialogUsedItemsReward_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_DialogUsedItemsReward_lp_trigPlayer;
    int lp_dialogItemUsed = auto_gf_DialogUsedItemsReward_lp_dialogItemUsed;

    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int[21] lv_tempStats;

    // Automatic Variable Declarations
    int autoAFF36019_val;
    const int auto92F150AF_ae = 35;
    const int auto92F150AF_ai = 1;
    const int autoF0D680B4_ae = 20;
    const int autoF0D680B4_ai = 1;
    const int autoDA322F0B_ae = 30;
    const int autoDA322F0B_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    autoAFF36019_val = lv_dialogItemUsed;
    if (autoAFF36019_val == gv_itemSurvivalDialogMainButtons[1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 16;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (autoAFF36019_val == gv_itemSurvivalDialogMainButtons[2]) {
        if ((gv_itemSurvivalSlotSelected[lv_trigPlayer] != 0)) {
            if ((gv_itemSurvivalQuantity[lv_trigPlayer] > 0)) {
                lv_index = 1;
                for ( ; ( (auto92F150AF_ai >= 0 && lv_index <= auto92F150AF_ae) || (auto92F150AF_ai < 0 && lv_index >= auto92F150AF_ae) ) ; lv_index += auto92F150AF_ai ) {
                    if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                        SoundPlayForPlayer(SoundLink("ReceiveGold", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 100.0, 0.0);
                        gv_itemSurvivalQuantity[lv_trigPlayer] -= 1;
                        libNtve_gf_SetDialogItemText(gv_itemSurvivalDialogTextItems[3], (StringExternal("Param/Value/48FBD6AC") + IntToText(gv_itemSurvivalQuantity[lv_trigPlayer])), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], libNtve_gf_DialogItemTooltip(gv_itemSurvivalDialogSelectedItem[1], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogSelectedItem[2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogSelectedItem[1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogSelectedItem[4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogItems[gv_itemSurvivalSlotSelected[lv_trigPlayer]][3], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalSlotSelected[lv_trigPlayer]][2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalSlotSelected[lv_trigPlayer]][1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalSlotSelected[lv_trigPlayer]][4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
                        lv_index2 = 1;
                        for ( ; ( (autoF0D680B4_ai >= 0 && lv_index2 <= autoF0D680B4_ae) || (autoF0D680B4_ai < 0 && lv_index2 >= autoF0D680B4_ae) ) ; lv_index2 += autoF0D680B4_ai ) {
                            gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = gv_itemSurvivalStats[lv_trigPlayer][gv_itemSurvivalSlotSelected[lv_trigPlayer]][lv_index2];
                            gv_itemSurvivalStats[lv_trigPlayer][gv_itemSurvivalSlotSelected[lv_trigPlayer]][lv_index2] = 0;
                        }
                        gv_itemSurvivalSlotSelected[lv_trigPlayer] = 0;
                        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
                        gv_inventoryPackMove[lv_trigPlayer] = false;
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        return true;
                    }

                }
                gf_GeneralErrorMessage(StringExternal("Param/Value/23B48AA6"), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/92D9AC12"), PlayerGroupSingle(lv_trigPlayer));
            }
        }

    }
    else if (autoAFF36019_val == gv_itemSurvivalDialogMainButtons[3]) {
        libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogSelectedItem[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackSelected[1], StringToText(""), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[2], "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[1], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackSelected[4], "Assets\\Textures\\btn-border-transportslot-empty.dds", PlayerGroupSingle(lv_trigPlayer));
        gv_itemSurvivalSlotSelected[lv_trigPlayer] = 0;
        gv_inventoryPackSlotSelected[lv_trigPlayer] = 0;
        gv_inventoryPackMove[lv_trigPlayer] = false;
        DialogControlSetVisible(gv_inventoryDialogPackButtons[0], PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_itemSurvivalDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), false);
    }
    else {
    }
    lv_index = 1;
    for ( ; ( (autoDA322F0B_ai >= 0 && lv_index <= autoDA322F0B_ae) || (autoDA322F0B_ai < 0 && lv_index >= autoDA322F0B_ae) ) ; lv_index += autoDA322F0B_ai ) {
        if ((lv_dialogItemUsed == gv_itemSurvivalDialogItems[lv_index][3])) {
            if ((gv_itemSurvivalStats[lv_trigPlayer][lv_index][1] != 0)) {
                gv_itemSurvivalSlotSelected[lv_trigPlayer] = lv_index;
                libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogSelectedItem[1], libNtve_gf_DialogItemTooltip(gv_itemSurvivalDialogItems[lv_index][3], lv_trigPlayer), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[2], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogItems[lv_index][2], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[1], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogItems[lv_index][1], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogSelectedItem[4], (libNtve_gf_DialogItemImage(gv_itemSurvivalDialogItems[lv_index][4], lv_trigPlayer)), PlayerGroupSingle(lv_trigPlayer));
                return true;
            }

        }

    }
    return true;
}

trigger auto_gf_ItemsGenerateRandom_Trigger = null;
int auto_gf_ItemsGenerateRandom_lp_trigPlayer;
playergroup auto_gf_ItemsGenerateRandom_lp_playerGroup;
int auto_gf_ItemsGenerateRandom_lp_itemTier;
int auto_gf_ItemsGenerateRandom_lp_dropType;
fixed auto_gf_ItemsGenerateRandom_lp_rarityScale;

void gf_ItemsGenerateRandom (int lp_trigPlayer, playergroup lp_playerGroup, int lp_itemTier, int lp_dropType, fixed lp_rarityScale) {
    auto_gf_ItemsGenerateRandom_lp_trigPlayer = lp_trigPlayer;
    auto_gf_ItemsGenerateRandom_lp_playerGroup = lp_playerGroup;
    auto_gf_ItemsGenerateRandom_lp_itemTier = lp_itemTier;
    auto_gf_ItemsGenerateRandom_lp_dropType = lp_dropType;
    auto_gf_ItemsGenerateRandom_lp_rarityScale = lp_rarityScale;

    if (auto_gf_ItemsGenerateRandom_Trigger == null) {
        auto_gf_ItemsGenerateRandom_Trigger = TriggerCreate("auto_gf_ItemsGenerateRandom_TriggerFunc");
    }

    TriggerExecute(auto_gf_ItemsGenerateRandom_Trigger, false, false);
}

bool auto_gf_ItemsGenerateRandom_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_ItemsGenerateRandom_lp_trigPlayer;
    playergroup lp_playerGroup = auto_gf_ItemsGenerateRandom_lp_playerGroup;
    int lp_itemTier = auto_gf_ItemsGenerateRandom_lp_itemTier;
    int lp_dropType = auto_gf_ItemsGenerateRandom_lp_dropType;
    fixed lp_rarityScale = auto_gf_ItemsGenerateRandom_lp_rarityScale;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;
    playergroup lv_trigGroup;
    int lv_dropType;
    int lv_dropSlot;
    int lv_itemTier;
    int lv_itemRarity;
    int[21] lv_itemStats;
    text[11] lv_itemTooltip;
    fixed lv_playerRarity;
    fixed lv_rarityChance;
    int lv_rarityRoll;
    int lv_rarityScale;
    int[3] lv_glyphDropClass;
    int[5] lv_glyphDropMods;

    // Automatic Variable Declarations
    int auto6D7EC11F_val;
    const int auto3C4ED56B_ae = 6;
    const int auto3C4ED56B_ai = 1;
    const int auto2959E7DD_ae = 4;
    const int auto2959E7DD_ai = 1;
    int auto8E2A62C9_ae;
    const int auto8E2A62C9_ai = 1;
    int auto340BEB54_ae;
    const int auto340BEB54_ai = 1;
    const int auto7AA42A50_ae = 1;
    const int auto7AA42A50_ai = 1;
    const int auto18F8E602_ae = 7;
    const int auto18F8E602_ai = 1;
    const int auto8D73F309_ae = 9;
    const int auto8D73F309_ai = 1;
    const int autoFFB81158_ae = 9;
    const int autoFFB81158_ai = 1;
    const int auto1CE171CE_ae = 7;
    const int auto1CE171CE_ai = 1;
    int auto285E36D6_val;
    const int auto4EADCD53_ae = 20;
    const int auto4EADCD53_ai = 1;
    const int autoFDB02688_ae = gv_generalPlayerCap;
    const int autoFDB02688_ai = 1;
    playergroup autoED856691_g;
    int autoED856691_var;
    playergroup auto36B7496A_g;
    int auto36B7496A_var;
    const int auto7DFE520B_ae = 12;
    const int auto7DFE520B_ai = 1;
    const int auto209555CD_ae = 3;
    const int auto209555CD_ai = 1;
    const int auto5A8E7B1C_ae = 20;
    const int auto5A8E7B1C_ai = 1;
    const int auto541557E2_ae = 35;
    const int auto541557E2_ai = 1;
    const int autoA2EDEF69_ae = 20;
    const int autoA2EDEF69_ai = 1;
    const int auto9A9CB878_ae = 20;
    const int auto9A9CB878_ai = 1;
    const int auto4870E575_ae = 20;
    const int auto4870E575_ai = 1;
    const int auto9C5936CA_ae = 20;
    const int auto9C5936CA_ai = 1;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_trigGroup = PlayerGroupEmpty();
    lv_dropType = lp_dropType;
    lv_itemTier = lp_itemTier;

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_playerGroup, lv_trigGroup);
    if ((lv_dropType > 10)) {
        lv_dropSlot = (lv_dropType - 10);
        lv_dropType = 3;
    }

    auto6D7EC11F_val = lv_dropType;
    if (auto6D7EC11F_val == 1) {
        lv_playerRarity = ((1.0 + (gv_playerCurrency[lv_trigPlayer][0] * 0.01)) + (UnitBehaviorCount(gv_playerHeroHero[lv_trigPlayer], "ItemFind") * 0.01));
    }
    else if (auto6D7EC11F_val == 2) {
        lv_playerRarity = 1.0;
        if ((TimerGetRemaining(gv_itemVendorTimer[lv_trigPlayer]) >= 0.1)) {
            return true;
        }

    }
    else if (auto6D7EC11F_val == 3) {
        lv_itemRarity = FixedToInt(lp_rarityScale);
    }
    else if (auto6D7EC11F_val == 4) {
        lv_playerRarity = 1.0;
    }
    else if (auto6D7EC11F_val == 5) {
        lv_playerRarity = 1.0;
    }
    else if (auto6D7EC11F_val == 6) {
        lv_playerRarity = 1.0;
    }
    else {
    }
    if ((lv_dropType != 3)) {
        lv_rarityChance = (lp_rarityScale * lv_playerRarity);
        lv_index = 1;
        for ( ; ( (auto3C4ED56B_ai >= 0 && lv_index <= auto3C4ED56B_ae) || (auto3C4ED56B_ai < 0 && lv_index >= auto3C4ED56B_ae) ) ; lv_index += auto3C4ED56B_ai ) {
            lv_rarityScale = (gv_itemsBaseRarityScale[lv_index] + FixedToInt(lv_rarityChance));
            lv_rarityRoll = RandomInt(FixedToInt(lv_rarityChance), lv_rarityScale);
            if ((lv_rarityRoll >= gv_itemsBaseRarityScale[lv_index])) {
                lv_itemRarity += 1;
            }
            else {
                break;
            }
        }
    }

    if ((lv_dropType == 6)) {
        lv_index = 1;
        for ( ; ( (auto2959E7DD_ai >= 0 && lv_index <= auto2959E7DD_ae) || (auto2959E7DD_ai < 0 && lv_index >= auto2959E7DD_ae) ) ; lv_index += auto2959E7DD_ai ) {
            if ((lv_itemTier < ((lv_itemRarity * 2) + 7))) {
                lv_itemRarity -= 1;
            }

        }
        if ((lv_itemRarity < 3)) {
            lv_itemRarity = 3;
        }

    }

    if ((lv_dropSlot >= 1)) {
        lv_itemStats[1] = lv_dropSlot;
    }
    else {
        lv_itemStats[1] = RandomInt(1, 8);
        if ((((lv_itemRarity == 3) && (lv_itemTier >= 13)) || ((lv_itemRarity == 4) && (lv_itemTier >= 15)) || ((lv_itemRarity == 5) && (lv_itemTier >= 17)) || ((lv_itemRarity == 6) && (lv_itemTier >= 19))) && (lv_itemRarity >= 3) && (gv_questsPlayerProgress[lv_trigPlayer][100] == 4) && ((RandomInt(1, 7) == 1) || (lv_dropType == 6) || ((lv_dropType == 4) && (gv_itemSurvivalDialogItemIndex[lv_trigPlayer] > 24)))) {
            lv_itemStats[1] = 9;
            if ((lv_itemRarity >= 4) && (RandomInt(1, 4) == 1)) {
                lv_itemStats[1] = 10;
            }

        }

    }
    if ((lv_itemStats[1] == 1)) {
        lv_itemStats[2] = RandomInt(1, 6);
        lv_itemStats[5] = gv_itemsBaseSlotStat[lv_itemStats[1]][lv_itemStats[2]];
    }
    else {
        if ((lv_itemStats[1] >= 7)) {
            lv_itemStats[2] = 1;
            lv_itemStats[5] = RandomInt(1, 16);
        }
        else {
            lv_itemStats[2] = RandomInt(1, 3);
            lv_itemStats[5] = gv_itemsBaseSlotStat[lv_itemStats[1]][lv_itemStats[2]];
        }
    }
    lv_itemStats[3] = lv_itemTier;
    lv_itemStats[4] = lv_itemRarity;
    if ((lv_itemRarity >= 2) && (lv_itemRarity <= 6) && (lv_itemStats[1] < 9)) {
        auto8E2A62C9_ae = (lv_itemRarity - 1);
        lv_index = 1;
        for ( ; ( (auto8E2A62C9_ai >= 0 && lv_index <= auto8E2A62C9_ae) || (auto8E2A62C9_ai < 0 && lv_index >= auto8E2A62C9_ae) ) ; lv_index += auto8E2A62C9_ai ) {
            lv_itemStats[(5 + lv_index)] = RandomInt(1, 16);
        }
    }

    if ((lv_itemRarity >= 3) && (lv_itemRarity <= 6) && (lv_itemStats[1] == 9)) {
        lv_glyphDropClass[1] = RandomInt(1, 3);
        lv_glyphDropClass[2] = RandomInt(1, 5);
        if ((((PlayerHandle(lv_trigPlayer) == "") && (GameIsTestMap(false) == true)) || ((PlayerGroupCount(gv_generalTeamsAll) == 1) && (TriggerIsEnabled(gt_TestGlornify) == true) && ((PlayerHandle(lv_trigPlayer) == "1-S2-1-5476687"))) || ((PlayerGroupCount(gv_generalTeamsAll) == PlayerGroupCount(gv_testersGroup)) && (TriggerIsEnabled(gt_TestGlornify) == true) && (TriggerIsEnabled(gt_TestBuff) == true)))) {
            lv_glyphDropClass[1] = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
            lv_glyphDropClass[2] = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
        }

        auto340BEB54_ae = (lv_itemRarity - 2);
        lv_index = 1;
        for ( ; ( (auto340BEB54_ai >= 0 && lv_index <= auto340BEB54_ae) || (auto340BEB54_ai < 0 && lv_index >= auto340BEB54_ae) ) ; lv_index += auto340BEB54_ai ) {
            lv_itemStats[(4 + lv_index)] = RandomInt(gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][(lv_glyphDropClass[2] - 1)], (gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][lv_glyphDropClass[2]] - 1));
            while (true) {
                if (((lv_itemStats[(4 + lv_index)] == 0) || ((lv_itemStats[(4 + lv_index)] != lv_glyphDropMods[1]) && (lv_itemStats[(4 + lv_index)] != lv_glyphDropMods[2]) && (lv_itemStats[(4 + lv_index)] != lv_glyphDropMods[3]) && (lv_itemStats[(4 + lv_index)] != lv_glyphDropMods[4])))) {
                    break;
                }
                else {
                    lv_itemStats[(4 + lv_index)] = RandomInt(gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][(lv_glyphDropClass[2] - 1)], (gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][lv_glyphDropClass[2]] - 1));
                }
            }
            lv_itemStats[(lv_index + 9)] = 1;
            lv_glyphDropMods[lv_index] = lv_itemStats[(lv_index + 4)];
        }
    }

    if ((lv_itemRarity >= 5) && (lv_itemRarity <= 6) && (lv_itemStats[1] == 10)) {
        lv_glyphDropClass[1] = RandomInt(1, 3);
        lv_glyphDropClass[2] = RandomInt(1, 5);
        if ((((PlayerHandle(lv_trigPlayer) == "") && (GameIsTestMap(false) == true)) || ((PlayerGroupCount(gv_generalTeamsAll) == 1) && (TriggerIsEnabled(gt_TestGlornify) == true) && ((PlayerHandle(lv_trigPlayer) == "1-S2-1-5476687"))) || ((PlayerGroupCount(gv_generalTeamsAll) == PlayerGroupCount(gv_testersGroup)) && (TriggerIsEnabled(gt_TestGlornify) == true) && (TriggerIsEnabled(gt_TestBuff) == true)))) {
            lv_glyphDropClass[1] = gv_playerHeroHeroClassTierType[lv_trigPlayer][1];
            lv_glyphDropClass[2] = gv_playerHeroHeroClassTierType[lv_trigPlayer][3];
        }

        lv_index = 1;
        for ( ; ( (auto7AA42A50_ai >= 0 && lv_index <= auto7AA42A50_ae) || (auto7AA42A50_ai < 0 && lv_index >= auto7AA42A50_ae) ) ; lv_index += auto7AA42A50_ai ) {
            lv_itemStats[(5 + lv_index)] = RandomInt(gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][(lv_glyphDropClass[2] - 1)], (gv_itemsGlyphUpgradeIndex[lv_glyphDropClass[1]][lv_glyphDropClass[2]] - 1));
            lv_itemStats[(lv_index + 10)] = 1;
        }
    }

    if ((lv_itemStats[5] <= 6) && (lv_itemRarity <= 5) && (lv_itemStats[1] != 9)) {
        lv_itemStats[10] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 1.5));
    }
    else {
        if ((lv_itemStats[5] > 6) && (lv_itemStats[5] <= 16) && (lv_itemStats[1] != 9)) {
            lv_itemStats[10] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 1.5));
        }

    }
    if ((lv_itemRarity == 6) && (lv_itemStats[1] != 9)) {
        if ((lv_itemStats[1] == 1)) {
            lv_itemStats[5] = RandomInt(gv_itemsTwilightRanges[1], (gv_itemsTwilightRanges[2] - 1));
            lv_itemStats[10] = 1;
        }

        if ((lv_itemStats[1] > 1) && (lv_itemStats[1] < 7)) {
            lv_itemStats[5] = RandomInt(gv_itemsTwilightRanges[2], (gv_itemsTwilightRanges[3] - 0));
            lv_itemStats[10] = 1;
        }

        if ((lv_itemStats[1] >= 7)) {
            lv_itemStats[5] = RandomInt(gv_itemsTwilightRanges[1], (gv_itemsTwilightRanges[4] - 0));
            lv_itemStats[10] = 1;
        }

    }

    lv_index = 6;
    for ( ; ( (auto18F8E602_ai >= 0 && lv_index <= auto18F8E602_ae) || (auto18F8E602_ai < 0 && lv_index >= auto18F8E602_ae) ) ; lv_index += auto18F8E602_ai ) {
        if ((lv_itemStats[lv_index] >= 1) && (lv_itemStats[lv_index] <= 6)) {
            lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 1.0));
        }
        else {
            if ((lv_itemStats[lv_index] > 6) && (lv_itemStats[lv_index] <= 16)) {
                lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 1.0));
            }

        }
    }
    lv_index = 8;
    for ( ; ( (auto8D73F309_ai >= 0 && lv_index <= auto8D73F309_ae) || (auto8D73F309_ai < 0 && lv_index >= auto8D73F309_ae) ) ; lv_index += auto8D73F309_ai ) {
        if ((lv_itemStats[lv_index] >= 1) && (lv_itemStats[lv_index] <= 6)) {
            lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[1][lv_itemTier] * 0.5));
        }
        else {
            if ((lv_itemStats[lv_index] > 6) && (lv_itemStats[lv_index] <= 16)) {
                lv_itemStats[(lv_index + 5)] = FixedToInt((gv_itemsStatTierValues[2][lv_itemTier] * 0.5));
            }

        }
    }
    lv_itemTooltip[1] = gv_itemsBaseName[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity];
    lv_itemTooltip[2] = ((gv_itemsBaseName[lv_itemStats[1]][0][0] + StringExternal("Param/Value/3312F1A0")) + (IntToText(lv_itemStats[3]) + StringExternal("Param/Value/09198D5F")));
    lv_index = 5;
    for ( ; ( (autoFFB81158_ai >= 0 && lv_index <= autoFFB81158_ae) || (autoFFB81158_ai < 0 && lv_index >= autoFFB81158_ae) ) ; lv_index += autoFFB81158_ai ) {
        if ((lv_itemStats[lv_index] >= 1)) {
            if ((lv_itemStats[1] != 9)) {
                if ((lv_itemRarity == 6) && (lv_index == 5)) {
                    lv_itemTooltip[(lv_index - 2)] = (gv_itemsStatTooltip[lv_itemStats[lv_index]] + StringToText(""));
                }
                else {
                    if ((lv_itemStats[1] == 10) && (lv_itemRarity > 4) && (lv_index > 5)) {
                        lv_itemTooltip[(lv_index - 2)] = (gv_itemsGlyphTooltip[lv_itemStats[lv_index]] + StringToText(""));
                    }
                    else {
                        lv_itemTooltip[(lv_index - 2)] = (gv_itemsStatTooltip[lv_itemStats[lv_index]] + FixedToText(((lv_itemStats[(lv_index + 5)] * (gv_itemsStatValue[lv_itemStats[lv_index]] / 100.0)) / 1.0), 2));
                    }
                }
            }
            else {
                lv_itemTooltip[(lv_index - 2)] = (gv_itemsGlyphTooltip[lv_itemStats[lv_index]] + StringToText(""));
            }
        }

    }
    lv_itemTooltip[0] = lv_itemTooltip[1];
    lv_index = 2;
    for ( ; ( (auto1CE171CE_ai >= 0 && lv_index <= auto1CE171CE_ae) || (auto1CE171CE_ai < 0 && lv_index >= auto1CE171CE_ae) ) ; lv_index += auto1CE171CE_ai ) {
        lv_itemTooltip[0] = ((lv_itemTooltip[0] + StringExternal("Param/Value/F3CFDC85")) + lv_itemTooltip[lv_index]);
    }
    auto285E36D6_val = lv_dropType;
    if (auto285E36D6_val == 1) {
        if ((gv_itemDropsDropIndex < 100)) {
            gv_itemDropsDropIndex += 1;
        }
        else {
            gv_itemDropsDropIndex = 1;
        }
        lv_index = 1;
        for ( ; ( (auto4EADCD53_ai >= 0 && lv_index <= auto4EADCD53_ae) || (auto4EADCD53_ai < 0 && lv_index >= auto4EADCD53_ae) ) ; lv_index += auto4EADCD53_ai ) {
            gv_itemDropsStats[gv_itemDropsDropIndex][lv_index] = lv_itemStats[lv_index];
        }
        lv_index2 = 1;
        for ( ; ( (autoFDB02688_ai >= 0 && lv_index2 <= autoFDB02688_ae) || (autoFDB02688_ai < 0 && lv_index2 >= autoFDB02688_ae) ) ; lv_index2 += autoFDB02688_ai ) {
            gv_itemDropsPlayerRoll[lv_index2][gv_itemDropsDropIndex] = 0;
        }
        PlayerGroupClear(gv_itemDropsPlayerGroup[gv_itemDropsDropIndex]);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_trigGroup, gv_itemDropsPlayerGroup[gv_itemDropsDropIndex]);
        autoED856691_g = lv_trigGroup;
        autoED856691_var = -1;
        while (true) {
            autoED856691_var = PlayerGroupNextPlayer(autoED856691_g, autoED856691_var);
            if (autoED856691_var < 0) { break; }
            if (((gv_lootFilterPlayerSelections[autoED856691_var][1] > lv_itemRarity) || (gv_lootFilterPlayerSelections[autoED856691_var][2] > lv_itemTier))) {
                PlayerGroupRemove(lv_trigGroup, autoED856691_var);
                PlayerGroupRemove(gv_itemDropsPlayerGroup[gv_itemDropsDropIndex], autoED856691_var);
            }

        }
        auto36B7496A_g = lv_trigGroup;
        auto36B7496A_var = -1;
        while (true) {
            auto36B7496A_var = PlayerGroupNextPlayer(auto36B7496A_g, auto36B7496A_var);
            if (auto36B7496A_var < 0) { break; }
            lv_trigPlayer = auto36B7496A_var;
            if ((lv_itemRarity == 5)) {
                gv_playerStatisticsAchievements[lv_trigPlayer][16][2] += 1;
            }

            if ((lv_itemRarity == 6)) {
                gv_playerStatisticsAchievements[lv_trigPlayer][17][2] += 1;
            }

            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][0], PlayerGroupSingle(lv_trigPlayer), 0.0, 0.0);
            lv_index = 1;
            for ( ; ( (auto7DFE520B_ai >= 0 && lv_index <= auto7DFE520B_ae) || (auto7DFE520B_ai < 0 && lv_index >= auto7DFE520B_ae) ) ; lv_index += auto7DFE520B_ai ) {
                if ((gv_itemDropsPlayerSlotValue[lv_trigPlayer][lv_index] == 0)) {
                    gv_itemDropsPlayerSlotValue[lv_trigPlayer][lv_index] = gv_itemDropsDropIndex;
                    libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogDropItems[lv_index][1], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogDropItems[lv_index][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogDropItems[lv_index][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemImage(gv_inventoryDialogDropItems[lv_index][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
                    DialogControlSetSize(gv_inventoryDialogDropTimer[lv_index][2], PlayerGroupSingle(lv_trigPlayer), 100, 10);
                    libNtve_gf_SetDialogItemColor(gv_inventoryDialogDropTimer[lv_index][2], Color(58.82, 78.43, 100.00), PlayerGroupSingle(lv_trigPlayer));
                    DialogSetVisible(gv_inventoryDialogDropBox[lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                    lv_index2 = 1;
                    for ( ; ( (auto209555CD_ai >= 0 && lv_index2 <= auto209555CD_ae) || (auto209555CD_ai < 0 && lv_index2 >= auto209555CD_ae) ) ; lv_index2 += auto209555CD_ai ) {
                        DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_index][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                    }
                    break;
                }

            }
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][0], PlayerGroupSingle(lv_trigPlayer), 2.0, 100.0);
        }
        if ((PlayerGroupCount(lv_trigGroup) >= 1)) {
            gf_ItemsTimer(gv_itemDropsDropIndex, gv_itemDropsTimerLimits[lv_itemRarity]);
        }

    }
    else if (auto285E36D6_val == 2) {
        lv_index = 1;
        for ( ; ( (auto5A8E7B1C_ai >= 0 && lv_index <= auto5A8E7B1C_ae) || (auto5A8E7B1C_ai < 0 && lv_index >= auto5A8E7B1C_ae) ) ; lv_index += auto5A8E7B1C_ai ) {
            gv_itemVendorStats[lv_trigPlayer][gv_itemVendorDialogItemIndex[lv_trigPlayer]][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_itemVendorDialogItems[gv_itemVendorDialogItemIndex[lv_trigPlayer]][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorDialogItemIndex[lv_trigPlayer]][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorDialogItemIndex[lv_trigPlayer]][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemVendorDialogItems[gv_itemVendorDialogItemIndex[lv_trigPlayer]][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
        gv_itemVendorDialogItemIndex[lv_trigPlayer] += 1;
        if ((gv_itemVendorDialogItemIndex[lv_trigPlayer] == 25)) {
            TimerStart(gv_itemVendorTimer[lv_trigPlayer], 2.0, false, c_timeGame);
        }

    }
    else if (auto285E36D6_val == 3) {
        lv_index = 1;
        for ( ; ( (auto541557E2_ai >= 0 && lv_index <= auto541557E2_ae) || (auto541557E2_ai < 0 && lv_index >= auto541557E2_ae) ) ; lv_index += auto541557E2_ai ) {
            if ((gv_inventoryPackStats[lv_trigPlayer][lv_index][1] == 0)) {
                lv_index2 = 1;
                for ( ; ( (autoA2EDEF69_ai >= 0 && lv_index2 <= autoA2EDEF69_ae) || (autoA2EDEF69_ai < 0 && lv_index2 >= autoA2EDEF69_ae) ) ; lv_index2 += autoA2EDEF69_ai ) {
                    gv_inventoryPackStats[lv_trigPlayer][lv_index][lv_index2] = lv_itemStats[lv_index2];
                }
                libNtve_gf_SetDialogItemTooltip(gv_inventoryDialogPackItems[lv_index][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
                libNtve_gf_SetDialogItemImage(gv_inventoryDialogPackItems[lv_index][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
                break;
            }

        }
    }
    else if (auto285E36D6_val == 4) {
        lv_index = 1;
        for ( ; ( (auto9A9CB878_ai >= 0 && lv_index <= auto9A9CB878_ae) || (auto9A9CB878_ai < 0 && lv_index >= auto9A9CB878_ae) ) ; lv_index += auto9A9CB878_ai ) {
            gv_itemSurvivalStats[lv_trigPlayer][gv_itemSurvivalDialogItemIndex[lv_trigPlayer]][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_itemSurvivalDialogItems[gv_itemSurvivalDialogItemIndex[lv_trigPlayer]][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalDialogItemIndex[lv_trigPlayer]][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalDialogItemIndex[lv_trigPlayer]][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_itemSurvivalDialogItems[gv_itemSurvivalDialogItemIndex[lv_trigPlayer]][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
        gv_itemSurvivalDialogItemIndex[lv_trigPlayer] += 1;
    }
    else if (auto285E36D6_val == 5) {
        lv_index = 1;
        for ( ; ( (auto4870E575_ai >= 0 && lv_index <= auto4870E575_ae) || (auto4870E575_ai < 0 && lv_index >= auto4870E575_ae) ) ; lv_index += auto4870E575_ai ) {
            gv_raritiesVendorStats[lv_trigPlayer][gv_raritiesVendorDialogItemIndex[lv_trigPlayer]][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_raritiesVendorDialogItems[gv_raritiesVendorDialogItemIndex[lv_trigPlayer]][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorDialogItemIndex[lv_trigPlayer]][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorDialogItemIndex[lv_trigPlayer]][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_raritiesVendorDialogItems[gv_raritiesVendorDialogItemIndex[lv_trigPlayer]][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
        gv_raritiesVendorDialogItemIndex[lv_trigPlayer] += 1;
    }
    else if (auto285E36D6_val == 6) {
        lv_index = 1;
        for ( ; ( (auto9C5936CA_ai >= 0 && lv_index <= auto9C5936CA_ae) || (auto9C5936CA_ai < 0 && lv_index >= auto9C5936CA_ae) ) ; lv_index += auto9C5936CA_ai ) {
            gv_glyphVendorStats[lv_trigPlayer][gv_glyphVendorDialogItemIndex[lv_trigPlayer]][lv_index] = lv_itemStats[lv_index];
        }
        libNtve_gf_SetDialogItemTooltip(gv_glyphVendorDialogItems[gv_glyphVendorDialogItemIndex[lv_trigPlayer]][3], lv_itemTooltip[0], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorDialogItemIndex[lv_trigPlayer]][2], gv_itemsBaseBorder[lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorDialogItemIndex[lv_trigPlayer]][1], gv_itemsBaseIcon[lv_itemStats[1]][lv_itemStats[2]][lv_itemRarity], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_glyphVendorDialogItems[gv_glyphVendorDialogItemIndex[lv_trigPlayer]][4], gv_itemsAssistIcon[lv_itemStats[1]], PlayerGroupSingle(lv_trigPlayer));
        gv_glyphVendorDialogItemIndex[lv_trigPlayer] += 1;
    }
    else {
    }
    return true;
}

trigger auto_gf_ItemsGeneratePotion_Trigger = null;
int auto_gf_ItemsGeneratePotion_lp_trigPlayer;
int auto_gf_ItemsGeneratePotion_lp_generateType;
int auto_gf_ItemsGeneratePotion_lp_vendorSlot;

void gf_ItemsGeneratePotion (int lp_trigPlayer, int lp_generateType, int lp_vendorSlot) {
    auto_gf_ItemsGeneratePotion_lp_trigPlayer = lp_trigPlayer;
    auto_gf_ItemsGeneratePotion_lp_generateType = lp_generateType;
    auto_gf_ItemsGeneratePotion_lp_vendorSlot = lp_vendorSlot;

    if (auto_gf_ItemsGeneratePotion_Trigger == null) {
        auto_gf_ItemsGeneratePotion_Trigger = TriggerCreate("auto_gf_ItemsGeneratePotion_TriggerFunc");
    }

    TriggerExecute(auto_gf_ItemsGeneratePotion_Trigger, false, false);
}

bool auto_gf_ItemsGeneratePotion_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_ItemsGeneratePotion_lp_trigPlayer;
    int lp_generateType = auto_gf_ItemsGeneratePotion_lp_generateType;
    int lp_vendorSlot = auto_gf_ItemsGeneratePotion_lp_vendorSlot;

    int init_i;

    // Variable Declarations
    int lv_trigPlayer;
    int lv_generateType;
    int lv_vendorSlot;
    int lv_index;
    fixed lv_potsUsed;
    string[7] lv_tempString;
    int[7] lv_tempStats;
    string[3] lv_typeString;

    // Automatic Variable Declarations
    int auto32C10DE1_val;
    const int auto101CDE60_ae = 6;
    const int auto101CDE60_ai = 1;
    const int auto73B0AD89_ae = 6;
    const int auto73B0AD89_ai = 1;
    const int autoEACFBE5E_ae = 5;
    const int autoEACFBE5E_ai = 1;
    const int autoD3FF5CAF_ae = 5;
    const int autoD3FF5CAF_ai = 1;
    const int autoDE5B89AD_ae = 6;
    const int autoDE5B89AD_ai = 1;
    int auto9A20AD3F_val;

    // Variable Initialization
    lv_trigPlayer = lp_trigPlayer;
    lv_generateType = lp_generateType;
    lv_vendorSlot = lp_vendorSlot;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_tempString[init_i] = "";
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_typeString[init_i] = "";
    }

    // Implementation
    lv_typeString[1] = "<c val=\"FF0000\"> Life </c> instantly.";
    lv_typeString[2] = "<c val=\"0000FF\"> Energy </c> instantly.";
    auto32C10DE1_val = lv_generateType;
    if (auto32C10DE1_val == 1) {
        if ((TimerGetRemaining(gv_potionVendorTimer[lv_trigPlayer]) >= 0.1)) {
            return true;
        }

        lv_index = 1;
        for ( ; ( (auto101CDE60_ai >= 0 && lv_index <= auto101CDE60_ae) || (auto101CDE60_ai < 0 && lv_index >= auto101CDE60_ae) ) ; lv_index += auto101CDE60_ai ) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][lv_index] = 0;
        }
        gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][1] = RandomInt(1, 2);
        gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] = FloorI((0 + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)));
        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][100] == 4)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] += 1;
        }

        if ((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][134] == 4)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] += 1;
        }

        if ((gv_playerStatisticsHats[lv_trigPlayer][4][6] == 2)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] += 1;
        }

        if ((RandomInt(1, 4) == 1)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] += 1;
        }

        gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] = RandomInt(7, 10);
        gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6] = 1;
        if ((RandomInt(1, 2) == 1)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][4] = RandomInt(1, gv_potionStatsIndex);
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] -= RandomInt(1, 3);
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6] += 1;
            if ((RandomInt(1, 3) == 1)) {
                gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][5] = RandomInt(1, gv_potionStatsIndex);
                gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] -= RandomInt(1, 3);
                gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6] += 1;
            }

        }

        if ((lv_vendorSlot == 9)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][1] = 3;
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] = 4;
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][4] = (gv_potionStatsIndex + 1);
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][5] = 0;
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6] = 1;
        }

        if ((gv_questsPlayerProgress[lv_trigPlayer][129] == 4)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] += (5 - gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6]);
        }

        if ((gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][1] == 2) && (gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][2] > 12)) {
            gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][3] -= (3 - gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][6]);
        }

        lv_index = 1;
        for ( ; ( (auto73B0AD89_ai >= 0 && lv_index <= auto73B0AD89_ae) || (auto73B0AD89_ai < 0 && lv_index >= auto73B0AD89_ae) ) ; lv_index += auto73B0AD89_ai ) {
            lv_tempStats[lv_index] = gv_potionVendorStats[lv_trigPlayer][lv_vendorSlot][lv_index];
        }
    }
    else if (auto32C10DE1_val == 2) {
        lv_index = 1;
        for ( ; ( (autoEACFBE5E_ai >= 0 && lv_index <= autoEACFBE5E_ae) || (autoEACFBE5E_ai < 0 && lv_index >= autoEACFBE5E_ae) ) ; lv_index += autoEACFBE5E_ai ) {
            lv_tempStats[lv_index] = gv_inventoryPotionStats[lv_trigPlayer][lv_index];
        }
    }
    else {
    }
    lv_tempStats[6] = 1;
    lv_index = 4;
    for ( ; ( (autoD3FF5CAF_ai >= 0 && lv_index <= autoD3FF5CAF_ae) || (autoD3FF5CAF_ai < 0 && lv_index >= autoD3FF5CAF_ae) ) ; lv_index += autoD3FF5CAF_ai ) {
        if ((lv_tempStats[lv_index] > 0)) {
            lv_tempStats[6] += 1;
        }

    }
    if ((lv_generateType == 1)) {
        lv_tempString[0] = ("<s val=\"ModCenterSize20Bold\">" + (gv_potionName[lv_tempStats[1]][lv_tempStats[6]] + "</s></n>"));
    }

    if ((lv_tempStats[1] != 3)) {
        lv_tempString[1] = ("" + ("<s val=\"ModCenterSize12Bold\">Tier:  " + (IntToString(lv_tempStats[2]) + "</s>")));
        lv_tempString[2] = ("</n>" + ("<s val=\"ModCenterSize12Bold\"><c val=\"FFFF00\">Charges:  " + (IntToString(lv_tempStats[3]) + "</c></s>")));
        lv_tempString[3] = ("</n>" + ("<s val=\"ModCenterSize16Bold\">Restores " + ((IntToString(gv_potionHealValue[lv_tempStats[1]][lv_tempStats[2]]) + lv_typeString[lv_tempStats[1]]) + "</s>")));
    }
    else {
        lv_tempString[2] = ("" + ("<s val=\"ModCenterSize12Bold\"><c val=\"FFFF00\">Charges:  " + (IntToString(lv_tempStats[3]) + "</c></s>")));
    }
    if ((lv_tempStats[6] >= 2)) {
        lv_tempString[4] = ("</n>" + gv_potionStatTooltip[lv_tempStats[4]]);
    }

    if ((lv_tempStats[6] >= 3)) {
        lv_tempString[5] = ("</n>" + gv_potionStatTooltip[lv_tempStats[5]]);
    }

    if ((lv_tempStats[6] >= 2) && (lv_tempStats[1] != 3)) {
        lv_tempString[6] = ("</n>" + "Lasts for 6 seconds.");
    }

    lv_index = 1;
    for ( ; ( (autoDE5B89AD_ai >= 0 && lv_index <= autoDE5B89AD_ae) || (autoDE5B89AD_ai < 0 && lv_index >= autoDE5B89AD_ae) ) ; lv_index += autoDE5B89AD_ai ) {
        if (((lv_index != 2) || (lv_generateType == 1))) {
            lv_tempString[0] = (lv_tempString[0] + lv_tempString[lv_index]);
        }

    }
    auto9A20AD3F_val = lv_generateType;
    if (auto9A20AD3F_val == 1) {
        libNtve_gf_SetDialogItemTooltip(gv_potionVendorDialogItems[lv_vendorSlot][3], StringToText(lv_tempString[0]), PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_potionVendorDialogItems[lv_vendorSlot][2], gv_itemsBaseBorder[lv_tempStats[6]], PlayerGroupSingle(lv_trigPlayer));
        libNtve_gf_SetDialogItemImage(gv_potionVendorDialogItems[lv_vendorSlot][1], gv_potionIcon[lv_tempStats[1]][lv_tempStats[6]], PlayerGroupSingle(lv_trigPlayer));
        if ((lv_vendorSlot == 9)) {
            TimerStart(gv_potionVendorTimer[lv_trigPlayer], 3.0, false, c_timeGame);
        }

    }
    else if (auto9A20AD3F_val == 2) {
        if ((lv_tempStats[1] == 1)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseLife", "RechargeVitalRate", lv_trigPlayer, FixedToString(gv_potionHealValue[lv_tempStats[1]][lv_tempStats[2]], 0));
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseEnergy", "VitalArray[" + IntToString(2) + "].Change", lv_trigPlayer, "0");
        }

        if ((lv_tempStats[1] == 2)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseEnergy", "VitalArray[" + IntToString(2) + "].Change", lv_trigPlayer, FixedToString(gv_potionHealValue[lv_tempStats[1]][lv_tempStats[2]], 0));
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseLife", "RechargeVitalRate", lv_trigPlayer, FixedToString(0.0, 0));
        }

        if ((lv_tempStats[1] == 3)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseEnergy", "VitalArray[" + IntToString(2) + "].Change", lv_trigPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogEffect, "BaseLife", "RechargeVitalRate", lv_trigPlayer, FixedToString(0.0, 0));
        }

        if ((lv_tempStats[4] > 0)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "PotionMod1", "Behavior", lv_trigPlayer, (gv_potionBehavior[lv_tempStats[4]]));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "PotionMod1", "Behavior", lv_trigPlayer, (gv_potionBehavior[0]));
        }
        if ((lv_tempStats[5] > 0)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "PotionMod2", "Behavior", lv_trigPlayer, (gv_potionBehavior[lv_tempStats[5]]));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "PotionMod2", "Behavior", lv_trigPlayer, (gv_potionBehavior[0]));
        }
        gv_inventoryPotionStats[lv_trigPlayer][3] = FixedToInt(UnitAbilityChargeInfo(gv_playerHeroHero[lv_trigPlayer], AbilityCommand("Potion", 0), c_unitAbilChargeCountLeft));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "StackCount", lv_tempStats[3]);
        libNtve_gf_UnitAbilityRemoveChargeUsed(gv_playerHeroHero[lv_trigPlayer], "Potion", "Abil/Potion");
        CatalogFieldValueSet(c_gameCatalogButton, "Potion", "Name", lv_trigPlayer, gv_potionName[lv_tempStats[1]][lv_tempStats[6]]);
        CatalogFieldValueSet(c_gameCatalogButton, "Potion", "Icon", lv_trigPlayer, (gv_potionIcon[lv_tempStats[1]][lv_tempStats[6]]));
        CatalogFieldValueSet(c_gameCatalogButton, "Potion", "Tooltip", lv_trigPlayer, lv_tempString[0]);
    }
    else {
    }
    return true;
}

trigger auto_gf_ItemsTimer_Trigger = null;
int auto_gf_ItemsTimer_lp_timerIndex;
int auto_gf_ItemsTimer_lp_timerTime;

void gf_ItemsTimer (int lp_timerIndex, int lp_timerTime) {
    auto_gf_ItemsTimer_lp_timerIndex = lp_timerIndex;
    auto_gf_ItemsTimer_lp_timerTime = lp_timerTime;

    if (auto_gf_ItemsTimer_Trigger == null) {
        auto_gf_ItemsTimer_Trigger = TriggerCreate("auto_gf_ItemsTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_ItemsTimer_Trigger, false, false);
}

bool auto_gf_ItemsTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_timerIndex = auto_gf_ItemsTimer_lp_timerIndex;
    int lp_timerTime = auto_gf_ItemsTimer_lp_timerTime;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_timerindex;
    int lv_timerMax;
    int lv_timerCountdown;
    fixed[2] lv_timerMath;

    // Automatic Variable Declarations
    playergroup autoB124DA84_g;
    int autoB124DA84_var;
    const int autoFE9F6419_ae = 12;
    const int autoFE9F6419_ai = 1;
    playergroup auto1229638D_g;
    int auto1229638D_var;
    const int autoFAAD6244_ae = 12;
    const int autoFAAD6244_ai = 1;
    const int auto281B4052_ae = 3;
    const int auto281B4052_ai = 1;

    // Variable Initialization

    // Implementation
    lv_timerindex = lp_timerIndex;
    lv_timerCountdown = lp_timerTime;
    lv_timerMax = lp_timerTime;
    while ((lv_timerCountdown >= 1)) {
        while (!((gv_generalEndingCinematic == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        lv_timerCountdown -= 1;
        lv_timerMath[1] = ((100.0 / lv_timerMax) * lv_timerCountdown);
        autoB124DA84_g = gv_itemDropsPlayerGroup[lv_timerindex];
        autoB124DA84_var = -1;
        while (true) {
            autoB124DA84_var = PlayerGroupNextPlayer(autoB124DA84_g, autoB124DA84_var);
            if (autoB124DA84_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (autoFE9F6419_ai >= 0 && lv_index <= autoFE9F6419_ae) || (autoFE9F6419_ai < 0 && lv_index >= autoFE9F6419_ae) ) ; lv_index += autoFE9F6419_ai ) {
                if ((gv_itemDropsPlayerSlotValue[autoB124DA84_var][lv_index] == lv_timerindex)) {
                    DialogControlSetSize(gv_inventoryDialogDropTimer[lv_index][2], PlayerGroupSingle(autoB124DA84_var), FixedToInt(lv_timerMath[1]), 10);
                    if ((lv_timerCountdown == 20)) {
                        libNtve_gf_SetDialogItemColor(gv_inventoryDialogDropTimer[lv_index][2], Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(autoB124DA84_var));
                    }

                    if ((lv_timerCountdown == 7)) {
                        libNtve_gf_SetDialogItemColor(gv_inventoryDialogDropTimer[lv_index][2], Color(100.00, 0.00, 0.00), PlayerGroupSingle(autoB124DA84_var));
                    }

                }

            }
        }
    }
    if ((lv_timerCountdown == 0)) {
        auto1229638D_g = gv_itemDropsPlayerGroup[lv_timerindex];
        auto1229638D_var = -1;
        while (true) {
            auto1229638D_var = PlayerGroupNextPlayer(auto1229638D_g, auto1229638D_var);
            if (auto1229638D_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (autoFAAD6244_ai >= 0 && lv_index <= autoFAAD6244_ae) || (autoFAAD6244_ai < 0 && lv_index >= autoFAAD6244_ae) ) ; lv_index += autoFAAD6244_ai ) {
                if ((gv_itemDropsPlayerSlotValue[auto1229638D_var][lv_index] == lv_timerindex) && (gv_itemDropsPlayerRoll[auto1229638D_var][lv_timerindex] == 0)) {
                    DialogSetVisible(gv_inventoryDialogDropBox[lv_index], PlayerGroupSingle(auto1229638D_var), false);
                    gv_itemDropsPlayerSlotValue[auto1229638D_var][lv_index] = 0;
                    gv_itemDropsPlayerRoll[auto1229638D_var][lv_index] = 0;
                    PlayerGroupRemove(gv_itemDropsPlayerGroup[lv_timerindex], auto1229638D_var);
                    lv_index2 = 1;
                    for ( ; ( (auto281B4052_ai >= 0 && lv_index2 <= auto281B4052_ae) || (auto281B4052_ai < 0 && lv_index2 >= auto281B4052_ae) ) ; lv_index2 += auto281B4052_ai ) {
                        DialogControlSetEnabled(gv_inventoryDialogDropButtons[lv_index][lv_index2], PlayerGroupSingle(auto1229638D_var), true);
                    }
                }

            }
        }
        gf_DialogUsedItemDrops(0, lv_timerindex, c_invalidDialogControlId);
    }

    return true;
}

trigger auto_gf_GeneralDialogEnable_Trigger = null;
int auto_gf_GeneralDialogEnable_lp_trigPlayer;

void gf_GeneralDialogEnable (int lp_trigPlayer) {
    auto_gf_GeneralDialogEnable_lp_trigPlayer = lp_trigPlayer;

    if (auto_gf_GeneralDialogEnable_Trigger == null) {
        auto_gf_GeneralDialogEnable_Trigger = TriggerCreate("auto_gf_GeneralDialogEnable_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralDialogEnable_Trigger, false, false);
}

bool auto_gf_GeneralDialogEnable_TriggerFunc (bool testConds, bool runActions) {
    int lp_trigPlayer = auto_gf_GeneralDialogEnable_lp_trigPlayer;

    // Automatic Variable Declarations
    const int auto8AF27AAE_n = 31;
    int auto8AF27AAE_i;

    // Implementation
    for (auto8AF27AAE_i = 1; auto8AF27AAE_i <= auto8AF27AAE_n; auto8AF27AAE_i += 1) {
        Wait(0.1, c_timeGame);
        if ((gv_playerDialogUsed[lp_trigPlayer] == false)) {
            return true;
        }

    }
    if ((gv_playerDialogUsed[lp_trigPlayer] == true)) {
        gv_playerDialogUsed[lp_trigPlayer] = false;
    }

    return true;
}

trigger auto_gf_GeneralUnitTakesDamage_Trigger = null;
unit auto_gf_GeneralUnitTakesDamage_lp_hitUnit;
unit auto_gf_GeneralUnitTakesDamage_lp_hittingUnit;
int auto_gf_GeneralUnitTakesDamage_lp_hittingPlayer;
fixed auto_gf_GeneralUnitTakesDamage_lp_damage;
fixed auto_gf_GeneralUnitTakesDamage_lp_damageAttempted;

void gf_GeneralUnitTakesDamage (unit lp_hitUnit, unit lp_hittingUnit, int lp_hittingPlayer, fixed lp_damage, fixed lp_damageAttempted) {
    auto_gf_GeneralUnitTakesDamage_lp_hitUnit = lp_hitUnit;
    auto_gf_GeneralUnitTakesDamage_lp_hittingUnit = lp_hittingUnit;
    auto_gf_GeneralUnitTakesDamage_lp_hittingPlayer = lp_hittingPlayer;
    auto_gf_GeneralUnitTakesDamage_lp_damage = lp_damage;
    auto_gf_GeneralUnitTakesDamage_lp_damageAttempted = lp_damageAttempted;

    if (auto_gf_GeneralUnitTakesDamage_Trigger == null) {
        auto_gf_GeneralUnitTakesDamage_Trigger = TriggerCreate("auto_gf_GeneralUnitTakesDamage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralUnitTakesDamage_Trigger, false, false);
}

bool auto_gf_GeneralUnitTakesDamage_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hitUnit = auto_gf_GeneralUnitTakesDamage_lp_hitUnit;
    unit lp_hittingUnit = auto_gf_GeneralUnitTakesDamage_lp_hittingUnit;
    int lp_hittingPlayer = auto_gf_GeneralUnitTakesDamage_lp_hittingPlayer;
    fixed lp_damage = auto_gf_GeneralUnitTakesDamage_lp_damage;
    fixed lp_damageAttempted = auto_gf_GeneralUnitTakesDamage_lp_damageAttempted;

    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;
    int lv_dungeonCheck;

    // Automatic Variable Declarations
    int autoF3F903A1_ae;
    const int autoF3F903A1_ai = 1;
    const int auto9A93980A_ae = gv_questsQuestSlots;
    const int auto9A93980A_ai = 1;
    const int auto8652DDB3_ae = gv_questsQuestSlots;
    const int auto8652DDB3_ai = 1;
    const int auto5DBB8105_ae = gv_questsQuestSlots;
    const int auto5DBB8105_ai = 1;
    const int auto4D454DC2_ae = gv_questsQuestSlots;
    const int auto4D454DC2_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_damage >= 1) && (lp_hittingPlayer > 0) && ((lp_hittingPlayer < 15) || ((lp_hittingPlayer == 15) && (UnitGetOwner(lp_hitUnit) != 0)))) {
        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lp_hittingPlayer) == true)) {
            lv_trigPlayer = lp_hittingPlayer;
            lv_dungeonCheck = 4;
        }

        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, UnitGetOwner(lp_hitUnit)) == true)) {
            lv_trigPlayer = UnitGetOwner(lp_hitUnit);
            gv_playerStatisticsAchievements[lv_trigPlayer][15][2] += FixedToInt(lp_damage);
            lv_dungeonCheck = 5;
        }

        autoF3F903A1_ae = gv_regionsDungeonsIndex;
        lv_index = 0;
        for ( ; ( (autoF3F903A1_ai >= 0 && lv_index <= autoF3F903A1_ae) || (autoF3F903A1_ai < 0 && lv_index >= autoF3F903A1_ae) ) ; lv_index += autoF3F903A1_ai ) {
            if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], gv_regionsDungeonsRegion[lv_index][1]) == true)) {
                gv_dungeonsDungeonStatistics[lv_trigPlayer][lv_dungeonCheck][lv_index] += FixedToInt(lp_damage);
                gv_dungeonsDungeonStatistics[lv_trigPlayer][(lv_dungeonCheck + 3)][lv_index] += FixedToInt(lp_damageAttempted);
            }

        }
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[20], lv_trigPlayer) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(lp_hittingUnit), c_unitAttributeMassive) == true))) {
            gv_dungeonsDungeonStatistics[lv_trigPlayer][lv_dungeonCheck][20] += FixedToInt(lp_damage);
            gv_dungeonsDungeonStatistics[lv_trigPlayer][(lv_dungeonCheck + 3)][20] += FixedToInt(lp_damageAttempted);
        }

        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true) && (TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 5.0)) {
            TimerStart(gv_playerCombatTimer[lv_trigPlayer], 10.0, false, c_timeGame);
            if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) >= 70.0)) {
                libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(22*100/255,128*100/255,0), PlayerGroupSingle(lv_trigPlayer));
            }
            else {
                if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) < 70.0) && (UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) >= 30.0)) {
                    libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(lv_trigPlayer));
                }
                else {
                    if ((UnitGetPropertyFixed(gv_playerHeroHero[lv_trigPlayer], c_unitPropLifePercent, c_unitPropCurrent) < 30.0)) {
                        libNtve_gf_SetDialogItemColor(gv_screenEffectsDialogItem[6][0], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lv_trigPlayer));
                    }

                }
            }
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[6][0], PlayerGroupSingle(lv_trigPlayer), 0.0, 40.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[6][0], PlayerGroupSingle(lv_trigPlayer), 10.0, 100.0);
        }

        if ((CatalogFieldValueGet(c_gameCatalogEffect, EventUnitDamageEffect(), "Kind", lp_hittingPlayer) == "Melee")) {
            if ((lp_hittingPlayer == 15)) {
                if ((UnitGetType(lp_hitUnit) == "StrawDummy")) {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/A49E07E7") + TextWithColor(IntToText((FixedToInt(lp_damage) * 10)), Color(75.29, 75.29, 75.29))), Color(75.29, 75.29, 75.29)), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
                else {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/8C245C4D") + TextWithColor(FixedToText(lp_damage, 0), Color(75.29, 75.29, 75.29))), Color(75.29, 75.29, 75.29)), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
                TextTagShow(TextTagLastCreated(), gv_playerTagGroup, false);
                lv_trigPlayer = UnitGetOwner(lp_hitUnit);
                if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true)) {
                    if ((UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeHeroic) == true) && (lp_hittingPlayer == 15) && ((gv_questsPlayerProgress[lv_trigPlayer][55] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][58] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][116] == 2))) {
                        lv_index = 1;
                        for ( ; ( (auto9A93980A_ai >= 0 && lv_index <= auto9A93980A_ae) || (auto9A93980A_ai < 0 && lv_index >= auto9A93980A_ae) ) ; lv_index += auto9A93980A_ai ) {
                            if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                                if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 55) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 58) && (UnitTypeTestAttribute(UnitGetType(lp_hittingUnit), c_unitAttributeBiological) == true)))) {
                                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += FixedToInt(lp_damage);
                                    if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 55)) {
                                            gv_questsPlayerProgress[lv_trigPlayer][55] = 3;
                                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[55][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                            gv_playerHeroHeroGuild[lv_trigPlayer][2] = 1;
                                        }

                                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 58)) {
                                            gv_questsPlayerProgress[lv_trigPlayer][58] = 3;
                                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[58][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                            gv_playerHeroHeroGuild[lv_trigPlayer][2] = 2;
                                        }

                                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                        gf_GeneralQuestMessage(StringExternal("Param/Value/83C249E4"), PlayerGroupSingle(lv_trigPlayer));
                                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                                    }

                                }

                                if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116))) {
                                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] += FixedToInt(lp_damage);
                                    if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(2 + 1)])) {
                                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116)) {
                                            SoundPlayForPlayer(SoundLink("QuestFailed", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                                            gf_GeneralQuestMessage(StringExternal("Param/Value/BFB27BD1"), PlayerGroupSingle(lv_trigPlayer));
                                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] = 0;
                                        }
                                        else {
                                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                            gf_GeneralQuestMessage(StringExternal("Param/Value/156E097D"), PlayerGroupSingle(lv_trigPlayer));
                                        }
                                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                                    }

                                }

                            }

                        }
                    }

                }

            }
            else {
                if ((UnitGetType(lp_hitUnit) == "StrawDummy")) {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/BB69663E") + TextWithColor(FixedToText((FixedToInt(lp_damage) * 10), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
                else {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/4142EE86") + TextWithColor(FixedToText(lp_damage, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
                TextTagShow(TextTagLastCreated(), gv_playerTagGroup, false);
                lv_trigPlayer = lp_hittingPlayer;
                if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true)) {
                    if ((UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false) && (UnitGetOwner(lp_hitUnit) == 15) && ((gv_questsPlayerProgress[lv_trigPlayer][56] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][59] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][62] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][116] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][123] == 2))) {
                        lv_index = 1;
                        for ( ; ( (auto8652DDB3_ai >= 0 && lv_index <= auto8652DDB3_ae) || (auto8652DDB3_ai < 0 && lv_index >= auto8652DDB3_ae) ) ; lv_index += auto8652DDB3_ai ) {
                            if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 56) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 59) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeBiological) == true)) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 62) && (UnitGetCustomValue(lp_hitUnit, 0) > gv_playerHeroHeroLevelExp[lv_trigPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116) && ((UnitGetCustomValue(lp_hitUnit, 0) + 5.0) > gv_playerHeroHeroLevelExp[lv_trigPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 123) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeStructure) == true) && (UnitBehaviorCount(gv_playerHeroHero[lv_trigPlayer], "MentalCap") == 1) && (UnitBehaviorCount(lp_hitUnit, "LegendaryMod") == 1) && ((UnitGetCustomValue(lp_hitUnit, 0) + 0.0) >= 68.0)))) {
                                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += FixedToInt(lp_damage);
                                if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] != 123)) {
                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 56)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][56] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[56][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 1;
                                    }

                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 59)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][59] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[59][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 2;
                                    }

                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 62)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][62] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[62][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 3;
                                    }

                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][116] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[116][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 4;
                                    }

                                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                    gf_GeneralQuestMessage(StringExternal("Param/Value/A880CD75"), PlayerGroupSingle(lv_trigPlayer));
                                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                                }

                            }

                        }
                    }

                }

            }
            TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }

        if ((CatalogFieldValueGet(c_gameCatalogEffect, EventUnitDamageEffect(), "Kind", lp_hittingPlayer) == "Spell")) {
            if ((lp_hittingPlayer == 15)) {
                TextTagCreate(TextWithColor((StringExternal("Param/Value/7180F45A") + TextWithColor(FixedToText(lp_damage, 0), Color(75.29, 75.29, 75.29))), Color(75.29, 75.29, 75.29)), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
            }
            else {
                if ((UnitGetType(lp_hitUnit) == "StrawDummy")) {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/70A3F21F") + TextWithColor(FixedToText((FixedToInt(lp_damage) * 10), 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 24, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
                else {
                    TextTagCreate(TextWithColor((StringExternal("Param/Value/4DE31407") + TextWithColor(FixedToText(lp_damage, 0), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false))), 20, PointWithOffsetPolar(UnitGetPosition(lp_hitUnit), RandomFixed(0.1, 0.5), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.7), true, true, PlayerGroupAll());
                }
            }
            TextTagShow(TextTagLastCreated(), gv_playerTagGroup, false);
            TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.3);
            lv_trigPlayer = lp_hittingPlayer;
            if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true)) {
                if ((UnitGetOwner(lp_hitUnit) == 15) && ((gv_questsPlayerProgress[lv_trigPlayer][57] == 2) || ((gv_questsPlayerProgress[lv_trigPlayer][62] == 2) && (UnitGetCustomValue(lp_hitUnit, 0) > gv_playerHeroHeroLevelExp[lv_trigPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerProgress[lv_trigPlayer][116] == 2) && ((UnitGetCustomValue(lp_hitUnit, 0) + 5.0) > gv_playerHeroHeroLevelExp[lv_trigPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerProgress[lv_trigPlayer][117] == 2) && ((UnitGetCustomValue(lp_hitUnit, 0) + 5.0) > gv_playerHeroHeroLevelExp[lv_trigPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerProgress[lv_trigPlayer][123] == 2) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeSummoned) == false) && (UnitBehaviorCount(lp_hitUnit, "LegendaryMod") == 1) && (UnitBehaviorCount(gv_playerHeroHero[lv_trigPlayer], "MentalCap") == 1) && ((UnitGetCustomValue(lp_hitUnit, 0) + 0.0) >= 68.0)))) {
                    lv_index = 1;
                    for ( ; ( (auto5DBB8105_ai >= 0 && lv_index <= auto5DBB8105_ae) || (auto5DBB8105_ai < 0 && lv_index >= auto5DBB8105_ae) ) ; lv_index += auto5DBB8105_ai ) {
                        if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 57) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 62) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 123)) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117)) {
                                if ((TimerGetRemaining(gv_playerHeroHeroGuildTimer[lv_trigPlayer]) <= 0)) {
                                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                    TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 30.0, false, c_timeGame);
                                }

                            }

                            gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += FixedToInt(lp_damage);
                            if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] != 123)) {
                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 57)) {
                                    gv_questsPlayerProgress[lv_trigPlayer][57] = 3;
                                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[57][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 1;
                                }

                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 62)) {
                                    gv_questsPlayerProgress[lv_trigPlayer][62] = 3;
                                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[62][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 3;
                                }

                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116)) {
                                    gv_questsPlayerProgress[lv_trigPlayer][116] = 3;
                                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[116][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 4;
                                }

                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117)) {
                                    gv_questsPlayerProgress[lv_trigPlayer][117] = 3;
                                    TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[117][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 4;
                                }

                                SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                gf_GeneralQuestMessage(StringExternal("Param/Value/6EC9D464"), PlayerGroupSingle(lv_trigPlayer));
                                gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                            }

                        }

                    }
                }

            }

            lv_trigPlayer = UnitGetOwner(lp_hitUnit);
            if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true)) {
                if ((UnitGetOwner(lp_hittingUnit) == 15) && (UnitTypeTestAttribute(UnitGetType(lp_hitUnit), c_unitAttributeHeroic) == true) && ((gv_questsPlayerProgress[lv_trigPlayer][61] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][116] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][118] == 2))) {
                    lv_index = 1;
                    for ( ; ( (auto4D454DC2_ai >= 0 && lv_index <= auto4D454DC2_ae) || (auto4D454DC2_ai < 0 && lv_index >= auto4D454DC2_ae) ) ; lv_index += auto4D454DC2_ai ) {
                        if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                            if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 61) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 118))) {
                                if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 118)) {
                                    if ((TimerGetRemaining(gv_playerHeroHeroGuildTimer[lv_trigPlayer]) <= 0)) {
                                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                        TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 120.0, false, c_timeGame);
                                    }

                                }

                                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += FixedToInt(lp_damage);
                                if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 61)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][61] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[61][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 3;
                                    }

                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 118)) {
                                        gv_questsPlayerProgress[lv_trigPlayer][118] = 3;
                                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[118][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 5;
                                    }

                                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                    gf_GeneralQuestMessage(StringExternal("Param/Value/BEA6CC11"), PlayerGroupSingle(lv_trigPlayer));
                                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                                }

                            }

                            if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116))) {
                                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] += FixedToInt(lp_damage);
                                if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 116)) {
                                        SoundPlayForPlayer(SoundLink("QuestFailed", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 150.0, 0.0);
                                        gf_GeneralQuestMessage(StringExternal("Param/Value/13C2C547"), PlayerGroupSingle(lv_trigPlayer));
                                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] = 0;
                                    }
                                    else {
                                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                                        gf_GeneralQuestMessage(StringExternal("Param/Value/29013850"), PlayerGroupSingle(lv_trigPlayer));
                                    }
                                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                                }

                            }

                        }

                    }
                }

            }

        }

    }

    return true;
}

trigger auto_gf_GeneralUnitTakesHealing_Trigger = null;
unit auto_gf_GeneralUnitTakesHealing_lp_healer;
unit auto_gf_GeneralUnitTakesHealing_lp_healed;
fixed auto_gf_GeneralUnitTakesHealing_lp_healing;

void gf_GeneralUnitTakesHealing (unit lp_healer, unit lp_healed, fixed lp_healing) {
    auto_gf_GeneralUnitTakesHealing_lp_healer = lp_healer;
    auto_gf_GeneralUnitTakesHealing_lp_healed = lp_healed;
    auto_gf_GeneralUnitTakesHealing_lp_healing = lp_healing;

    if (auto_gf_GeneralUnitTakesHealing_Trigger == null) {
        auto_gf_GeneralUnitTakesHealing_Trigger = TriggerCreate("auto_gf_GeneralUnitTakesHealing_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralUnitTakesHealing_Trigger, false, false);
}

bool auto_gf_GeneralUnitTakesHealing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_healer = auto_gf_GeneralUnitTakesHealing_lp_healer;
    unit lp_healed = auto_gf_GeneralUnitTakesHealing_lp_healed;
    fixed lp_healing = auto_gf_GeneralUnitTakesHealing_lp_healing;

    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    int autoC848A3A0_ae;
    const int autoC848A3A0_ai = 1;
    const int auto2701B7E6_ae = gv_questsQuestSlots;
    const int auto2701B7E6_ai = 1;

    // Variable Initialization
    lv_trigPlayer = UnitGetOwner(lp_healer);

    // Implementation
    if ((lp_healing >= 1)) {
        TextTagCreate(TextWithColor((StringExternal("Param/Value/7908FDA3") + TextWithColor(FixedToText(lp_healing, 0), Color(0.00, 100.00, 0.00))), Color(0.00, 100.00, 0.00)), 20, PointWithOffsetPolar(UnitGetPosition(lp_healed), RandomFixed(0.0, 0.2), libNtve_gf_RandomAngle()), RandomFixed(0.3, 0.5), true, true, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), gv_playerTagGroup, false);
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true) && (PlayerGroupHasPlayer(gv_generalTeamsAll, UnitGetOwner(lp_healed)) == true)) {
            gv_playerStatisticsAchievements[lv_trigPlayer][14][2] += FixedToInt(lp_healing);
            if (((UnitGetPropertyFixed(lp_healed, c_unitPropLife, c_unitPropCurrent) - lp_healing) < (UnitGetPropertyFixed(lp_healed, c_unitPropLifeMax, c_unitPropCurrent) / 20.0)) && ((lp_healing - 0.0) > (UnitGetPropertyFixed(lp_healed, c_unitPropLifeMax, c_unitPropCurrent) / 20.0))) {
                gv_playerStatisticsAchievements[lv_trigPlayer][23][2] += 1;
            }

            autoC848A3A0_ae = gv_regionsDungeonsIndex;
            lv_index = 0;
            for ( ; ( (autoC848A3A0_ai >= 0 && lv_index <= autoC848A3A0_ae) || (autoC848A3A0_ai < 0 && lv_index >= autoC848A3A0_ae) ) ; lv_index += autoC848A3A0_ai ) {
                if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], gv_regionsDungeonsRegion[lv_index][1]) == true)) {
                    gv_dungeonsDungeonStatistics[lv_trigPlayer][6][lv_index] += FixedToInt(lp_healing);
                    gv_dungeonsDungeonStatistics[UnitGetOwner(lp_healed)][9][lv_index] += FixedToInt(lp_healing);
                }

            }
            if ((PlayerGroupHasPlayer(gv_dungeonsParty[20], lv_trigPlayer) == true) && (libNtve_gf_UnitInRegion(UnitGroupRandomUnit(UnitGroup(null, 15, RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 12.0), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive), RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 12.0)) == true)) {
                gv_dungeonsDungeonStatistics[lv_trigPlayer][6][20] += FixedToInt(lp_healing);
                gv_dungeonsDungeonStatistics[UnitGetOwner(lp_healed)][9][20] += FixedToInt(lp_healing);
            }

            if (((gv_questsPlayerProgress[lv_trigPlayer][117] == 2) || (gv_questsPlayerProgress[lv_trigPlayer][123] == 2))) {
                lv_index = 1;
                for ( ; ( (auto2701B7E6_ai >= 0 && lv_index <= auto2701B7E6_ae) || (auto2701B7E6_ai < 0 && lv_index >= auto2701B7E6_ae) ) ; lv_index += auto2701B7E6_ai ) {
                    if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117) || ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 123) && (UnitBehaviorCount(gv_playerHeroHero[lv_trigPlayer], "MentalCap") == 1)))) {
                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117)) {
                            if ((TimerGetRemaining(gv_playerHeroHeroGuildTimer[lv_trigPlayer]) <= 0)) {
                                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                                TimerStart(gv_playerHeroHeroGuildTimer[lv_trigPlayer], 30.0, false, c_timeGame);
                            }

                        }

                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += FixedToInt((lp_healing * 3.0));
                        if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] != 123)) {
                            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 117)) {
                                gv_questsPlayerProgress[lv_trigPlayer][117] = 3;
                                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[117][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                                gv_playerHeroHeroGuild[lv_trigPlayer][2] = 4;
                            }

                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/E998E2BD"), PlayerGroupSingle(lv_trigPlayer));
                            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                        }

                    }

                }
            }

        }

    }

    return true;
}

trigger auto_gf_GeneralAnnouncementMessage_Trigger = null;
text auto_gf_GeneralAnnouncementMessage_lp_text;
playergroup auto_gf_GeneralAnnouncementMessage_lp_playerGroup;

void gf_GeneralAnnouncementMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralAnnouncementMessage_lp_text = lp_text;
    auto_gf_GeneralAnnouncementMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralAnnouncementMessage_Trigger == null) {
        auto_gf_GeneralAnnouncementMessage_Trigger = TriggerCreate("auto_gf_GeneralAnnouncementMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralAnnouncementMessage_Trigger, false, false);
}

bool auto_gf_GeneralAnnouncementMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralAnnouncementMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralAnnouncementMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/2EB7DCD6") + lp_text));
    SoundPlay(SoundLink("UI_BnetToast", -1), lp_playerGroup, 250.0, 0.0);
    return true;
}

trigger auto_gf_GeneralQuestMessage_Trigger = null;
text auto_gf_GeneralQuestMessage_lp_text;
playergroup auto_gf_GeneralQuestMessage_lp_playerGroup;

void gf_GeneralQuestMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralQuestMessage_lp_text = lp_text;
    auto_gf_GeneralQuestMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralQuestMessage_Trigger == null) {
        auto_gf_GeneralQuestMessage_Trigger = TriggerCreate("auto_gf_GeneralQuestMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralQuestMessage_Trigger, false, false);
}

bool auto_gf_GeneralQuestMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralQuestMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralQuestMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaObjective, (StringExternal("Param/Value/639C38B6") + lp_text));
    SoundPlay(SoundLink("Event_BoxAlert", -1), lp_playerGroup, 250.0, 0.0);
    return true;
}

trigger auto_gf_GeneralErrorMessage_Trigger = null;
text auto_gf_GeneralErrorMessage_lp_text;
playergroup auto_gf_GeneralErrorMessage_lp_playerGroup;

void gf_GeneralErrorMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralErrorMessage_lp_text = lp_text;
    auto_gf_GeneralErrorMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralErrorMessage_Trigger == null) {
        auto_gf_GeneralErrorMessage_Trigger = TriggerCreate("auto_gf_GeneralErrorMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralErrorMessage_Trigger, false, false);
}

bool auto_gf_GeneralErrorMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralErrorMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralErrorMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/F4B74543") + lp_text));
    SoundPlay(SoundLink("UI_GenericError", -1), lp_playerGroup, 250.0, 0.0);
    return true;
}

trigger auto_gf_GeneralPartyMessage_Trigger = null;
text auto_gf_GeneralPartyMessage_lp_text;
playergroup auto_gf_GeneralPartyMessage_lp_playerGroup;

void gf_GeneralPartyMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralPartyMessage_lp_text = lp_text;
    auto_gf_GeneralPartyMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralPartyMessage_Trigger == null) {
        auto_gf_GeneralPartyMessage_Trigger = TriggerCreate("auto_gf_GeneralPartyMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralPartyMessage_Trigger, false, false);
}

bool auto_gf_GeneralPartyMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralPartyMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralPartyMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/83009115") + lp_text));
    SoundPlay(SoundLink("QuestUpdate", -1), lp_playerGroup, 150.0, 0.0);
    return true;
}

trigger auto_gf_GeneralRaidMessage_Trigger = null;
text auto_gf_GeneralRaidMessage_lp_text;
playergroup auto_gf_GeneralRaidMessage_lp_playerGroup;

void gf_GeneralRaidMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralRaidMessage_lp_text = lp_text;
    auto_gf_GeneralRaidMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralRaidMessage_Trigger == null) {
        auto_gf_GeneralRaidMessage_Trigger = TriggerCreate("auto_gf_GeneralRaidMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralRaidMessage_Trigger, false, false);
}

bool auto_gf_GeneralRaidMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralRaidMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralRaidMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaChat, (StringExternal("Param/Value/31486076") + lp_text));
    return true;
}

trigger auto_gf_GeneralBeastMasterMessage_Trigger = null;
text auto_gf_GeneralBeastMasterMessage_lp_text;
playergroup auto_gf_GeneralBeastMasterMessage_lp_playerGroup;

void gf_GeneralBeastMasterMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralBeastMasterMessage_lp_text = lp_text;
    auto_gf_GeneralBeastMasterMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralBeastMasterMessage_Trigger == null) {
        auto_gf_GeneralBeastMasterMessage_Trigger = TriggerCreate("auto_gf_GeneralBeastMasterMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralBeastMasterMessage_Trigger, false, false);
}

bool auto_gf_GeneralBeastMasterMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralBeastMasterMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralBeastMasterMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaChat, (StringExternal("Param/Value/217C5469") + lp_text));
    return true;
}

trigger auto_gf_GeneralItemsMessage_Trigger = null;
text auto_gf_GeneralItemsMessage_lp_text;
playergroup auto_gf_GeneralItemsMessage_lp_playerGroup;

void gf_GeneralItemsMessage (text lp_text, playergroup lp_playerGroup) {
    auto_gf_GeneralItemsMessage_lp_text = lp_text;
    auto_gf_GeneralItemsMessage_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralItemsMessage_Trigger == null) {
        auto_gf_GeneralItemsMessage_Trigger = TriggerCreate("auto_gf_GeneralItemsMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralItemsMessage_Trigger, false, false);
}

bool auto_gf_GeneralItemsMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GeneralItemsMessage_lp_text;
    playergroup lp_playerGroup = auto_gf_GeneralItemsMessage_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_playerGroup, c_messageAreaDebug, (StringExternal("Param/Value/8C9D867D") + lp_text));
    return true;
}

trigger auto_gf_GeneralEndingCinematic_Trigger = null;
playergroup auto_gf_GeneralEndingCinematic_lp_playerGroup;

void gf_GeneralEndingCinematic (playergroup lp_playerGroup) {
    auto_gf_GeneralEndingCinematic_lp_playerGroup = lp_playerGroup;

    if (auto_gf_GeneralEndingCinematic_Trigger == null) {
        auto_gf_GeneralEndingCinematic_Trigger = TriggerCreate("auto_gf_GeneralEndingCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneralEndingCinematic_Trigger, false, false);
}

bool auto_gf_GeneralEndingCinematic_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_gf_GeneralEndingCinematic_lp_playerGroup;

    // Variable Declarations
    int lv_index;
    int lv_index2;
    playergroup lv_tempGroup;
    bool[gv_generalPlayerCap + 1] lv_showDialog;
    sound lv_tempSound;
    unitgroup lv_tempUnitGroup;
    unit lv_chicken;
    region[11] lv_tempRegions;

    // Automatic Variable Declarations
    const int autoE71F6F0B_ae = 10;
    const int autoE71F6F0B_ai = 1;
    int auto029CC758_ae;
    const int auto029CC758_ai = 1;
    int autoB9DFB5B9_ae;
    const int autoB9DFB5B9_ai = 1;
    playergroup auto48617F87_g;
    int auto48617F87_var;
    playergroup autoF96CDC3A_g;
    int autoF96CDC3A_var;
    const int auto833E8C49_ae = 100;
    const int auto833E8C49_ai = 1;
    const int autoF09E1F7F_ae = 4;
    const int autoF09E1F7F_ai = 1;
    playergroup auto13E3BF3A_g;
    int auto13E3BF3A_var;
    const int autoC9BDA17B_ae = 5;
    const int autoC9BDA17B_ai = 1;
    playergroup auto48867111_g;
    int auto48867111_var;
    playergroup autoA410CA0B_g;
    int autoA410CA0B_var;
    playergroup auto964E7804_g;
    int auto964E7804_var;
    playergroup auto1DF1C5C4_g;
    int auto1DF1C5C4_var;
    playergroup auto977175BC_g;
    int auto977175BC_var;
    const int autoAB1C5F2F_ae = 4;
    const int autoAB1C5F2F_ai = 1;
    unitgroup auto7403B2BC_g;
    int auto7403B2BC_u;
    unit auto7403B2BC_var;
    playergroup autoF3D6DC45_g;
    int autoF3D6DC45_var;

    // Variable Initialization
    lv_tempGroup = lp_playerGroup;
    lv_tempUnitGroup = UnitGroupEmpty();

    // Implementation
    gv_generalEndingCinematic = true;
    lv_tempRegions[1] = RegionFromId(190);
    lv_tempRegions[2] = RegionFromId(191);
    lv_tempRegions[3] = RegionFromId(192);
    lv_tempRegions[4] = RegionFromId(193);
    lv_tempRegions[5] = RegionFromId(194);
    lv_tempRegions[6] = RegionFromId(195);
    lv_tempRegions[7] = RegionFromId(196);
    lv_tempRegions[8] = RegionFromId(197);
    lv_tempRegions[9] = RegionFromId(198);
    lv_tempRegions[10] = RegionFromId(199);
    DialogSetVisible(gv_dungeonEndDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_dungeonLeaveDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_itemSurvivalDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_mapDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_mainDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_partyDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_mainDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_questsLogDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_helpDialogDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_heroStatsDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_heroTreeDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_inventoryDialogEquippedBox, lv_tempGroup, false);
    DialogSetVisible(gv_inventoryDialogPackBox, lv_tempGroup, false);
    DialogSetVisible(gv_statisticsDialogBox, lv_tempGroup, false);
    DialogSetVisible(gv_eXPDialogDialogBox, lv_tempGroup, false);
    libNtve_gf_CinematicMode(true, lv_tempGroup, 1.0);
    lv_index = 1;
    for ( ; ( (autoE71F6F0B_ai >= 0 && lv_index <= autoE71F6F0B_ae) || (autoE71F6F0B_ai < 0 && lv_index >= autoE71F6F0B_ae) ) ; lv_index += autoE71F6F0B_ai ) {
        auto029CC758_ae = RandomInt(2, 3);
        lv_index2 = 1;
        for ( ; ( (auto029CC758_ai >= 0 && lv_index2 <= auto029CC758_ae) || (auto029CC758_ai < 0 && lv_index2 >= auto029CC758_ae) ) ; lv_index2 += auto029CC758_ai ) {
            UnitCreate(1, gv_heroesStatsUnitType[RandomInt(1, 3)][6][RandomInt(1, 4)], 0, 0, RegionRandomPoint(lv_tempRegions[lv_index]), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        }
        autoB9DFB5B9_ae = RandomInt(1, 2);
        lv_index2 = 1;
        for ( ; ( (autoB9DFB5B9_ai >= 0 && lv_index2 <= autoB9DFB5B9_ae) || (autoB9DFB5B9_ai < 0 && lv_index2 >= autoB9DFB5B9_ae) ) ; lv_index2 += autoB9DFB5B9_ai ) {
            UnitCreate(1, UnitGetType(UnitGroupRandomUnit(gv_questsUnitGroup, c_unitCountAlive)), 0, 0, RegionRandomPoint(lv_tempRegions[lv_index]), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
            UnitBehaviorRemove(UnitLastCreated(), "Protect", 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, RegionRandomPoint(lv_tempRegions[lv_index]));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, RegionRandomPoint(gv_regionsVendors[lv_index]));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
    }
    auto48617F87_g = lv_tempGroup;
    auto48617F87_var = -1;
    while (true) {
        auto48617F87_var = PlayerGroupNextPlayer(auto48617F87_g, auto48617F87_var);
        if (auto48617F87_var < 0) { break; }
        VisRevealArea(auto48617F87_var, RegionFromId(5), 25.0, false);
        CameraShakeStart(auto48617F87_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 4.0);
        UnitBehaviorAdd(gv_playerHeroHero[auto48617F87_var], "Talking", gv_playerHeroHero[auto48617F87_var], 1);
        UnitClearSelection(auto48617F87_var);
        UnitSelect(gv_playerHeroHero[auto48617F87_var], auto48617F87_var, true);
    }
    Wait(1.5, c_timeGame);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 0.0, 100.0);
    DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, true);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 0.0);
    Wait(1.0, c_timeGame);
    autoF96CDC3A_g = lv_tempGroup;
    autoF96CDC3A_var = -1;
    while (true) {
        autoF96CDC3A_var = PlayerGroupNextPlayer(autoF96CDC3A_g, autoF96CDC3A_var);
        if (autoF96CDC3A_var < 0) { break; }
        CameraPan(autoF96CDC3A_var, RegionGetCenter(RegionFromId(185)), 0.0, -1, 10.0, false);
        libNtve_gf_SwooshCamera(autoF96CDC3A_var, 14.0, 16.0, RegionGetCenter(RegionFromId(185)), 0.0);
    }
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 100.0);
    SoundPlayForPlayer(SoundLink("Emitter_CrowdCheering", -1), c_maxPlayers, lv_tempGroup, 300.0, 0.0);
    lv_index = 1;
    for ( ; ( (auto833E8C49_ai >= 0 && lv_index <= auto833E8C49_ae) || (auto833E8C49_ai < 0 && lv_index >= auto833E8C49_ae) ) ; lv_index += auto833E8C49_ai ) {
        if ((gv_itemDropsTimer[lv_index] > 20)) {
            gv_itemDropsTimer[lv_index] += 25;
        }

    }
    lv_index = 1;
    for ( ; ( (autoF09E1F7F_ai >= 0 && lv_index <= autoF09E1F7F_ae) || (autoF09E1F7F_ai < 0 && lv_index >= autoF09E1F7F_ae) ) ; lv_index += autoF09E1F7F_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.1, c_timeGame);
    }
    Wait(0.1, c_timeGame);
    DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, false);
    Wait(1.0, c_timeGame);
    lv_tempSound = SoundLastPlayed();
    auto13E3BF3A_g = lv_tempGroup;
    auto13E3BF3A_var = -1;
    while (true) {
        auto13E3BF3A_var = PlayerGroupNextPlayer(auto13E3BF3A_g, auto13E3BF3A_var);
        if (auto13E3BF3A_var < 0) { break; }
        CameraPan(auto13E3BF3A_var, RegionGetCenter(RegionFromId(186)), 4.5, -1, 10.0, false);
    }
    lv_index = 1;
    for ( ; ( (autoC9BDA17B_ai >= 0 && lv_index <= autoC9BDA17B_ae) || (autoC9BDA17B_ai < 0 && lv_index >= autoC9BDA17B_ae) ) ; lv_index += autoC9BDA17B_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, RegionRandomPoint(RegionFromId(5)));
        UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "EndGameBalloons2", 0, 1);
        Wait(0.2, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    auto48867111_g = lv_tempGroup;
    auto48867111_var = -1;
    while (true) {
        auto48867111_var = PlayerGroupNextPlayer(auto48867111_g, auto48867111_var);
        if (auto48867111_var < 0) { break; }
        VisRevealArea(auto48867111_var, RegionFromId(2), 35.0, false);
        CameraPan(auto48867111_var, RegionGetCenter(RegionFromId(187)), 4.5, -1, 10.0, false);
    }
    Wait(4.0, c_timeGame);
    autoA410CA0B_g = lv_tempGroup;
    autoA410CA0B_var = -1;
    while (true) {
        autoA410CA0B_var = PlayerGroupNextPlayer(autoA410CA0B_g, autoA410CA0B_var);
        if (autoA410CA0B_var < 0) { break; }
        CameraPan(autoA410CA0B_var, RegionGetCenter(RegionFromId(188)), 4.5, -1, 10.0, false);
    }
    Wait(5.0, c_timeGame);
    auto964E7804_g = lv_tempGroup;
    auto964E7804_var = -1;
    while (true) {
        auto964E7804_var = PlayerGroupNextPlayer(auto964E7804_g, auto964E7804_var);
        if (auto964E7804_var < 0) { break; }
        CameraPan(auto964E7804_var, RegionGetCenter(RegionFromId(189)), 4.0, -1, 10.0, false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Chicken", 0, 15, UnitGetPosition(UnitFromId(790609453)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 200000.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "CreepCountReduction", UnitLastCreated(), 10);
    UnitBehaviorAdd(UnitLastCreated(), "DamageReduction2", UnitLastCreated(), 1);
    UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
    lv_chicken = UnitLastCreated();
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    auto1DF1C5C4_g = lv_tempGroup;
    auto1DF1C5C4_var = -1;
    while (true) {
        auto1DF1C5C4_var = PlayerGroupNextPlayer(auto1DF1C5C4_g, auto1DF1C5C4_var);
        if (auto1DF1C5C4_var < 0) { break; }
        CameraPan(auto1DF1C5C4_var, UnitGetPosition(UnitFromId(790609453)), 2.8, -1, 10.0, false);
    }
    Wait(3.0, c_timeGame);
    auto977175BC_g = lv_tempGroup;
    auto977175BC_var = -1;
    while (true) {
        auto977175BC_var = PlayerGroupNextPlayer(auto977175BC_g, auto977175BC_var);
        if (auto977175BC_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto977175BC_var, 14.0, 6.0, UnitGetPosition(UnitFromId(790609453)), 2.0);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(790609453), OrderTargetingUnit(AbilityCommand("Knockback", 0), lv_chicken), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("VillagerKidWhat", -1), c_maxPlayers, lv_tempGroup, 300.0, 0.0);
    lv_index = 1;
    for ( ; ( (autoAB1C5F2F_ai >= 0 && lv_index <= autoAB1C5F2F_ae) || (autoAB1C5F2F_ai < 0 && lv_index >= autoAB1C5F2F_ae) ) ; lv_index += autoAB1C5F2F_ai ) {
        Wait(0.5, c_timeGame);
        UnitIssueOrder(lv_chicken, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(790609453)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(790609453), OrderTargetingUnit(AbilityCommand("Knockback", 0), lv_chicken), c_orderQueueReplace);
    }
    SoundStop(lv_tempSound, true);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(790609453), Order(AbilityCommand("BloodLust", 0)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(UnitFromId(790609453), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TimmyDoom", 0, 0, UnitGetPosition(UnitFromId(790609453)));
    UnitGroupAdd(lv_tempUnitGroup, UnitLastCreated());
    lv_chicken = UnitLastCreated();
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("HeroDemonHunterMorphedReady", -1), c_maxPlayers, lv_tempGroup, 300.0, 0.0);
    Wait(4.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SargerasLaugh", -1), c_maxPlayers, lv_tempGroup, 150.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][1], StringToText(""), lv_tempGroup);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], lv_tempGroup, 0.0, 0.0);
    libNtve_gf_SetDialogItemTextWriteout(gv_screenEffectsDialogItem[1][1], true, lv_tempGroup);
    libNtve_gf_SetDialogItemTextWriteoutDuration(gv_screenEffectsDialogItem[1][1], 2.0, lv_tempGroup);
    libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][1], StringExternal("Param/Value/8E604134"), lv_tempGroup);
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], lv_tempGroup, 3.0, 100.0);
    libNtve_gf_ShowHideUnit(UnitFromId(790609453), true);
    UnitRemove(lv_chicken);
    Wait(4.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][1], StringToText(""), lv_tempGroup);
    auto7403B2BC_g = lv_tempUnitGroup;
    auto7403B2BC_u = UnitGroupCount(auto7403B2BC_g, c_unitCountAll);
    for (;; auto7403B2BC_u -= 1) {
        auto7403B2BC_var = UnitGroupUnitFromEnd(auto7403B2BC_g, auto7403B2BC_u);
        if (auto7403B2BC_var == null) { break; }
        UnitRemove(auto7403B2BC_var);
    }
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 0.0, 100.0);
    DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, true);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.5, 0.0);
    Wait(2.0, c_timeGame);
    autoF3D6DC45_g = lv_tempGroup;
    autoF3D6DC45_var = -1;
    while (true) {
        autoF3D6DC45_var = PlayerGroupNextPlayer(autoF3D6DC45_g, autoF3D6DC45_var);
        if (autoF3D6DC45_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoF3D6DC45_var, 5.0, 14.0, UnitGetPosition(UnitFromId(790609453)), 0.0);
        CameraPan(autoF3D6DC45_var, UnitGetPosition(gv_playerHeroHero[autoF3D6DC45_var]), 0.0, -1, 10.0, false);
        UnitBehaviorRemove(gv_playerHeroHero[autoF3D6DC45_var], "Talking", 1);
        UnitClearSelection(autoF3D6DC45_var);
        UnitSelect(gv_playerHeroHero[autoF3D6DC45_var], autoF3D6DC45_var, true);
    }
    Wait(2.0, c_timeGame);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][0], lv_tempGroup, 1.0, 100.0);
    libNtve_gf_CinematicMode(false, lv_tempGroup, 1.0);
    Wait(1.0, c_timeGame);
    DialogControlSetVisible(gv_screenEffectsDialogItem[0][0], lv_tempGroup, false);
    DialogSetVisible(gv_inventoryDialogPackBox, lv_tempGroup, true);
    DialogSetVisible(gv_inventoryDialogEquippedBox, lv_tempGroup, true);
    DialogSetVisible(gv_dungeonEndDialogBox, lv_tempGroup, true);
    DialogSetVisible(gv_itemSurvivalDialogBox, lv_tempGroup, true);
    DialogSetVisible(gv_eXPDialogDialogBox, lv_tempGroup, true);
    DialogSetVisible(gv_mainDialogBox, lv_tempGroup, true);
    gv_generalEndingCinematic = false;
    return true;
}

void gf_DialogUsedArena (int lp_trigPlayer, int lp_dialogItemUsed) {
    // Variable Declarations
    int lv_dialogItemUsed;
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    bool lv_continue;

    // Automatic Variable Declarations
    int auto84E0CB26_val;
    const int autoCC1B90D3_ae = 2;
    const int autoCC1B90D3_ai = 1;
    playergroup auto8075B437_g;
    int auto8075B437_var;
    const int autoF7B93F38_ae = gv_generalPlayerCap;
    const int autoF7B93F38_ai = 1;
    const int auto77AFBD9A_ae = 3;
    const int auto77AFBD9A_ai = 1;
    playergroup autoB7F3B400_g;
    int autoB7F3B400_var;
    const int auto6AE0D985_ae = 3;
    const int auto6AE0D985_ai = 1;
    const int auto165C1555_ae = gv_generalPlayerCap;
    const int auto165C1555_ai = 1;
    playergroup auto67A793EE_g;
    int auto67A793EE_var;
    const int auto0E1AD186_ae = gv_generalPlayerCap;
    const int auto0E1AD186_ai = 1;

    // Variable Initialization
    lv_dialogItemUsed = c_invalidDialogControlId;
    lv_continue = true;

    // Implementation
    lv_dialogItemUsed = lp_dialogItemUsed;
    lv_trigPlayer = lp_trigPlayer;
    auto84E0CB26_val = lv_dialogItemUsed;
    if (auto84E0CB26_val == gv_arenaDialogMainItems[1][1]) {
        gv_helpPlayerSelected[lv_trigPlayer] = 19;
        gf_DialogUsedHelp(lv_trigPlayer, gv_helpDialogDialogItems[gv_helpPlayerSelected[lv_trigPlayer]][1]);
    }
    else if (auto84E0CB26_val == gv_arenaDialogMainItems[2][1]) {
        if ((PlayerGroupHasPlayer(gv_arenaTeams[3], lv_trigPlayer) == true) && (gv_arenaActiveStatus == 2)) {
            lv_index = 1;
            for ( ; ( (autoCC1B90D3_ai >= 0 && lv_index <= autoCC1B90D3_ae) || (autoCC1B90D3_ai < 0 && lv_index >= autoCC1B90D3_ae) ) ; lv_index += autoCC1B90D3_ai ) {
                if ((PlayerGroupHasPlayer(gv_arenaTeams[lv_index], lv_trigPlayer) == true)) {
                    gv_arenaConfirm[lv_index] = true;
                }

            }
            if ((gv_arenaConfirm[1] == true) && (gv_arenaConfirm[2] == true)) {
                gv_arenaActiveStatus = 3;
                gf_ArenaFight();
            }

        }

    }
    else if (auto84E0CB26_val == gv_arenaDialogMainItems[3][1]) {
        if ((PlayerGroupHasPlayer(gv_arenaTeams[3], lv_trigPlayer) == true)) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/1F174CC9"), gv_arenaTeams[3]);
            if ((gv_arenaActiveStatus == 2)) {
                auto8075B437_g = gv_arenaTeams[3];
                auto8075B437_var = -1;
                while (true) {
                    auto8075B437_var = PlayerGroupNextPlayer(auto8075B437_g, auto8075B437_var);
                    if (auto8075B437_var < 0) { break; }
                    DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(auto8075B437_var), false);
                    UnitBehaviorRemove(gv_playerHeroHero[auto8075B437_var], "Talking", 1);
                    UnitClearSelection(auto8075B437_var);
                    UnitSelect(gv_playerHeroHero[auto8075B437_var], auto8075B437_var, true);
                }
            }

            lv_index2 = 1;
            for ( ; ( (autoF7B93F38_ai >= 0 && lv_index2 <= autoF7B93F38_ae) || (autoF7B93F38_ai < 0 && lv_index2 >= autoF7B93F38_ae) ) ; lv_index2 += autoF7B93F38_ai ) {
                DialogControlSetVisible(gv_arenaDialogPartyItems[lv_index2][3], PlayerGroupAll(), false);
            }
            lv_index = 1;
            for ( ; ( (auto77AFBD9A_ai >= 0 && lv_index <= auto77AFBD9A_ae) || (auto77AFBD9A_ai < 0 && lv_index >= auto77AFBD9A_ae) ) ; lv_index += auto77AFBD9A_ai ) {
                PlayerGroupClear(gv_arenaTeams[lv_index]);
            }
            gv_arenaHost = 0;
            gv_arenaActiveStatus = 0;
            gv_arenaConfirm[1] = false;
            gv_arenaConfirm[2] = false;
        }

        DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(lv_trigPlayer), false);
        UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Talking", 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else if (auto84E0CB26_val == gv_arenaDialogMainItems[4][1]) {
        if ((gv_arenaHost == lv_trigPlayer) && (gv_arenaActiveStatus == 1) && (PlayerGroupCount(gv_arenaTeams[1]) == 1) && (PlayerGroupCount(gv_arenaTeams[2]) == 1)) {
            autoB7F3B400_g = gv_arenaTeams[3];
            autoB7F3B400_var = -1;
            while (true) {
                autoB7F3B400_var = PlayerGroupNextPlayer(autoB7F3B400_g, autoB7F3B400_var);
                if (autoB7F3B400_var < 0) { break; }
                if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[autoB7F3B400_var], RegionFromId(78)) != true)) {
                    lv_continue = false;
                    gf_GeneralErrorMessage(StringExternal("Param/Value/0F09D7D3"), PlayerGroupSingle(lv_trigPlayer));
                    return ;
                }

            }
            if ((lv_continue == true)) {
                gv_arenaActiveStatus = 2;
                lv_index = 1;
                for ( ; ( (auto6AE0D985_ai >= 0 && lv_index <= auto6AE0D985_ae) || (auto6AE0D985_ai < 0 && lv_index >= auto6AE0D985_ae) ) ; lv_index += auto6AE0D985_ai ) {
                    DialogControlSetEnabled(gv_arenaDialogMainItems[4][lv_index], PlayerGroupAll(), false);
                    DialogControlSetEnabled(gv_arenaDialogMainItems[2][lv_index], PlayerGroupAll(), true);
                }
                lv_index2 = 1;
                for ( ; ( (auto165C1555_ai >= 0 && lv_index2 <= auto165C1555_ae) || (auto165C1555_ai < 0 && lv_index2 >= auto165C1555_ae) ) ; lv_index2 += auto165C1555_ai ) {
                    DialogControlSetEnabled(gv_arenaDialogPartyItems[lv_index2][1], PlayerGroupAll(), false);
                }
                auto67A793EE_g = gv_arenaTeams[3];
                auto67A793EE_var = -1;
                while (true) {
                    auto67A793EE_var = PlayerGroupNextPlayer(auto67A793EE_g, auto67A793EE_var);
                    if (auto67A793EE_var < 0) { break; }
                    if ((auto67A793EE_var != lv_trigPlayer)) {
                        DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(auto67A793EE_var), true);
                        UnitBehaviorAdd(gv_playerHeroHero[auto67A793EE_var], "Talking", gv_playerHeroHero[auto67A793EE_var], 1);
                        UnitClearSelection(auto67A793EE_var);
                        UnitSelect(gv_playerHeroHero[auto67A793EE_var], auto67A793EE_var, true);
                    }

                }
            }

        }

    }
    else {
    }
    lv_index2 = 1;
    for ( ; ( (auto0E1AD186_ai >= 0 && lv_index2 <= auto0E1AD186_ae) || (auto0E1AD186_ai < 0 && lv_index2 >= auto0E1AD186_ae) ) ; lv_index2 += auto0E1AD186_ai ) {
        DialogControlSetVisible(gv_arenaDialogPartyItems[lv_index2][3], PlayerGroupAll(), false);
        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index2) == true) && (lv_dialogItemUsed == gv_arenaDialogPartyItems[lv_index2][1]) && (lv_dialogItemUsed != gv_arenaDialogPartyItems[lv_trigPlayer][1]) && (gv_arenaHost == lv_trigPlayer) && (gv_arenaActiveStatus == 1)) {
            PlayerGroupClear(gv_arenaTeams[2]);
            PlayerGroupClear(gv_arenaTeams[3]);
            DialogControlSetVisible(gv_arenaDialogPartyItems[lv_index2][3], PlayerGroupAll(), true);
            PlayerGroupAdd(gv_arenaTeams[2], lv_index2);
            PlayerGroupAdd(gv_arenaTeams[3], lv_index2);
            PlayerGroupAdd(gv_arenaTeams[3], lv_trigPlayer);
        }

    }
    DialogControlSetVisible(gv_arenaDialogPartyItems[lv_trigPlayer][3], PlayerGroupAll(), true);
}

trigger auto_gf_ArenaFight_Trigger = null;

void gf_ArenaFight () {
    if (auto_gf_ArenaFight_Trigger == null) {
        auto_gf_ArenaFight_Trigger = TriggerCreate("auto_gf_ArenaFight_TriggerFunc");
    }

    TriggerExecute(auto_gf_ArenaFight_Trigger, false, false);
}

bool auto_gf_ArenaFight_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timer;
    int lv_winner;
    int lv_loser;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto3D32B503_g;
    int auto3D32B503_var;
    playergroup auto7C7D1BA3_g;
    int auto7C7D1BA3_var;
    playergroup auto108EEB44_g;
    int auto108EEB44_var;
    unitgroup auto74E3891B_g;
    int auto74E3891B_u;
    unit auto74E3891B_var;
    playergroup autoA2A6592A_g;
    int autoA2A6592A_var;
    playergroup auto554FB0DE_g;
    int auto554FB0DE_var;
    playergroup auto96DE70BD_g;
    int auto96DE70BD_var;
    const int autoC7A34501_ae = gv_generalPlayerCap;
    const int autoC7A34501_ai = 1;
    const int autoE38BA018_ae = 3;
    const int autoE38BA018_ai = 1;

    // Variable Initialization
    lv_timer = 300;

    // Implementation
    auto3D32B503_g = gv_arenaTeams[1];
    auto3D32B503_var = -1;
    while (true) {
        auto3D32B503_var = PlayerGroupNextPlayer(auto3D32B503_g, auto3D32B503_var);
        if (auto3D32B503_var < 0) { break; }
        UnitSetPosition(gv_playerHeroHero[auto3D32B503_var], RegionRandomPoint(RegionFromId(102)), false);
        DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(auto3D32B503_var), false);
        DialogSetVisible(gv_mainDialogBox, PlayerGroupSingle(auto3D32B503_var), false);
        DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(auto3D32B503_var), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(auto3D32B503_var), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(auto3D32B503_var), false);
    }
    auto7C7D1BA3_g = gv_arenaTeams[2];
    auto7C7D1BA3_var = -1;
    while (true) {
        auto7C7D1BA3_var = PlayerGroupNextPlayer(auto7C7D1BA3_g, auto7C7D1BA3_var);
        if (auto7C7D1BA3_var < 0) { break; }
        UnitSetPosition(gv_playerHeroHero[auto7C7D1BA3_var], RegionRandomPoint(RegionFromId(103)), false);
        DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(auto7C7D1BA3_var), false);
        DialogSetVisible(gv_mainDialogBox, PlayerGroupSingle(auto7C7D1BA3_var), false);
        DialogSetVisible(gv_mapDialogBox, PlayerGroupSingle(auto7C7D1BA3_var), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(auto7C7D1BA3_var), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(auto7C7D1BA3_var), false);
    }
    Wait(2.0, c_timeGame);
    UIDisplayMessage(gv_arenaTeams[3], c_messageAreaDirective, StringExternal("Param/Value/01ACD88D"));
    Wait(4.0, c_timeGame);
    UIDisplayMessage(gv_arenaTeams[3], c_messageAreaDirective, StringExternal("Param/Value/9B22F6A9"));
    Wait(4.0, c_timeGame);
    UIDisplayMessage(gv_arenaTeams[3], c_messageAreaDirective, StringExternal("Param/Value/91A6AF2D"));
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_arenaTeams[1], gv_arenaTeams[2], libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_arenaTeams[2], gv_arenaTeams[1], libNtve_ge_AllianceSetting_Enemy);
    Wait(2.0, c_timeGame);
    UIDisplayMessage(gv_arenaTeams[3], c_messageAreaDirective, StringToText(""));
    UIClearMessages(gv_arenaTeams[3], c_messageAreaDirective);
    auto108EEB44_g = gv_arenaTeams[3];
    auto108EEB44_var = -1;
    while (true) {
        auto108EEB44_var = PlayerGroupNextPlayer(auto108EEB44_g, auto108EEB44_var);
        if (auto108EEB44_var < 0) { break; }
        UnitAbilityEnable(gv_playerHeroHero[auto108EEB44_var], "Wait", false);
        UnitAbilityEnable(gv_playerHeroHero[auto108EEB44_var], "Potion", false);
        UnitBehaviorRemove(gv_playerHeroHero[auto108EEB44_var], "Talking", 1);
        UnitClearSelection(auto108EEB44_var);
        UnitSelect(gv_playerHeroHero[auto108EEB44_var], auto108EEB44_var, true);
        CameraPan(auto108EEB44_var, UnitGetPosition(gv_playerHeroHero[auto108EEB44_var]), 0.5, -1, 10.0, false);
    }
    while (true) {
        if ((UnitCount(null, c_playerAny, RegionFromId(104), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
            auto74E3891B_g = UnitGroup(null, c_playerAny, RegionFromId(104), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto74E3891B_u = UnitGroupCount(auto74E3891B_g, c_unitCountAll);
            for (;; auto74E3891B_u -= 1) {
                auto74E3891B_var = UnitGroupUnitFromEnd(auto74E3891B_g, auto74E3891B_u);
                if (auto74E3891B_var == null) { break; }
                if ((PlayerGroupHasPlayer(gv_arenaTeams[1], UnitGetOwner(auto74E3891B_var)) == true)) {
                    lv_winner = 1;
                    lv_loser = 2;
                    libNtve_gf_SetPlayerGroupAlliance(gv_arenaTeams[3], libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    lv_winner = 2;
                    lv_loser = 1;
                    libNtve_gf_SetPlayerGroupAlliance(gv_arenaTeams[3], libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
            break;
        }
        else {
            Wait(2.0, c_timeGame);
            lv_timer -= 2;
            if ((lv_timer <= 0)) {
                lv_loser = 3;
                break;
            }

        }
    }
    DialogSetVisible(gv_mainDialogBox, gv_arenaTeams[3], true);
    Wait(2.0, c_timeGame);
    autoA2A6592A_g = gv_arenaTeams[lv_winner];
    autoA2A6592A_var = -1;
    while (true) {
        autoA2A6592A_var = PlayerGroupNextPlayer(autoA2A6592A_g, autoA2A6592A_var);
        if (autoA2A6592A_var < 0) { break; }
        gv_playerStatisticsAchievements[autoA2A6592A_var][28][2] += 1;
    }
    auto554FB0DE_g = gv_arenaTeams[lv_loser];
    auto554FB0DE_var = -1;
    while (true) {
        auto554FB0DE_var = PlayerGroupNextPlayer(auto554FB0DE_g, auto554FB0DE_var);
        if (auto554FB0DE_var < 0) { break; }
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_arenaTeams[3], libNtve_ge_AllianceSetting_AllyWithSharedVision);
    UIDisplayMessage(gv_arenaTeams[lv_winner], c_messageAreaDirective, StringExternal("Param/Value/26FF234B"));
    UIDisplayMessage(gv_arenaTeams[lv_loser], c_messageAreaDirective, StringExternal("Param/Value/713815AF"));
    Wait(0.5, c_timeGame);
    auto96DE70BD_g = gv_arenaTeams[3];
    auto96DE70BD_var = -1;
    while (true) {
        auto96DE70BD_var = PlayerGroupNextPlayer(auto96DE70BD_g, auto96DE70BD_var);
        if (auto96DE70BD_var < 0) { break; }
        UnitSetPosition(gv_playerHeroHero[auto96DE70BD_var], RegionRandomPoint(RegionFromId(30)), false);
        UnitAbilityEnable(gv_playerHeroHero[auto96DE70BD_var], "Wait", true);
        UnitAbilityEnable(gv_playerHeroHero[auto96DE70BD_var], "Potion", true);
        UnitClearSelection(auto96DE70BD_var);
        UnitSelect(gv_playerHeroHero[auto96DE70BD_var], auto96DE70BD_var, true);
        CameraPan(auto96DE70BD_var, UnitGetPosition(gv_playerHeroHero[auto96DE70BD_var]), 0.5, -1, 10.0, false);
    }
    lv_index = 1;
    for ( ; ( (autoC7A34501_ai >= 0 && lv_index <= autoC7A34501_ae) || (autoC7A34501_ai < 0 && lv_index >= autoC7A34501_ae) ) ; lv_index += autoC7A34501_ai ) {
        DialogControlSetVisible(gv_arenaDialogPartyItems[lv_index][3], PlayerGroupAll(), false);
    }
    lv_index = 1;
    for ( ; ( (autoE38BA018_ai >= 0 && lv_index <= autoE38BA018_ae) || (autoE38BA018_ai < 0 && lv_index >= autoE38BA018_ae) ) ; lv_index += autoE38BA018_ai ) {
        PlayerGroupClear(gv_arenaTeams[lv_index]);
    }
    gv_arenaHost = 0;
    gv_arenaActiveStatus = 0;
    gv_arenaConfirm[1] = false;
    gv_arenaConfirm[2] = false;
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringToText(""));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init - All
//--------------------------------------------------------------------------------------------------
bool gt_InitAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;
    bool lv_passFail;
    int lv_tempInt;

    // Automatic Variable Declarations
    int autoF6B6BB92_ae;
    const int autoF6B6BB92_ai = 1;
    unitgroup autoEE45C28A_g;
    int autoEE45C28A_u;
    unit autoEE45C28A_var;
    int auto0DCE173F_ae;
    const int auto0DCE173F_ai = 1;
    unitgroup autoAE9A8994_g;
    int autoAE9A8994_u;
    unit autoAE9A8994_var;
    unitgroup auto337FCD04_g;
    int auto337FCD04_u;
    unit auto337FCD04_var;
    unitgroup auto12E46763_g;
    int auto12E46763_u;
    unit auto12E46763_var;
    const int auto9EEC155C_ae = 10;
    const int auto9EEC155C_ai = 1;
    const int auto2C94F368_ae = 150;
    const int auto2C94F368_ai = 1;
    int autoB2E7C997_ae;
    const int autoB2E7C997_ai = 1;
    int auto1C42E22C_ae;
    const int auto1C42E22C_ai = 1;
    const int auto04741907_ae = 40;
    const int auto04741907_ai = 1;
    const int auto02BDE826_ae = 100;
    const int auto02BDE826_ai = 1;
    int auto552A529B_ae;
    const int auto552A529B_ai = 1;
    int autoBEED4611_ae;
    const int autoBEED4611_ai = 1;
    string autoEFA596F7_val;
    const int autoA030D27E_ae = 12;
    const int autoA030D27E_ai = 1;
    const int auto7F9FB0B5_ae = 1;
    const int auto7F9FB0B5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_InitVariablesHeroesStatsAchievements();
    gf_InitVariablesItemStats();
    gf_InitVariablesQuestsCreateGuilds();
    gf_InitVariablesRegionHelpTutorial();
    gf_InitVariablesInvasionBeastmasterRaidsLegendaryHats();
    gf_DialogCreateEXPGoldUI();
    gf_DialogCreateHeroSelectionStatsStatisticsNewsAchievements();
    gf_DialogCreateTeleDungeonMapTutorialArenaLegendary();
    gf_DialogCreateItemsInventoriesPotions();
    gf_DialogCreateConvoQuestsLogGuild();
    gf_DialogCreatePartyHelp();
    gf_DialogCreateInvasionBeastmasterHats();
    UnitEventSetNullVariableInvalid(true);
    GameCheatAllow(c_gameCheatAny, false);
    GameSetPauseable(false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(5), "OZspShimmeringPortal");
    autoF6B6BB92_ae = gv_regionsIndex;
    lv_index = 2;
    for ( ; ( (autoF6B6BB92_ai >= 0 && lv_index <= autoF6B6BB92_ae) || (autoF6B6BB92_ai < 0 && lv_index >= autoF6B6BB92_ae) ) ; lv_index += autoF6B6BB92_ai ) {
        lv_index2 = 0;
        autoEE45C28A_g = UnitGroup(null, 15, gv_regionsRegion[lv_index], UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEE45C28A_u = UnitGroupCount(autoEE45C28A_g, c_unitCountAll);
        for (;; autoEE45C28A_u -= 1) {
            autoEE45C28A_var = UnitGroupUnitFromEnd(autoEE45C28A_g, autoEE45C28A_u);
            if (autoEE45C28A_var == null) { break; }
            lv_index2 += 1;
            gv_regionsRespawnType[lv_index][lv_index2] = UnitGetType(autoEE45C28A_var);
            gv_regionsRespawnXY[lv_index][lv_index2][0] = lv_index;
            gv_regionsRespawnXY[lv_index][lv_index2][1] = PointGetX(UnitGetPosition(autoEE45C28A_var));
            gv_regionsRespawnXY[lv_index][lv_index2][2] = PointGetY(UnitGetPosition(autoEE45C28A_var));
            UnitRemove(autoEE45C28A_var);
        }
    }
    auto0DCE173F_ae = gv_regionsDungeonsIndex;
    lv_index = 1;
    for ( ; ( (auto0DCE173F_ai >= 0 && lv_index <= auto0DCE173F_ae) || (auto0DCE173F_ai < 0 && lv_index >= auto0DCE173F_ae) ) ; lv_index += auto0DCE173F_ai ) {
        lv_index2 = 0;
        autoAE9A8994_g = UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_index][1], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAE9A8994_u = UnitGroupCount(autoAE9A8994_g, c_unitCountAll);
        for (;; autoAE9A8994_u -= 1) {
            autoAE9A8994_var = UnitGroupUnitFromEnd(autoAE9A8994_g, autoAE9A8994_u);
            if (autoAE9A8994_var == null) { break; }
            lv_index2 += 1;
            gv_regionsDungeonsRespawnType[lv_index][lv_index2] = UnitGetType(autoAE9A8994_var);
            gv_regionsDungeonsRespawnXY[lv_index][lv_index2][0] = lv_index;
            gv_regionsDungeonsRespawnXY[lv_index][lv_index2][1] = PointGetX(UnitGetPosition(autoAE9A8994_var));
            gv_regionsDungeonsRespawnXY[lv_index][lv_index2][2] = PointGetY(UnitGetPosition(autoAE9A8994_var));
            UnitRemove(autoAE9A8994_var);
        }
    }
    auto337FCD04_g = UnitGroup(null, 0, RegionFromId(5), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto337FCD04_u = UnitGroupCount(auto337FCD04_g, c_unitCountAll);
    for (;; auto337FCD04_u -= 1) {
        auto337FCD04_var = UnitGroupUnitFromEnd(auto337FCD04_g, auto337FCD04_u);
        if (auto337FCD04_var == null) { break; }
        UnitBehaviorAddPlayer(auto337FCD04_var, "Invulnerable2", 0, 1);
    }
    auto12E46763_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12E46763_u = UnitGroupCount(auto12E46763_g, c_unitCountAll);
    for (;; auto12E46763_u -= 1) {
        auto12E46763_var = UnitGroupUnitFromEnd(auto12E46763_g, auto12E46763_u);
        if (auto12E46763_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto12E46763_var, RegionFromId(5)) == false)) {
            UnitRemove(auto12E46763_var);
        }

    }
    Wait(1.0, c_timeGame);
    lv_index = 0;
    lv_index2 = 1;
    for ( ; ( (auto9EEC155C_ai >= 0 && lv_index2 <= auto9EEC155C_ae) || (auto9EEC155C_ai < 0 && lv_index2 >= auto9EEC155C_ae) ) ; lv_index2 += auto9EEC155C_ai ) {
        lv_index = 1;
        for ( ; ( (auto2C94F368_ai >= 0 && lv_index <= auto2C94F368_ae) || (auto2C94F368_ai < 0 && lv_index >= auto2C94F368_ae) ) ; lv_index += auto2C94F368_ai ) {
            if ((gv_regionsDungeonsRespawnType[lv_index2][lv_index] != null)) {
                lv_passFail = true;
                if ((UnitTypeTestAttribute(gv_regionsDungeonsRespawnType[lv_index2][lv_index], c_unitAttributeBiological) == true)) {
                    autoB2E7C997_ae = gv_dungeonsD11CreepCountTypesIndex[4];
                    lv_index3 = 1;
                    for ( ; ( (autoB2E7C997_ai >= 0 && lv_index3 <= autoB2E7C997_ae) || (autoB2E7C997_ai < 0 && lv_index3 >= autoB2E7C997_ae) ) ; lv_index3 += autoB2E7C997_ai ) {
                        if ((gv_regionsDungeonsRespawnType[lv_index2][lv_index] == gv_dungeonsD11CreepCountTypes[4][lv_index3])) {
                            lv_passFail = false;
                        }

                    }
                    if ((lv_passFail == true)) {
                        gv_dungeonsD11CreepCountTypesIndex[4] += 1;
                        gv_dungeonsD11CreepCountTypes[4][gv_dungeonsD11CreepCountTypesIndex[4]] = gv_regionsDungeonsRespawnType[lv_index2][lv_index];
                    }

                }
                else {
                    auto1C42E22C_ae = gv_dungeonsD11CreepCountTypesIndex[2];
                    lv_index3 = 1;
                    for ( ; ( (auto1C42E22C_ai >= 0 && lv_index3 <= auto1C42E22C_ae) || (auto1C42E22C_ai < 0 && lv_index3 >= auto1C42E22C_ae) ) ; lv_index3 += auto1C42E22C_ai ) {
                        if ((gv_regionsDungeonsRespawnType[lv_index2][lv_index] == gv_dungeonsD11CreepCountTypes[2][lv_index3])) {
                            lv_passFail = false;
                        }

                    }
                    if ((lv_passFail == true)) {
                        gv_dungeonsD11CreepCountTypesIndex[2] += 1;
                        gv_dungeonsD11CreepCountTypes[2][gv_dungeonsD11CreepCountTypesIndex[2]] = gv_regionsDungeonsRespawnType[lv_index2][lv_index];
                    }

                }
            }

        }
    }
    lv_index2 = 1;
    for ( ; ( (auto04741907_ai >= 0 && lv_index2 <= auto04741907_ae) || (auto04741907_ai < 0 && lv_index2 >= auto04741907_ae) ) ; lv_index2 += auto04741907_ai ) {
        lv_index = 1;
        for ( ; ( (auto02BDE826_ai >= 0 && lv_index <= auto02BDE826_ae) || (auto02BDE826_ai < 0 && lv_index >= auto02BDE826_ae) ) ; lv_index += auto02BDE826_ai ) {
            if ((gv_regionsRespawnType[lv_index2][lv_index] != null) && (UnitTypeTestAttribute(gv_regionsRespawnType[lv_index2][lv_index], c_unitAttributeUser1) == false)) {
                lv_passFail = true;
                if ((UnitTypeTestAttribute(gv_regionsRespawnType[lv_index2][lv_index], c_unitAttributeBiological) == true)) {
                    auto552A529B_ae = gv_dungeonsD11CreepCountTypesIndex[3];
                    lv_index3 = 1;
                    for ( ; ( (auto552A529B_ai >= 0 && lv_index3 <= auto552A529B_ae) || (auto552A529B_ai < 0 && lv_index3 >= auto552A529B_ae) ) ; lv_index3 += auto552A529B_ai ) {
                        if ((gv_regionsRespawnType[lv_index2][lv_index] == gv_dungeonsD11CreepCountTypes[3][lv_index3])) {
                            lv_passFail = false;
                        }

                    }
                    if ((lv_passFail == true)) {
                        gv_dungeonsD11CreepCountTypesIndex[3] += 1;
                        gv_dungeonsD11CreepCountTypes[3][gv_dungeonsD11CreepCountTypesIndex[3]] = gv_regionsRespawnType[lv_index2][lv_index];
                    }

                }
                else {
                    autoBEED4611_ae = gv_dungeonsD11CreepCountTypesIndex[1];
                    lv_index3 = 1;
                    for ( ; ( (autoBEED4611_ai >= 0 && lv_index3 <= autoBEED4611_ae) || (autoBEED4611_ai < 0 && lv_index3 >= autoBEED4611_ae) ) ; lv_index3 += autoBEED4611_ai ) {
                        if ((gv_regionsRespawnType[lv_index2][lv_index] == gv_dungeonsD11CreepCountTypes[1][lv_index3])) {
                            lv_passFail = false;
                        }

                    }
                    if ((lv_passFail == true)) {
                        gv_dungeonsD11CreepCountTypesIndex[1] += 1;
                        gv_dungeonsD11CreepCountTypes[1][gv_dungeonsD11CreepCountTypesIndex[1]] = gv_regionsRespawnType[lv_index2][lv_index];
                    }

                }
            }

        }
    }
    autoEFA596F7_val = GameAttributeGameValue("2");
    if (autoEFA596F7_val == "0003") {
        gv_generalTutorialMode = true;
    }
    else if (autoEFA596F7_val == "0002") {
        gv_generalEndGameMode = true;
        gv_raidsBossesSOJcount[0] = RandomInt(1, 21000);
    }
    else {
    }
    UnitBehaviorAdd(UnitFromId(877735969), "LifeRegenerationBuff", UnitFromId(877735969), 3);
    gv_banksCheckMath[1] = FixedToInt(DistanceBetweenPoints(UnitGetPosition(UnitFromId(1679891546)), UnitGetPosition(UnitFromId(386148473))));
    gv_banksCheckMath[2] = FixedToInt(DialogGetWidth(gv_arenaDialogBox));
    gv_banksCheckMath[3] = UnitBehaviorCountAll(UnitFromId(877735969));
    gv_banksCheckMath[4] = FixedToInt(GameTimeOfDayGetLength());
    gv_banksCheckMath[5] = FixedToInt(DialogControlGetItemCount(gv_itemHonorDialogDropdown[3], 1));
    gv_banksCheckMath[6] = FixedToInt(PointGetX(MidPoint(RegionGetCenter(RegionFromId(102)), RegionGetCenter(RegionFromId(103)))));
    gv_banksCheckMath[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(877735969), c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    gv_banksCheckMath[8] = FixedToInt((UnitWeaponSpeedMultiplier(UnitFromId(877735969), 1) * 100.0));
    gv_banksCheckMath[9] = CliffLevel(UnitGetPosition(UnitFromId(877735969)));
    gv_banksCheckMath[10] = FixedToInt(UnitGetPropertyFixed(UnitFromId(877735969), c_unitPropLifeRegen, c_unitPropCurrent));
    gv_banksCheckMath[11] = FixedToInt(UnitGetPropertyFixed(UnitFromId(877735969), c_unitPropLifeArmor, c_unitPropCurrent));
    gv_banksCheckMath[12] = FixedToInt(StringLength("What are you looking for in here?"));
    lv_index = 1;
    for ( ; ( (autoA030D27E_ai >= 0 && lv_index <= autoA030D27E_ae) || (autoA030D27E_ai < 0 && lv_index >= autoA030D27E_ae) ) ; lv_index += autoA030D27E_ai ) {
        gv_banksCheckMath[lv_index] = AbsI(gv_banksCheckMath[lv_index]);
        lv_index2 = 1;
        for ( ; ( (auto7F9FB0B5_ai >= 0 && lv_index2 <= auto7F9FB0B5_ae) || (auto7F9FB0B5_ai < 0 && lv_index2 >= auto7F9FB0B5_ae) ) ; lv_index2 += auto7F9FB0B5_ai ) {
            if ((gv_banksCheckMath[lv_index] > 200)) {
                gv_banksCheckMath[lv_index] = ModI(gv_banksCheckMath[lv_index], 200);
            }

        }
        if ((gv_banksCheckMath[lv_index] == 0)) {
            gv_banksCheckMath[lv_index] += 3;
        }

    }
    gf_InitStartLoad();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitAll_Init () {
    gt_InitAll = TriggerCreate("gt_InitAll_Func");
    TriggerAddEventMapInit(gt_InitAll);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init - Beta Testers Check
//--------------------------------------------------------------------------------------------------
bool gt_InitBetaTestersCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_passFail;

    // Automatic Variable Declarations
    playergroup auto31E60416_g;
    int auto31E60416_var;
    const int auto4910BCC2_ae = 7;
    const int auto4910BCC2_ai = 1;
    const int auto7187950D_ae = 14;
    const int auto7187950D_ai = 1;
    const int auto858A2632_ae = 32;
    const int auto858A2632_ai = 1;
    const int auto423FBBE9_ae = 36;
    const int auto423FBBE9_ai = 1;
    const int auto6CFFCEA4_ae = 48;
    const int auto6CFFCEA4_ai = 1;
    const int autoF68ACFE7_ae = 96;
    const int autoF68ACFE7_ai = 1;
    const int auto9F81975D_ae = 119;
    const int auto9F81975D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_testers2Index = 0;
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5476687";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-2212249";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1489290";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2069811";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8594756";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2384077";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1688830";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5118695";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2378032";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-6317839";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1966134";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5678878";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-11049909";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-10143697";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-954704";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-3819993";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5882846";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-3271922";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-11110946";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-11360310";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8298616";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-497615";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1644589";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-11364462";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-9762001";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-10633859";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-341233";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2755911";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-3368012";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-5385336";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-837967";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5713128";
    gv_testersIndex += 1;
    gv_testersNames[gv_testersIndex] = "2-S2-1-3053699";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-2212249";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5882846";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7762506";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-11049909";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-549703";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8146980";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-2212249";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-10143697";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-3819993";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-779195";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-606784";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-255493";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8594756";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8080274";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1489290";
    gv_testers2Index = 75;
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2378032";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1489290";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-552582";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8594756";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2069599";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-479182";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7566918";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-4797556";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-6399157";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-255493";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-4316759";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7408934";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-3374651";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-570934";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-549703";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8422030";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8827564";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1676140";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7730649";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2977482";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5476687";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1726552";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-12037247";
    gv_testers2Index = 100;
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2378032";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1489290";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-8594756";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-2069599";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7566918";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-4797556";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-6399157";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-7408934";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-3374651";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "2-S2-1-255493";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-4316759";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-479182";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-570934";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-549703";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1676140";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1726552";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-5476687";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-12037247";
    gv_testers2Index += 1;
    gv_testers2Names[gv_testers2Index] = "1-S2-1-1249165";
    auto31E60416_g = gv_generalTeamsAll;
    auto31E60416_var = -1;
    while (true) {
        auto31E60416_var = PlayerGroupNextPlayer(auto31E60416_g, auto31E60416_var);
        if (auto31E60416_var < 0) { break; }
        lv_index = 1;
        for ( ; ( (auto4910BCC2_ai >= 0 && lv_index <= auto4910BCC2_ae) || (auto4910BCC2_ai < 0 && lv_index >= auto4910BCC2_ae) ) ; lv_index += auto4910BCC2_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[1], auto31E60416_var);
                PlayerGroupAdd(gv_hatsTempGroups[6], auto31E60416_var);
            }

        }
        lv_index = 8;
        for ( ; ( (auto7187950D_ai >= 0 && lv_index <= auto7187950D_ae) || (auto7187950D_ai < 0 && lv_index >= auto7187950D_ae) ) ; lv_index += auto7187950D_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[2], auto31E60416_var);
            }

        }
        lv_index = 15;
        for ( ; ( (auto858A2632_ai >= 0 && lv_index <= auto858A2632_ae) || (auto858A2632_ai < 0 && lv_index >= auto858A2632_ae) ) ; lv_index += auto858A2632_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[3], auto31E60416_var);
            }

        }
        lv_index = 33;
        for ( ; ( (auto423FBBE9_ai >= 0 && lv_index <= auto423FBBE9_ae) || (auto423FBBE9_ai < 0 && lv_index >= auto423FBBE9_ae) ) ; lv_index += auto423FBBE9_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[4], auto31E60416_var);
            }

        }
        lv_index = 37;
        for ( ; ( (auto6CFFCEA4_ai >= 0 && lv_index <= auto6CFFCEA4_ae) || (auto6CFFCEA4_ai < 0 && lv_index >= auto6CFFCEA4_ae) ) ; lv_index += auto6CFFCEA4_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[5], auto31E60416_var);
            }

        }
        lv_index = 76;
        for ( ; ( (autoF68ACFE7_ai >= 0 && lv_index <= autoF68ACFE7_ae) || (autoF68ACFE7_ai < 0 && lv_index >= autoF68ACFE7_ae) ) ; lv_index += autoF68ACFE7_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[6], auto31E60416_var);
            }

        }
        lv_index = 101;
        for ( ; ( (auto9F81975D_ai >= 0 && lv_index <= auto9F81975D_ae) || (auto9F81975D_ai < 0 && lv_index >= auto9F81975D_ae) ) ; lv_index += auto9F81975D_ai ) {
            if ((PlayerHandle(auto31E60416_var) == gv_testers2Names[lv_index])) {
                PlayerGroupAdd(gv_hatsTempGroups[7], auto31E60416_var);
            }

        }
    }
    gv_banksBankSwapIndex = 0;
    gv_banksBankSwapIndex += 1;
    gv_banksBankSwapHandle[gv_banksBankSwapIndex][1] = "1-S2-1-5476687";
    gv_banksBankSwapHandle[gv_banksBankSwapIndex][2] = "2-S2-1-5385336";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitBetaTestersCheck_Init () {
    gt_InitBetaTestersCheck = TriggerCreate("gt_InitBetaTestersCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bank - Variables Check
//--------------------------------------------------------------------------------------------------
bool gt_BankVariablesCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_index3;

    // Automatic Variable Declarations
    const int auto196E5AA8_ae = gv_generalPlayerCap;
    const int auto196E5AA8_ai = 1;
    const int auto8BED09C1_ae = 3;
    const int auto8BED09C1_ai = 1;
    const int autoE45F6FFA_ae = 30;
    const int autoE45F6FFA_ai = 1;
    const int autoB9C0AB74_ae = 2;
    const int autoB9C0AB74_ai = 1;
    const int auto50433DC8_ae = 5;
    const int auto50433DC8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_generalLevelCap != 50))) {
        gf_BankFailedResponse(lv_index, true, false);
    }

    lv_index = 1;
    for ( ; ( (auto196E5AA8_ai >= 0 && lv_index <= auto196E5AA8_ae) || (auto196E5AA8_ai < 0 && lv_index >= auto196E5AA8_ae) ) ; lv_index += auto196E5AA8_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto8BED09C1_ai >= 0 && lv_index2 <= auto8BED09C1_ae) || (auto8BED09C1_ai < 0 && lv_index2 >= auto8BED09C1_ae) ) ; lv_index2 += auto8BED09C1_ai ) {
            if (((gv_playerCurrency[lv_index][lv_index2] != 0) || (gv_playerHeroHeroClassTierType[lv_index][lv_index2] != 0) || (gv_playerCurrency[lv_index][4] != 0))) {
                gf_BankFailedResponse(lv_index, true, false);
            }

        }
        lv_index2 = 1;
        for ( ; ( (autoE45F6FFA_ai >= 0 && lv_index2 <= autoE45F6FFA_ae) || (autoE45F6FFA_ai < 0 && lv_index2 >= autoE45F6FFA_ae) ) ; lv_index2 += autoE45F6FFA_ai ) {
            if (((gv_playerStatisticsGeneral[lv_index][lv_index2] != 0) || (gv_playerStatisticsAchievements[lv_index][lv_index2][1] != 0) || (gv_playerStatisticsAchievements[lv_index][lv_index2][2] != 0) || (gv_beastMasterPlayerCreepLevels[lv_index][lv_index2][1] != 0) || (gv_beastMasterPlayerCreepLevels[lv_index][lv_index2][2] != 0))) {
                gf_BankFailedResponse(lv_index, true, false);
            }

        }
        lv_index2 = 1;
        for ( ; ( (autoB9C0AB74_ai >= 0 && lv_index2 <= autoB9C0AB74_ae) || (autoB9C0AB74_ai < 0 && lv_index2 >= autoB9C0AB74_ae) ) ; lv_index2 += autoB9C0AB74_ai ) {
            if (((gv_playerHeroHeroLevelExp[lv_index][lv_index2] != 0) || (gv_playerHeroHeroSkillLvlStatCost[lv_index][lv_index2] != 0) || (gv_playerHeroHeroLevelExp[lv_index][lv_index2] != 0) || (gv_playerHeroHeroGuild[lv_index][lv_index2] != 0))) {
                gf_BankFailedResponse(lv_index, true, false);
            }

        }
        lv_index2 = 0;
        for ( ; ( (auto50433DC8_ai >= 0 && lv_index2 <= auto50433DC8_ae) || (auto50433DC8_ai < 0 && lv_index2 >= auto50433DC8_ae) ) ; lv_index2 += auto50433DC8_ai ) {
            if (((gv_playerHeroHeroStats[lv_index][lv_index2] != 0) || (gv_playerHeroHeroStatsInvested[lv_index][lv_index2] != 0))) {
                gf_BankFailedResponse(lv_index, true, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankVariablesCheck_Init () {
    gt_BankVariablesCheck = TriggerCreate("gt_BankVariablesCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Enters General Region
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitEntersGeneralRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    unitgroup auto897A719E_g;
    int auto897A719E_u;
    unit auto897A719E_var;
    int autoF805CC4C_ae;
    const int autoF805CC4C_ai = 1;
    int auto3526222D_ae;
    const int auto3526222D_ai = 1;
    int autoDB620DB0_val;
    int auto016EBCFE_ae;
    const int auto016EBCFE_ai = 1;
    int auto036609FD_ae;
    const int auto036609FD_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHeroHeroRegion[lv_trigPlayer] = EventUnitRegion();
    UISetMiniMapBounds(PlayerGroupSingle(lv_trigPlayer), gv_playerHeroHeroRegion[lv_trigPlayer]);
    CameraSetBounds(PlayerGroupSingle(lv_trigPlayer), gv_playerHeroHeroRegion[lv_trigPlayer], true);
    CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.5, -1, 10.0, true);
    VisRevealerEnable(gv_regionsPlayerRevealer[lv_trigPlayer], false);
    VisFillArea(lv_trigPlayer, RegionEntireMap(), c_fillTypeFogged, false);
    VisFillArea(lv_trigPlayer, RegionEntireMap(), c_fillTypeHidden, false);
    VisFillArea(lv_trigPlayer, RegionEntireMap(), c_fillTypeMasked, false);
    VisFillArea(lv_trigPlayer, RegionEntireMap(), c_fillTypeUnexplored, false);
    auto897A719E_g = UnitGroup(null, lv_trigPlayer, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto897A719E_u = UnitGroupCount(auto897A719E_g, c_unitCountAll);
    for (;; auto897A719E_u -= 1) {
        auto897A719E_var = UnitGroupUnitFromEnd(auto897A719E_g, auto897A719E_u);
        if (auto897A719E_var == null) { break; }
        UnitSetPosition(auto897A719E_var, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), false);
    }
    if ((EventUnitRegion() == RegionFromId(5))) {
        VisRevealerEnable(gv_regionsPlayerRevealer[lv_trigPlayer], true);
    }

    autoF805CC4C_ae = gv_regionsIndex;
    lv_index = 1;
    for ( ; ( (autoF805CC4C_ai >= 0 && lv_index <= autoF805CC4C_ae) || (autoF805CC4C_ai < 0 && lv_index >= autoF805CC4C_ae) ) ; lv_index += autoF805CC4C_ai ) {
        if ((gv_playerHeroHeroRegion[lv_trigPlayer] == gv_regionsRegion[lv_index])) {
            gv_playerHeroHeroRegionIndex[lv_trigPlayer] = lv_index;
            auto3526222D_ae = gv_regionsIndex;
            lv_index2 = 1;
            for ( ; ( (auto3526222D_ai >= 0 && lv_index2 <= auto3526222D_ae) || (auto3526222D_ai < 0 && lv_index2 >= auto3526222D_ae) ) ; lv_index2 += auto3526222D_ai ) {
                libNtve_gf_SetDialogItemColor(gv_mapDialogRegions[lv_index2], Color(100,100,100), PlayerGroupSingle(lv_trigPlayer));
            }
            libNtve_gf_SetDialogItemColor(gv_mapDialogRegions[lv_index], Color(100.00, 50.20, 50.20), PlayerGroupSingle(lv_trigPlayer));
            gf_PartyUpdateTooltips(lv_trigPlayer);
            if ((EventUnitRegion() != RegionFromId(4)) && (EventUnitRegion() != RegionFromId(5)) && (EventUnitRegion() != RegionFromId(73)) && (EventUnitRegion() != RegionFromId(104)) && (EventUnitRegion() != RegionFromId(155)) && (gv_regionsActive[lv_index] != true)) {
                gv_regionsActive[lv_index] = true;
                lv_tempInt = 1;
                while ((TimerGetRemaining(gv_regionsRespawnTimer[lv_index]) <= 0.0) && (gv_regionsRespawnType[lv_index][lv_tempInt] != null)) {
                    gf_CreepsCreepSpawn(gv_regionsRespawnType[lv_index][lv_tempInt], 2, lv_index, gv_regionsRespawnXY[lv_index][lv_tempInt][1], gv_regionsRespawnXY[lv_index][lv_tempInt][2]);
                    lv_tempInt += 1;
                }
                TimerStart(gv_regionsRespawnTimer[lv_index], 30.0, false, c_timeGame);
                TimerPause(gv_regionsRespawnTimer[lv_index], true);
            }

            libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][1], gv_regionsNames[lv_index], PlayerGroupSingle(lv_trigPlayer));
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], PlayerGroupSingle(lv_trigPlayer), 0.0, 0.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], PlayerGroupSingle(lv_trigPlayer), 8.0, 100.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][2], PlayerGroupAll(), 0.0, 100.0);
            gv_regionsWeatherTypes[0] = null;
            gv_regionsWeatherTypes[1] = "Assets\\Doodads\\Shakuras_Storm_Weather_Effect\\Shakuras_Storm_Weather_Effect.m3";
            gv_regionsWeatherTypes[2] = "Assets\\Doodads\\Shakuras_Ash_Wind\\Shakuras_Ash_Wind.m3";
            gv_regionsWeatherTypes[3] = "Assets\\Doodads\\RainEmitterLarge\\RainEmitterLarge.m3";
            gv_regionsWeatherTypes[4] = "Assets\\Doodads\\DustStorms\\DustStorms.m3";
            gv_regionsWeatherTypes[5] = "Assets\\Doodads\\Sunrays\\Sunrays.m3";
            gv_regionsWeatherTypes[6] = "Assets\\Doodads\\MistFog\\MistFog.m3";
            gv_regionsWeatherTypes[7] = "Assets\\Doodads\\SnowLight\\SnowLight.m3";
            gv_regionsWeatherTypes[8] = "Assets\\Doodads\\Snow\\Snow.m3";
            gv_regionsWeatherTypes[9] = "Assets\\StoryModeSets\\Protoss\\SMX2_Aiur1_Debrief_Clouds\\SMX2_Aiur1_Debrief_Clouds.m3";
            Wait(1.0, c_timeGame);
            autoDB620DB0_val = gv_regionsWeather[lv_index];
            if (autoDB620DB0_val == 0) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "Invisible", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 1) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "Shakuras_Storm_Weather_Effect", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 2) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "Shakuras_Ash_Wind", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 3) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "RainEmitterLarge", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 4) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "DustStorms", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 5) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "Sunrays", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 6) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "FogMist", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 7) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "SnowLight", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 8) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "SnowWind", PlayerGroupSingle(lv_trigPlayer));
            }
            else if (autoDB620DB0_val == 9) {
                libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][2], "ShadowCloudAddition1", PlayerGroupSingle(lv_trigPlayer));
            }
            else {
            }
            PortraitWaitForLoad(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][2]));
            ActorSend(ActorFromDialogControl(gv_screenEffectsDialogItem[1][2]), "SetScale 1.000000 0.100000");
            DialogControlSetVisible(gv_screenEffectsDialogItem[1][2], PlayerGroupSingle(lv_trigPlayer), true);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][2], PlayerGroupSingle(lv_trigPlayer), 1.0, 55.0);
            break;
        }

    }
    auto016EBCFE_ae = gv_regionsDungeonsIndex;
    lv_index = 0;
    for ( ; ( (auto016EBCFE_ai >= 0 && lv_index <= auto016EBCFE_ae) || (auto016EBCFE_ai < 0 && lv_index >= auto016EBCFE_ae) ) ; lv_index += auto016EBCFE_ai ) {
        if ((gv_playerHeroHeroRegion[lv_trigPlayer] == gv_regionsDungeonsRegion[lv_index][1])) {
            gv_playerHeroHeroRegionIndex[lv_trigPlayer] = 0;
            gf_PartyUpdateTooltips(lv_trigPlayer);
            gv_regionsDungeonsActive[lv_index] = true;
            TimerStart(gv_regionsDungeonsCloseTimer[lv_index], 180.0, false, c_timeGame);
            TimerPause(gv_regionsDungeonsCloseTimer[lv_index], true);
            libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][1], gv_regionsDungeonsNameDescription[lv_index][1], PlayerGroupSingle(lv_trigPlayer));
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], PlayerGroupSingle(lv_trigPlayer), 0.0, 0.0);
            DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][1], PlayerGroupSingle(lv_trigPlayer), 8.0, 100.0);
            break;
        }

    }
    auto036609FD_ae = gv_regionsTeleporterIndex;
    lv_index = 2;
    for ( ; ( (auto036609FD_ai >= 0 && lv_index <= auto036609FD_ae) || (auto036609FD_ai < 0 && lv_index >= auto036609FD_ae) ) ; lv_index += auto036609FD_ai ) {
        if ((EventUnitRegion() == gv_regionsTeleporterRegions[lv_index][1])) {
            gv_playerHeroHeroRespawn[lv_trigPlayer] = lv_index;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitEntersGeneralRegion_Init () {
    gt_RegionsUnitEntersGeneralRegion = TriggerCreate("gt_RegionsUnitEntersGeneralRegion_Func");
    TriggerEnable(gt_RegionsUnitEntersGeneralRegion, false);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(104), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(73), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(114), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(155), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(145), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(64), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(66), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(68), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(67), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(65), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(69), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(76), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(80), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(113), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(105), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(111), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(106), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(107), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(112), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(108), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(110), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(109), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(83), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(87), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(131), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(136), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(132), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(169), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(170), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(179), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersGeneralRegion, null, RegionFromId(209), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Leaves General Region
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitLeavesGeneralRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_tempRegion;
    region lv_trigRegion;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto08753040_g;
    int auto08753040_var;
    int auto7F376A37_ae;
    const int auto7F376A37_ai = 1;
    playergroup auto19E71356_g;
    int auto19E71356_var;
    int auto3EC98F45_ae;
    const int auto3EC98F45_ai = 1;
    playergroup autoF7808136_g;
    int autoF7808136_var;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();
    lv_trigRegion = EventUnitRegion();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 15) && ((lv_trigRegion == RegionFromId(13)) || (lv_trigRegion == RegionFromId(12)) || ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == false) && (UnitHasBehavior2(EventUnit(), "Heroic2") == false)))) {
        UnitBehaviorAdd(EventUnit(), "BlinkPhase3", EventUnit(), 1);
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true)) {
            auto08753040_g = gv_generalTeamsAll;
            auto08753040_var = -1;
            while (true) {
                auto08753040_var = PlayerGroupNextPlayer(auto08753040_g, auto08753040_var);
                if (auto08753040_var < 0) { break; }
                if (((gv_playerHeroHeroRegion[auto08753040_var] == RegionFromId(2)) || (gv_playerHeroHeroRegion[auto08753040_var] == RegionFromId(3)))) {
                    gv_banksCoughtCheating[auto08753040_var] = true;
                }

            }
        }

    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true) && (gv_playerHeroHero[lv_trigPlayer] == EventUnit())) {
        auto7F376A37_ae = gv_regionsIndex;
        lv_index = 1;
        for ( ; ( (auto7F376A37_ai >= 0 && lv_index <= auto7F376A37_ae) || (auto7F376A37_ai < 0 && lv_index >= auto7F376A37_ae) ) ; lv_index += auto7F376A37_ai ) {
            if ((lv_trigRegion == gv_regionsRegion[lv_index])) {
                lv_tempRegion = lv_index;
                TimerStart(gv_regionsRespawnTimer[lv_tempRegion], 30.0, false, c_timeGame);
                TimerPause(gv_regionsRespawnTimer[lv_tempRegion], false);
                auto19E71356_g = gv_generalTeamsAll;
                auto19E71356_var = -1;
                while (true) {
                    auto19E71356_var = PlayerGroupNextPlayer(auto19E71356_g, auto19E71356_var);
                    if (auto19E71356_var < 0) { break; }
                    if ((gv_playerHeroHeroRegion[auto19E71356_var] == lv_trigRegion) && (auto19E71356_var != lv_trigPlayer)) {
                        gv_regionsActive[lv_tempRegion] = true;
                        TimerStart(gv_regionsRespawnTimer[lv_tempRegion], 30.0, false, c_timeGame);
                        TimerPause(gv_regionsRespawnTimer[lv_tempRegion], true);
                    }

                }
                break;
            }

        }
        auto3EC98F45_ae = gv_regionsDungeonsIndex;
        lv_index = 0;
        for ( ; ( (auto3EC98F45_ai >= 0 && lv_index <= auto3EC98F45_ae) || (auto3EC98F45_ai < 0 && lv_index >= auto3EC98F45_ae) ) ; lv_index += auto3EC98F45_ai ) {
            if ((lv_trigRegion == gv_regionsDungeonsRegion[lv_index][1])) {
                lv_tempRegion = lv_index;
                TimerStart(gv_regionsDungeonsCloseTimer[lv_tempRegion], gv_regionsDungeonsCloseTime, false, c_timeGame);
                TimerPause(gv_regionsDungeonsCloseTimer[lv_tempRegion], false);
                gv_regionsDungeonsActive[lv_tempRegion] = false;
                autoF7808136_g = gv_generalTeamsAll;
                autoF7808136_var = -1;
                while (true) {
                    autoF7808136_var = PlayerGroupNextPlayer(autoF7808136_g, autoF7808136_var);
                    if (autoF7808136_var < 0) { break; }
                    if ((gv_playerHeroHeroRegion[autoF7808136_var] == lv_trigRegion) && (autoF7808136_var != lv_trigPlayer)) {
                        gv_regionsDungeonsActive[lv_tempRegion] = true;
                        TimerStart(gv_regionsDungeonsCloseTimer[lv_tempRegion], gv_regionsDungeonsCloseTime, false, c_timeGame);
                        TimerPause(gv_regionsDungeonsCloseTimer[lv_tempRegion], true);
                    }

                }
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitLeavesGeneralRegion_Init () {
    gt_RegionsUnitLeavesGeneralRegion = TriggerCreate("gt_RegionsUnitLeavesGeneralRegion_Func");
    TriggerEnable(gt_RegionsUnitLeavesGeneralRegion, false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(2), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(3), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(6), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(8), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(7), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(9), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(20), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(21), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(22), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(23), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(64), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(66), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(68), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(67), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(65), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(69), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(76), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(80), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(113), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(105), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(111), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(106), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(107), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(112), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(108), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(110), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(109), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(34), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(58), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(83), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(87), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(131), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(136), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(132), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(169), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(170), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(179), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(209), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(12), false);
    TriggerAddEventUnitRegion(gt_RegionsUnitLeavesGeneralRegion, null, RegionFromId(13), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Timers Expire
//--------------------------------------------------------------------------------------------------
bool gt_RegionsTimersExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;
    int lv_raidChance;
    int lv_tempTimer;
    int lv_tempDifficulty;

    // Automatic Variable Declarations
    int autoADA3D64A_ae;
    const int autoADA3D64A_ai = 1;
    playergroup autoDB80CEC6_g;
    int autoDB80CEC6_var;
    unitgroup auto76CEAB3B_g;
    int auto76CEAB3B_u;
    unit auto76CEAB3B_var;
    int auto42F89DAB_ae;
    const int auto42F89DAB_ai = 1;
    playergroup auto37B044A3_g;
    int auto37B044A3_var;
    playergroup autoBDC94FF2_g;
    int autoBDC94FF2_var;
    playergroup auto5E1B00C5_g;
    int auto5E1B00C5_var;
    const int auto3724C263_ae = 9;
    const int auto3724C263_ai = 1;
    unitgroup autoE4C8074E_g;
    int autoE4C8074E_u;
    unit autoE4C8074E_var;
    unitgroup auto8306EDA1_g;
    int auto8306EDA1_u;
    unit auto8306EDA1_var;
    unitgroup auto499D4782_g;
    int auto499D4782_u;
    unit auto499D4782_var;
    playergroup autoE9F352EE_g;
    int autoE9F352EE_var;
    playergroup autoEE8A2894_g;
    int autoEE8A2894_var;
    playergroup autoA6EDE385_g;
    int autoA6EDE385_var;
    const int autoCAA03AF9_ae = 2;
    const int autoCAA03AF9_ai = 1;
    const int autoDD6BA695_ae = 3;
    const int autoDD6BA695_ai = 1;
    int autoA7DDA38E_ae;
    const int autoA7DDA38E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoADA3D64A_ae = gv_regionsIndex;
    lv_index = 3;
    for ( ; ( (autoADA3D64A_ai >= 0 && lv_index <= autoADA3D64A_ae) || (autoADA3D64A_ai < 0 && lv_index >= autoADA3D64A_ae) ) ; lv_index += autoADA3D64A_ai ) {
        if ((EventTimer() == gv_regionsRespawnTimer[lv_index])) {
            autoDB80CEC6_g = gv_generalTeamsAll;
            autoDB80CEC6_var = -1;
            while (true) {
                autoDB80CEC6_var = PlayerGroupNextPlayer(autoDB80CEC6_g, autoDB80CEC6_var);
                if (autoDB80CEC6_var < 0) { break; }
                if ((gv_playerHeroHeroRegion[autoDB80CEC6_var] == gv_regionsRegion[lv_index])) {
                    gv_regionsActive[lv_index] = true;
                    TimerStart(gv_regionsRespawnTimer[lv_index], 30.0, false, c_timeGame);
                    TimerPause(gv_regionsRespawnTimer[lv_index], true);
                }

            }
            if ((TimerGetRemaining(gv_regionsRespawnTimer[lv_index]) <= 0.0)) {
                gv_regionsActive[lv_index] = false;
                auto76CEAB3B_g = UnitGroup(null, 15, gv_regionsRegion[lv_index], UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto76CEAB3B_u = UnitGroupCount(auto76CEAB3B_g, c_unitCountAll);
                for (;; auto76CEAB3B_u -= 1) {
                    auto76CEAB3B_var = UnitGroupUnitFromEnd(auto76CEAB3B_g, auto76CEAB3B_u);
                    if (auto76CEAB3B_var == null) { break; }
                    UnitRemove(auto76CEAB3B_var);
                }
            }

            break;
        }

    }
    auto42F89DAB_ae = gv_regionsDungeonsIndex;
    lv_index = 0;
    for ( ; ( (auto42F89DAB_ai >= 0 && lv_index <= auto42F89DAB_ae) || (auto42F89DAB_ai < 0 && lv_index >= auto42F89DAB_ae) ) ; lv_index += auto42F89DAB_ai ) {
        if ((EventTimer() == gv_regionsDungeonsCloseTimer[lv_index])) {
            auto37B044A3_g = gv_generalTeamsAll;
            auto37B044A3_var = -1;
            while (true) {
                auto37B044A3_var = PlayerGroupNextPlayer(auto37B044A3_g, auto37B044A3_var);
                if (auto37B044A3_var < 0) { break; }
                if ((gv_playerHeroHeroRegion[auto37B044A3_var] == gv_regionsDungeonsRegion[lv_index][1]) && (lv_index > 0)) {
                    gv_regionsDungeonsActive[lv_index] = true;
                    TimerStart(gv_regionsDungeonsCloseTimer[lv_index], gv_regionsDungeonsCloseTime, false, c_timeGame);
                    TimerPause(gv_regionsDungeonsCloseTimer[lv_index], true);
                }

            }
            if ((TimerGetRemaining(gv_regionsDungeonsCloseTimer[lv_index]) <= 0.0)) {
                if ((lv_index == 0)) {
                    lv_tempInt = FloorI((UnitGroupCount(gv_survivalBadUnitGroup, c_unitCountAlive) / 50));
                    gf_DungeonDialogEnd(0);
                    if ((gv_dungeonsHeroic[0] == true)) {
                        lv_tempDifficulty += 1;
                    }

                    if ((gv_dungeonsLegendary[0] == true)) {
                        lv_tempDifficulty += 1;
                    }

                    if ((gv_dungeonsHardcore[0] == true)) {
                        lv_tempDifficulty += 1;
                    }

                    autoBDC94FF2_g = gv_dungeonsParty[0];
                    autoBDC94FF2_var = -1;
                    while (true) {
                        autoBDC94FF2_var = PlayerGroupNextPlayer(autoBDC94FF2_g, autoBDC94FF2_var);
                        if (autoBDC94FF2_var < 0) { break; }
                        gf_SurvivalEnd(autoBDC94FF2_var, (gv_survivalLevelsPassed - (lv_tempInt + 0)), 1, lv_tempDifficulty);
                    }
                    gv_survivalLevelsPassed = -1;
                }
                else {
                    gf_GeneralPartyMessage(StringExternal("Param/Value/CDCD3F4A"), gv_dungeonsParty[lv_index]);
                }
                gv_regionsDungeonsActive[lv_index] = false;
                gv_dungeonsActiveStatus[lv_index] = 1;
                gv_dungeonsPartyLeader[lv_index] = 0;
                gv_dungeonsHeroic[lv_index] = false;
                gv_dungeonsLegendary[lv_index] = false;
                gv_dungeonsHardcore[lv_index] = false;
                libNtve_gf_StopTimer(gv_regionsDungeonsOpenTimer[lv_index]);
                auto5E1B00C5_g = gv_dungeonsParty[lv_index];
                auto5E1B00C5_var = -1;
                while (true) {
                    auto5E1B00C5_var = PlayerGroupNextPlayer(auto5E1B00C5_g, auto5E1B00C5_var);
                    if (auto5E1B00C5_var < 0) { break; }
                    lv_index2 = 1;
                    for ( ; ( (auto3724C263_ai >= 0 && lv_index2 <= auto3724C263_ae) || (auto3724C263_ai < 0 && lv_index2 >= auto3724C263_ae) ) ; lv_index2 += auto3724C263_ai ) {
                        gv_dungeonsDungeonStatistics[auto5E1B00C5_var][lv_index2][lv_index] = 0;
                    }
                }
                PlayerGroupClear(gv_dungeonsParty[lv_index]);
                autoE4C8074E_g = UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_index][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoE4C8074E_u = UnitGroupCount(autoE4C8074E_g, c_unitCountAll);
                for (;; autoE4C8074E_u -= 1) {
                    autoE4C8074E_var = UnitGroupUnitFromEnd(autoE4C8074E_g, autoE4C8074E_u);
                    if (autoE4C8074E_var == null) { break; }
                    UnitRemove(autoE4C8074E_var);
                }
                auto8306EDA1_g = UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_index][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto8306EDA1_u = UnitGroupCount(auto8306EDA1_g, c_unitCountAll);
                for (;; auto8306EDA1_u -= 1) {
                    auto8306EDA1_var = UnitGroupUnitFromEnd(auto8306EDA1_g, auto8306EDA1_u);
                    if (auto8306EDA1_var == null) { break; }
                    UnitRemove(auto8306EDA1_var);
                }
                auto499D4782_g = UnitGroup(null, c_playerAny, gv_regionsDungeonsRegion[lv_index][2], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto499D4782_u = UnitGroupCount(auto499D4782_g, c_unitCountAll);
                for (;; auto499D4782_u -= 1) {
                    auto499D4782_var = UnitGroupUnitFromEnd(auto499D4782_g, auto499D4782_u);
                    if (auto499D4782_var == null) { break; }
                    if ((DialogIsVisible(gv_dungeonEnterDialogBox, UnitGetOwner(auto499D4782_var)) == true)) {
                        DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupSingle(UnitGetOwner(auto499D4782_var)), false);
                        gf_DungeonDialogUpdate(UnitGetOwner(auto499D4782_var), lv_index);
                        SoundPlayForPlayer(SoundLink("DestructibleDebris6x6_Explosion", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(auto499D4782_var)), 125.0, 0.0);
                    }

                }
            }

            break;
        }

    }
    autoE9F352EE_g = gv_generalTeamsAll;
    autoE9F352EE_var = -1;
    while (true) {
        autoE9F352EE_var = PlayerGroupNextPlayer(autoE9F352EE_g, autoE9F352EE_var);
        if (autoE9F352EE_var < 0) { break; }
        if ((EventTimer() == gv_playerAFKTimer[autoE9F352EE_var])) {
            gv_playerAFKCheck[autoE9F352EE_var] = 1;
        }

    }
    if ((EventTimer() == gv_generalPlayerRespawn)) {
        autoEE8A2894_g = gv_generalTeamsAll;
        autoEE8A2894_var = -1;
        while (true) {
            autoEE8A2894_var = PlayerGroupNextPlayer(autoEE8A2894_g, autoEE8A2894_var);
            if (autoEE8A2894_var < 0) { break; }
            if ((TechTreeUpgradeCount(autoEE8A2894_var, "RespawnTimer", c_techCountQueuedOrBetter) >= 2)) {
                if ((gv_playerHeroHeroLevelExp[autoEE8A2894_var][1] >= 50)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoEE8A2894_var, "RespawnTimer", (TechTreeUpgradeCount(autoEE8A2894_var, "RespawnTimer", c_techCountCompleteOnly) - 1));
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(autoEE8A2894_var, "RespawnTimer", (TechTreeUpgradeCount(autoEE8A2894_var, "RespawnTimer", c_techCountCompleteOnly) - 2));
                }
            }

        }

    }

    autoA6EDE385_g = gv_generalTeamsAll;
    autoA6EDE385_var = -1;
    while (true) {
        autoA6EDE385_var = PlayerGroupNextPlayer(autoA6EDE385_g, autoA6EDE385_var);
        if (autoA6EDE385_var < 0) { break; }
        if ((EventTimer() == gv_beastMasterPlayerTimer[autoA6EDE385_var])) {
            gf_BeastMasterUpdate(autoA6EDE385_var, 1);
            break;
        }

    }
    lv_index = 1;
    for ( ; ( (autoCAA03AF9_ai >= 0 && lv_index <= autoCAA03AF9_ae) || (autoCAA03AF9_ai < 0 && lv_index >= autoCAA03AF9_ae) ) ; lv_index += autoCAA03AF9_ai ) {
        if ((EventTimer() == gv_legendaryDungeonTimer[lv_index]) && (gv_generalEndGameMode == true)) {
            gf_DungeonLegendaryUpdate(lv_index);
            break;
        }

    }
    if ((EventTimer() == gv_raidsBossesTimer) && (gv_generalEndGameMode == true)) {
        gv_raidsBossesChance += 6;
        lv_raidChance = gv_raidsBossesChance;
        lv_raidChance += (FixedToInt(((gv_invasionGoodUnitUpgradeCount - 40.0) * 1.0)) * 3);
        lv_raidChance += (FixedToInt(gv_playerCurrency[1][0]) / 1);
        lv_tempTimer = (650 - (lv_raidChance * 3));
        if ((lv_tempTimer < 1)) {
            lv_tempTimer = 1;
        }

        if ((lv_tempTimer > 700)) {
            lv_tempTimer = 700;
        }

        lv_index = 1;
        for ( ; ( (autoDD6BA695_ai >= 0 && lv_index <= autoDD6BA695_ae) || (autoDD6BA695_ai < 0 && lv_index >= autoDD6BA695_ae) ) ; lv_index += autoDD6BA695_ai ) {
            if ((RandomInt(1, 4) == 1)) {
                gv_raidsBossesSOJcount[0] += 1;
                gv_raidsBossesChance += 5;
                gf_GeneralRaidMessage(((StringExternal("Param/Value/4DBB6E97") + IntToText(gv_raidsBossesSOJcount[0])) + StringExternal("Param/Value/B14367A4")), PlayerGroupAll());
                Wait(RandomFixed(0.5, 2.5), c_timeGame);
            }

        }
        gv_raidsBossesSOJcount[0] += 1;
        gf_GeneralRaidMessage(((StringExternal("Param/Value/92DF266F") + IntToText(gv_raidsBossesSOJcount[0])) + StringExternal("Param/Value/FDF738E6")), PlayerGroupAll());
        if ((RandomInt(lv_raidChance, (700 + lv_raidChance)) >= 630)) {
            gv_raidsBossesChance = 0;
            gv_raidsBossesSOJcount[0] = RandomInt(1, 21000);
            gv_raidsBossesChanceHeroic += 1;
            if ((RandomInt(1, (4 + gv_raidsBossesChanceHeroic)) > 5)) {
                gf_RaidCreepSpawnSetup(-1);
            }
            else {
                gf_RaidCreepSpawnSetup(0);
            }
        }

        TimerStart(gv_raidsBossesTimer, lv_tempTimer, false, c_timeGame);
    }

    autoA7DDA38E_ae = gv_raidsBossesIndex;
    lv_index = 1;
    for ( ; ( (autoA7DDA38E_ai >= 0 && lv_index <= autoA7DDA38E_ae) || (autoA7DDA38E_ai < 0 && lv_index >= autoA7DDA38E_ae) ) ; lv_index += autoA7DDA38E_ai ) {
        if ((EventTimer() == gv_raidsBossesDespawnTimer[lv_index]) && (gv_raidsBossesSpawned[lv_index] == null)) {
            if ((UnitGetPropertyFixed(gv_raidsBossesSpawned[lv_index], c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGroupCount(UnitGroupSearch(null, c_playerAny, UnitGetPosition(gv_raidsBossesSpawned[lv_index]), 14.0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                UnitRemove(gv_raidsBossesSpawned[lv_index]);
                gf_GeneralRaidMessage(StringExternal("Param/Value/84B03762"), PlayerGroupAll());
            }
            else {
                TimerStart(gv_raidsBossesDespawnTimer[lv_index], 600.0, false, c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsTimersExpire_Init () {
    gt_RegionsTimersExpire = TriggerCreate("gt_RegionsTimersExpire_Func");
    TriggerAddEventTimer(gt_RegionsTimersExpire, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Enters Teleporter
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitEntersTeleporter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    int auto7CD18A83_ae;
    const int auto7CD18A83_ai = 1;
    const int auto431E0717_ae = 3;
    const int auto431E0717_ai = 1;
    int autoF876CB5F_ae;
    const int autoF876CB5F_ai = 1;
    const int auto19B2D811_ae = 3;
    const int auto19B2D811_ai = 1;
    int auto4F4E33EA_ae;
    const int auto4F4E33EA_ai = 1;
    const int auto2ECA563F_ae = 3;
    const int auto2ECA563F_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 1.0) && ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup(null, 15, gv_playerHeroHeroRegion[lv_trigPlayer], UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        gv_regionsTeleporterSelected[lv_trigPlayer] = 0;
        if ((EventUnitRegion() == RegionFromId(121)) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][0] == 6)) {
            gv_playerHeroHeroLevelExp[lv_trigPlayer][0] = 7;
        }

        auto7CD18A83_ae = gv_playerHeroHeroLevelExp[lv_trigPlayer][0];
        lv_index2 = 2;
        for ( ; ( (auto7CD18A83_ai >= 0 && lv_index2 <= auto7CD18A83_ae) || (auto7CD18A83_ai < 0 && lv_index2 >= auto7CD18A83_ae) ) ; lv_index2 += auto7CD18A83_ai ) {
            lv_index = 1;
            for ( ; ( (auto431E0717_ai >= 0 && lv_index <= auto431E0717_ae) || (auto431E0717_ai < 0 && lv_index >= auto431E0717_ae) ) ; lv_index += auto431E0717_ai ) {
                DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
            }
        }
        autoF876CB5F_ae = gv_regionsTeleporterIndex;
        lv_index2 = 1;
        for ( ; ( (autoF876CB5F_ai >= 0 && lv_index2 <= autoF876CB5F_ae) || (autoF876CB5F_ai < 0 && lv_index2 >= autoF876CB5F_ae) ) ; lv_index2 += autoF876CB5F_ai ) {
            DialogControlSetVisible(gv_teleporterDialogRegionsItems[lv_index2][2], PlayerGroupSingle(lv_trigPlayer), false);
        }
        lv_index2 = 1;
        for ( ; ( (auto19B2D811_ai >= 0 && lv_index2 <= auto19B2D811_ae) || (auto19B2D811_ai < 0 && lv_index2 >= auto19B2D811_ae) ) ; lv_index2 += auto19B2D811_ai ) {
            DialogControlSetEnabled(gv_teleporterDialogRegionsItems[1][lv_index2], PlayerGroupSingle(lv_trigPlayer), false);
        }
        auto4F4E33EA_ae = gv_regionsDungeonsIndex;
        lv_index = 1;
        for ( ; ( (auto4F4E33EA_ai >= 0 && lv_index <= auto4F4E33EA_ae) || (auto4F4E33EA_ai < 0 && lv_index >= auto4F4E33EA_ae) ) ; lv_index += auto4F4E33EA_ai ) {
            if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true)) {
                gv_dungeonsDungeonSelected[lv_trigPlayer] = lv_index;
                lv_index2 = 1;
                for ( ; ( (auto2ECA563F_ai >= 0 && lv_index2 <= auto2ECA563F_ae) || (auto2ECA563F_ai < 0 && lv_index2 >= auto2ECA563F_ae) ) ; lv_index2 += auto2ECA563F_ai ) {
                    DialogControlSetEnabled(gv_teleporterDialogRegionsItems[1][lv_index2], PlayerGroupSingle(lv_trigPlayer), true);
                }
            }

        }
        DialogSetVisible(gv_teleporterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }
    else {
        gf_GeneralErrorMessage(StringExternal("Param/Value/593D0277"), PlayerGroupSingle(lv_trigPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitEntersTeleporter_Init () {
    gt_RegionsUnitEntersTeleporter = TriggerCreate("gt_RegionsUnitEntersTeleporter_Func");
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(43), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(99), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(74), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(123), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersTeleporter, null, RegionFromId(156), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Crosses Map
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitCrossesMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    region lv_tempRegion;
    bool lv_pass;

    // Automatic Variable Declarations
    region auto89BAE7FA_val;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto89BAE7FA_val = EventUnitRegion();
    if (auto89BAE7FA_val == RegionFromId(70)) {
        lv_tempRegion = RegionFromId(79);
        lv_pass = true;
    }
    else if (auto89BAE7FA_val == RegionFromId(77)) {
        lv_tempRegion = RegionFromId(71);
        lv_pass = true;
    }
    else if (auto89BAE7FA_val == RegionFromId(137)) {
        lv_tempRegion = RegionFromId(140);
        lv_pass = true;
    }
    else if (auto89BAE7FA_val == RegionFromId(139)) {
        lv_tempRegion = RegionFromId(138);
        lv_pass = true;
    }
    else if (auto89BAE7FA_val == RegionFromId(143)) {
        if ((gv_invasionRunning == false) && (UnitGroupCount(gv_invasionBadUnitGroup, c_unitCountAlive) == 0) && (gv_questsPlayerProgress[lv_trigPlayer][94] >= 0)) {
            lv_tempRegion = RegionFromId(142);
            lv_pass = true;
        }

    }
    else if (auto89BAE7FA_val == RegionFromId(141)) {
        if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) < 0.1)) {
            lv_tempRegion = RegionFromId(144);
            lv_pass = true;
        }
        else {
            gf_GeneralErrorMessage(StringExternal("Param/Value/D7EC3635"), PlayerGroupSingle(lv_trigPlayer));
        }
    }
    else {
    }
    if ((lv_pass == true)) {
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        Wait(0.06, c_timeGame);
        UnitSetPosition(gv_playerHeroHero[lv_trigPlayer], RegionGetCenter(lv_tempRegion), false);
        UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        Wait(0.06, c_timeGame);
        UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.0, -1, 10.0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitCrossesMap_Init () {
    gt_RegionsUnitCrossesMap = TriggerCreate("gt_RegionsUnitCrossesMap_Func");
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(70), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(77), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(137), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(139), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(143), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitCrossesMap, null, RegionFromId(141), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Enters Dungeon Start
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitEntersDungeonStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int auto59A030D5_ae;
    const int auto59A030D5_ai = 1;
    const int autoC0416C8B_ae = gv_questsQuestSlots;
    const int autoC0416C8B_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 1.5) && ((lv_index < 8) || ((lv_index >= 8) && (lv_index <= 9) && (gv_questsPlayerProgress[lv_trigPlayer][94] >= 2)) || ((lv_index == 10) && (gv_questsPlayerProgress[lv_trigPlayer][96] >= 4)))) {
        auto59A030D5_ae = gv_regionsDungeonsIndex;
        lv_index = 1;
        for ( ; ( (auto59A030D5_ai >= 0 && lv_index <= auto59A030D5_ae) || (auto59A030D5_ai < 0 && lv_index >= auto59A030D5_ae) ) ; lv_index += auto59A030D5_ai ) {
            if ((EventUnitRegion() == gv_regionsDungeonsRegion[lv_index][2])) {
                gv_dungeonsDungeonSelected[lv_trigPlayer] = lv_index;
                gf_DungeonDialogUpdate(lv_trigPlayer, lv_index);
                break;
            }

        }
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
        if ((((EventUnitRegion() == gv_regionsDungeonsRegion[1][2]) && (gv_questsPlayerProgress[lv_trigPlayer][15] == 2)) || ((EventUnitRegion() == gv_regionsDungeonsRegion[7][2]) && (gv_questsPlayerProgress[lv_trigPlayer][91] == 2)) || (((EventUnitRegion() == gv_regionsDungeonsRegion[8][2]) || (EventUnitRegion() == gv_regionsDungeonsRegion[9][2])) && (gv_questsPlayerProgress[lv_trigPlayer][94] == 2))) && (true)) {
            lv_index = 1;
            for ( ; ( (autoC0416C8B_ai >= 0 && lv_index <= autoC0416C8B_ae) || (autoC0416C8B_ai < 0 && lv_index >= autoC0416C8B_ae) ) ; lv_index += autoC0416C8B_ai ) {
                if (((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 15) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 91) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 94)) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2])) {
                    gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += 1;
                    if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2])) {
                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 15)) {
                            gv_questsPlayerProgress[lv_trigPlayer][15] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[15][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                        }

                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 91)) {
                            gv_questsPlayerProgress[lv_trigPlayer][91] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[91][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                        }

                        if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 94)) {
                            gv_questsPlayerProgress[lv_trigPlayer][94] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[94][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                        }

                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/3316FE93"), PlayerGroupSingle(lv_trigPlayer));
                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    }

                }

            }
        }

    }
    else {
        if (((lv_index < 8) || (gv_questsPlayerProgress[lv_trigPlayer][94] >= 2))) {
            gf_GeneralErrorMessage(StringExternal("Param/Value/3C580CDE"), PlayerGroupSingle(lv_trigPlayer));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitEntersDungeonStart_Init () {
    gt_RegionsUnitEntersDungeonStart = TriggerCreate("gt_RegionsUnitEntersDungeonStart_Func");
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(62), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(85), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(91), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(115), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(117), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(119), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(163), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(165), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(167), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonStart, null, RegionFromId(200), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Enters Dungeon Exit
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitEntersDungeonExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    bool lv_continue;

    // Automatic Variable Declarations
    int autoD69957B7_ae;
    const int autoD69957B7_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }

        if (!((gv_generalTutorialMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD69957B7_ae = gv_regionsDungeonsIndex;
    lv_index = 1;
    for ( ; ( (autoD69957B7_ai >= 0 && lv_index <= autoD69957B7_ae) || (autoD69957B7_ai < 0 && lv_index >= autoD69957B7_ae) ) ; lv_index += autoD69957B7_ai ) {
        if ((EventUnitRegion() == gv_regionsDungeonsRegion[lv_index][5]) && (UnitGroupCount(UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_index][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) == 0)) {
            gv_dungeonsDungeonSelected[lv_trigPlayer] = lv_index;
            if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 1.0)) {
                lv_continue = true;
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/82972C8C"), PlayerGroupSingle(lv_trigPlayer));
            }
            break;
        }

        if ((EventUnitRegion() == gv_regionsDungeonsRegion[lv_index][6])) {
            gv_dungeonsDungeonSelected[lv_trigPlayer] = lv_index;
            if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 1.0)) {
                lv_continue = true;
            }
            else {
                gf_GeneralErrorMessage(StringExternal("Param/Value/F122C23B"), PlayerGroupSingle(lv_trigPlayer));
            }
            break;
        }

    }
    if ((lv_continue == true)) {
        DialogSetVisible(gv_dungeonLeaveDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
        UnitClearSelection(lv_trigPlayer);
        UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitEntersDungeonExit_Init () {
    gt_RegionsUnitEntersDungeonExit = TriggerCreate("gt_RegionsUnitEntersDungeonExit_Func");
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(61), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(82), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(84), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(89), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(90), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(129), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(128), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(135), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(134), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(130), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(173), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(172), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(176), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(175), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(182), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(181), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(212), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersDungeonExit, null, RegionFromId(211), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial - Regions Leave
//--------------------------------------------------------------------------------------------------
bool gt_TutorialRegionsLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    const int auto6888D27B_ae = 10;
    const int auto6888D27B_ai = 1;
    const int auto23BD1166_ae = 10;
    const int auto23BD1166_ai = 1;
    const int auto783E0BB6_ae = 10;
    const int auto783E0BB6_ai = 1;
    const int auto5A60660A_ae = 10;
    const int auto5A60660A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((gv_playerHeroHeroLevelExp[EventPlayer()][1] < 6))) {
            return false;
        }

        if (!((gv_questsPlayerProgress[lv_trigPlayer][3] < 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = EventPlayer();
    if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(10)) == true) && (gv_questsPlayerProgress[EventPlayer()][2] < 2)) {
        UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(11))), c_orderQueueReplace);
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Uncontrollable", gv_playerHeroHero[lv_trigPlayer], 1);
        if (true) {
            DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - 0));
            DialogSetPosition(gv_tutorialDialogBox[lv_trigPlayer], c_anchorCenter, 0, 200);
            DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), true);
            lv_index = 1;
            for ( ; ( (auto6888D27B_ai >= 0 && lv_index <= auto6888D27B_ae) || (auto6888D27B_ai < 0 && lv_index >= auto6888D27B_ae) ) ; lv_index += auto6888D27B_ai ) {
                DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - (lv_index * 10)));
                Wait(0.01, c_timeGame);
            }
            libNtve_gf_SetDialogItemText(gv_tutorialDialogItems[lv_trigPlayer][2], StringExternal("Param/Value/CC493F0E"), PlayerGroupSingle(lv_trigPlayer));
            Wait(5.0, c_timeGame);
            lv_index = 1;
            for ( ; ( (auto23BD1166_ai >= 0 && lv_index <= auto23BD1166_ae) || (auto23BD1166_ai < 0 && lv_index >= auto23BD1166_ae) ) ; lv_index += auto23BD1166_ai ) {
                DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (0 + (lv_index * 10)));
                Wait(0.05, c_timeGame);
            }
            DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), false);
        }

    }

    if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], RegionFromId(12)) == true) && (gv_questsPlayerProgress[lv_trigPlayer][3] < 4)) {
        UnitIssueOrder(gv_playerHeroHero[lv_trigPlayer], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(13))), c_orderQueueReplace);
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Uncontrollable", gv_playerHeroHero[lv_trigPlayer], 1);
        if (true) {
            DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - 0));
            DialogSetPosition(gv_tutorialDialogBox[lv_trigPlayer], c_anchorCenter, 0, 200);
            DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), true);
            lv_index = 1;
            for ( ; ( (auto783E0BB6_ai >= 0 && lv_index <= auto783E0BB6_ae) || (auto783E0BB6_ai < 0 && lv_index >= auto783E0BB6_ae) ) ; lv_index += auto783E0BB6_ai ) {
                DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (100 - (lv_index * 10)));
                Wait(0.01, c_timeGame);
            }
            libNtve_gf_SetDialogItemText(gv_tutorialDialogItems[lv_trigPlayer][2], StringExternal("Param/Value/980B3E03"), PlayerGroupSingle(lv_trigPlayer));
            Wait(5.0, c_timeGame);
            lv_index = 1;
            for ( ; ( (auto5A60660A_ai >= 0 && lv_index <= auto5A60660A_ae) || (auto5A60660A_ai < 0 && lv_index >= auto5A60660A_ae) ) ; lv_index += auto5A60660A_ai ) {
                DialogSetTransparency(gv_tutorialDialogBox[lv_trigPlayer], (0 + (lv_index * 10)));
                Wait(0.05, c_timeGame);
            }
            DialogSetVisible(gv_tutorialDialogBox[lv_trigPlayer], PlayerGroupSingle(lv_trigPlayer), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialRegionsLeave_Init () {
    gt_TutorialRegionsLeave = TriggerCreate("gt_TutorialRegionsLeave_Func");
    TriggerAddEventUnitRegion(gt_TutorialRegionsLeave, null, RegionFromId(2), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial - Regions Leave Final
//--------------------------------------------------------------------------------------------------
bool gt_TutorialRegionsLeaveFinal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((gv_tutorialPlayer[EventPlayer()] > 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = EventPlayer();
    if ((EventUnitRegion() == RegionFromId(10)) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true)) {
        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_questsPlayerProgress[lv_trigPlayer][3] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][4] == 1)) {
            gf_TutorialUpdate(lv_trigPlayer, 6);
        }

    }

    if ((EventUnitRegion() == RegionFromId(12)) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(3)) == true)) {
        if ((gv_tutorialPlayerSkipEnabled[lv_trigPlayer] == false) && (gv_tutorialPlayer[lv_trigPlayer] > 0) && (gv_tutorialPlayer[lv_trigPlayer] <= 7) && (gv_questsPlayerProgress[lv_trigPlayer][3] == 4) && (gv_questsPlayerProgress[lv_trigPlayer][4] < 4)) {
            gf_TutorialUpdate(lv_trigPlayer, 7);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialRegionsLeaveFinal_Init () {
    gt_TutorialRegionsLeaveFinal = TriggerCreate("gt_TutorialRegionsLeaveFinal_Func");
    TriggerAddEventUnitRegion(gt_TutorialRegionsLeaveFinal, null, RegionFromId(12), false);
    TriggerAddEventUnitRegion(gt_TutorialRegionsLeaveFinal, null, RegionFromId(10), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quests - Talk To Unit (Interact)
//--------------------------------------------------------------------------------------------------
bool gt_QuestsTalkToUnitInteract_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_playerCombatTimer[EventPlayer()]) <= 0.5) && ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 15.0), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup(null, 15, gv_playerHeroHeroRegion[EventPlayer()], UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        gf_QuestsInteracting(EventPlayer(), EventUnitTargetUnit());
    }
    else {
        gf_GeneralErrorMessage(StringExternal("Param/Value/E28063E5"), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuestsTalkToUnitInteract_Init () {
    gt_QuestsTalkToUnitInteract = TriggerCreate("gt_QuestsTalkToUnitInteract_Func");
    TriggerAddEventUnitAbility(gt_QuestsTalkToUnitInteract, null, AbilityCommand("Interact", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quests - Talk To Unit
//--------------------------------------------------------------------------------------------------
bool gt_QuestsTalkToUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_questsUnitGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_playerHeroHero[EventPlayer()], RegionCircle(UnitGetPosition(EventUnit()), 1.1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_playerCombatTimer[EventPlayer()]) <= 0.5) && ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup(null, 15, gv_playerHeroHeroRegion[EventPlayer()], UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        gf_QuestsInteracting(EventPlayer(), EventUnit());
    }
    else {
        gf_GeneralErrorMessage(StringExternal("Param/Value/D0203263"), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuestsTalkToUnit_Init () {
    gt_QuestsTalkToUnit = TriggerCreate("gt_QuestsTalkToUnit_Func");
    TriggerAddEventUnitSelected(gt_QuestsTalkToUnit, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quests - Item Pick Up
//--------------------------------------------------------------------------------------------------
bool gt_QuestsItemPickUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    playergroup lv_lootGroup;
    text lv_tempText;

    // Automatic Variable Declarations
    unitgroup autoDE91AFB9_g;
    int autoDE91AFB9_u;
    unit autoDE91AFB9_var;
    const int auto9A383EB0_ae = 4;
    const int auto9A383EB0_ai = 1;
    unitgroup autoB9C9E213_g;
    int autoB9C9E213_u;
    unit autoB9C9E213_var;
    playergroup auto035071C8_g;
    int auto035071C8_var;
    const int autoB93D5FB5_ae = gv_questsQuestSlots;
    const int autoB93D5FB5_ai = 1;
    const int auto91B00F48_ae = 2;
    const int auto91B00F48_ai = 1;

    // Variable Initialization
    lv_lootGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = UnitGetOwner(EventUnitTargetUnit());
    autoDE91AFB9_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 5.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE91AFB9_u = UnitGroupCount(autoDE91AFB9_g, c_unitCountAll);
    for (;; autoDE91AFB9_u -= 1) {
        autoDE91AFB9_var = UnitGroupUnitFromEnd(autoDE91AFB9_g, autoDE91AFB9_u);
        if (autoDE91AFB9_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoDE91AFB9_var, gv_playerHeroHeroRegion[lv_trigPlayer]) == true)) {
            PlayerGroupAdd(lv_lootGroup, UnitGetOwner(autoDE91AFB9_var));
        }

    }
    lv_index = 1;
    for ( ; ( (auto9A383EB0_ai >= 0 && lv_index <= auto9A383EB0_ae) || (auto9A383EB0_ai < 0 && lv_index >= auto9A383EB0_ae) ) ; lv_index += auto9A383EB0_ai ) {
        if ((PlayerGroupHasPlayer(gv_generalParties[lv_index][1], lv_trigPlayer) == true)) {
            autoB9C9E213_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB9C9E213_u = UnitGroupCount(autoB9C9E213_g, c_unitCountAll);
            for (;; autoB9C9E213_u -= 1) {
                autoB9C9E213_var = UnitGroupUnitFromEnd(autoB9C9E213_g, autoB9C9E213_u);
                if (autoB9C9E213_var == null) { break; }
                if ((libNtve_gf_UnitInRegion(autoB9C9E213_var, gv_playerHeroHeroRegion[lv_trigPlayer]) == true) && (PlayerGroupHasPlayer(gv_generalParties[lv_index][1], UnitGetOwner(autoB9C9E213_var)) == true)) {
                    PlayerGroupAdd(lv_lootGroup, UnitGetOwner(autoB9C9E213_var));
                }

            }
        }

    }
    auto035071C8_g = lv_lootGroup;
    auto035071C8_var = -1;
    while (true) {
        auto035071C8_var = PlayerGroupNextPlayer(auto035071C8_g, auto035071C8_var);
        if (auto035071C8_var < 0) { break; }
        lv_trigPlayer = auto035071C8_var;
        lv_index = 1;
        for ( ; ( (autoB93D5FB5_ai >= 0 && lv_index <= autoB93D5FB5_ae) || (autoB93D5FB5_ai < 0 && lv_index >= autoB93D5FB5_ae) ) ; lv_index += autoB93D5FB5_ai ) {
            if ((gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1] == 2)) {
                lv_index2 = 1;
                for ( ; ( (auto91B00F48_ai >= 0 && lv_index2 <= auto91B00F48_ae) || (auto91B00F48_ai < 0 && lv_index2 >= auto91B00F48_ae) ) ; lv_index2 += auto91B00F48_ai ) {
                    if ((gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2] != null) && (gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2] == UnitGetType(EventUnit())) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(lv_index2 + 1)])) {
                        gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2] += 1;
                        lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][lv_index2]) + StringExternal("Param/Value/2B9B215A") + IntToText(gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][lv_index2]) + StringExternal("Param/Value/78B85F4E") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(lv_index2 + 1)]));
                        gf_GeneralQuestMessage(lv_tempText, PlayerGroupSingle(lv_trigPlayer));
                        if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] == gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][2] == gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][3])) {
                            gv_questsPlayerProgress[lv_trigPlayer][gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                        }

                        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuestsItemPickUp_Init () {
    gt_QuestsItemPickUp = TriggerCreate("gt_QuestsItemPickUp_Func");
    TriggerAddEventUnitAbility(gt_QuestsItemPickUp, null, AbilityCommand("ItemDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Invasion - Timer Countdown
//--------------------------------------------------------------------------------------------------
bool gt_InvasionTimerCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto3FE9D003_ae = 5;
    const int auto3FE9D003_ai = 1;
    const int auto6C73DFA2_ae = 5;
    const int auto6C73DFA2_ai = 1;
    const int autoD58A1E69_n = 60;
    int autoD58A1E69_i;
    const int autoDC031BA1_ae = 5;
    const int autoDC031BA1_ai = 1;

    // Variable Initialization
    lv_index = 60;
    lv_tempInt = 4;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(779392242)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tempInt += (gv_invasionBadUnitUpgradeCount - gv_invasionGoodUnitUpgradeCount);
    lv_tempInt += FloorI((gv_invasionIndex / 4));
    lv_index = 1;
    for ( ; ( (auto3FE9D003_ai >= 0 && lv_index <= auto3FE9D003_ae) || (auto3FE9D003_ai < 0 && lv_index >= auto3FE9D003_ae) ) ; lv_index += auto3FE9D003_ai ) {
        if (((gv_invasionIndex * 1) >= (lv_index * 6))) {
            lv_tempInt += 1;
        }

    }
    if ((gv_generalEndGameMode == true)) {
        lv_tempInt += 2;
    }

    gv_invasionRisk = lv_tempInt;
    if ((lv_tempInt < 1)) {
        gv_invasionRisk = 1;
    }
    else {
        if ((lv_tempInt > 6)) {
            gv_invasionRisk = 6;
        }

    }
    libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][5], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
    lv_index2 = 2;
    for ( ; ( (auto6C73DFA2_ai >= 0 && lv_index2 <= auto6C73DFA2_ae) || (auto6C73DFA2_ai < 0 && lv_index2 >= auto6C73DFA2_ae) ) ; lv_index2 += auto6C73DFA2_ai ) {
        libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[0][4], (StringExternal("Param/Value/85D532DF") + IntToText(lv_index)), PlayerGroupAll());
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][lv_index2], PlayerGroupAll(), 1.0, 0.0);
    }
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][4], PlayerGroupAll(), 1.0, 0.0);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][5], PlayerGroupAll(), 1.0, 0.0);
    Wait(1.0, c_timeGame);
    lv_index = 59;
    for (autoD58A1E69_i = 1; autoD58A1E69_i <= autoD58A1E69_n; autoD58A1E69_i += 1) {
        libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[1][5], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
        if ((lv_index < 30) && (lv_index > 10)) {
            libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[0][4], (StringExternal("Param/Value/CD18CD38") + IntToText(lv_index)), PlayerGroupAll());
        }
        else {
            if ((lv_index <= 10)) {
                libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[0][4], (StringExternal("Param/Value/A138CA9F") + IntToText(lv_index)), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("ChatroomTimerTick", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_screenEffectsDialogItem[0][4], (StringExternal("Param/Value/F7715936") + IntToText(lv_index)), PlayerGroupAll());
            }
        }
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][4], PlayerGroupAll(), 0.1, 0.0);
        Wait(0.2, c_timeGame);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][4], PlayerGroupAll(), 0.9, 80.0);
        lv_index -= 1;
        Wait(0.9, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("HornOfCenariusSound", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.2);
    lv_index2 = 2;
    for ( ; ( (autoDC031BA1_ai >= 0 && lv_index2 <= autoDC031BA1_ae) || (autoDC031BA1_ai < 0 && lv_index2 >= autoDC031BA1_ae) ) ; lv_index2 += autoDC031BA1_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[0][lv_index2], PlayerGroupAll(), 1.0, 100.0);
    }
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][4], PlayerGroupAll(), 1.0, 100.0);
    DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][5], PlayerGroupAll(), 1.0, 100.0);
    TriggerExecute(gt_InvasionTimerExpires, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvasionTimerCountdown_Init () {
    gt_InvasionTimerCountdown = TriggerCreate("gt_InvasionTimerCountdown_Func");
    TriggerAddEventTimer(gt_InvasionTimerCountdown, gv_invasionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Invasion - Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_InvasionTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;
    int lv_tempInt;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    const int auto44629DE2_ae = 5;
    const int auto44629DE2_ai = 1;
    const int auto5BB44B6F_ae = 5;
    const int auto5BB44B6F_ai = 1;
    playergroup auto8ED790B6_g;
    int auto8ED790B6_var;
    const int auto473732CE_ae = 9;
    const int auto473732CE_ai = 1;
    const int auto18D08B2A_ae = 24;
    const int auto18D08B2A_ai = 1;
    const int autoC564C5E5_ae = 154;
    const int autoC564C5E5_ai = 1;
    const int auto6781C4EE_ae = 9;
    const int auto6781C4EE_ai = 1;
    const int autoAB278B3D_ae = 2;
    const int autoAB278B3D_ai = 1;
    const int auto37DF68B5_ae = 3;
    const int auto37DF68B5_ai = 1;
    const int auto943F23C2_ae = 3;
    const int auto943F23C2_ai = 1;
    const int autoD334D588_ae = 154;
    const int autoD334D588_ai = 1;
    const int auto175D18E7_ae = 128;
    const int auto175D18E7_ai = 1;
    const int auto94BC10A6_ae = 154;
    const int auto94BC10A6_ai = 1;
    const int auto0E697062_ae = 8;
    const int auto0E697062_ai = 1;
    int autoA32ECE00_ae;
    const int autoA32ECE00_ai = 1;
    const int auto655AFBBD_ae = 5;
    const int auto655AFBBD_ai = 1;

    // Variable Initialization
    lv_tempInt = 4;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(779392242)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto44629DE2_ai >= 0 && lv_index <= auto44629DE2_ae) || (auto44629DE2_ai < 0 && lv_index >= auto44629DE2_ae) ) ; lv_index += auto44629DE2_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[3][lv_index], PlayerGroupAll(), 0.5, 0.0);
    }
    SoundPlayForPlayer(SoundLink("TownHallCallToArms", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    gv_invasionBadUnitUpgradeCount += 2;
    gv_invasionGoodUnitUpgradeCount += 1;
    gv_invasionIndex += 1;
    lv_tempInt += (gv_invasionBadUnitUpgradeCount - gv_invasionGoodUnitUpgradeCount);
    lv_tempInt += FloorI((gv_invasionIndex / 4));
    lv_index = 0;
    lv_index = 1;
    for ( ; ( (auto5BB44B6F_ai >= 0 && lv_index <= auto5BB44B6F_ae) || (auto5BB44B6F_ai < 0 && lv_index >= auto5BB44B6F_ae) ) ; lv_index += auto5BB44B6F_ai ) {
        if (((gv_invasionIndex * 1) >= (lv_index * 6))) {
            lv_tempInt += 1;
        }

    }
    if ((gv_generalEndGameMode == true)) {
        lv_tempInt += 2;
    }

    gv_invasionRisk = lv_tempInt;
    if ((lv_tempInt < 1)) {
        gv_invasionRisk = 1;
    }
    else {
        if ((lv_tempInt > 6)) {
            gv_invasionRisk = 6;
        }

    }
    Wait(3.0, c_timeGame);
    gv_invasionTime += 60;
    if ((gv_generalEndGameMode == true)) {
        gv_invasionTime += 30;
    }

    gv_invasionCurrentUpgradeCost += (gv_invasionCurrentUpgradeCost / 25);
    TimerStart(gv_invasionTimer, gv_invasionTime, false, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/47A76D07") + IntToText(gv_invasionCurrentUpgradeCost)), PlayerGroupAll());
    gv_invasionBadUnitSpawnCountWaves[1] = (((6 + gv_invasionRisk) + (gv_invasionIndex * 2)) + (gv_invasionBadUnitUpgradeCount / 13));
    gv_invasionBadUnitSpawnCountWaves[2] = ((2 + gv_invasionIndex) + (gv_invasionBadUnitUpgradeCount / 20));
    gv_invasionGoodUnitSpawnCountWaves[1] = ((6 + gv_invasionIndex) + (gv_invasionGoodUnitUpgradeCount / 13));
    gv_invasionGoodUnitSpawnCountWaves[2] = ((2 + gv_invasionIndex) + (gv_invasionGoodUnitUpgradeCount / 20));
    libNtve_gf_SetBehaviorCount(UnitFromId(1384290393), "Upgrade", UnitFromId(1384290393), gv_invasionGoodUnitUpgradeCount);
    libNtve_gf_SetBehaviorCount(UnitFromId(70213988), "Upgrade", UnitFromId(70213988), gv_invasionGoodUnitUpgradeCount);
    libNtve_gf_SetBehaviorCount(UnitFromId(779392242), "Upgrade", UnitFromId(779392242), gv_invasionGoodUnitUpgradeCount);
    gf_InvasionCreepSpawn();
    Wait(5.0, c_timeGame);
    gf_InvasionArmySpawn();
    Wait(3.0, c_timeGame);
    auto8ED790B6_g = gv_generalTeamsAll;
    auto8ED790B6_var = -1;
    while (true) {
        auto8ED790B6_var = PlayerGroupNextPlayer(auto8ED790B6_g, auto8ED790B6_var);
        if (auto8ED790B6_var < 0) { break; }
        lv_trigPlayer = auto8ED790B6_var;
        gv_playerStatisticsGeneral[lv_trigPlayer][8] += 1;
        gv_playerStatisticsGeneral[lv_trigPlayer][27] += 5;
        gv_playerCurrency[lv_trigPlayer][4] += 5;
        gv_playerCurrency[auto8ED790B6_var][3] += gv_invasionIndex;
        gv_playerStatisticsGeneral[auto8ED790B6_var][6] += gv_invasionIndex;
        gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        lv_index = 1;
        for ( ; ( (auto473732CE_ai >= 0 && lv_index <= auto473732CE_ae) || (auto473732CE_ai < 0 && lv_index >= auto473732CE_ae) ) ; lv_index += auto473732CE_ai ) {
            gf_ItemsGeneratePotion(lv_trigPlayer, 1, lv_index);
        }
        if ((DialogIsVisible(gv_itemVendorDialogBox, lv_trigPlayer) == true)) {
            gf_DialogUsedItemVendor(lv_trigPlayer, gv_itemVendorDialogButtons[3]);
        }

        gv_itemVendorDialogItemIndex[lv_trigPlayer] = 1;
        lv_index = 1;
        for ( ; ( (auto18D08B2A_ai >= 0 && lv_index <= auto18D08B2A_ae) || (auto18D08B2A_ai < 0 && lv_index >= auto18D08B2A_ae) ) ; lv_index += auto18D08B2A_ai ) {
            gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(0, 1));
            lv_index2 = 151;
            for ( ; ( (autoC564C5E5_ai >= 0 && lv_index2 <= autoC564C5E5_ae) || (autoC564C5E5_ai < 0 && lv_index2 >= autoC564C5E5_ae) ) ; lv_index2 += autoC564C5E5_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
                gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
            }

            gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 2, ((20 + FixedToInt((gv_invasionFactorUpgradeCost * 14.0))) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + (gv_invasionIndex * (4 + (gv_invasionIndex / 2))))));
        }
        if ((DialogIsVisible(gv_raritiesVendorDialogBox, lv_trigPlayer) == true)) {
            gf_DialogUsedRaritiesVendor(lv_trigPlayer, gv_raritiesVendorDialogButtons[3]);
        }

        gv_raritiesVendorDialogItemIndex[lv_trigPlayer] = 1;
        lv_index = 1;
        for ( ; ( (auto6781C4EE_ai >= 0 && lv_index <= auto6781C4EE_ae) || (auto6781C4EE_ai < 0 && lv_index >= auto6781C4EE_ae) ) ; lv_index += auto6781C4EE_ai ) {
            gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(0, 1));
            lv_index2 = 1;
            for ( ; ( (autoAB278B3D_ai >= 0 && lv_index2 <= autoAB278B3D_ae) || (autoAB278B3D_ai < 0 && lv_index2 >= autoAB278B3D_ae) ) ; lv_index2 += autoAB278B3D_ai ) {
                if ((RandomInt(1, (6 - lv_index)) >= 3) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][124] == 4)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            lv_index2 = 1;
            for ( ; ( (auto37DF68B5_ai >= 0 && lv_index2 <= auto37DF68B5_ae) || (auto37DF68B5_ai < 0 && lv_index2 >= auto37DF68B5_ae) ) ; lv_index2 += auto37DF68B5_ai ) {
                if ((RandomInt(1, (6 - lv_index)) >= 3) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][135] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            lv_index2 = 1;
            for ( ; ( (auto943F23C2_ai >= 0 && lv_index2 <= auto943F23C2_ae) || (auto943F23C2_ai < 0 && lv_index2 >= auto943F23C2_ae) ) ; lv_index2 += auto943F23C2_ai ) {
                if ((RandomInt(1, (6 - lv_index)) >= 3) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap) && (gv_questsPlayerProgress[lv_trigPlayer][(149 + lv_index)] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                }

            }
            lv_index2 = 152;
            for ( ; ( (autoD334D588_ai >= 0 && lv_index2 <= autoD334D588_ae) || (autoD334D588_ai < 0 && lv_index2 >= autoD334D588_ae) ) ; lv_index2 += autoD334D588_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index2] == 4) && (gv_generalEndGameMode == true)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                    if ((RandomInt(1, 5) >= 3)) {
                        gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                    }

                }

            }
            if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
                gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
            }

            gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 5, ((180 + FixedToInt((gv_invasionFactorUpgradeCost * 26.0))) + (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] + (gv_invasionIndex * (12 + (gv_invasionIndex / 2))))));
        }
        if ((gv_questsPlayerProgress[lv_trigPlayer][100] == 4)) {
            if ((DialogIsVisible(gv_glyphVendorDialogBox, lv_trigPlayer) == true)) {
                gf_DialogUsedGlyphVendor(lv_trigPlayer, gv_glyphVendorDialogButtons[3]);
            }

            lv_upgradeCount = 0;
            lv_index = 126;
            for ( ; ( (auto175D18E7_ai >= 0 && lv_index <= auto175D18E7_ae) || (auto175D18E7_ai < 0 && lv_index >= auto175D18E7_ae) ) ; lv_index += auto175D18E7_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 4) && (gv_generalEndGameMode == true)) {
                    lv_upgradeCount += 1;
                }

            }
            lv_index = 151;
            for ( ; ( (auto94BC10A6_ai >= 0 && lv_index <= auto94BC10A6_ae) || (auto94BC10A6_ai < 0 && lv_index >= auto94BC10A6_ae) ) ; lv_index += auto94BC10A6_ai ) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][lv_index] == 4) && (gv_generalEndGameMode == true)) {
                    lv_upgradeCount += 1;
                }

            }
            gv_glyphVendorDialogItemIndex[lv_trigPlayer] = 1;
            lv_index = 1;
            for ( ; ( (auto0E697062_ai >= 0 && lv_index <= auto0E697062_ae) || (auto0E697062_ai < 0 && lv_index >= auto0E697062_ae) ) ; lv_index += auto0E697062_ai ) {
                gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(1, 2));
                autoA32ECE00_ae = (1 + lv_upgradeCount);
                lv_index2 = 1;
                for ( ; ( (autoA32ECE00_ai >= 0 && lv_index2 <= autoA32ECE00_ae) || (autoA32ECE00_ai < 0 && lv_index2 >= autoA32ECE00_ae) ) ; lv_index2 += autoA32ECE00_ai ) {
                    if ((RandomInt(1, 5) >= 3) && (gv_playerHeroHeroLevelExp[lv_trigPlayer][1] >= gv_generalLevelCap)) {
                        gv_itemVendorPlayerTier[lv_trigPlayer] += 1;
                    }

                }
                if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
                }

                if ((gv_itemVendorPlayerTier[lv_trigPlayer] < 13)) {
                    gv_itemVendorPlayerTier[lv_trigPlayer] = 13;
                }

                gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), gv_itemVendorPlayerTier[lv_trigPlayer], 6, (((275 + (lv_upgradeCount * 15)) + FixedToInt((gv_invasionFactorUpgradeCost * 3.6))) + (25 + (gv_invasionIndex * (3 + (gv_invasionIndex / 4))))));
            }
        }

    }
    lv_index = 0;
    for ( ; ( (auto655AFBBD_ai >= 0 && lv_index <= auto655AFBBD_ae) || (auto655AFBBD_ai < 0 && lv_index >= auto655AFBBD_ae) ) ; lv_index += auto655AFBBD_ai ) {
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[3][lv_index], PlayerGroupAll(), 3.0, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvasionTimerExpires_Init () {
    gt_InvasionTimerExpires = TriggerCreate("gt_InvasionTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Invasion - Kill Warriors
//--------------------------------------------------------------------------------------------------
bool gt_InvasionKillWarriors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        Wait(3.0, c_timeGame);
        if ((UnitIsAlive(EventUnit()) == true)) {
            UnitBehaviorAdd(EventUnit(), "KillInvasion", EventUnit(), 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvasionKillWarriors_Init () {
    gt_InvasionKillWarriors = TriggerCreate("gt_InvasionKillWarriors_Func");
    TriggerAddEventUnitRegion(gt_InvasionKillWarriors, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creeps - Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_CreepsUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_killingPlayer;
    int lv_killedPlayer;
    unit lv_killedUnit;
    unit lv_killingUnit;
    text lv_tempText;
    int lv_tempLvl;

    // Automatic Variable Declarations
    playergroup autoB5555A6F_g;
    int autoB5555A6F_var;
    const int auto39A262A2_ae = gv_questsQuestSlots;
    const int auto39A262A2_ai = 1;
    int auto78C48162_ae;
    const int auto78C48162_ai = 1;
    int auto8907D950_ae;
    const int auto8907D950_ai = 1;
    playergroup auto3B1643B0_g;
    int auto3B1643B0_var;
    playergroup autoADFA4B52_g;
    int autoADFA4B52_var;
    const int auto8B574D5F_ae = 2;
    const int auto8B574D5F_ai = 1;
    int auto72CC72BA_ae;
    const int auto72CC72BA_ai = 1;
    int auto638FDDC2_ae;
    const int auto638FDDC2_ai = 1;
    int autoFB574ABD_ae;
    const int autoFB574ABD_ai = 1;
    int auto3CDEEE0A_ae;
    const int auto3CDEEE0A_ai = 1;
    const int auto18B79F2A_ae = gv_questsQuestSlots;
    const int auto18B79F2A_ai = 1;
    playergroup autoC046F34B_g;
    int autoC046F34B_var;
    const int auto644F1977_ae = gv_questsQuestSlots;
    const int auto644F1977_ai = 1;
    playergroup autoA1EB0C5C_g;
    int autoA1EB0C5C_var;

    // Variable Initialization
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_killedPlayer = EventPlayer();
    lv_killedUnit = EventUnit();
    lv_killingUnit = libNtve_gf_KillingUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_killingPlayer >= 1) && ((lv_killingPlayer < 15) || (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeUser1) == true)) && (lv_killedPlayer == 15)) {
        if ((lv_killingPlayer <= gv_generalPlayerCap) && (lv_killingPlayer != 0)) {
            gf_CreepsCreepDiesBounty(lv_killingUnit, lv_killedUnit);
            if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == false)) {
                if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true)) {
                    gv_playerStatisticsAchievements[lv_killingPlayer][7][2] += 1;
                }
                else {
                    gv_playerStatisticsAchievements[lv_killingPlayer][4][2] += 1;
                }
                if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true)) {
                    if ((UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
                        if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true)) {
                            gv_playerStatisticsAchievements[lv_killingPlayer][8][2] += 1;
                        }
                        else {
                            gv_playerStatisticsAchievements[lv_killingPlayer][5][2] += 1;
                        }
                        if ((UnitHasBehavior2(lv_killedUnit, "LegendaryMod") == true)) {
                            if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true)) {
                                gv_playerStatisticsAchievements[lv_killingPlayer][9][2] += 1;
                            }
                            else {
                                gv_playerStatisticsAchievements[lv_killingPlayer][6][2] += 1;
                            }
                        }

                    }

                }

            }

            if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeMassive) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true)) {
                autoB5555A6F_g = gv_generalTeamsAll;
                autoB5555A6F_var = -1;
                while (true) {
                    autoB5555A6F_var = PlayerGroupNextPlayer(autoB5555A6F_g, autoB5555A6F_var);
                    if (autoB5555A6F_var < 0) { break; }
                    gv_playerStatisticsGeneral[autoB5555A6F_var][23] += 1;
                    lv_index = 1;
                    for ( ; ( (auto39A262A2_ai >= 0 && lv_index <= auto39A262A2_ae) || (auto39A262A2_ai < 0 && lv_index >= auto39A262A2_ae) ) ; lv_index += auto39A262A2_ai ) {
                        if ((gv_questsPlayerActiveQuests[autoB5555A6F_var][lv_index] == 125) && (gv_questsPlayerActiveProgress[autoB5555A6F_var][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[autoB5555A6F_var][lv_index]][(1 + 1)])) {
                            gv_questsPlayerActiveProgress[autoB5555A6F_var][lv_index][1] += 1;
                            gv_questsPlayerProgress[autoB5555A6F_var][125] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[125][2]][2], PlayerGroupSingle(autoB5555A6F_var), true);
                            SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(autoB5555A6F_var), 125.0, 0.0);
                            gf_GeneralQuestMessage(StringExternal("Param/Value/697D60E6"), PlayerGroupSingle(autoB5555A6F_var));
                        }

                    }
                    if ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(lv_killedUnit), 16.0), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        if ((UnitHasBehavior2(lv_killedUnit, "Hardcore") == false)) {
                            lv_tempLvl = (63 + (gv_playerStatisticsGeneral[autoB5555A6F_var][23] / 4));
                            lv_tempLvl += (gv_playerStatisticsGeneral[autoB5555A6F_var][25] / 9);
                            if ((lv_tempLvl > 77)) {
                                lv_tempLvl = 77;
                            }

                            if ((lv_tempLvl < 63)) {
                                lv_tempLvl = 63;
                            }

                        }
                        else {
                            gv_playerStatisticsGeneral[autoB5555A6F_var][27] += 200;
                            gv_playerCurrency[autoB5555A6F_var][4] += 200;
                            lv_tempLvl = (63 + (gv_playerStatisticsGeneral[autoB5555A6F_var][23] / 4));
                            lv_tempLvl += (gv_playerStatisticsGeneral[autoB5555A6F_var][25] / 9);
                            if ((lv_tempLvl > 87)) {
                                lv_tempLvl = 87;
                            }

                            if ((lv_tempLvl < 70)) {
                                lv_tempLvl = 70;
                            }

                            auto78C48162_ae = gv_raidsBossesIndex;
                            lv_index = 13;
                            for ( ; ( (auto78C48162_ai >= 0 && lv_index <= auto78C48162_ae) || (auto78C48162_ai < 0 && lv_index >= auto78C48162_ae) ) ; lv_index += auto78C48162_ai ) {
                                if ((UnitGetType(lv_killedUnit) == gv_raidsBosses[lv_index])) {
                                    lv_tempLvl += 16;
                                    gv_playerStatisticsGeneral[autoB5555A6F_var][27] += 500;
                                    gv_playerCurrency[autoB5555A6F_var][4] += 500;
                                    gv_playerStatisticsRaidBossCleared[autoB5555A6F_var][0] += 1;
                                }

                            }
                            if ((UnitGetType(lv_killedUnit) == "Netherdragon")) {
                                lv_tempLvl += 7;
                                gv_playerStatisticsGeneral[autoB5555A6F_var][27] += 1500;
                                gv_playerCurrency[autoB5555A6F_var][4] += 1500;
                            }

                        }
                        gf_SurvivalEnd(autoB5555A6F_var, lv_tempLvl, 4, 0);
                        if ((UnitGetType(lv_killedUnit) == "Netherdragon")) {
                            gf_CreepsGlornSecondLootScreen(autoB5555A6F_var, lv_tempLvl);
                            gf_RaidCreepSpawnSetup(-2);
                        }

                        gv_playerStatisticsGeneral[autoB5555A6F_var][27] += 200;
                        gv_playerCurrency[autoB5555A6F_var][4] += 200;
                        if ((gv_dungeonsDungeonStatistics[autoB5555A6F_var][3][20] == 0) && (gv_playerStatisticsAchievements[autoB5555A6F_var][36][1] == 5)) {
                            gv_playerStatisticsAchievements[autoB5555A6F_var][36][2] += 1;
                        }

                        auto8907D950_ae = gv_raidsBossesIndex;
                        lv_index = 1;
                        for ( ; ( (auto8907D950_ai >= 0 && lv_index <= auto8907D950_ae) || (auto8907D950_ai < 0 && lv_index >= auto8907D950_ae) ) ; lv_index += auto8907D950_ai ) {
                            if ((UnitGetType(lv_killedUnit) == gv_raidsBosses[lv_index]) && (gv_playerStatisticsRaidBossCleared[autoB5555A6F_var][lv_index] == 0)) {
                                gv_playerStatisticsRaidBossCleared[autoB5555A6F_var][lv_index] = 1;
                                gv_playerStatisticsAchievements[autoB5555A6F_var][20][2] += 1;
                                gv_playerStatisticsRaidBossCleared[autoB5555A6F_var][30] += 1;
                            }

                        }
                    }

                }
                if ((UnitGroupCount(UnitGroup(null, 15, RegionCircle(UnitGetPosition(lv_killedUnit), 16.0), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGetCustomValue(lv_killedUnit, 20) != 10.0)) {
                    gf_DungeonDialogEnd(20);
                }

            }

            if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeHover) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true) && (UnitHasBehavior2(lv_killedUnit, "RaidBoss") == true) && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
                auto3B1643B0_g = gv_generalTeamsAll;
                auto3B1643B0_var = -1;
                while (true) {
                    auto3B1643B0_var = PlayerGroupNextPlayer(auto3B1643B0_g, auto3B1643B0_var);
                    if (auto3B1643B0_var < 0) { break; }
                    if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[auto3B1643B0_var], RegionCircle(UnitGetPosition(lv_killedUnit), 15.0)) == true)) {
                        lv_tempLvl = (FixedToInt(UnitGetCustomValue(lv_killedUnit, 0)) - 4);
                        if ((lv_tempLvl > 94)) {
                            lv_tempLvl += 8;
                        }
                        else {
                            if ((lv_tempLvl > 91)) {
                                lv_tempLvl += 6;
                            }
                            else {
                                if ((lv_tempLvl > 86)) {
                                    lv_tempLvl += 4;
                                }
                                else {
                                    if ((lv_tempLvl > 80)) {
                                        lv_tempLvl += 2;
                                    }

                                }
                            }
                        }
                        if ((lv_tempLvl < 54)) {
                            lv_tempLvl = 54;
                        }

                        gf_SurvivalEnd(auto3B1643B0_var, lv_tempLvl, 5, 0);
                        gv_playerStatisticsGeneral[auto3B1643B0_var][27] += 75;
                        gv_playerCurrency[auto3B1643B0_var][4] += 75;
                        gv_playerStatisticsGeneral[lv_killingPlayer][22] += 1;
                    }

                }
            }

            if ((gv_generalEndGameMode == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeHover) == true) && (UnitHasBehavior2(lv_killedUnit, "Heroic2") == true)) {
                autoADFA4B52_g = gv_generalTeamsAll;
                autoADFA4B52_var = -1;
                while (true) {
                    autoADFA4B52_var = PlayerGroupNextPlayer(autoADFA4B52_g, autoADFA4B52_var);
                    if (autoADFA4B52_var < 0) { break; }
                    if ((libNtve_gf_UnitInRegion(gv_playerHeroHero[autoADFA4B52_var], RegionCircle(UnitGetPosition(lv_killedUnit), 10.0)) == true) && ((UnitGetType(lv_killedUnit) == gv_beastMasterQuestUnits[gv_beastMasterQuestPlayerIndex[autoADFA4B52_var]][1]) || (UnitGetType(lv_killedUnit) == gv_beastMasterQuestUnits[gv_beastMasterQuestPlayerIndex[autoADFA4B52_var]][2]))) {
                        lv_index = 1;
                        for ( ; ( (auto8B574D5F_ai >= 0 && lv_index <= auto8B574D5F_ae) || (auto8B574D5F_ai < 0 && lv_index >= auto8B574D5F_ae) ) ; lv_index += auto8B574D5F_ai ) {
                            if ((UnitGetType(lv_killedUnit) == gv_beastMasterQuestUnits[gv_beastMasterQuestPlayerIndex[autoADFA4B52_var]][lv_index]) && (gv_beastMasterQuestPlayerProgress[autoADFA4B52_var][lv_index] == 0)) {
                                gv_beastMasterQuestPlayerProgress[autoADFA4B52_var][lv_index] = 1;
                                SoundPlayForPlayer(SoundLink("QuestLogModified", -1), c_maxPlayers, PlayerGroupSingle(autoADFA4B52_var), 125.0, 0.0);
                                if ((gv_beastMasterQuestPlayerProgress[autoADFA4B52_var][1] == 1) && (gv_beastMasterQuestPlayerProgress[autoADFA4B52_var][2] == 1)) {
                                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(autoADFA4B52_var), 125.0, 0.0);
                                    gf_BeastMasterUpdate(autoADFA4B52_var, 2);
                                }

                            }

                        }
                    }

                }
            }

            if ((gv_generalEndGameMode == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeHover) == true) && (libNtve_gf_UnitInRegion(lv_killedUnit, RegionFromId(145)) == true) && (libNtve_gf_UnitInRegion(lv_killingUnit, RegionFromId(145)) == true)) {
                auto72CC72BA_ae = gv_beastMasterCreepIndex;
                lv_index = 1;
                for ( ; ( (auto72CC72BA_ai >= 0 && lv_index <= auto72CC72BA_ae) || (auto72CC72BA_ai < 0 && lv_index >= auto72CC72BA_ae) ) ; lv_index += auto72CC72BA_ai ) {
                    if ((UnitGetType(lv_killedUnit) == gv_beastMasterCreepType[lv_index])) {
                        gv_beastMasterPlayerCreepLevels[lv_killingPlayer][lv_index][1] = 0;
                        gv_beastMasterPlayerCreepLevels[lv_killingPlayer][lv_index][2] = 0;
                        gv_playerStatisticsGeneral[lv_killingPlayer][22] += 1;
                        gv_playerStatisticsGeneral[lv_killingPlayer][27] += 25;
                        gv_playerCurrency[lv_killingPlayer][4] += 25;
                        auto638FDDC2_ae = gv_beastMasterCreepIndex;
                        lv_index2 = 1;
                        for ( ; ( (auto638FDDC2_ai >= 0 && lv_index2 <= auto638FDDC2_ae) || (auto638FDDC2_ai < 0 && lv_index2 >= auto638FDDC2_ae) ) ; lv_index2 += auto638FDDC2_ai ) {
                            if ((UnitGetType(lv_killedUnit) == gv_beastMasterCreepType[lv_index2]) && (gv_playerStatisticsBeastmasterCleared[lv_killingPlayer][lv_index2] == 0)) {
                                gv_playerStatisticsBeastmasterCleared[lv_killingPlayer][lv_index2] = 1;
                                gv_playerStatisticsAchievements[lv_killingPlayer][19][2] += 1;
                                gv_playerStatisticsBeastmasterCleared[lv_killingPlayer][30] += 1;
                            }

                        }
                        break;
                    }

                }
            }

        }

        if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeHover) == true) && (UnitHasBehavior2(lv_killedUnit, "Escort") == false) && (libNtve_gf_UnitInRegion(lv_killedUnit, RegionFromId(209)) == false)) {
            gf_CreepsCreepSpawn(UnitGetType(lv_killedUnit), 1, FixedToInt(UnitGetCustomValue(lv_killedUnit, 12)), UnitGetCustomValue(lv_killedUnit, 10), UnitGetCustomValue(lv_killedUnit, 11));
        }

        if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == true)) {
            gv_playerStatisticsAchievements[lv_killingPlayer][31][2] += 1;
        }

        autoFB574ABD_ae = gv_regionsDungeonsIndex;
        lv_index = 0;
        for ( ; ( (autoFB574ABD_ai >= 0 && lv_index <= autoFB574ABD_ae) || (autoFB574ABD_ai < 0 && lv_index >= autoFB574ABD_ae) ) ; lv_index += autoFB574ABD_ai ) {
            if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_killingPlayer) == true) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_killingPlayer], gv_regionsDungeonsRegion[lv_index][1]) == true)) {
                gv_dungeonsDungeonStatistics[lv_killingPlayer][2][lv_index] += 1;
            }

        }
        auto3CDEEE0A_ae = gv_regionsDungeonsIndex;
        lv_index = 1;
        for ( ; ( (auto3CDEEE0A_ai >= 0 && lv_index <= auto3CDEEE0A_ae) || (auto3CDEEE0A_ai < 0 && lv_index >= auto3CDEEE0A_ae) ) ; lv_index += auto3CDEEE0A_ai ) {
            if ((lv_killingPlayer < 15) && (libNtve_gf_UnitInRegion(lv_killedUnit, gv_regionsDungeonsRegion[lv_index][1]) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == false) && (UnitHasBehavior2(lv_killedUnit, "Escort") == false) && (UnitGroupCount(UnitGroup(null, 15, gv_regionsDungeonsRegion[lv_index][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) == 0)) {
                gf_CreepsDungeonCleared(lv_killingUnit, lv_killedUnit, lv_index);
            }

        }
        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_killingPlayer) == true) && (((gv_questsPlayerProgress[lv_killingPlayer][63] == 2) && (UnitGetCustomValue(lv_killedUnit, 0) > gv_playerHeroHeroLevelExp[lv_killingPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == false)) || ((gv_questsPlayerProgress[lv_killingPlayer][119] == 2) && (UnitGetCustomValue(lv_killedUnit, 0) > gv_playerHeroHeroLevelExp[lv_killingPlayer][1]) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == true)))) {
            lv_index = 1;
            for ( ; ( (auto18B79F2A_ai >= 0 && lv_index <= auto18B79F2A_ae) || (auto18B79F2A_ai < 0 && lv_index >= auto18B79F2A_ae) ) ; lv_index += auto18B79F2A_ai ) {
                if (((gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index] == 63) || (gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index] == 119)) && (gv_questsPlayerActiveProgress[lv_killingPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index]][(1 + 1)])) {
                    gv_questsPlayerActiveProgress[lv_killingPlayer][lv_index][1] += 1;
                    lv_tempText = (gv_questsQuestTypeText[gv_questsQuestType[gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index]][1]] + UnitTypeGetName(gv_questsQuestUnitType[gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index]][1]) + StringExternal("Param/Value/9F3F1CB8") + IntToText(gv_questsPlayerActiveProgress[lv_killingPlayer][lv_index][1]) + StringExternal("Param/Value/F3EB8CD0") + IntToText(gv_questsQuestType[gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index]][(1 + 1)]));
                    gf_GeneralQuestMessage(lv_tempText, PlayerGroupSingle(lv_killingPlayer));
                    if ((gv_questsPlayerActiveProgress[lv_killingPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index]][(1 + 1)])) {
                        if ((gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index] == 63)) {
                            gv_questsPlayerProgress[lv_killingPlayer][63] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[63][2]][2], PlayerGroupSingle(lv_killingPlayer), true);
                            gv_playerHeroHeroGuild[lv_killingPlayer][2] = 3;
                        }

                        if ((gv_questsPlayerActiveQuests[lv_killingPlayer][lv_index] == 119)) {
                            gv_questsPlayerProgress[lv_killingPlayer][119] = 3;
                            TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[119][2]][2], PlayerGroupSingle(lv_killingPlayer), true);
                            gv_playerHeroHeroGuild[lv_killingPlayer][2] = 5;
                        }

                        SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_killingPlayer), 125.0, 0.0);
                        gf_GeneralQuestMessage(StringExternal("Param/Value/9792234B"), PlayerGroupSingle(lv_killingPlayer));
                        gf_BankSaveBank(lv_killingPlayer, gv_banksSlotSelected[lv_killingPlayer], 0);
                    }

                }

            }
        }

    }

    if ((lv_killedUnit == UnitFromId(779392242))) {
        TriggerDestroy(gt_CreepsUnitDies);
        TriggerDestroy(gt_GeneralDialogUsed);
        TriggerDestroy(gt_GeneralUnitTakesDamage);
        TriggerDestroy(gt_RegionsUnitEntersGeneralRegion);
        TriggerDestroy(gt_HeroHeroDies);
        TriggerDestroy(gt_RegionsTimersExpire);
        TriggerDestroy(gt_InvasionTimerExpires);
        TriggerDestroy(gt_QuestsTalkToUnit);
        TriggerQueueClear(c_triggerQueueRetain);
        libHots_gf_PlaySoundLinkasMusic(SoundLink("War3Music_PH1", -1), true, true);
        UISetMiniMapBounds(PlayerGroupAll(), RegionFromId(5));
        autoC046F34B_g = gv_generalTeamsAll;
        autoC046F34B_var = -1;
        while (true) {
            autoC046F34B_var = PlayerGroupNextPlayer(autoC046F34B_g, autoC046F34B_var);
            if (autoC046F34B_var < 0) { break; }
            lv_index = 1;
            for ( ; ( (auto644F1977_ai >= 0 && lv_index <= auto644F1977_ae) || (auto644F1977_ai < 0 && lv_index >= auto644F1977_ae) ) ; lv_index += auto644F1977_ai ) {
                if ((gv_questsPlayerProgress[autoC046F34B_var][gv_questsPlayerActiveQuests[autoC046F34B_var][lv_index]] < 3) && (gv_questsQuestType[gv_questsPlayerActiveQuests[autoC046F34B_var][lv_index]][1] == 4)) {
                    gv_questsPlayerProgress[autoC046F34B_var][gv_questsPlayerActiveQuests[autoC046F34B_var][lv_index]] = 1;
                    gv_questsPlayerActiveQuests[autoC046F34B_var][lv_index] = 0;
                    gv_questsPlayerActiveProgress[autoC046F34B_var][lv_index][1] = 0;
                    gv_questsPlayerActiveProgress[autoC046F34B_var][lv_index][2] = 0;
                    libNtve_gf_SetDialogItemImage(gv_questsLogDialogButtons[lv_index][2], "Assets\\Textures\\background_terran_0000_01.dds", PlayerGroupSingle(autoC046F34B_var));
                    DialogControlSetEnabled(gv_questsLogDialogButtons[lv_index][1], PlayerGroupSingle(autoC046F34B_var), false);
                }

            }
            gv_playerCurrency[autoC046F34B_var][3] += 5;
            gv_playerStatisticsGeneral[autoC046F34B_var][6] += 5;
            gv_playerStatisticsAchievements[autoC046F34B_var][34][2] += 1;
            UnitRemove(gv_playerHeroHero[autoC046F34B_var]);
            libNtve_gf_SetDialogItemText(gv_currencyDialogPointsItems[3], IntToText(gv_playerCurrency[autoC046F34B_var][3]), PlayerGroupSingle(autoC046F34B_var));
            CameraPan(autoC046F34B_var, RegionGetCenter(RegionFromId(5)), 2.0, -1, 10.0, false);
            gf_BankSaveBank(autoC046F34B_var, gv_banksSlotSelected[autoC046F34B_var], 0);
        }
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_endDialogItem, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(gv_endDialogBox, PlayerGroupAll(), true);
        DialogControlFadeTransparency(gv_endDialogItem, PlayerGroupAll(), 1.0, 0.0);
        libNtve_gf_SetDialogItemTextWriteout(gv_endDialogItem, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemTextWriteoutDuration(gv_endDialogItem, 7.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_endDialogItem, StringExternal("Param/Value/738472FB"), PlayerGroupAll());
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_SetDialogItemModel(gv_screenEffectsDialogItem[1][3], "DOM_Fire_Large", PlayerGroupAll());
        PortraitWaitForLoad(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]));
        PortraitSetRenderType(PortraitGetTriggerControl(gv_screenEffectsDialogItem[1][3]), c_portraitRenderTypeLDR);
        ActorSend(ActorFromDialogControl(gv_screenEffectsDialogItem[1][3]), "SetScale 0.300000 0.100000");
        DialogControlSetVisible(gv_screenEffectsDialogItem[1][3], PlayerGroupAll(), true);
        DialogControlFadeTransparency(gv_screenEffectsDialogItem[1][3], PlayerGroupAll(), 1.0, 80.0);
        DialogSetVisible(gv_currencyDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_helpDialogDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_eXPDialogDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_heroLoadDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_heroSelectionDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_heroStatsDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_heroVendorDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_invasionDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_inventoryDialogDestroyBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_inventoryDialogStashBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_itemVendorDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_mainDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_partyDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_questsDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_questsLogDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_raritiesVendorDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_statisticsDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_tutorialSkipDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_arenaDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_beastMasterDialogMonsterBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_dungeonCheckDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_dungeonEndDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_dungeonEnterDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_dungeonLeaveDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_heroTreeDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_itemHonorDialogBox, PlayerGroupAll(), false);
        DialogSetVisible(gv_mapDialogBox, PlayerGroupAll(), false);
        Wait(20.0, c_timeGame);
        autoA1EB0C5C_g = gv_generalTeamsAll;
        autoA1EB0C5C_var = -1;
        while (true) {
            autoA1EB0C5C_var = PlayerGroupNextPlayer(autoA1EB0C5C_g, autoA1EB0C5C_var);
            if (autoA1EB0C5C_var < 0) { break; }
            GameOver(autoA1EB0C5C_var, c_gameOverDefeat, false, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepsUnitDies_Init () {
    gt_CreepsUnitDies = TriggerCreate("gt_CreepsUnitDies_Func");
    TriggerAddEventUnitDied(gt_CreepsUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Hero Dies
//--------------------------------------------------------------------------------------------------
bool gt_HeroHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    bool lv_raid;

    // Automatic Variable Declarations
    int autoF41FFF1E_ae;
    const int autoF41FFF1E_ai = 1;
    const int auto12C7FFC3_ae = gv_questsQuestSlots;
    const int auto12C7FFC3_ai = 1;

    // Variable Initialization
    lv_raid = true;

    // Conditions
    if (testConds) {
        if (!((gv_generalTutorialMode == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = UnitGetOwner(EventUnit());
    if ((EventUnit() == gv_playerHeroHero[lv_trigPlayer])) {
        autoF41FFF1E_ae = gv_regionsDungeonsIndex;
        lv_index = 0;
        for ( ; ( (autoF41FFF1E_ai >= 0 && lv_index <= autoF41FFF1E_ae) || (autoF41FFF1E_ai < 0 && lv_index >= autoF41FFF1E_ae) ) ; lv_index += autoF41FFF1E_ai ) {
            if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true) && (libNtve_gf_UnitInRegion(gv_playerHeroHero[lv_trigPlayer], gv_regionsDungeonsRegion[lv_index][1]) == true)) {
                gv_dungeonsDungeonStatistics[lv_trigPlayer][3][lv_index] += 1;
                lv_raid = false;
            }

        }
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[20], lv_trigPlayer) == true) && (lv_raid == true)) {
            gv_dungeonsDungeonStatistics[lv_trigPlayer][3][20] += 1;
        }

        gf_HeroRevive(lv_trigPlayer);
        gv_playerStatisticsGeneral[lv_trigPlayer][15] += 1;
        gv_playerStatisticsAchievements[lv_trigPlayer][13][2] += 1;
        libNtve_gf_SetUpgradeLevelForPlayer(lv_trigPlayer, "RespawnTimer", (TechTreeUpgradeCount(lv_trigPlayer, "RespawnTimer", c_techCountCompleteOnly) + 1));
        lv_index = 1;
        for ( ; ( (auto12C7FFC3_ai >= 0 && lv_index <= auto12C7FFC3_ae) || (auto12C7FFC3_ai < 0 && lv_index >= auto12C7FFC3_ae) ) ; lv_index += auto12C7FFC3_ai ) {
            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 121)) {
                UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "BrokenShield", 1);
            }

            if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)]) && ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 61) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 62) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 63) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 120) || (gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 121))) {
                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] = 0;
                SoundPlayForPlayer(SoundLink("QuestFailed", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 140.0, 0.0);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroHeroDies_Init () {
    gt_HeroHeroDies = TriggerCreate("gt_HeroHeroDies_Func");
    TriggerAddEventUnitBehaviorChange(gt_HeroHeroDies, null, "Respawn4", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regions - Unit Enters Vendor Region
//--------------------------------------------------------------------------------------------------
bool gt_RegionsUnitEntersVendorRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_tempInt;
    bool lv_passFail;

    // Automatic Variable Declarations
    region autoE1B6E692_val;
    const int auto61163D0F_ae = 3;
    const int auto61163D0F_ai = 1;
    const int autoC822608E_ae = gv_generalPlayerCap;
    const int autoC822608E_ai = 1;
    const int auto79B3192F_ae = 5;
    const int auto79B3192F_ai = 1;
    region autoA70872F5_val;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();
    lv_tempInt = 4;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_trigPlayer) == true))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] == EventUnit()))) {
            return false;
        }

        if (!((gv_generalTutorialMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_playerCombatTimer[lv_trigPlayer]) <= 5.0)) {
        if (((gv_invasionRisk <= 1) || (libNtve_gf_UnitGroupIsDead(gv_invasionBadUnitGroup) == true))) {
            autoE1B6E692_val = EventUnitRegion();
            if (autoE1B6E692_val == RegionFromId(19)) {
                DialogSetVisible(gv_itemVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
                lv_passFail = true;
            }
            else if (autoE1B6E692_val == RegionFromId(15)) {
                DialogSetVisible(gv_itemHonorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
                lv_passFail = true;
            }
            else if (autoE1B6E692_val == RegionFromId(17)) {
                DialogSetVisible(gv_inventoryDialogStashBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
                DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
                lv_passFail = true;
            }
            else if (autoE1B6E692_val == RegionFromId(14)) {
                DialogSetVisible(gv_heroVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                lv_passFail = true;
            }
            else if (autoE1B6E692_val == RegionFromId(18)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][65] == 4)) {
                    DialogSetVisible(gv_potionVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }

            }
            else if (autoE1B6E692_val == RegionFromId(52)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][124] == 4)) {
                    if ((gv_generalEndGameMode == true)) {
                        gf_BeastMasterUpdate(lv_trigPlayer, 0);
                        lv_passFail = true;
                    }
                    else {
                        gf_GeneralErrorMessage(StringExternal("Param/Value/333F06CA"), PlayerGroupSingle(lv_trigPlayer));
                    }
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/DEDE63AB"), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            else if (autoE1B6E692_val == RegionFromId(53)) {
                if ((gv_arenaActiveStatus == 0)) {
                    gv_arenaActiveStatus = 1;
                    gv_arenaHost = lv_trigPlayer;
                    PlayerGroupAdd(gv_arenaTeams[1], lv_trigPlayer);
                    PlayerGroupAdd(gv_arenaTeams[3], lv_trigPlayer);
                    lv_index = 1;
                    for ( ; ( (auto61163D0F_ai >= 0 && lv_index <= auto61163D0F_ae) || (auto61163D0F_ai < 0 && lv_index >= auto61163D0F_ae) ) ; lv_index += auto61163D0F_ai ) {
                        DialogControlSetEnabled(gv_arenaDialogMainItems[4][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
                        DialogControlSetEnabled(gv_arenaDialogMainItems[2][lv_index], PlayerGroupSingle(lv_trigPlayer), false);
                    }
                    lv_index2 = 1;
                    for ( ; ( (autoC822608E_ai >= 0 && lv_index2 <= autoC822608E_ae) || (autoC822608E_ai < 0 && lv_index2 >= autoC822608E_ae) ) ; lv_index2 += autoC822608E_ai ) {
                        DialogControlSetEnabled(gv_arenaDialogPartyItems[lv_index2][1], PlayerGroupAll(), false);
                        libNtve_gf_SetDialogItemText(gv_arenaDialogPartyItems[lv_index2][2], StringToText(""), PlayerGroupAll());
                        if ((PlayerGroupHasPlayer(gv_generalTeamsAll, lv_index2) == true)) {
                            libNtve_gf_SetDialogItemText(gv_arenaDialogPartyItems[lv_index2][2], TextWithColor(PlayerName(lv_index2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index2, false))), PlayerGroupAll());
                            DialogControlSetEnabled(gv_arenaDialogPartyItems[lv_index2][1], PlayerGroupSingle(lv_trigPlayer), true);
                        }

                    }
                    DialogControlSetVisible(gv_arenaDialogPartyItems[lv_trigPlayer][3], PlayerGroupAll(), true);
                    DialogSetVisible(gv_arenaDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/3B810C1A"), PlayerGroupSingle(lv_trigPlayer));
                    return true;
                }
            }
            else if (autoE1B6E692_val == RegionFromId(16)) {
                if ((gv_invasionCurrentUpgradeCost > 0)) {
                    lv_tempInt += (gv_invasionBadUnitUpgradeCount - gv_invasionGoodUnitUpgradeCount);
                    lv_tempInt += FloorI((gv_invasionIndex / 4));
                    lv_index = 1;
                    for ( ; ( (auto79B3192F_ai >= 0 && lv_index <= auto79B3192F_ae) || (auto79B3192F_ai < 0 && lv_index >= auto79B3192F_ae) ) ; lv_index += auto79B3192F_ai ) {
                        if (((gv_invasionIndex * 1) >= (lv_index * 6))) {
                            lv_tempInt += 1;
                        }

                    }
                    if ((gv_generalEndGameMode == true)) {
                        lv_tempInt += 2;
                    }

                    if ((lv_tempInt < 1)) {
                        gv_invasionRisk = 1;
                    }
                    else {
                        if ((lv_tempInt > 6)) {
                            gv_invasionRisk = 6;
                        }
                        else {
                            gv_invasionRisk = lv_tempInt;
                        }
                    }
                    libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/D057C79C") + IntToText(gv_invasionCurrentUpgradeCost)), PlayerGroupSingle(lv_trigPlayer));
                    libNtve_gf_SetDialogItemText(gv_invasionDialogItems[2], gv_invasionRiskLevels[gv_invasionRisk], PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_invasionDialogItems[3], gv_invasionRiskAssessment[gv_invasionRisk], PlayerGroupAll());
                    DialogSetVisible(gv_invasionDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    if ((gv_questsPlayerProgress[lv_trigPlayer][9] == 2)) {
                        libNtve_gf_SetDialogItemText(gv_invasionDialogItems[1], (StringExternal("Param/Value/F8078D58") + IntToText(1250)), PlayerGroupSingle(lv_trigPlayer));
                    }

                    lv_passFail = true;
                }
                else {
                    return true;
                }
            }
            else {
            }
        }

        if ((lv_passFail == false)) {
            autoA70872F5_val = EventUnitRegion();
            if (autoA70872F5_val == RegionFromId(51)) {
                DialogSetVisible(gv_dungeonEnterDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                gv_dungeonsDungeonSelected[lv_trigPlayer] = 0;
                gf_DungeonDialogUpdate(lv_trigPlayer, lv_index);
                lv_passFail = true;
            }
            else if (autoA70872F5_val == RegionFromId(101)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][76] == 4)) {
                    DialogSetVisible(gv_raritiesVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }

            }
            else if (autoA70872F5_val == RegionFromId(183)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][124] == 4)) {
                    DialogSetVisible(gv_glyphVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    DialogSetVisible(gv_inventoryDialogPackBox, PlayerGroupSingle(lv_trigPlayer), true);
                    DialogSetVisible(gv_inventoryDialogEquippedBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }

            }
            else if (autoA70872F5_val == RegionFromId(202)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][124] == 4) && (gv_generalEndGameMode == true)) {
                    DialogSetVisible(gv_legendaryDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[1][0], (StringExternal("Param/Value/26432086") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_legendaryDungeonTimer[1])))), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_legendaryDialogStats[2][0], (StringExternal("Param/Value/311487AD") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_legendaryDungeonTimer[2])))), PlayerGroupAll());
                    lv_passFail = true;
                }
                else {
                    gf_GeneralErrorMessage(StringExternal("Param/Value/105BD47C"), PlayerGroupSingle(lv_trigPlayer));
                }
            }
            else if (autoA70872F5_val == RegionFromId(184)) {
                if ((gv_questsPlayerProgress[lv_trigPlayer][124] == 4)) {
                    libNtve_gf_SetDialogItemText(gv_hatsDialogMainButtons[0], (StringExternal("Param/Value/319B27A8") + IntToText(gv_playerCurrency[lv_trigPlayer][4])), PlayerGroupSingle(lv_trigPlayer));
                    DialogSetVisible(gv_hatsDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }

            }
            else if (autoA70872F5_val == RegionFromId(147)) {
                if (true) {
                    DialogSetVisible(gv_beastMasterDialogExitBox, PlayerGroupSingle(lv_trigPlayer), true);
                    lv_passFail = true;
                }

            }
            else {
            }
        }

        if ((lv_passFail == true)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Talking", gv_playerHeroHero[lv_trigPlayer], 1);
            UnitClearSelection(lv_trigPlayer);
            UnitSelect(gv_playerHeroHero[lv_trigPlayer], lv_trigPlayer, true);
            CameraPan(lv_trigPlayer, UnitGetPosition(gv_playerHeroHero[lv_trigPlayer]), 0.5, -1, 10.0, true);
        }

    }
    else {
        gf_GeneralErrorMessage(StringExternal("Param/Value/C7437C1E"), PlayerGroupSingle(lv_trigPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegionsUnitEntersVendorRegion_Init () {
    gt_RegionsUnitEntersVendorRegion = TriggerCreate("gt_RegionsUnitEntersVendorRegion_Func");
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(101), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(183), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(184), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(202), true);
    TriggerAddEventUnitRegion(gt_RegionsUnitEntersVendorRegion, null, RegionFromId(147), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Pets
//--------------------------------------------------------------------------------------------------
bool gt_GeneralPets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Giantseaturtle") || (UnitGetType(EventUnit()) == "Whitewolf") || (UnitGetType(EventUnit()) == "Polarbear") || (UnitGetType(EventUnit()) == "Berserkowlbear") || (UnitGetType(EventUnit()) == "Wendigoshaman")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TCUI_SetCommandBarPetUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralPets_Init () {
    gt_GeneralPets = TriggerCreate("gt_GeneralPets_Func");
    TriggerAddEventUnitSelected(gt_GeneralPets, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Dialog Used
//--------------------------------------------------------------------------------------------------
bool gt_GeneralDialogUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_dialogUsed;
    int lv_dialogItemUsed;
    int lv_index;

    // Automatic Variable Declarations
    int autoB22830AA_val;
    const int autoED5641DF_ae = 12;
    const int autoED5641DF_ai = 1;
    int autoDC598BCC_val;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();
    lv_dialogUsed = DialogControlGetDialog(EventDialogControl());
    lv_dialogItemUsed = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((gv_playerDialogUsed[lv_trigPlayer] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerDialogUsed[lv_trigPlayer] = true;
    autoB22830AA_val = lv_dialogUsed;
    if (autoB22830AA_val == gv_heroSelectionDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroSelection(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_achievementsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroAchievements(lv_trigPlayer, lv_dialogItemUsed, 1);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_hatsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHatsVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_hatsDialogHeroBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHatsHeroes(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroLoadDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroLoading(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroDestroyDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroLoading(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroStatsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroStats(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
            gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
        }

    }
    else if (autoB22830AA_val == gv_statisticsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroStatistics(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_mainDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedMainButtons(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_tutorialDialog2Box) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_TutorialTutorialStages(PlayerGroupSingle(lv_trigPlayer), 0);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_inventoryDialogPackBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemPack(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_lootFilterDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemFilter(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_inventoryDialogEquippedBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemPack(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_inventoryDialogDestroyBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemDestroy(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_inventoryDialogStashBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedBankVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_glyphVendorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedGlyphVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroVendorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_legendaryDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedLegendaryVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroVendorDestroyDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_itemVendorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_raritiesVendorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedRaritiesVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_invasionDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedInvasionVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_beastMasterDialogMonsterBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedBeastMaster(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_beastMasterDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedBeastMaster(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_beastMasterDialogReleaseBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedBeastMaster(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_beastMasterDialogExitBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedBeastMaster(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_questsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedTalkQuest(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_questsLogDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedQuestLog(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_partyDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedParty(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_partyStartDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedParty(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            if ((lv_dialogItemUsed != gv_partyStartDialogMainButtons[1][1])) {
                DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
            }

        }

    }
    else if (autoB22830AA_val == gv_screenEffectsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedScreenEffects(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_eXPDialogDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedEXPBar(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_teleporterDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedTeleportSelection(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_dungeonEnterDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedDungeonSetup(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_dungeonCheckDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedDungeonSetup(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_dungeonLeaveDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedDungeonSetup(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_dungeonEndDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedDungeonSetup(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_helpDialogDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHelp(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_itemHonorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHonorVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_itemSurvivalDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedItemsReward(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_potionVendorDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedPotionVendor(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_guildDialogDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedFaction(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_guildConfirmDialogDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedFaction(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_mapDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedMapNews(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_newsDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedMapNews(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_modeDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedMapNews(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_tutorialSkipDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedTutorial(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_arenaDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedArena(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else if (autoB22830AA_val == gv_heroTreeDialogBox) {
        if (true) {
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), false);
            gf_DialogUsedHeroTree(lv_trigPlayer, lv_dialogItemUsed);
            Wait(0.0, c_timeGame);
            DialogControlSetEnabled(lv_dialogItemUsed, PlayerGroupSingle(lv_trigPlayer), true);
        }

    }
    else {
    }
    lv_index = 1;
    for ( ; ( (autoED5641DF_ai >= 0 && lv_index <= autoED5641DF_ae) || (autoED5641DF_ai < 0 && lv_index >= autoED5641DF_ae) ) ; lv_index += autoED5641DF_ai ) {
        autoDC598BCC_val = lv_dialogUsed;
        if (autoDC598BCC_val == gv_inventoryDialogDropBox[lv_index]) {
            gf_DialogUsedItemDrops(lv_trigPlayer, lv_index, lv_dialogItemUsed);
        }
        else {
        }
    }
    Wait(0.0, c_timeGame);
    if ((gv_playerDialogUsed[lv_trigPlayer] == true)) {
        gv_playerDialogUsed[lv_trigPlayer] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralDialogUsed_Init () {
    gt_GeneralDialogUsed = TriggerCreate("gt_GeneralDialogUsed_Func");
    TriggerAddEventDialogControl(gt_GeneralDialogUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Command Limit
//--------------------------------------------------------------------------------------------------
bool gt_GeneralCommandLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_cost;

    // Automatic Variable Declarations
    const int autoE8C7DE21_ae = gv_questsQuestSlots;
    const int autoE8C7DE21_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((UnitOrderCount(EventUnit()) >= 4) || (gv_questsPlayerProgress[lv_trigPlayer][60] == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitOrderCount(EventUnit()) >= 4)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    if ((gv_questsPlayerProgress[lv_trigPlayer][60] == 2)) {
        lv_index = 1;
        for ( ; ( (autoE8C7DE21_ai >= 0 && lv_index <= autoE8C7DE21_ae) || (autoE8C7DE21_ai < 0 && lv_index >= autoE8C7DE21_ae) ) ; lv_index += autoE8C7DE21_ai ) {
            if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 60) && (gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] < gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                lv_cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())), "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lv_trigPlayer);
                gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] += lv_cost;
                if ((gv_questsPlayerActiveProgress[lv_trigPlayer][lv_index][1] >= gv_questsQuestType[gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index]][(1 + 1)])) {
                    if ((gv_questsPlayerActiveQuests[lv_trigPlayer][lv_index] == 60)) {
                        gv_questsPlayerProgress[lv_trigPlayer][60] = 3;
                        TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[60][2]][2], PlayerGroupSingle(lv_trigPlayer), true);
                        gv_playerHeroHeroGuild[lv_trigPlayer][2] = 2;
                    }

                    SoundPlayForPlayer(SoundLink("QuestCompleted", -1), c_maxPlayers, PlayerGroupSingle(lv_trigPlayer), 125.0, 0.0);
                    gf_BankSaveBank(lv_trigPlayer, gv_banksSlotSelected[lv_trigPlayer], 0);
                }

            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralCommandLimit_Init () {
    gt_GeneralCommandLimit = TriggerCreate("gt_GeneralCommandLimit_Func");
    TriggerAddEventUnitOrder(gt_GeneralCommandLimit, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Potion Count
//--------------------------------------------------------------------------------------------------
bool gt_GeneralPotionCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;
    int lv_index2;
    int lv_cost;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_generalTeamsAll, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerStatisticsAchievements[lv_trigPlayer][33][2] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralPotionCount_Init () {
    gt_GeneralPotionCount = TriggerCreate("gt_GeneralPotionCount_Func");
    TriggerAddEventUnitAbility(gt_GeneralPotionCount, null, AbilityCommand("Potion", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Unit Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_GeneralUnitTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDealt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageDealt = EventUnitDamageAmount();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_GeneralUnitTakesDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageSourcePlayer(), lv_damageDealt, EventUnitDamageAbsorbed());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralUnitTakesDamage_Init () {
    gt_GeneralUnitTakesDamage = TriggerCreate("gt_GeneralUnitTakesDamage_Func");
    TriggerEnable(gt_GeneralUnitTakesDamage, false);
    TriggerAddEventUnitDamaged(gt_GeneralUnitTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Unit Takes Healing
//--------------------------------------------------------------------------------------------------
bool gt_GeneralUnitTakesHealing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_GeneralUnitTakesHealing(EventUnitHealLaunchUnit(), EventUnit(), EventUnitHealAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralUnitTakesHealing_Init () {
    gt_GeneralUnitTakesHealing = TriggerCreate("gt_GeneralUnitTakesHealing_Func");
    TriggerAddEventUnitHealed(gt_GeneralUnitTakesHealing, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General - Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_GeneralPlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trigPlayer;
    int lv_index;

    // Automatic Variable Declarations
    int auto499EB5A1_ae;
    const int auto499EB5A1_ai = 1;
    unitgroup autoD01C1A05_g;
    int autoD01C1A05_u;
    unit autoD01C1A05_var;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerType(lv_trigPlayer) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_playerHeroHero[lv_trigPlayer] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto499EB5A1_ae = gv_regionsDungeonsIndex;
    lv_index = 1;
    for ( ; ( (auto499EB5A1_ai >= 0 && lv_index <= auto499EB5A1_ae) || (auto499EB5A1_ai < 0 && lv_index >= auto499EB5A1_ae) ) ; lv_index += auto499EB5A1_ai ) {
        if ((PlayerGroupHasPlayer(gv_dungeonsParty[lv_index], lv_trigPlayer) == true)) {
            TimerStart(gv_regionsDungeonsCloseTimer[lv_index], 70.0, false, c_timeGame);
            PlayerGroupRemove(gv_dungeonsParty[lv_index], lv_trigPlayer);
        }

    }
    if ((gv_arenaHost == lv_trigPlayer)) {
        gv_arenaHost = 0;
    }

    gv_playerHeroHeroRegionIndex[lv_trigPlayer] = 0;
    gv_playerHeroHeroRegion[lv_trigPlayer] = gv_regionsRegion[0];
    gf_DialogUsedParty(lv_trigPlayer, gv_partyDialogMainButtons[2]);
    UnitRemove(gv_playerHeroHero[lv_trigPlayer]);
    autoD01C1A05_g = UnitGroup(null, lv_trigPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD01C1A05_u = UnitGroupCount(autoD01C1A05_g, c_unitCountAll);
    for (;; autoD01C1A05_u -= 1) {
        autoD01C1A05_var = UnitGroupUnitFromEnd(autoD01C1A05_g, autoD01C1A05_u);
        if (autoD01C1A05_var == null) { break; }
        UnitRemove(autoD01C1A05_var);
    }
    PlayerGroupRemove(gv_generalTeamsAll, lv_trigPlayer);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, ((StringExternal("Param/Value/790EB960") + TextWithColor(PlayerName(lv_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_trigPlayer, false)))) + StringExternal("Param/Value/E6B97D97")));
    TextTagDestroy(gv_playerTextTag[lv_trigPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneralPlayerLeaves_Init () {
    gt_GeneralPlayerLeaves = TriggerCreate("gt_GeneralPlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_GeneralPlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Testers - On
//--------------------------------------------------------------------------------------------------
bool gt_TestersOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int auto981EAD92_ae = 7;
    const int auto981EAD92_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto981EAD92_ai >= 0 && lv_index <= auto981EAD92_ae) || (auto981EAD92_ai < 0 && lv_index >= auto981EAD92_ae) ) ; lv_index += auto981EAD92_ai ) {
        if (((PlayerHandle(EventPlayer()) == "1-S2-1-1489290") || ((PlayerGroupHasPlayer(gv_hatsTempGroups[lv_index], lv_trigPlayer) == true) && (UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], gv_hatsTempGroupsHat[lv_index]) == false) && (gv_playerHeroHero[lv_trigPlayer] != null)))) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], gv_hatsTempGroupsHat[lv_index], gv_playerHeroHero[lv_trigPlayer], 1);
        }

    }
    if ((PlayerHandle(EventPlayer()) == "1-S2-1-2069599")) {
        UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Jackfish", gv_playerHeroHero[lv_trigPlayer], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestersOn_Init () {
    gt_TestersOn = TriggerCreate("gt_TestersOn_Func");
    TriggerAddEventChatMessage(gt_TestersOn, c_playerAny, "+", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Testers - Off
//--------------------------------------------------------------------------------------------------
bool gt_TestersOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int auto42C390C0_ae = 7;
    const int auto42C390C0_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto42C390C0_ai >= 0 && lv_index <= auto42C390C0_ae) || (auto42C390C0_ai < 0 && lv_index >= auto42C390C0_ae) ) ; lv_index += auto42C390C0_ai ) {
        if ((PlayerGroupHasPlayer(gv_hatsTempGroups[lv_index], lv_trigPlayer) == true) && (UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], gv_hatsTempGroupsHat[lv_index]) == true) && (gv_playerHeroHero[lv_trigPlayer] != null)) {
            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], gv_hatsTempGroupsHat[lv_index], 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestersOff_Init () {
    gt_TestersOff = TriggerCreate("gt_TestersOff_Func");
    TriggerAddEventChatMessage(gt_TestersOff, c_playerAny, "-", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patreon 1 - On/Off
//--------------------------------------------------------------------------------------------------
bool gt_Patreon1OnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_hatsTempGroups[6], lv_trigPlayer) == true) && (gv_playerHeroHero[lv_trigPlayer] != null)) {
        if ((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], "Testers32") == false)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Testers32", gv_playerHeroHero[lv_trigPlayer], 1);
        }
        else {
            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Testers32", 1);
        }
    }

    if ((PlayerGroupHasPlayer(gv_hatsTempGroups[7], lv_trigPlayer) == true) && (gv_playerHeroHero[lv_trigPlayer] != null)) {
        if ((UnitHasBehavior2(gv_playerHeroHero[lv_trigPlayer], "Patreon2") == false)) {
            UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Patreon2", gv_playerHeroHero[lv_trigPlayer], 1);
        }
        else {
            UnitBehaviorRemove(gv_playerHeroHero[lv_trigPlayer], "Patreon2", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Patreon1OnOff_Init () {
    gt_Patreon1OnOff = TriggerCreate("gt_Patreon1OnOff_Func");
    TriggerAddEventChatMessage(gt_Patreon1OnOff, c_playerAny, "0", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Hero 40
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersHero40_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int autoE78EA478_ae = 3;
    const int autoE78EA478_ai = 1;
    const int auto1FB90AC0_ae = 2;
    const int auto1FB90AC0_ai = 1;
    const int autoF70E636D_ae = 4;
    const int autoF70E636D_ai = 1;
    const int auto20A189AE_ae = 5;
    const int auto20A189AE_ai = 1;
    const int auto4BB5A9DA_ae = 7;
    const int auto4BB5A9DA_ai = 1;
    const int auto68DF21E3_ae = 9;
    const int auto68DF21E3_ai = 1;
    const int autoAED5678C_ae = 22;
    const int autoAED5678C_ai = 1;
    const int autoF8193692_ae = 25;
    const int autoF8193692_ai = 1;
    const int auto71A71FB3_ae = 10;
    const int auto71A71FB3_ai = 1;
    const int autoEB3C0292_ae = 24;
    const int autoEB3C0292_ai = 1;
    const int autoC1DFD094_ae = 9;
    const int autoC1DFD094_ai = 1;
    const int auto8CE57DCC_ae = 3;
    const int auto8CE57DCC_ai = 1;
    const int auto67918074_ae = 155;
    const int auto67918074_ai = 1;
    int auto3F4E2E55_ae;
    const int auto3F4E2E55_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_playerHeroHeroLevelExp[EventPlayer()][1] <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoE78EA478_ai >= 0 && lv_index <= autoE78EA478_ae) || (autoE78EA478_ai < 0 && lv_index >= autoE78EA478_ae) ) ; lv_index += autoE78EA478_ai ) {
        gv_playerCurrency[EventPlayer()][lv_index] += 100000000;
    }
    Wait(0.2, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto1FB90AC0_ai >= 0 && lv_index <= auto1FB90AC0_ae) || (auto1FB90AC0_ai < 0 && lv_index >= auto1FB90AC0_ae) ) ; lv_index += auto1FB90AC0_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    Wait(0.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (autoF70E636D_ai >= 0 && lv_index <= autoF70E636D_ae) || (autoF70E636D_ai < 0 && lv_index >= autoF70E636D_ae) ) ; lv_index += autoF70E636D_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto20A189AE_ai >= 0 && lv_index <= auto20A189AE_ae) || (auto20A189AE_ai < 0 && lv_index >= auto20A189AE_ae) ) ; lv_index += auto20A189AE_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    lv_index = 1;
    for ( ; ( (auto4BB5A9DA_ai >= 0 && lv_index <= auto4BB5A9DA_ae) || (auto4BB5A9DA_ai < 0 && lv_index >= auto4BB5A9DA_ae) ) ; lv_index += auto4BB5A9DA_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto68DF21E3_ai >= 0 && lv_index <= auto68DF21E3_ae) || (auto68DF21E3_ai < 0 && lv_index >= auto68DF21E3_ae) ) ; lv_index += auto68DF21E3_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    Wait(0.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (autoAED5678C_ai >= 0 && lv_index <= autoAED5678C_ae) || (autoAED5678C_ai < 0 && lv_index >= autoAED5678C_ae) ) ; lv_index += autoAED5678C_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    lv_index = 1;
    for ( ; ( (autoF8193692_ai >= 0 && lv_index <= autoF8193692_ae) || (autoF8193692_ai < 0 && lv_index >= autoF8193692_ae) ) ; lv_index += autoF8193692_ai ) {
        gf_DialogUsedHeroVendor(EventPlayer(), gv_heroVendorDialogMainButtons[3]);
        gf_DialogUsedHeroVendor(EventPlayer(), gv_heroVendorDialogMainButtons[4]);
        Wait(0.2, c_timeGame);
    }
    gv_itemVendorDialogItemIndex[EventPlayer()] = 1;
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto71A71FB3_ai >= 0 && lv_index <= auto71A71FB3_ae) || (auto71A71FB3_ai < 0 && lv_index >= auto71A71FB3_ae) ) ; lv_index += auto71A71FB3_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    lv_index = 1;
    for ( ; ( (autoEB3C0292_ai >= 0 && lv_index <= autoEB3C0292_ae) || (autoEB3C0292_ai < 0 && lv_index >= autoEB3C0292_ae) ) ; lv_index += autoEB3C0292_ai ) {
        gv_itemVendorPlayerTier[EventPlayer()] = (FloorI((gv_playerHeroHeroLevelExp[EventPlayer()][1] / 4)) + RandomInt(0, 0));
        gf_ItemsGenerateRandom(EventPlayer(), PlayerGroupSingle(EventPlayer()), gv_itemVendorPlayerTier[EventPlayer()], 2, ((200 + FixedToInt((gv_invasionFactorUpgradeCost * 12.0))) + (gv_playerHeroHeroLevelExp[EventPlayer()][1] + (gv_invasionIndex * (3 + (gv_invasionIndex / 2))))));
    }
    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(30)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    Wait(15.0, c_timeGame);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "Potion", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "Potion", true);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "Hearthstone", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "Hearthstone", true);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "HoverPad", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "HoverPad", true);
    gv_banksHeroLevelExp[EventPlayer()][0] = 9;
    lv_index2 = 2;
    for ( ; ( (autoC1DFD094_ai >= 0 && lv_index2 <= autoC1DFD094_ae) || (autoC1DFD094_ai < 0 && lv_index2 >= autoC1DFD094_ae) ) ; lv_index2 += autoC1DFD094_ai ) {
        lv_index = 1;
        for ( ; ( (auto8CE57DCC_ai >= 0 && lv_index <= auto8CE57DCC_ae) || (auto8CE57DCC_ai < 0 && lv_index >= auto8CE57DCC_ae) ) ; lv_index += auto8CE57DCC_ai ) {
            DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index2][lv_index], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    lv_index = 1;
    for ( ; ( (auto67918074_ai >= 0 && lv_index <= auto67918074_ae) || (auto67918074_ai < 0 && lv_index >= auto67918074_ae) ) ; lv_index += auto67918074_ai ) {
        gv_questsPlayerProgress[EventPlayer()][lv_index] = 4;
    }
    auto3F4E2E55_ae = gv_questsQuestIndex;
    lv_index2 = 1;
    for ( ; ( (auto3F4E2E55_ai >= 0 && lv_index2 <= auto3F4E2E55_ae) || (auto3F4E2E55_ai < 0 && lv_index2 >= auto3F4E2E55_ae) ) ; lv_index2 += auto3F4E2E55_ai ) {
        if ((gv_questsQuestPrerequisite[lv_index2][1] < 25) && (gv_questsQuestPrerequisite[lv_index2][2] < 25) && (gv_questsPlayerProgress[EventPlayer()][lv_index2] == 0)) {
            if ((gv_questsPlayerProgress[EventPlayer()][gv_questsQuestPrerequisite[lv_index2][1]] == 4) && (gv_questsPlayerProgress[EventPlayer()][gv_questsQuestPrerequisite[lv_index2][2]] == 4)) {
                gv_questsPlayerProgress[EventPlayer()][lv_index2] = 1;
                TextTagShow(gv_questsQuestMarker[gv_questsQuestGiverTurnin[lv_index2][1]][1], PlayerGroupSingle(EventPlayer()), true);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersHero40_Init () {
    gt_TestTestersHero40 = TriggerCreate("gt_TestTestersHero40_Func");
    TriggerEnable(gt_TestTestersHero40, false);
    TriggerAddEventChatMessage(gt_TestTestersHero40, c_playerAny, "-Setup", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Items
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int autoE62CE246_ae = 24;
    const int autoE62CE246_ai = 1;

    // Variable Initialization
    lv_tempInt = 30;

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_itemVendorDialogItemIndex[EventPlayer()] = 1;
    lv_index = 1;
    for ( ; ( (autoE62CE246_ai >= 0 && lv_index <= autoE62CE246_ae) || (autoE62CE246_ai < 0 && lv_index >= autoE62CE246_ae) ) ; lv_index += autoE62CE246_ai ) {
        gv_itemVendorPlayerTier[EventPlayer()] = (FloorI((gv_playerHeroHeroLevelExp[EventPlayer()][1] / 4)) + RandomInt(0, 1));
        gf_ItemsGenerateRandom(EventPlayer(), PlayerGroupSingle(EventPlayer()), lv_tempInt, 2, 11000.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersItems_Init () {
    gt_TestTestersItems = TriggerCreate("gt_TestTestersItems_Func");
    TriggerEnable(gt_TestTestersItems, false);
    TriggerAddEventChatMessage(gt_TestTestersItems, c_playerAny, "-Items", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Speed
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_playerHeroHero[EventPlayer()], "SpeedBuff4", gv_playerHeroHero[EventPlayer()], 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersSpeed_Init () {
    gt_TestTestersSpeed = TriggerCreate("gt_TestTestersSpeed_Func");
    TriggerEnable(gt_TestTestersSpeed, false);
    TriggerAddEventChatMessage(gt_TestTestersSpeed, c_playerAny, "-Speed", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Stats
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DungeonDialogEnd(gv_dungeonsDungeonSelected[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersStats_Init () {
    gt_TestTestersStats = TriggerCreate("gt_TestTestersStats_Func");
    TriggerEnable(gt_TestTestersStats, false);
    TriggerAddEventChatMessage(gt_TestTestersStats, c_playerAny, "-Stats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Map
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetMiniMapBounds(PlayerGroupSingle(EventPlayer()), RegionPlayableMap());
    CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionPlayableMap(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersMap_Init () {
    gt_TestTestersMap = TriggerCreate("gt_TestTestersMap_Func");
    TriggerEnable(gt_TestTestersMap, false);
    TriggerAddEventChatMessage(gt_TestTestersMap, c_playerAny, "-Map", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Castle
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersCastle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(30)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersCastle_Init () {
    gt_TestTestersCastle = TriggerCreate("gt_TestTestersCastle_Func");
    TriggerEnable(gt_TestTestersCastle, false);
    TriggerAddEventChatMessage(gt_TestTestersCastle, c_playerAny, "-WP1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Crossroads
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersCrossroads_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(75)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersCrossroads_Init () {
    gt_TestTestersCrossroads = TriggerCreate("gt_TestTestersCrossroads_Func");
    TriggerEnable(gt_TestTestersCrossroads, false);
    TriggerAddEventChatMessage(gt_TestTestersCrossroads, c_playerAny, "-WP2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers Barren Peak
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersBarrenPeak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(124)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersBarrenPeak_Init () {
    gt_TestTestersBarrenPeak = TriggerCreate("gt_TestTestersBarrenPeak_Func");
    TriggerEnable(gt_TestTestersBarrenPeak, false);
    TriggerAddEventChatMessage(gt_TestTestersBarrenPeak, c_playerAny, "-WP3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D3
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(86)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD3_Init () {
    gt_TestTestersD3 = TriggerCreate("gt_TestTestersD3_Func");
    TriggerEnable(gt_TestTestersD3, false);
    TriggerAddEventChatMessage(gt_TestTestersD3, c_playerAny, "-D3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D4
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(92)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD4_Init () {
    gt_TestTestersD4 = TriggerCreate("gt_TestTestersD4_Func");
    TriggerEnable(gt_TestTestersD4, false);
    TriggerAddEventChatMessage(gt_TestTestersD4, c_playerAny, "-D4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D5
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(116)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD5_Init () {
    gt_TestTestersD5 = TriggerCreate("gt_TestTestersD5_Func");
    TriggerEnable(gt_TestTestersD5, false);
    TriggerAddEventChatMessage(gt_TestTestersD5, c_playerAny, "-D5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D6
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(118)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD6_Init () {
    gt_TestTestersD6 = TriggerCreate("gt_TestTestersD6_Func");
    TriggerEnable(gt_TestTestersD6, false);
    TriggerAddEventChatMessage(gt_TestTestersD6, c_playerAny, "-D6", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D7
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(120)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD7_Init () {
    gt_TestTestersD7 = TriggerCreate("gt_TestTestersD7_Func");
    TriggerEnable(gt_TestTestersD7, false);
    TriggerAddEventChatMessage(gt_TestTestersD7, c_playerAny, "-D7", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D8
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(164)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD8_Init () {
    gt_TestTestersD8 = TriggerCreate("gt_TestTestersD8_Func");
    TriggerEnable(gt_TestTestersD8, false);
    TriggerAddEventChatMessage(gt_TestTestersD8, c_playerAny, "-D8", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D9
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(166)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD9_Init () {
    gt_TestTestersD9 = TriggerCreate("gt_TestTestersD9_Func");
    TriggerEnable(gt_TestTestersD9, false);
    TriggerAddEventChatMessage(gt_TestTestersD9, c_playerAny, "-D9", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Testers D10
//--------------------------------------------------------------------------------------------------
bool gt_TestTestersD10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(168)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestTestersD10_Init () {
    gt_TestTestersD10 = TriggerCreate("gt_TestTestersD10_Func");
    TriggerEnable(gt_TestTestersD10, false);
    TriggerAddEventChatMessage(gt_TestTestersD10, c_playerAny, "-D10", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Fix
//--------------------------------------------------------------------------------------------------
bool gt_TestFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int auto9907D691_ae = 124;
    const int auto9907D691_ai = 1;
    const int auto5063BD07_ae = 9;
    const int auto5063BD07_ai = 1;
    const int auto2E904D40_ae = 3;
    const int auto2E904D40_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_banksHeroLevelExp[EventPlayer()][0] = 9;
    lv_index = 1;
    for ( ; ( (auto9907D691_ai >= 0 && lv_index <= auto9907D691_ae) || (auto9907D691_ai < 0 && lv_index >= auto9907D691_ae) ) ; lv_index += auto9907D691_ai ) {
        gv_questsPlayerProgress[EventPlayer()][lv_index] = 4;
    }
    lv_index2 = 2;
    for ( ; ( (auto5063BD07_ai >= 0 && lv_index2 <= auto5063BD07_ae) || (auto5063BD07_ai < 0 && lv_index2 >= auto5063BD07_ae) ) ; lv_index2 += auto5063BD07_ai ) {
        lv_index = 1;
        for ( ; ( (auto2E904D40_ai >= 0 && lv_index <= auto2E904D40_ae) || (auto2E904D40_ai < 0 && lv_index >= auto2E904D40_ae) ) ; lv_index += auto2E904D40_ai ) {
            DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index2][lv_index], PlayerGroupSingle(lv_trigPlayer), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestFix_Init () {
    gt_TestFix = TriggerCreate("gt_TestFix_Func");
    TriggerEnable(gt_TestFix, false);
    TriggerAddEventChatMessage(gt_TestFix, c_playerAny, "-Fix", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Guild 1
//--------------------------------------------------------------------------------------------------
bool gt_TestGuild1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHeroHeroGuild[lv_trigPlayer][1] = 1;
    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 6;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestGuild1_Init () {
    gt_TestGuild1 = TriggerCreate("gt_TestGuild1_Func");
    TriggerEnable(gt_TestGuild1, false);
    TriggerAddEventChatMessage(gt_TestGuild1, c_playerAny, "-Warrior", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Guild 2
//--------------------------------------------------------------------------------------------------
bool gt_TestGuild2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHeroHeroGuild[lv_trigPlayer][1] = 2;
    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 6;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestGuild2_Init () {
    gt_TestGuild2 = TriggerCreate("gt_TestGuild2_Func");
    TriggerEnable(gt_TestGuild2, false);
    TriggerAddEventChatMessage(gt_TestGuild2, c_playerAny, "-Ranger", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Guild 3
//--------------------------------------------------------------------------------------------------
bool gt_TestGuild3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHeroHeroGuild[lv_trigPlayer][1] = 3;
    gv_playerHeroHeroGuild[lv_trigPlayer][2] = 6;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestGuild3_Init () {
    gt_TestGuild3 = TriggerCreate("gt_TestGuild3_Func");
    TriggerEnable(gt_TestGuild3, false);
    TriggerAddEventChatMessage(gt_TestGuild3, c_playerAny, "-Mystic", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Glyphs
//--------------------------------------------------------------------------------------------------
bool gt_TestGlyphs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    const int auto0538F666_ae = 8;
    const int auto0538F666_ai = 1;

    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_glyphVendorDialogBox, PlayerGroupSingle(lv_trigPlayer), true);
    gv_glyphVendorDialogItemIndex[lv_trigPlayer] = 1;
    lv_index = 1;
    for ( ; ( (auto0538F666_ai >= 0 && lv_index <= auto0538F666_ae) || (auto0538F666_ai < 0 && lv_index >= auto0538F666_ae) ) ; lv_index += auto0538F666_ai ) {
        gv_itemVendorPlayerTier[lv_trigPlayer] = (FloorI((gv_playerHeroHeroLevelExp[lv_trigPlayer][1] / 4)) + RandomInt(9, 11));
        if ((gv_itemVendorPlayerTier[lv_trigPlayer] == 0)) {
            gv_itemVendorPlayerTier[lv_trigPlayer] = 1;
        }

        gf_ItemsGenerateRandom(lv_trigPlayer, PlayerGroupSingle(lv_trigPlayer), 30, 6, ((12000 + FixedToInt((gv_invasionFactorUpgradeCost * 5.0))) + (50 + (gv_invasionIndex * (3 + (gv_invasionIndex / 3))))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestGlyphs_Init () {
    gt_TestGlyphs = TriggerCreate("gt_TestGlyphs_Func");
    TriggerEnable(gt_TestGlyphs, false);
    TriggerAddEventChatMessage(gt_TestGlyphs, c_playerAny, "-Glyph", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Glornify
//--------------------------------------------------------------------------------------------------
bool gt_TestGlornify_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_trigPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336") || ((PlayerGroupCount(gv_generalTeamsAll) == 1) && ((PlayerHandle(EventPlayer()) == "1-S2-1-11686594") || (PlayerHandle(EventPlayer()) == "1-S2-1-8594756") || (PlayerHandle(EventPlayer()) == "2-S2-1-7603714") || (PlayerHandle(EventPlayer()) == "1-S2-1-2069599") || (PlayerHandle(EventPlayer()) == "2-S2-1-5633734")))))) {
            return false;
        }

        if (!((true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TestFix, true);
    TriggerEnable(gt_TestTestersItems, true);
    TriggerEnable(gt_TestDungeonReady2, true);
    TriggerEnable(gt_TestRaid, true);
    TriggerEnable(gt_TestTestersStats, true);
    TriggerEnable(gt_TestBuff, true);
    if ((PlayerGroupCount(gv_generalTeamsAll) <= 3)) {
        TriggerEnable(gt_TestInn, true);
        TriggerEnable(gt_TestBeast, true);
        TriggerEnable(gt_TestGuild1, true);
        TriggerEnable(gt_TestGuild2, true);
        TriggerEnable(gt_TestGuild3, true);
        TriggerEnable(gt_TestGlyphs, true);
    }

    gv_playerStatisticsRaidBossCleared[EventPlayer()][18] += 1;
    DialogControlSetEnabled(gv_itemHonorDialogDropdown[5], PlayerGroupSingle(EventPlayer()), true);
    UnitBehaviorAdd(gv_playerHeroHero[lv_trigPlayer], "Jackfish", gv_playerHeroHero[lv_trigPlayer], 1);
    gv_generalEndGameMode = true;
    PlayerGroupAdd(gv_testersGroup, lv_trigPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestGlornify_Init () {
    gt_TestGlornify = TriggerCreate("gt_TestGlornify_Func");
    TriggerEnable(gt_TestGlornify, false);
    TriggerAddEventChatMessage(gt_TestGlornify, c_playerAny, "-Glornify", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Buff
//--------------------------------------------------------------------------------------------------
bool gt_TestBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_testersGroup, UnitGetOwner(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestBuff_Init () {
    gt_TestBuff = TriggerCreate("gt_TestBuff_Func");
    TriggerEnable(gt_TestBuff, false);
    TriggerAddEventChatMessage(gt_TestBuff, c_playerAny, "-Buff 1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Dungeon Ready 2
//--------------------------------------------------------------------------------------------------
bool gt_TestDungeonReady2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto39AD4A5F_ae = 2;
    const int auto39AD4A5F_ai = 1;
    const int auto8673FDA6_ae = 4;
    const int auto8673FDA6_ai = 1;
    const int auto4B5BCDE5_ae = 5;
    const int auto4B5BCDE5_ai = 1;
    const int autoEF688732_ae = 7;
    const int autoEF688732_ai = 1;
    const int auto525F88CE_ae = 9;
    const int auto525F88CE_ai = 1;
    const int auto664F9A22_ae = 12;
    const int auto664F9A22_ai = 1;
    const int auto01CD6EFA_ae = 10;
    const int auto01CD6EFA_ai = 1;
    const int auto47FE3353_ae = 5;
    const int auto47FE3353_ai = 1;
    const int auto5B7B4993_ae = 155;
    const int auto5B7B4993_ai = 1;
    const int auto63F99B3F_ae = 28;
    const int auto63F99B3F_ai = 1;
    const int autoF2C12DB5_ae = 9;
    const int autoF2C12DB5_ai = 1;
    const int autoA995FA74_ae = 3;
    const int autoA995FA74_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto39AD4A5F_ai >= 0 && lv_index <= auto39AD4A5F_ae) || (auto39AD4A5F_ai < 0 && lv_index >= auto39AD4A5F_ae) ) ; lv_index += auto39AD4A5F_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    Wait(0.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto8673FDA6_ai >= 0 && lv_index <= auto8673FDA6_ae) || (auto8673FDA6_ai < 0 && lv_index >= auto8673FDA6_ae) ) ; lv_index += auto8673FDA6_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto4B5BCDE5_ai >= 0 && lv_index <= auto4B5BCDE5_ae) || (auto4B5BCDE5_ai < 0 && lv_index >= auto4B5BCDE5_ae) ) ; lv_index += auto4B5BCDE5_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    lv_index = 1;
    for ( ; ( (autoEF688732_ai >= 0 && lv_index <= autoEF688732_ae) || (autoEF688732_ai < 0 && lv_index >= autoEF688732_ae) ) ; lv_index += autoEF688732_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto525F88CE_ai >= 0 && lv_index <= auto525F88CE_ae) || (auto525F88CE_ai < 0 && lv_index >= auto525F88CE_ae) ) ; lv_index += auto525F88CE_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    gv_heroSelectionDialogHeroSelected[EventPlayer()] = 1;
    gf_DialogUsedHeroSelection(EventPlayer(), gv_heroSelectionDialogMainButtons[3][1]);
    Wait(0.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto664F9A22_ai >= 0 && lv_index <= auto664F9A22_ae) || (auto664F9A22_ai < 0 && lv_index >= auto664F9A22_ae) ) ; lv_index += auto664F9A22_ai ) {
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gf_DialogShowHeroSelection(EventPlayer());
    Wait(15.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto01CD6EFA_ai >= 0 && lv_index <= auto01CD6EFA_ae) || (auto01CD6EFA_ai < 0 && lv_index >= auto01CD6EFA_ae) ) ; lv_index += auto01CD6EFA_ai ) {
        lv_index2 = 1;
        for ( ; ( (auto47FE3353_ai >= 0 && lv_index2 <= auto47FE3353_ae) || (auto47FE3353_ai < 0 && lv_index2 >= auto47FE3353_ae) ) ; lv_index2 += auto47FE3353_ai ) {
            gv_playerHeroHeroStats[EventPlayer()][lv_index2] += 1;
        }
        gv_playerHeroHeroLevelExp[EventPlayer()][1] += 1;
        gf_HeroHeroLevels(EventPlayer());
        Wait(0.2, c_timeGame);
    }
    gv_itemVendorDialogItemIndex[EventPlayer()] = 1;
    lv_index = 1;
    for ( ; ( (auto5B7B4993_ai >= 0 && lv_index <= auto5B7B4993_ae) || (auto5B7B4993_ai < 0 && lv_index >= auto5B7B4993_ae) ) ; lv_index += auto5B7B4993_ai ) {
        gv_questsPlayerProgress[EventPlayer()][lv_index] = 4;
        gf_QuestsRewards(EventPlayer(), lv_index);
    }
    lv_index = 1;
    for ( ; ( (auto63F99B3F_ai >= 0 && lv_index <= auto63F99B3F_ae) || (auto63F99B3F_ai < 0 && lv_index >= auto63F99B3F_ae) ) ; lv_index += auto63F99B3F_ai ) {
        gv_playerCurrency[EventPlayer()][1] += 30000;
        gv_playerCurrency[EventPlayer()][2] += 5000;
        gv_playerCurrency[EventPlayer()][3] += 500;
        gf_DialogUsedHeroVendor(EventPlayer(), gv_heroVendorDialogMainButtons[3]);
        gf_DialogUsedHeroVendor(EventPlayer(), gv_heroVendorDialogMainButtons[4]);
        Wait(0.2, c_timeGame);
    }
    gv_playerHeroHeroLevelExp[EventPlayer()][0] = 9;
    lv_index = 2;
    for ( ; ( (autoF2C12DB5_ai >= 0 && lv_index <= autoF2C12DB5_ae) || (autoF2C12DB5_ai < 0 && lv_index >= autoF2C12DB5_ae) ) ; lv_index += autoF2C12DB5_ai ) {
        lv_index2 = 1;
        for ( ; ( (autoA995FA74_ai >= 0 && lv_index2 <= autoA995FA74_ae) || (autoA995FA74_ai < 0 && lv_index2 >= autoA995FA74_ae) ) ; lv_index2 += autoA995FA74_ai ) {
            DialogControlSetEnabled(gv_teleporterDialogRegionsItems[lv_index][lv_index2], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    gv_playerStatisticsGeneral[EventPlayer()][22] = 100;
    gv_playerStatisticsGeneral[EventPlayer()][23] = 100;
    gv_playerStatisticsGeneral[EventPlayer()][25] = 100;
    UnitSetPosition(gv_playerHeroHero[EventPlayer()], RegionGetCenter(RegionFromId(30)), false);
    CameraPan(EventPlayer(), UnitGetPosition(gv_playerHeroHero[EventPlayer()]), 0.0, -1, 10.0, false);
    Wait(3.0, c_timeGame);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "Potion", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "Potion", true);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "Hearthstone", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "Hearthstone", true);
    UnitAbilityShow(gv_playerHeroHero[EventPlayer()], "HoverPad", true);
    UnitAbilityEnable(gv_playerHeroHero[EventPlayer()], "HoverPad", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestDungeonReady2_Init () {
    gt_TestDungeonReady2 = TriggerCreate("gt_TestDungeonReady2_Func");
    TriggerEnable(gt_TestDungeonReady2, false);
    TriggerAddEventChatMessage(gt_TestDungeonReady2, c_playerAny, "-Setup 2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Beast
//--------------------------------------------------------------------------------------------------
bool gt_TestBeast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto6AD55516_ae = 12;
    const int auto6AD55516_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_generalEndGameMode = true;
    lv_index = 1;
    for ( ; ( (auto6AD55516_ai >= 0 && lv_index <= auto6AD55516_ae) || (auto6AD55516_ai < 0 && lv_index >= auto6AD55516_ae) ) ; lv_index += auto6AD55516_ai ) {
        gv_beastMasterPlayerCreepLevels[EventPlayer()][lv_index][1] = RandomInt(80, 95);
        gv_beastMasterPlayerCreepLevels[EventPlayer()][lv_index][2] = 3;
        if ((gv_beastMasterCreepType[lv_index] != null)) {
            libNtve_gf_SetDialogItemImage(gv_beastMasterDialogMonsterItems[lv_index][2], gv_beastMasterCreepIcon[lv_index], PlayerGroupAll());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestBeast_Init () {
    gt_TestBeast = TriggerCreate("gt_TestBeast_Func");
    TriggerEnable(gt_TestBeast, false);
    TriggerAddEventChatMessage(gt_TestBeast, c_playerAny, "-Beast", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Raid
//--------------------------------------------------------------------------------------------------
bool gt_TestRaid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336") || (PlayerHandle(EventPlayer()) == "1-S2-1-8594756") || (PlayerHandle(EventPlayer()) == "1-S2-1-2069811")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    gf_RaidCreepSpawnSetup(-2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestRaid_Init () {
    gt_TestRaid = TriggerCreate("gt_TestRaid_Func");
    TriggerEnable(gt_TestRaid, false);
    TriggerAddEventChatMessage(gt_TestRaid, c_playerAny, "-Raid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test - Inn
//--------------------------------------------------------------------------------------------------
bool gt_TestInn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempInt;

    // Automatic Variable Declarations
    const int auto572C59D7_ae = 18;
    const int auto572C59D7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_testersGroup, EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-5476687") || (PlayerHandle(EventPlayer()) == "2-S2-1-5385336") || (PlayerHandle(EventPlayer()) == "1-S2-1-8594756") || (PlayerHandle(EventPlayer()) == "1-S2-1-11686594")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 2;
    for ( ; ( (auto572C59D7_ai >= 0 && lv_index <= auto572C59D7_ae) || (auto572C59D7_ai < 0 && lv_index >= auto572C59D7_ae) ) ; lv_index += auto572C59D7_ai ) {
        DialogControlAddItem(gv_itemHonorDialogDropdown[3], PlayerGroupAll(), (StringExternal("Param/Value/75E9133B") + IntToText(lv_index)));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestInn_Init () {
    gt_TestInn = TriggerCreate("gt_TestInn_Func");
    TriggerEnable(gt_TestInn, false);
    TriggerAddEventChatMessage(gt_TestInn, c_playerAny, "-inn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitAll_Init();
    gt_InitBetaTestersCheck_Init();
    gt_BankVariablesCheck_Init();
    gt_RegionsUnitEntersGeneralRegion_Init();
    gt_RegionsUnitLeavesGeneralRegion_Init();
    gt_RegionsTimersExpire_Init();
    gt_RegionsUnitEntersTeleporter_Init();
    gt_RegionsUnitCrossesMap_Init();
    gt_RegionsUnitEntersDungeonStart_Init();
    gt_RegionsUnitEntersDungeonExit_Init();
    gt_TutorialRegionsLeave_Init();
    gt_TutorialRegionsLeaveFinal_Init();
    gt_QuestsTalkToUnitInteract_Init();
    gt_QuestsTalkToUnit_Init();
    gt_QuestsItemPickUp_Init();
    gt_InvasionTimerCountdown_Init();
    gt_InvasionTimerExpires_Init();
    gt_InvasionKillWarriors_Init();
    gt_CreepsUnitDies_Init();
    gt_HeroHeroDies_Init();
    gt_RegionsUnitEntersVendorRegion_Init();
    gt_GeneralPets_Init();
    gt_GeneralDialogUsed_Init();
    gt_GeneralCommandLimit_Init();
    gt_GeneralPotionCount_Init();
    gt_GeneralUnitTakesDamage_Init();
    gt_GeneralUnitTakesHealing_Init();
    gt_GeneralPlayerLeaves_Init();
    gt_TestersOn_Init();
    gt_TestersOff_Init();
    gt_Patreon1OnOff_Init();
    gt_TestTestersHero40_Init();
    gt_TestTestersItems_Init();
    gt_TestTestersSpeed_Init();
    gt_TestTestersStats_Init();
    gt_TestTestersMap_Init();
    gt_TestTestersCastle_Init();
    gt_TestTestersCrossroads_Init();
    gt_TestTestersBarrenPeak_Init();
    gt_TestTestersD3_Init();
    gt_TestTestersD4_Init();
    gt_TestTestersD5_Init();
    gt_TestTestersD6_Init();
    gt_TestTestersD7_Init();
    gt_TestTestersD8_Init();
    gt_TestTestersD9_Init();
    gt_TestTestersD10_Init();
    gt_TestFix_Init();
    gt_TestGuild1_Init();
    gt_TestGuild2_Init();
    gt_TestGuild3_Init();
    gt_TestGlyphs_Init();
    gt_TestGlornify_Init();
    gt_TestBuff_Init();
    gt_TestDungeonReady2_Init();
    gt_TestBeast_Init();
    gt_TestRaid_Init();
    gt_TestInn_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
